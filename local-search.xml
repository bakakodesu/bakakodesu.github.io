<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SwiftUI DisclosureGroup 合集</title>
    <link href="/2025/07/31/SwiftUI-DisclosureGroup-%E5%90%88%E9%9B%86/"/>
    <url>/2025/07/31/SwiftUI-DisclosureGroup-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E6%93%85%E9%95%B7%E5%B1%95%E9%96%8B-%E6%8A%98%E7%96%8A%E7%9A%84-disclosuregroup-8a41010fb4d9">SwiftUI 擅長展開 &amp; 折疊的 DisclosureGroup</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 绝对值</title>
    <link href="/2025/07/31/Swift-%E7%BB%9D%E5%AF%B9%E5%80%BC/"/>
    <url>/2025/07/31/Swift-%E7%BB%9D%E5%AF%B9%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>对 Int 使用 <code>abs</code> ，对 double 使用 <code>fabs</code> ，对 float 类型使用 <code>fabsf</code></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Slider 合集</title>
    <link href="/2025/07/31/SwiftUI-Slider-%E5%90%88%E9%9B%86/"/>
    <url>/2025/07/31/SwiftUI-Slider-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://blog.csdn.net/guoyongming925/article/details/139203819">SwiftUI中的Slider的基本使用</a></li><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E6%BB%91%E5%8B%95%E9%81%B8%E5%80%BC%E7%9A%84-slider-b2d8c0a9966e">SwiftUI 滑動選值的 Slider</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftData 相关问题</title>
    <link href="/2025/07/04/SwiftData-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/04/SwiftData-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="在-SwiftData-中使用枚举"><a href="#在-SwiftData-中使用枚举" class="headerlink" title="在 SwiftData 中使用枚举"></a>在 SwiftData 中使用枚举</h2><p>枚举报错：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">No exact matches in call to<span class="hljs-built_in"> instance </span>method &#x27;setValue&#x27;<br>No exact matches in call to<span class="hljs-built_in"> instance </span>method &#x27;getValue&#x27;<br>Candidate requires that &#x27;Game.GameStatus&#x27; conform to &#x27;PersistentModel&#x27; (requirement specified as &#x27;Value&#x27;<span class="hljs-keyword"> :</span> &#x27;PersistentModel&#x27;)<br></code></pre></td></tr></table></figure><p><a href="https://fatbobman.com/zh/posts/considerations-for-using-codable-and-enums-in-swiftdata-models/">在 SwiftData 模型中使用 Codable 和枚举的注意事项</a></p><p><a href="https://ivensliaoblog.com/using-enums-in-swiftdata-predicate-queries/">在 SwiftData 中使用枚举进行谓词查询</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyType</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br><span class="hljs-keyword">case</span> one, two, three<br>&#125;<br><br><span class="hljs-meta">@Model</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewModel</span> &#123;<br><span class="hljs-keyword">var</span> type: <span class="hljs-type">MyType</span><br><span class="hljs-keyword">init</span>(<span class="hljs-params">type</span>: <span class="hljs-type">MyType</span>) &#123;<br><span class="hljs-keyword">self</span>.type <span class="hljs-operator">=</span> type<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在-SwiftData-中使用定时器"><a href="#在-SwiftData-中使用定时器" class="headerlink" title="在 SwiftData 中使用定时器"></a>在 SwiftData 中使用定时器</h2><p>使用 <code>@Transient</code> 进行标注：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Transient</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> timer: <span class="hljs-type">Timer</span>?<br></code></pre></td></tr></table></figure><p><a href="https://www.hackingwithswift.com/quick-start/swiftdata/how-to-make-transient-attributes-in-a-swiftdata-model">How to make transient attributes in a SwiftData model</a></p><p><a href="https://stackoverflow.com/questions/78506954/swiftdata-unable-to-save-timer-property-of-a-class">SwiftData unable to save Timer property of a class?</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI macOS 窗口合集</title>
    <link href="/2025/07/01/SwiftUI-macOS-%E7%AA%97%E5%8F%A3%E8%AE%BE%E7%BD%AE/"/>
    <url>/2025/07/01/SwiftUI-macOS-%E7%AA%97%E5%8F%A3%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://stackoverflow.com/questions/59238417/how-do-i-set-a-minimum-size-for-a-window-and-make-it-use-the-specified-size-and">How do I set a minimum size for a window and make it use the specified size and position when launching?</a></li><li><a href="https://juejin.cn/post/7513557849243861028">SwiftUI 如何恣意定制和管理系统中的窗口（Window）</a></li><li><a href="https://www.fline.dev/window-management-on-macos-with-swiftui-4/">Window Management with SwiftUI 4</a></li><li><a href="https://zzzwco.medium.com/swiftui-%E4%B8%AD%E7%9A%84%E5%9C%BA%E6%99%AF-f824d3cb62b2">SwiftUI 中的场景</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 重写与重载</title>
    <link href="/2025/07/01/Swift-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD/"/>
    <url>/2025/07/01/Swift-%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="重写（override）"><a href="#重写（override）" class="headerlink" title="重写（override）"></a>重写（override）</h2><p>override 是重写（覆盖）了一个方法，以实现不同的功能。一般是用于子类在继承父类时，重写（重新实现）父类中的方法。</p><p>重写（覆盖）的规则：</p><ol><li>重写方法的参数列表必须完全与被重写的方法的相同，否则不能称其为重写而是重载；</li><li>重写方法的访问修饰符一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private）；</li><li>重写的方法的返回值必须和被重写的方法的返回一致；</li><li>重写的方法所抛出的异常必须和被重写方法的所抛出的异常一致，或者是其子类；</li><li>被重写的方法不能为 private，否则在其子类中只是新定义了一个方法，并没s有对其进行重写；</li><li>静态方法不能被重写为非静态的方法（会编译出错）。</li></ol><h2 id="重载（overload）"><a href="#重载（overload）" class="headerlink" title="重载（overload）"></a>重载（overload）</h2><p>一般是用于在一个类内实现若干重载的方法，这些方法的名称相同而参数形式不同。</p><p>重载的规则：</p><ol><li>在使用重载时只能通过相同的方法名、不同的参数形式实现。不同的参数类型可以是不同的参数类型，不同的参数个数，不同的参数顺序（参数类型必须不一样）；</li><li>不能通过访问权限、返回类型、抛出的异常进行重载；</li><li>方法的异常类型和数目不会对重载造成影响。</li></ol><p>多态的概念比较复杂，有多种意义的多态，一个有趣但不严谨的说法是：继承是子类使用父类的方法，而多态则是父类使用子类的方法。</p><p>一般，我们使用多态是为了避免在父类里大量重载引起代码臃肿且难于维护。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>定义一个基类：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">var</span> name: <span class="hljs-type">String</span> <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">var</span> age: <span class="hljs-type">Int</span>     <span class="hljs-comment">// 年龄</span><br><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">age</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> name<br>        <span class="hljs-keyword">self</span>.age  <span class="hljs-operator">=</span> age<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过重写方法为其添加 “lesson” 属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>: <span class="hljs-title class_ inherited__">Person</span> &#123;<br><br>    <span class="hljs-keyword">var</span> lesson: <span class="hljs-type">String</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">age</span>: <span class="hljs-type">Int</span>) &#123;<br>        lesson <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Python&quot;</span> <span class="hljs-comment">// 必须放在super.init()之前</span><br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: name, age: age)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过重载方法为其添加 “lesson” 属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>: <span class="hljs-title class_ inherited__">Person</span> &#123;<br><br>    <span class="hljs-keyword">var</span> lesson: <span class="hljs-type">String</span><br><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">age</span>: <span class="hljs-type">Int</span>, <span class="hljs-params">lesson</span>:<span class="hljs-type">String</span>) &#123;<br>        <span class="hljs-keyword">self</span>.lesson <span class="hljs-operator">=</span> lesson<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: name, age: age)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final 关键字可以在 class、func 和 var 前修饰，被修饰的内容不会被继承或者重新操作。可防止被重载和重写。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI TabView 合集</title>
    <link href="/2025/07/01/SwiftUI-TabView-%E5%90%88%E9%9B%86/"/>
    <url>/2025/07/01/SwiftUI-TabView-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://blog.csdn.net/qq_33919450/article/details/123617395">SwiftUI——如何修改TabView的各种属性（包括tabItem的属性），例如颜色、位置、大小等</a></li><li><a href="https://medium.com/@karepbq/tabview-in-swiftui-e2be605f0f52">TabView in SwiftUI</a></li><li><a href="https://blog.csdn.net/guoyongming925/article/details/139221698">SwiftUI中TabView的基本用法及外观样式设置</a></li><li><a href="https://vocus.cc/article/65409411fd897800010f05ad">SwiftUI TabView：打造出色分頁的關鍵指南</a></li><li><a href="https://stackoverflow.com/questions/62864221/change-tabview-indicator-color-swiftui">change TabView indicator color SwiftUI</a></li><li><a href="https://stackoverflow.com/questions/58444689/swiftui-hide-tabbar-in-subview">SwiftUI hide TabBar in subview</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 获取屏幕尺寸</title>
    <link href="/2025/06/25/SwiftUI-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/"/>
    <url>/2025/06/25/SwiftUI-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="bounds"><a href="#bounds" class="headerlink" title="bounds"></a>bounds</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> screenBounds:<span class="hljs-type">CGRect</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.bounds<br></code></pre></td></tr></table></figure><p>bounds 得到的是单位为点（point）的尺寸。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> width: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.bounds.width<br><span class="hljs-keyword">var</span> height: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.bounds.height<br></code></pre></td></tr></table></figure><p>这样就可以得到 CGFloat 格式的数据，可以使用该值进行一些绘制界面，比如画格子之类的、移动组件的位置。</p><p>之所以该格式的数据被用于绘图、移动组件的位置是因为 View 一般都是使用 CGFloat 格式的数据来进行操作的，如果使用 nativeBounds 是没办法来进行操作的，因为点（point）和像素（pixel）不是一一对应的。并且由于范围稍微“宽松”一些，这样可以有效避免因为计算时四舍五入导致的误差。</p><h2 id="nativeBounds"><a href="#nativeBounds" class="headerlink" title="nativeBounds"></a>nativeBounds</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> screenBounds: <span class="hljs-type">CGRect</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.nativeBounds<br></code></pre></td></tr></table></figure><p>nativeBounds得到的是单位为像素（pixel）的尺寸。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> width: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.nativeBounds.width<br><span class="hljs-keyword">var</span> height: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.nativeBounds.height<br></code></pre></td></tr></table></figure><p>这样就可以得到CGFloat格式的数据，一般用于返回屏幕尺寸或者某个组件的像素值。绘制、移动组件一般不用这个数据。</p><h2 id="NSScreen"><a href="#NSScreen" class="headerlink" title="NSScreen"></a>NSScreen</h2><p>macOS 不支持 UIScreen 而是采用 NSScreen。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> window <span class="hljs-operator">=</span> <span class="hljs-type">NSScreen</span>.main<span class="hljs-operator">?</span>.visibleFrame<br><br><span class="hljs-comment">// 在 macOS 中，visibleFrame 属性返回的是屏幕的可见区域，不包括菜单栏和 Dock 的高度。这对于开发者来说，在确定窗口或视图的显示位置时非常有用，可以避免窗口被系统 UI 元素遮挡。</span><br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;&quot;</span>)<br>.frame(width: window<span class="hljs-operator">!</span>.width <span class="hljs-operator">/</span> <span class="hljs-number">2.0</span>, height: window<span class="hljs-operator">!</span>.height <span class="hljs-operator">/</span> <span class="hljs-number">1.5</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 类型转换</title>
    <link href="/2025/06/25/Swift-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2025/06/25/Swift-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="类型转换关键字：is、as、as-、as"><a href="#类型转换关键字：is、as、as-、as" class="headerlink" title="类型转换关键字：is、as、as? 、as!"></a>类型转换关键字：<code>is</code>、<code>as</code>、<code>as?</code> 、<code>as!</code></h2><p>类型转换可以判断实例的类型，也可以用于检测实例类型是否属于其父类或者子类的实例。类型转换没有真的改变实例或它的值，根本的实例保持不变；只是简单地把它作为它被转换成的类型来使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span> &#123;<br>    <span class="hljs-keyword">var</span> name:<span class="hljs-type">String</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>:<span class="hljs-type">String</span>) &#123;<br>        <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> name<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassB</span>: <span class="hljs-title class_ inherited__">ClassA</span> &#123;<br>    <span class="hljs-keyword">var</span> describe:<span class="hljs-type">String</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">describe</span>:<span class="hljs-type">String</span>) &#123;<br>        <span class="hljs-keyword">self</span>.describe <span class="hljs-operator">=</span> describe<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: name)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassC</span>: <span class="hljs-title class_ inherited__">ClassA</span> &#123;<br>    <span class="hljs-keyword">var</span> type:<span class="hljs-type">String</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>:<span class="hljs-type">String</span>, <span class="hljs-params">type</span>:<span class="hljs-type">String</span>) &#123;<br>        <span class="hljs-keyword">self</span>.type <span class="hljs-operator">=</span> type<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(name: name)<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> arr: [<span class="hljs-type">ClassA</span>] <span class="hljs-operator">=</span> [<span class="hljs-type">ClassB</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;B0&quot;</span>, describe: <span class="hljs-string">&quot;B0 describe&quot;</span>),<br>                     <span class="hljs-type">ClassC</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;C0&quot;</span>, type: <span class="hljs-string">&quot;C0 type&quot;</span>),<br>                     <span class="hljs-type">ClassB</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;B1&quot;</span>, describe: <span class="hljs-string">&quot;B1 describe&quot;</span>),<br>                     <span class="hljs-type">ClassC</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;C1&quot;</span>, type: <span class="hljs-string">&quot;C1 type&quot;</span>),<br>                     <span class="hljs-type">ClassC</span>.<span class="hljs-keyword">init</span>(name: <span class="hljs-string">&quot;C2&quot;</span>, type: <span class="hljs-string">&quot;C2 type&quot;</span>)]<br></code></pre></td></tr></table></figure><ul><li><strong>关键字 <code>is</code></strong></li></ul><p>检查一个实例是否属于某类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> v <span class="hljs-operator">=</span> arr[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> v <span class="hljs-keyword">is</span> <span class="hljs-type">ClassB</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ClassB&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;other&quot;</span>)<br>&#125;<br><span class="hljs-comment">// other</span><br></code></pre></td></tr></table></figure><ul><li><strong>关键字 <code>as</code></strong></li></ul><p>表示子类转父类(向上转型)：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> v0 <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-type">ClassA</span><br><span class="hljs-built_in">print</span>(v0) <span class="hljs-comment">//ClassB</span><br></code></pre></td></tr></table></figure><ul><li><strong>关键字 <code>as?</code></strong></li></ul><p>当不确定父类转子类（向下转型）可以成功时，用类型转换的条件形式 <code>as?</code>，返回一个可选值。若下转是不可能的，可选值将是 <code>nil</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> v1 <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">as?</span> <span class="hljs-type">ClassC</span><br><span class="hljs-built_in">print</span>(v1) <span class="hljs-comment">// nil</span><br></code></pre></td></tr></table></figure><ul><li><strong>关键字 <code>as!</code></strong></li></ul><p>可以确定向下转型一定会成功时，才使用强制形式 <code>as!</code>，向下转型为一个不正确的类型时，强制形式的类型转换会触发一个运行时错误</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> v2 <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">as!</span> <span class="hljs-type">ClassB</span><br><span class="hljs-built_in">print</span>(v2) <span class="hljs-comment">//ClassB</span><br></code></pre></td></tr></table></figure><h2 id="Any-和-AnyObject-的类型转换"><a href="#Any-和-AnyObject-的类型转换" class="headerlink" title="Any 和 AnyObject 的类型转换"></a>Any 和 AnyObject 的类型转换</h2><ul><li>关键字<code>Any</code>：表示任何类型，包括函数类型</li><li>关键字<code>AnyObject</code>：表示任何类类型的实例</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> things <span class="hljs-operator">=</span> [<span class="hljs-keyword">Any</span>]()<br>things.append(<span class="hljs-number">0</span>)<br>things.append(<span class="hljs-number">0.0</span>)<br>things.append(<span class="hljs-number">42</span>)<br>things.append(<span class="hljs-number">3.14159</span>)<br>things.append(<span class="hljs-string">&quot;hello&quot;</span>)<br>things.append((<span class="hljs-number">3.0</span>, <span class="hljs-number">5.0</span>))<br>things.append(&#123; (name: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">String</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Hello, <span class="hljs-subst">\(name)</span>&quot;</span> &#125;)<br></code></pre></td></tr></table></figure><p>如果确实想使用 <code>Any</code> 类型来承载可选值，可以使用 <code>as</code> 操作符显式转换为 <code>Any</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> things <span class="hljs-operator">=</span> [<span class="hljs-keyword">Any</span>]()<br><span class="hljs-keyword">let</span> value:<span class="hljs-type">Int</span>? <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>things.append(value)         <span class="hljs-comment">//有警告</span><br>things.append(value <span class="hljs-keyword">as</span> <span class="hljs-keyword">Any</span>)  <span class="hljs-comment">//无警告</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 给视图添加边框</title>
    <link href="/2025/06/25/SwiftUI-%E7%BB%99%E8%A7%86%E5%9B%BE%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86/"/>
    <url>/2025/06/25/SwiftUI-%E7%BB%99%E8%A7%86%E5%9B%BE%E6%B7%BB%E5%8A%A0%E8%BE%B9%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<p>通过 <code>.border</code> 添加边框</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;globe&quot;</span>)<br>                .imageScale(.large)<br>                .foregroundStyle(.tint)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br>        &#125;<br>        .padding()<br>        .border(.gray, width: <span class="hljs-number">2</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>.overlay</code> 设置圆角</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;globe&quot;</span>)<br>                .imageScale(.large)<br>                .foregroundStyle(.tint)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br>        &#125;<br>        .padding()<br>        .overlay(<br>            <span class="hljs-type">RoundedRectangle</span>(cornerRadius: <span class="hljs-number">16</span>)<br>                .strokeBorder(<span class="hljs-type">Color</span>.blue, lineWidth: <span class="hljs-number">4</span>)<br>            <span class="hljs-comment">// .stroke(Color.blue, lineWidth: 4)        </span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>stroke()</code> 和 <code>strokeBorder()</code> 修饰符在形状周围绘制边框时，它们的行为略有不同：</p><p><code>strokeBorder()</code> 修饰符将视图插入边框宽度的一半，然后应用笔触，这意味着整个边框都在视图内部绘制。 <code>stroke()</code> 修饰符绘制一个以视图边缘为中心的边框，这意味着边框的一半位于视图内部，一半位于视图外部。 重要说明：这两个修饰符仅适用于形状–您可以将 <code>stroke()</code> 和 <code>strokeBorder()</code> 与 <code>Circle</code>，<code>Rectangle</code>，<code>Capsule</code>等一起使用，而不能与 <code>Text</code>，<code>Image</code> 或其他非形状视图一起使用。 如果要在非形状视图周围绘制边框，则应改用 <code>border()</code> 修饰符。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 提示 Git Could not resolve host: gitee.com</title>
    <link href="/2025/06/25/git-%E6%8F%90%E7%A4%BA-Git-Could-not-resolve-host-gitee-com/"/>
    <url>/2025/06/25/git-%E6%8F%90%E7%A4%BA-Git-Could-not-resolve-host-gitee-com/</url>
    
    <content type="html"><![CDATA[<p>原因：DNS 设置问题造成域名无法正常解析。</p><p>解决步骤：请更换 DNS 为 8.8.8.8 或 114.114.114.114 后重启网络。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 透明 View 点击无法生效的问题</title>
    <link href="/2025/06/25/SwiftUI-%E9%80%8F%E6%98%8E-View-%E7%82%B9%E5%87%BB%E6%97%A0%E6%B3%95%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/06/25/SwiftUI-%E9%80%8F%E6%98%8E-View-%E7%82%B9%E5%87%BB%E6%97%A0%E6%B3%95%E7%94%9F%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>透明的 view，无论是整体 opacity 设置为了0，还是颜色设置为了 clear，在 swiftUI 中，默认的 content shape (内容形状）就是 0，所以点击事件是无法生效的，而要解决这个问题，我们只需要手动设置 content shape 即可。代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Color</span>.clear<br>  .frame(width: <span class="hljs-number">300</span>, height: <span class="hljs-number">300</span>)<br>  .contentShape(<span class="hljs-type">Rectangle</span>())     <span class="hljs-comment">// 这里，当然上面的frame也有必要，如果frame为0，则肯定也无法触发点击</span><br>  .onTapGesture &#123; <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tapped&quot;</span>) &#125; <br></code></pre></td></tr></table></figure><p>相关：</p><p><a href="https://wonderhoi.com/2025/01/16/SwiftUI-Spacer-%E9%83%A8%E5%88%86%E6%97%A0%E6%B3%95%E5%93%8D%E5%BA%94%E7%82%B9%E5%87%BB/">SwiftUI Spacer() 部分无法响应点击</a></p><p><a href="https://wonderhoi.com/2024/12/02/SwiftUI-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E5%90%8E%E8%A2%AB%E8%A3%81%E5%89%AA%E9%83%A8%E5%88%86%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%82%B9%E5%87%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/">SwiftUI 裁剪图片后被裁剪部分仍然可以点击的解决办法</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 在 preview 界面进行截图</title>
    <link href="/2025/06/25/SwiftUI-%E5%9C%A8-preview-%E7%95%8C%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%88%AA%E5%9B%BE/"/>
    <url>/2025/06/25/SwiftUI-%E5%9C%A8-preview-%E7%95%8C%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%88%AA%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>直接在 #Preview 中呼叫。点击三下后即可完成截图。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PreviewScreenshotModifier</span>: <span class="hljs-title class_ inherited__">ViewModifier</span> &#123;<br>    <span class="hljs-keyword">let</span> screenshotDirectoryURL <span class="hljs-operator">=</span> <span class="hljs-type">URL</span>(filePath: <span class="hljs-string">&quot;/Users/wonderhoi/&quot;</span>)<br>    <span class="hljs-keyword">let</span> tapCount <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">content</span>: <span class="hljs-type">Content</span>) -&gt; <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        content<br>            .onTapGesture(count: tapCount, perform: &#123;<br>                <span class="hljs-keyword">let</span> scene <span class="hljs-operator">=</span> <span class="hljs-type">UIApplication</span>.shared.connectedScenes.first <span class="hljs-keyword">as?</span> <span class="hljs-type">UIWindowScene</span><br>                <span class="hljs-keyword">let</span> window <span class="hljs-operator">=</span> scene<span class="hljs-operator">?</span>.keyWindow <span class="hljs-operator">??</span> <span class="hljs-type">UIWindow</span>(frame: .zero)<br>                <span class="hljs-keyword">let</span> renderer <span class="hljs-operator">=</span> <span class="hljs-type">UIGraphicsImageRenderer</span>(size: window.bounds.size)<br>                <span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> renderer.image &#123; context <span class="hljs-keyword">in</span><br>                    window.drawHierarchy(in: window.bounds, afterScreenUpdates: <span class="hljs-literal">true</span>)<br>                &#125;<br>                <span class="hljs-keyword">let</span> pngData <span class="hljs-operator">=</span> image.pngData()<br>                <span class="hljs-keyword">let</span> screenshotURL <span class="hljs-operator">=</span> screenshotDirectoryURL.appending(path: <span class="hljs-string">&quot;<span class="hljs-subst">\(UUID())</span>&quot;</span>).appendingPathExtension(for: .png)<br>                <span class="hljs-keyword">try?</span> image.pngData()<span class="hljs-operator">?</span>.write(to: screenshotURL)<br>             &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">previewScreenshot</span>() -&gt; <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        modifier(<span class="hljs-type">PreviewScreenshotModifier</span>())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">#<span class="hljs-type">Preview</span> &#123;<br><span class="hljs-type">ContentView</span>()<br>.previewScreenshot()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>通过按钮或者 onTap 等手势触发。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Button</span>(action: &#123;<br>    <br>    <span class="hljs-keyword">let</span> screenshotDirectoryURL <span class="hljs-operator">=</span> <span class="hljs-type">URL</span>(filePath: <span class="hljs-string">&quot;/Users/wonderhoi/&quot;</span>)<br>    <span class="hljs-keyword">let</span> scene <span class="hljs-operator">=</span> <span class="hljs-type">UIApplication</span>.shared.connectedScenes.first <span class="hljs-keyword">as?</span> <span class="hljs-type">UIWindowScene</span><br>    <span class="hljs-keyword">let</span> window <span class="hljs-operator">=</span> scene<span class="hljs-operator">?</span>.keyWindow <span class="hljs-operator">??</span> <span class="hljs-type">UIWindow</span>(frame: .zero)<br>    <span class="hljs-keyword">let</span> renderer <span class="hljs-operator">=</span> <span class="hljs-type">UIGraphicsImageRenderer</span>(size: window.bounds.size)<br>    <span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> renderer.image &#123; context <span class="hljs-keyword">in</span><br>        window.drawHierarchy(in: window.bounds, afterScreenUpdates: <span class="hljs-literal">true</span>)<br>    &#125;<br>    <span class="hljs-keyword">let</span> pngData <span class="hljs-operator">=</span> image.pngData()<br>    <span class="hljs-keyword">let</span> screenshotURL <span class="hljs-operator">=</span> screenshotDirectoryURL.appending(path: <span class="hljs-string">&quot;<span class="hljs-subst">\(UUID())</span>&quot;</span>).appendingPathExtension(for: .png)<br>    <span class="hljs-keyword">try?</span> image.pngData()<span class="hljs-operator">?</span>.write(to: screenshotURL)<br>    <br>&#125;, label: &#123;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;截屏&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wireframe, prototype, mockup 三者的区别</title>
    <link href="/2025/06/16/wireframe-prototype-mockup-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2025/06/16/wireframe-prototype-mockup-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>prototype 和其他两者的不同之处在于是否可交互，可点击，prototype 是动态的；而 wireframe 和 mockup 则是静态的。wireframe 和 mockup 之间的区别则在于是否高保真。</p><h2 id="Wireframe-—-—-不关注外观，只关注功能"><a href="#Wireframe-—-—-不关注外观，只关注功能" class="headerlink" title="Wireframe — — 不关注外观，只关注功能"></a>Wireframe — — 不关注外观，只关注功能</h2><p>wireframe 中文称「线框图」，用来表达产品的概念、产品架构、内容优先级、页面布局和操作逻辑。它专注于产品的主要功能和在不同的场景中该如何操作，因此视觉元素应尽量简化，甚至不需要考虑，用色以黑白灰为主，最多再加上蓝色，蓝色通常用于导航栏与下方区块的区分。它是低保真的。</p><p>wireframe 是一种沟通工具，主要任务是快速视觉化产品概念，让团队成员快速了解产品概念，进而展开讨论，迅速搜集到来自大家的反馈。搜集反馈是为了改进产品，因此它不是产品的最终版本，讨论中搜集到的反馈可能会让产品改动很大，这也是为什么不需要太多考虑视觉细节部分的原因，因为反正还要改的。</p><h2 id="Mockup-—-—-呈现丰富的视觉细节"><a href="#Mockup-—-—-呈现丰富的视觉细节" class="headerlink" title="Mockup — — 呈现丰富的视觉细节"></a>Mockup — — 呈现丰富的视觉细节</h2><p>Mockup 为「视觉稿」，用于呈现产品整体的视觉设计，在 wireframe（线框图）的基础上增加了更丰富的视觉元素，包含图形、排版、配色等比较细节的视觉呈现，基本上就是等同于产品的最终设计稿了。</p><p>和 wireframe（线框图）一样，Mockup 也是静态的，不可操作。它专注产品的外观，加入了丰富的视觉元素，保真度高。</p><p>Mockup 呈现丰富的细节，经常用于视觉设计讨论中，用于快速搜集产品视觉设计方面的反馈并加以改进。</p><h2 id="Prototype-—-—-可操作的原型"><a href="#Prototype-—-—-可操作的原型" class="headerlink" title="Prototype — — 可操作的原型"></a>Prototype — — 可操作的原型</h2><p>Prototype 中文「原型」，是指<strong>可操作</strong>的原型，比较真实地模拟了用户与 UI 界面之间的互动，通过这种方式在产品早期挖掘存在的潜在问题，并及时进行修正，帮助设计师不断验证-修正自己对于产品的想法。</p><p>当把多张 Mockup （视觉稿）图制作成可操作的模型，这时候 Mockup 就化为了 prototype，我们称作是<strong>高保真原型。</strong></p><p>当把多张 wireframe（线框图）制作成可操作的模型，这时候 wireframe 就化为了 prototype。我们称作是<strong>低保真原型。</strong></p><p>通常制作原型不必过多地纠结细节，只需要讲清楚重点即可，比如用户流、内容流、页面层级之间的交互关系，讲明白事情最重要了。</p><p>Prototype<strong>最重要的特性就是可操作性，判断是不是 prototype 的标准就是是不是可以动可操作。</strong></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Table 合集</title>
    <link href="/2025/06/16/SwiftUI-Table-%E5%90%88%E9%9B%86/"/>
    <url>/2025/06/16/SwiftUI-Table-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://fatbobman.com/zh/posts/table_in_swiftui/">用 Table 在 SwiftUI 下创建表格</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 手势合集</title>
    <link href="/2025/05/15/SwiftUI-%E6%89%8B%E5%8A%BF%E5%90%88%E9%9B%86/"/>
    <url>/2025/05/15/SwiftUI-%E6%89%8B%E5%8A%BF%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="滑动识别"><a href="#滑动识别" class="headerlink" title="滑动识别"></a>滑动识别</h2><p><a href="https://stackoverflow.com/questions/60885532/how-to-detect-swiping-up-down-left-and-right-with-swiftui-on-a-view">How to detect Swiping UP, DOWN, LEFT and RIGHT with SwiftUI on a View</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift">.gesture(<span class="hljs-type">DragGesture</span>(minimumDistance: <span class="hljs-number">20</span>, coordinateSpace: .global).onEnded &#123; value <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">let</span> horizontalAmount <span class="hljs-operator">=</span> value.translation.width<br>    <span class="hljs-keyword">let</span> verticalAmount <span class="hljs-operator">=</span> value.translation.height<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(horizontalAmount) <span class="hljs-operator">&gt;</span> <span class="hljs-built_in">abs</span>(verticalAmount) &#123;<br>        <span class="hljs-built_in">print</span>(horizontalAmount <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">?</span> <span class="hljs-string">&quot;left swipe&quot;</span> : <span class="hljs-string">&quot;right swipe&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">print</span>(verticalAmount <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">?</span> <span class="hljs-string">&quot;up swipe&quot;</span> : <span class="hljs-string">&quot;down swipe&quot;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="拖拽手势"><a href="#拖拽手势" class="headerlink" title="拖拽手势"></a>拖拽手势</h2><p><a href="https://blog.csdn.net/guoyongming925/article/details/139150139">SwiftUI中的手势（DragGesture拖拽手势及Drag动画组件）</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DragGestureDemo</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@GestureState</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> dragOffset: <span class="hljs-type">CGSize</span> <span class="hljs-operator">=</span> .zero<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> position: <span class="hljs-type">CGSize</span> <span class="hljs-operator">=</span> .zero<br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">ZStack</span> &#123;<br>            <span class="hljs-type">VStack</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;dragOffset: <span class="hljs-subst">\(dragOffset)</span>&quot;</span>)<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;position: <span class="hljs-subst">\(position)</span>&quot;</span>)<br>                <span class="hljs-type">Spacer</span>()<br>            &#125;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Drag me!&quot;</span>)<br>                .font(.title)<br>                .padding()<br>                .background(<span class="hljs-type">Color</span>.cyan)<br>                .cornerRadius(<span class="hljs-number">10.0</span>)<br>                .offset(dragOffset)<br>                .offset(position)<br>                .gesture(<br>                    <span class="hljs-type">DragGesture</span>()<br>                        .updating(<span class="hljs-variable">$dragOffset</span>, body: &#123; value, state, <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span><br>                            state <span class="hljs-operator">=</span> value.translation<br>                        &#125;)<br>                        .onEnded(&#123; value <span class="hljs-keyword">in</span><br>                            position.width <span class="hljs-operator">+=</span> value.translation.width<br>                            position.height <span class="hljs-operator">+=</span> value.translation.height<br>                        &#125;)<br>                )<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 中 CGFloat、CGPoint、CGSize、CGRect 的区别</title>
    <link href="/2025/05/15/iOS-%E4%B8%AD-CGFloat%E3%80%81CGPoint%E3%80%81CGSize%E3%80%81CGRect-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2025/05/15/iOS-%E4%B8%AD-CGFloat%E3%80%81CGPoint%E3%80%81CGSize%E3%80%81CGRect-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<ul><li>CGFloat :表示一个浮点。</li><li>CGPoint :表示一个点。</li><li>CGsize  :表示一个矩形，但只有高度和宽度。</li><li>CGRect  :表示一个矩形，并且有原点的位置。</li></ul><p>具体定义如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CGPoint</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>()<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">x</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">y</span>: <span class="hljs-type">Double</span>)<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> x: <span class="hljs-type">Double</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> y: <span class="hljs-type">Double</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CGSize</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>()<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">width</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">height</span>: <span class="hljs-type">Double</span>)<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> width: <span class="hljs-type">Double</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> height: <span class="hljs-type">Double</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CGRect</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>()<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">origin</span>: <span class="hljs-type">CGPoint</span>, <span class="hljs-params">size</span>: <span class="hljs-type">CGSize</span>)<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> origin: <span class="hljs-type">CGPoint</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> size: <span class="hljs-type">CGSize</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 给数组元素赋值</title>
    <link href="/2025/04/10/Swift-%E7%BB%99%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E8%B5%8B%E5%80%BC/"/>
    <url>/2025/04/10/Swift-%E7%BB%99%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> array <span class="hljs-operator">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">// 不可以</span><br><span class="hljs-comment">// Cannot assign to property: &#x27;number&#x27; is a &#x27;let&#x27; constant</span><br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> array &#123;<br>number <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-comment">// 常规的</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>array.count &#123;<br>    array[index] <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-comment">// 优雅的</span><br>array.enumerated().forEach &#123;<br>    array[<span class="hljs-variable">$0</span>.offset] <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 使用 appStoreOverlay() 推荐另一个应用程序</title>
    <link href="/2025/04/10/SwiftUI-%E4%BD%BF%E7%94%A8-appStoreOverlay-%E6%8E%A8%E8%8D%90%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <url>/2025/04/10/SwiftUI-%E4%BD%BF%E7%94%A8-appStoreOverlay-%E6%8E%A8%E8%8D%90%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>SwiftUI 为我们提供了一个专用的修饰符，可以在 <code>App Store</code> 上推荐其他应用，这是与用户交叉销售的好方法 - “如果您喜欢它，您也会喜欢它”，依此类推。 如果您使用的是应用剪辑，这将特别有用，一旦用户执行了主要操作，您就可以在剪辑中推荐完整的应用。</p><p>此修改器需要观察一些状态，这些状态将确定 <code>App Store</code> 叠加层是否处于活动状态，以及 <code>SKOverlay.AppConfiguration</code> 来确定推荐哪个应用程序。</p><p>重要： <code>appStoreOverlay()</code>在 <code>macOS</code>上不可用，需要添加 <code>import StoreKit</code>。</p><p>例如，当按下按钮时，这将推荐一个特定的应用程序：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> StoreKit<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showRecommended <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Show Recommended App&quot;</span>) &#123;<br>            showRecommended.toggle()<br>        &#125;<br>        .appStoreOverlay(isPresented: <span class="hljs-variable">$showRecommended</span>) &#123;<br>            <span class="hljs-type">SKOverlay</span>.<span class="hljs-type">AppConfiguration</span>(appIdentifier: <span class="hljs-string">&quot;1440611372&quot;</span>, position: .bottom)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Toggle 合集</title>
    <link href="/2025/04/10/SwiftUI-Toggle-%E5%90%88%E9%9B%86/"/>
    <url>/2025/04/10/SwiftUI-Toggle-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Toggle-Style"><a href="#Toggle-Style" class="headerlink" title="Toggle Style"></a>Toggle Style</h2><p>开关</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Toggle</span>(<span class="hljs-string">&quot;Switch&quot;</span>, isOn: <span class="hljs-variable">$toggleIsOn</span>)<br>.toggleStyle(.switch)<br></code></pre></td></tr></table></figure><p>按钮</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Toggle</span>(<span class="hljs-string">&quot;Button&quot;</span>, isOn: <span class="hljs-variable">$toggleIsOn</span>)<br>.toggleStyle(.button)<br></code></pre></td></tr></table></figure><h2 id="Switch-Color"><a href="#Switch-Color" class="headerlink" title="Switch Color"></a>Switch Color</h2><p>可以修改 Switch 的颜色</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Toggle</span>(isOn: <span class="hljs-variable">$toggleIsOn</span>, label: &#123;<br><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Change statue&quot;</span>)<br>&#125;)<br>.toggleStyle(<span class="hljs-type">SwitchToggleStyle</span>(tint: .purple))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算 beacon 设备距离</title>
    <link href="/2025/04/02/%E8%AE%A1%E7%AE%97-beacon-%E8%AE%BE%E5%A4%87%E8%B7%9D%E7%A6%BB/"/>
    <url>/2025/04/02/%E8%AE%A1%E7%AE%97-beacon-%E8%AE%BE%E5%A4%87%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>公式如下：<br>$$<br>Distance &#x3D; 10^{(\lvert RSSI \rvert-Measured Power)&#x2F;(10*Environment Factor)}<br>$$<br>参数解释：</p><ul><li>RSSI，接收信号强度（负值）</li><li>Measured Power，Measured Power是在离beacon一米处的RSSI平均值，用于配合RSSI计算较准确的距离。</li><li>Environment Factor，环境衰减因子</li></ul><p>参考：</p><p><a href="https://ext.dcloud.net.cn/plugin?id=20759">iBeacon：成功获取蓝牙，大概计算距离</a></p><p><a href="https://www.cnblogs.com/CharlesGrant/p/7155452.html">beacon 距离间计算 </a></p><p><a href="https://blog.csdn.net/guoxulieying/article/details/134026758">iBeacon设备信号距离测算</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bluetooth</tag>
      
      <tag>Beacon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 删除数组元素</title>
    <link href="/2025/03/25/Python-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/"/>
    <url>/2025/03/25/Python-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> array[inedx]<br><span class="hljs-keyword">del</span> array[start:end]<br><br>array.pop(inedx)<br>array.pop()<span class="hljs-comment"># 删除最后一个元素</span><br><br>array.remove(element)<span class="hljs-comment"># 删除指定元素</span><br><br>array.clear()<span class="hljs-comment"># 删除所有元素</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 提示 Method &#39;xxx&#39; may be &#39;static&#39;</title>
    <link href="/2025/03/25/PyCharm-%E6%8F%90%E7%A4%BA-Method-xxx-may-be-static/"/>
    <url>/2025/03/25/PyCharm-%E6%8F%90%E7%A4%BA-Method-xxx-may-be-static/</url>
    
    <content type="html"><![CDATA[<p>原因在于这个方法本可以写成静态方法，但我们把它写成类方法了（就是没有必要写成类方法，因为在方法中并未使用这个类 self）</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH 出现警告 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED</title>
    <link href="/2025/03/25/SSH-%E5%87%BA%E7%8E%B0%E8%AD%A6%E5%91%8A-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED/"/>
    <url>/2025/03/25/SSH-%E5%87%BA%E7%8E%B0%E8%AD%A6%E5%91%8A-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED/</url>
    
    <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> pi@<span class="hljs-number">192.168.1.99</span><br></code></pre></td></tr></table></figure><p>使用 SSH 连接树莓派时出现下面的警告：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@</span><br><span class="hljs-comment">@</span>    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     <span class="hljs-comment">@</span><br><span class="hljs-comment">@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><span class="hljs-comment">@@</span><br><br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right <span class="hljs-built_in">now</span> (man-in-the-middle attack)!<br>It is also possible that a host <span class="hljs-built_in">key</span> has just been changed.<br>The fingerprint <span class="hljs-keyword">for</span> the ED25519 key sent by the remote host is<br>SHA256:<br><br>Please contact your system administrator.<br>Add correct host key in /Users/chunlicheng/.ssh/known_hosts to get rid of this message.<br>Offending ECDSA key in /Users/chunlicheng/.ssh/known_hosts:23<br>Host key <span class="hljs-keyword">for</span> 192.168.1.99 has changed and you have requested strict checking.<br>Host key verification failed.<br></code></pre></td></tr></table></figure><p>意思是 key 已经变了，但电脑中存储的 key 还是旧的。</p><p>这时候要清除掉已经保持的 key</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -R <span class="hljs-number">192.168.1.99</span><br></code></pre></td></tr></table></figure><p>之后再次 SSH 树莓派就行了</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 多线程定时器</title>
    <link href="/2025/03/25/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2025/03/25/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>一次 timer 只生效一次，不会反复循环，如果实现循环触发，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">createTimer</span>():<br>    t = threading.Timer(<span class="hljs-number">2</span>, repeat)<br>    t.start()<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeat</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Now:&#x27;</span>, time.strftime(<span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>,time.localtime()))<br>    createTimer()<br>    <br>createTimer()<br></code></pre></td></tr></table></figure><p>这段代码的功能就是每 2 秒打印出当前的时间，即一个 2 秒的定时器。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 判断数组是否为空</title>
    <link href="/2025/03/25/Python-%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <url>/2025/03/25/Python-%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</url>
    
    <content type="html"><![CDATA[<p>在Python中，None、空字符串””、0、空列表[]、空字典{}、空元组()都相当于 False，非空则返回 True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">array = []<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> array:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br><br><span class="hljs-keyword">if</span> array:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br>    <br>array.append(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> array:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br><br><span class="hljs-keyword">if</span> array:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br></code></pre></td></tr></table></figure><p>其实这就是 <code>if True</code>，在 Swift 中表示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift">isNotEmpty: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-type">False</span><br><br><span class="hljs-comment">// if !isNotEmpty == True &#123;</span><br><span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>isNotEmpty &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// if isNotEmpty == True &#123;</span><br><span class="hljs-keyword">if</span> isNotEmpty &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>说实话理解起来有点抽象，尤其是在 Swift 中有 <code>isEmpty</code> 这样的函数情况下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift">array <span class="hljs-operator">=</span> []<br><br><span class="hljs-keyword">if</span> array.isEmpty &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>array.isEmpty &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组不为空&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数组为空&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bleak 使用指北</title>
    <link href="/2025/03/19/Bleak-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/"/>
    <url>/2025/03/19/Bleak-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h2 id="发现任意蓝牙设备"><a href="#发现任意蓝牙设备" class="headerlink" title="发现任意蓝牙设备"></a>发现任意蓝牙设备</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> discover<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">discover_bluetooth</span>():<br>    devices = <span class="hljs-keyword">await</span> discover(timeout=<span class="hljs-number">5.0</span>)<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> devices:<br>        <span class="hljs-built_in">print</span>(d)<br><br>asyncio.run(discover_bluetooth())<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> BleakScanner<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">discover_bluetooth</span>():<br>    devices = <span class="hljs-keyword">await</span> BleakScanner.discover()<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> devices:<br>        <span class="hljs-built_in">print</span>(d)<br>        <br>asyncio.run(discover_bluetooth())<br></code></pre></td></tr></table></figure><h2 id="通过地址发现指定设备"><a href="#通过地址发现指定设备" class="headerlink" title="通过地址发现指定设备"></a>通过地址发现指定设备</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> platform<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> BleakScanner<br><br>ADDRESS = (<br>    <span class="hljs-string">&#x27;08:B9:5F:5F:6F:47&#x27;</span><br>    <span class="hljs-keyword">if</span> platform.system() == <span class="hljs-string">&#x27;Linux&#x27;</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;074A9728-EC7E-5E5A-5DDB-DF54AA486B90&#x27;</span><br>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">discover_address</span>(<span class="hljs-params">address</span>):<br>    device = <span class="hljs-keyword">await</span> BleakScanner.find_device_by_address(address)<br>    <span class="hljs-built_in">print</span>(device)<br><br>asyncio.run(discover_address(ADDRESS))<br></code></pre></td></tr></table></figure><h2 id="连接设备并显示服务"><a href="#连接设备并显示服务" class="headerlink" title="连接设备并显示服务"></a>连接设备并显示服务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> platform<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> BleakClient, BleakScanner<br><span class="hljs-keyword">from</span> bleak.exc <span class="hljs-keyword">import</span> BleakError<br><br>ADDRESS = (<br>    <span class="hljs-string">&#x27;08:B9:5F:5F:6F:47&#x27;</span><br>    <span class="hljs-keyword">if</span> platform.system() == <span class="hljs-string">&#x27;Linux&#x27;</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;074A9728-EC7E-5E5A-5DDB-DF54AA486B90&#x27;</span><br>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>(<span class="hljs-params">address</span>):<br>    device = <span class="hljs-keyword">await</span> BleakScanner.find_device_by_address(address, timeout=<span class="hljs-number">20.0</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> device:<br>        <span class="hljs-keyword">raise</span> BleakError(<span class="hljs-string">f&quot;A device with address <span class="hljs-subst">&#123;address&#125;</span> could not be found.&quot;</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> BleakClient(device) <span class="hljs-keyword">as</span> client:<br>        services = <span class="hljs-keyword">await</span> client.get_services()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Services:&quot;</span>)<br>        <span class="hljs-keyword">for</span> service <span class="hljs-keyword">in</span> services:<br>            <span class="hljs-built_in">print</span>(service)<br><br>asyncio.run(connect(ADDRESS))<br></code></pre></td></tr></table></figure><h2 id="连接设备并显示服务以及特征值"><a href="#连接设备并显示服务以及特征值" class="headerlink" title="连接设备并显示服务以及特征值"></a>连接设备并显示服务以及特征值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> platform<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> BleakClient<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_char</span>(<span class="hljs-params">address</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> BleakClient(address) <span class="hljs-keyword">as</span> client:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Connected: <span class="hljs-subst">&#123;client.is_connected&#125;</span>&quot;</span>)<br><br>        <span class="hljs-keyword">for</span> service <span class="hljs-keyword">in</span> client.services:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[Service] <span class="hljs-subst">&#123;service&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> service.characteristics:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> char.properties:<br>                    <span class="hljs-keyword">try</span>:<br>                        value = <span class="hljs-built_in">bytes</span>(<span class="hljs-keyword">await</span> client.read_gatt_char(char.uuid))<br>                        <span class="hljs-built_in">print</span>(<br>                            <span class="hljs-string">f&quot;\t[Characteristic] <span class="hljs-subst">&#123;char&#125;</span> (<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;,&#x27;</span>.join(char.properties)&#125;</span>), Value: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span><br>                        )<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span>(<br>                            <span class="hljs-string">f&quot;\t[Characteristic] <span class="hljs-subst">&#123;char&#125;</span> (<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;,&#x27;</span>.join(char.properties)&#125;</span>), Value: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br>                        )<br><br>                <span class="hljs-keyword">else</span>:<br>                    value = <span class="hljs-literal">None</span><br>                    <span class="hljs-built_in">print</span>(<br>                        <span class="hljs-string">f&quot;\t[Characteristic] <span class="hljs-subst">&#123;char&#125;</span> (<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;,&#x27;</span>.join(char.properties)&#125;</span>), Value: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span><br>                    )<br><br>                <span class="hljs-keyword">for</span> descriptor <span class="hljs-keyword">in</span> char.descriptors:<br>                    <span class="hljs-keyword">try</span>:<br>                        value = <span class="hljs-built_in">bytes</span>(<br>                            <span class="hljs-keyword">await</span> client.read_gatt_descriptor(descriptor.handle)<br>                        )<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\t\t[Descriptor] <span class="hljs-subst">&#123;descriptor&#125;</span>) | Value: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\t\t[Descriptor] <span class="hljs-subst">&#123;descriptor&#125;</span>) | Value: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br>asyncio.run(connect_char(ADDRESS))<br></code></pre></td></tr></table></figure><h2 id="扫描-Beacon-广播"><a href="#扫描-Beacon-广播" class="headerlink" title="扫描 Beacon 广播"></a>扫描 Beacon 广播</h2><p>参考：</p><ul><li><a href="https://github.com/hbldh/bleak/blob/develop/examples/scan_iterator.py">scan_iterator</a></li><li><a href="https://github.com/FiachraBarry99/BlueMaestroAPI/blob/main/BlueMaestroAPI.py">BlueMaestroAPI</a></li><li><a href="https://blog.csdn.net/LIN3456789/article/details/132098944">扫描蓝牙设备并获取原始广播数据的功能实现</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> BleakScanner<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">discover_ad</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> BleakScanner() <span class="hljs-keyword">as</span> scanner:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Scanning...&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;advertisement packets:&quot;</span>)<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> bd, ad <span class="hljs-keyword">in</span> scanner.advertisement_data():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;bd!r&#125;</span> with <span class="hljs-subst">&#123;ad!r&#125;</span>&quot;</span>)<br><br>asyncio.run(discover_ad())<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> bleak <span class="hljs-keyword">import</span> BleakScanner<br><span class="hljs-keyword">from</span> bleak.backends.device <span class="hljs-keyword">import</span> BLEDevice<br><span class="hljs-keyword">from</span> bleak.backends.scanner <span class="hljs-keyword">import</span> AdvertisementData<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">device: BLEDevice, advertisement_data: AdvertisementData</span>):<br>    manufacturer_data = advertisement_data.manufacturer_data<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> manufacturer_data:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> manufacturer_data.items():<br>        <span class="hljs-comment"># manufacturer_data服务下原始数据，bytes转16进制再转字符串</span><br>        value_string = binascii.hexlify(value).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span> :<span class="hljs-subst">&#123;value_string&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># for key in manufacturer_data.keys():</span><br>    <span class="hljs-comment"># for value in manufacturer_data.values():</span><br><br>    service_uuid = advertisement_data.service_uuids<br>    <span class="hljs-comment"># 空 list 本身等同于 False</span><br>    <span class="hljs-keyword">if</span> service_uuid:<br>        <span class="hljs-built_in">print</span>(service_uuid)<br><br>    <span class="hljs-comment"># if not service_uuid:</span><br>    <span class="hljs-comment">#     print(&#x27;List Is Empty&#x27;)</span><br><br>    local_name = advertisement_data.local_name<br>    <span class="hljs-keyword">if</span> local_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(local_name)<br><br>    service_data = advertisement_data.service_data<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> service_data:<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> service_data.items():<br>        <span class="hljs-comment"># service_data服务下原始数据，bytes转16进制再转字符串</span><br>        value_string = binascii.hexlify(value).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span> :<span class="hljs-subst">&#123;value_string&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">discover_ad</span>():<br>    scanner = BleakScanner()<br>    scanner.register_detection_callback(callback)<br>    <span class="hljs-keyword">await</span> scanner.start()<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">100.0</span>)<br>    <span class="hljs-keyword">await</span> scanner.stop()<br><br>asyncio.run(discover_ad())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bluetooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派扫描蓝牙信标 Beacon 方案</title>
    <link href="/2025/03/18/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%AB%E6%8F%8F%E8%93%9D%E7%89%99%E4%BF%A1%E6%A0%87-Beacon-%E6%96%B9%E6%A1%88/"/>
    <url>/2025/03/18/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%AB%E6%8F%8F%E8%93%9D%E7%89%99%E4%BF%A1%E6%A0%87-Beacon-%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="beacontools"><a href="#beacontools" class="headerlink" title="beacontools"></a>beacontools</h2><p><a href="https://github.com/citruz/beacontools">beacontools</a></p><p>按照 Readme 进行部署后，仍然无法运行示例代码，原因在于：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> bluetooth <span class="hljs-keyword">import</span> _bluetooth <span class="hljs-keyword">as</span> bluez<br>ModuleNotFoundError: No <span class="hljs-keyword">module</span> named <span class="hljs-string">&quot;bluetooth&quot;</span><br></code></pre></td></tr></table></figure><p>即缺少了 pybluez 的相关内容。</p><p>但是在历经千辛万苦成功安装上 pybluez 后，还是无法运行，报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>UnicodeDecodeError: &#x27;utf<span class="hljs-string">-8</span>&#x27; codec can&#x27;t decode byte 0xff in position 4: invalid start byte<br></code></pre></td></tr></table></figure><p>具体问题无法确认，最终放弃使用 beacontools。</p><h2 id="pybluez"><a href="#pybluez" class="headerlink" title="pybluez"></a>pybluez</h2><p><a href="https://github.com/pybluez/pybluez">pybluez</a></p><p>在 beacontools 中提到需要安装 pybluez。但在通过 pip 安装时遇到了问题：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error </span>in PyBluez setup command: use_2to3 is invalid.<br></code></pre></td></tr></table></figure><p>尝试通过 <a href="https://www.cnblogs.com/harrymore/p/15465053.html">解决python3安装库报use_2to3 is invalid的错误</a> 中提到的方法解决问题，在通过 <code>pip install setuptools==57.5.0</code> 对 setuptools 进行降级并再次安装 pybluez 时，出现了新的问题：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">DEPRECATION: xxx <span class="hljs-keyword">is</span> being installed <span class="hljs-keyword">using</span> the legacy <span class="hljs-string">&#x27;setup.py install&#x27;</span> <span class="hljs-keyword">method</span>, <span class="hljs-title function_">because</span> <span class="hljs-title function_">it</span> <span class="hljs-title function_">does</span> <span class="hljs-title function_">not</span> <span class="hljs-title function_">have</span> <span class="hljs-title function_">a</span> &#x27;<span class="hljs-title function_">pyproject</span>.<span class="hljs-title function_">toml</span>&#x27; <span class="hljs-title function_">and</span> <span class="hljs-title function_">the</span> &#x27;<span class="hljs-title function_">wheel</span>&#x27; <span class="hljs-title function_">package</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">not</span> <span class="hljs-title function_">installed</span>. <span class="hljs-title function_">pip</span> 23.1 <span class="hljs-title function_">will</span> <span class="hljs-title function_">enforce</span> <span class="hljs-title function_">this</span> <span class="hljs-title function_">behaviour</span> <span class="hljs-title function_">change</span>. <span class="hljs-title function_">A</span> <span class="hljs-title function_">possible</span> <span class="hljs-title function_">replacement</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">to</span> <span class="hljs-title function_">enable</span> <span class="hljs-title function_">the</span> &#x27;--<span class="hljs-title function_">use</span>-<span class="hljs-title function_">pep517</span>&#x27; <span class="hljs-title function_">option</span>. <span class="hljs-title function_">Discussion</span> <span class="hljs-title function_">can</span> <span class="hljs-title function_">be</span> <span class="hljs-title function_">found</span> <span class="hljs-title function_">at</span> <span class="hljs-title function_">https</span>:<span class="hljs-comment">//github.com/pypa/pip/issues/8559</span><br></code></pre></td></tr></table></figure><p>根据描述，解决方案无非就是使用 <code>--use-pep517</code> 或者升级 pip：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip install pybluez <span class="hljs-comment">--use-pep517</span><br>pip install <span class="hljs-comment">--upgrade pip</span><br></code></pre></td></tr></table></figure><p>但无论是那种，都会导致回到 <code>use_2to3</code> 的报错，死循环了属于是。</p><p>最终，在： </p><ul><li><a href="https://www.cnblogs.com/shandianchengzi/p/18155349">【记录】Python3｜Windows下Python3.11.0的pybluez安装（用于处理蓝牙模块的数据）</a></li><li><a href="https://github.com/pybluez/pybluez/issues/431">Cant install PyBluez on Windows: use_2to3 is invalid.</a></li></ul><p>中找到了解决方案，即：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">pip install --upgrade pip setuptools wheel<br>pip install cython<br><br>git clone https://github.<span class="hljs-keyword">com</span>/pybluez/pybluez.git<br><span class="hljs-keyword">cd</span> pybluez<br><span class="hljs-keyword">python</span> setup.<span class="hljs-keyword">py</span> install<br></code></pre></td></tr></table></figure><p>成功安装了 pybluez，不过如 beacontools 中说的，beacontools 无法成功运行。</p><p>于是考虑通过 pybluez 实现需求，但同样也遇到了问题，那就是：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">ModuleNotFoundError:</span> No <span class="hljs-keyword">module</span> named <span class="hljs-string">&quot;gattlib&quot;</span><br></code></pre></td></tr></table></figure><p>后来实在没精力研究如何安装 gattlib 所以就选择放弃了 pybluez。</p><ul><li><p><a href="https://github.com/labapart/gattlib#package-gattlib">GattLib</a></p></li><li><p><a href="https://blog.csdn.net/zhaofujia1230/article/details/140777311">树莓派4B 安装部署 蓝牙 gattlib</a></p></li></ul><p>还有：</p><ul><li><a href="https://github.com/getsenic/gatt-python">gatt-python</a></li><li><a href="https://github.com/peplin/pygatt">pygatt</a></li></ul><h2 id="bluepy"><a href="#bluepy" class="headerlink" title="bluepy"></a>bluepy</h2><p>一句话，太老的项目了，不敢用，不想折腾了。</p><h2 id="bleak"><a href="#bleak" class="headerlink" title="bleak"></a>bleak</h2><p><a href="https://github.com/hbldh/bleak">bleak</a></p><p>拿来就能直接用，好东西。</p><h2 id="其它参考"><a href="#其它参考" class="headerlink" title="其它参考"></a>其它参考</h2><ul><li><a href="https://stdio.io/1068">Bluetooth 以及 BLE 那些工具</a></li><li><a href="https://blog.csdn.net/u013564470/article/details/133274134">python使用蓝牙库选择</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bluetooth</tag>
      
      <tag>Python</tag>
      
      <tag>Raspberry Pi</tag>
      
      <tag>Beacon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac M 芯片睡眠后反复唤醒外接显示器异常解决方案</title>
    <link href="/2025/02/24/Mac-M-%E8%8A%AF%E7%89%87%E7%9D%A1%E7%9C%A0%E5%90%8E%E5%8F%8D%E5%A4%8D%E5%94%A4%E9%86%92%E5%A4%96%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2025/02/24/Mac-M-%E8%8A%AF%E7%89%87%E7%9D%A1%E7%9C%A0%E5%90%8E%E5%8F%8D%E5%A4%8D%E5%94%A4%E9%86%92%E5%A4%96%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>贴几个相关的问题：</p><ul><li><a href="https://zhaoxin.pro/life/16682846375746.html">Mac睡眠时经常异常唤醒问题的处理</a></li><li><a href="https://www.logcg.com/archives/3528.html">升级 macOS Monterey 后设备休眠半夜频繁唤醒问题</a></li><li><a href="https://www.v2ex.com/t/733474">外置屏幕频繁被唤醒又休眠。这是 m1 的通病？</a></li><li><a href="https://v2ex.com/t/883949">M2 外接显示器睡眠后频繁唤醒</a></li><li><a href="https://www.v2ex.com/t/807504">M1 Mac 睡眠后老是点亮 U2720Q</a></li></ul><p>解决方案：</p><p>使用指令 <code>pmset -g</code> 后，注意到有蓝牙阻止了 Mac 进入到睡眠。由于我用的是妙控板，所以只可能是键盘的问题。</p><p>在 Mac 睡眠时关闭蓝牙键盘，问题解决。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 调整 View 在 Stack 中的高度或者宽度占比</title>
    <link href="/2025/01/16/SwiftUI-%E8%B0%83%E6%95%B4-View-%E5%9C%A8-Stack-%E4%B8%AD%E7%9A%84%E9%AB%98%E5%BA%A6%E6%88%96%E8%80%85%E5%AE%BD%E5%BA%A6%E5%8D%A0%E6%AF%94/"/>
    <url>/2025/01/16/SwiftUI-%E8%B0%83%E6%95%B4-View-%E5%9C%A8-Stack-%E4%B8%AD%E7%9A%84%E9%AB%98%E5%BA%A6%E6%88%96%E8%80%85%E5%AE%BD%E5%BA%A6%E5%8D%A0%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>(spacing: <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">Rectangle</span>()<br>                .fill(<span class="hljs-type">Color</span>.red)<br>                .containerRelativeFrame(.vertical, count: <span class="hljs-number">100</span>, span: <span class="hljs-number">43</span>, spacing: <span class="hljs-number">0</span>)<br><br>            <span class="hljs-type">Rectangle</span>()<br>                .fill(<span class="hljs-type">Color</span>.green)<br>                .containerRelativeFrame(.vertical, count: <span class="hljs-number">100</span>, span: <span class="hljs-number">37</span>, spacing: <span class="hljs-number">0</span>)<br><br>            <span class="hljs-type">Rectangle</span>()<br>                .fill(<span class="hljs-type">Color</span>.yellow)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 43:37:20</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Spacer() 部分无法响应点击</title>
    <link href="/2025/01/16/SwiftUI-Spacer-%E9%83%A8%E5%88%86%E6%97%A0%E6%B3%95%E5%93%8D%E5%BA%94%E7%82%B9%E5%87%BB/"/>
    <url>/2025/01/16/SwiftUI-Spacer-%E9%83%A8%E5%88%86%E6%97%A0%E6%B3%95%E5%93%8D%E5%BA%94%E7%82%B9%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;可以点击文字 1&quot;</span>)<br>            <span class="hljs-type">Spacer</span>()<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;可以点击文字 2&quot;</span>)<br>        &#125;<br>        .contentShape(<span class="hljs-type">Rectangle</span>()) <span class="hljs-comment">// 追加热区设置</span><br>        .onTapGesture &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;点击了&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 右侧 Sidebar</title>
    <link href="/2025/01/16/SwiftUI-%E5%8F%B3%E4%BE%A7-Sidebar/"/>
    <url>/2025/01/16/SwiftUI-%E5%8F%B3%E4%BE%A7-Sidebar/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> showInspector <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello Word&quot;</span>)<br>        .toolbar &#123;<br>            <span class="hljs-type">Button</span>(action: &#123; showInspector.toggle() &#125;) &#123;<br>                <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;sidebar.right&quot;</span>)<br>            &#125;<br>        &#125;<br>        .inspector(<span class="hljs-variable">$showInspector</span>) &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;InspectorView&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 隐藏 NavigationSplitView 的 detail</title>
    <link href="/2025/01/16/SwiftUI-%E9%9A%90%E8%97%8F-NavigationSplitView-%E7%9A%84-detail/"/>
    <url>/2025/01/16/SwiftUI-%E9%9A%90%E8%97%8F-NavigationSplitView-%E7%9A%84-detail/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">NavigationSplitView</span> &#123;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Sidebar&quot;</span>)<br>&#125; content: &#123;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Content&quot;</span>)<br>&#125; detail: &#123;<br>    <span class="hljs-keyword">if</span> detailViewVisible &#123;<br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Detail&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Spacer</span>()<br>            .navigationSplitViewColumnWidth(<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 添加 .gitignore 文件忽略 .DS_Store</title>
    <link href="/2025/01/16/git-%E6%B7%BB%E5%8A%A0-gitignore-%E6%96%87%E4%BB%B6%E5%BF%BD%E7%95%A5-DS-Store/"/>
    <url>/2025/01/16/git-%E6%B7%BB%E5%8A%A0-gitignore-%E6%96%87%E4%BB%B6%E5%BF%BD%E7%95%A5-DS-Store/</url>
    
    <content type="html"><![CDATA[<h2 id="添加-gitignore-文件"><a href="#添加-gitignore-文件" class="headerlink" title="添加 .gitignore 文件"></a>添加 .gitignore 文件</h2><p>macOS 上传代码到 git 时，会把 .DS_Store 文件也一并上传。在没用的同时，还很影响项目的阅读。</p><p>所以需要用到 .gitignore 来忽略不需要上传 git 的文件或者文件夹：</p><p>cd 到项目文件夹，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> .gitignore<br></code></pre></td></tr></table></figure><p>创建 .gitignore 文件。<code>Command+Shift+.</code> 可以显示隐藏文件。</p><p>打开 .gitignore，输入想要忽略的文件或者文件夹，例如想要忽略 .DS_Store 文件和 build 文件夹：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">.DS_Store<br>.DS_Store?<br><br>build<br></code></pre></td></tr></table></figure><p><a href="https://gist.github.com/octocat/9257657">一些常见 .gitignore 配置</a></p><h2 id="gitignore-不生效"><a href="#gitignore-不生效" class="headerlink" title=".gitignore 不生效"></a>.gitignore 不生效</h2><p>原因是</p><ol><li>.gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效的；</li><li>想要 .gitignore 起作用，必须要在这些文件不在暂存区中才可以，.gitignore 文件只是忽略没有被 staged(cached) 文件， 对于已经被 staged 文件，加入 ignore 文件时一定要先从 staged 移除，才可以忽略；</li><li>解决办法删除缓存。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> -r --cached .<br>git add .<br>git commit -m <span class="hljs-string">&#x27;update .gitignore&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI macOS 让 TextField 失去焦点</title>
    <link href="/2025/01/15/SwiftUI-macOS-%E8%AE%A9-TextField-%E5%A4%B1%E5%8E%BB%E7%84%A6%E7%82%B9/"/>
    <url>/2025/01/15/SwiftUI-macOS-%E8%AE%A9-TextField-%E5%A4%B1%E5%8E%BB%E7%84%A6%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>这串代码的作用是让 iOS 键盘收起，同时也能让 macOS 的 TextField 失去焦点：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.main.async &#123;<br><span class="hljs-type">NSApp</span>.keyWindow<span class="hljs-operator">?</span>.makeFirstResponder(<span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 macOS 中，选中 TextField 按下键盘回车并不会使其失去焦点。正确的做法是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 回车确认</span><br>.onSubmit &#123;<br><span class="hljs-type">DispatchQueue</span>.main.async &#123;<br><span class="hljs-type">NSApp</span>.keyWindow<span class="hljs-operator">?</span>.makeFirstResponder(<span class="hljs-literal">nil</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 动画合集</title>
    <link href="/2025/01/11/SwiftUI-%E5%8A%A8%E7%94%BB%E5%90%88%E9%9B%86/"/>
    <url>/2025/01/11/SwiftUI-%E5%8A%A8%E7%94%BB%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://stackoverflow.com/questions/70327803/how-can-i-update-this-custom-picker-animation-and-transition-to-ios-15">How can I update this custom Picker animation and transition to iOS 15?</a></li><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E7%9A%84-animation-%E5%8B%95%E7%95%AB-2f8eb72d2756">SwiftUI 有趣的 animation 動畫</a></li><li><a href="https://swiftui-lab.com/advanced-transitions/">Advanced SwiftUI Transitions</a></li><li><a href="https://www.bigmountainstudio.com/community/public/posts/14750-what-are-swiftui-transitions-and-how-do-you-use-them">What are SwiftUI Transitions and How Do You Use Them?</a></li><li><a href="https://stackoverflow.com/questions/57763709/swiftui-withanimation-completion-callback">SwiftUI withAnimation completion callback</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 取整</title>
    <link href="/2025/01/11/Swift-%E5%8F%96%E6%95%B4/"/>
    <url>/2025/01/11/Swift-%E5%8F%96%E6%95%B4/</url>
    
    <content type="html"><![CDATA[<p><code>floor</code> 方法是 <code>向下取整</code>，也就是只取整数部分，小数部分舍去。</p><p><code>ceil</code> 方法是 <code>向上取整</code>，也就是只要小数部分不为 0，就取整数部分 + 1。</p><p><code>round</code> 方法是 <code>四舍五入取整</code>，也就是小数部分小于 0.5 的只取整数部分，大于等于 0.5，就取整数部分 + 1。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> value1: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.0</span><br><span class="hljs-keyword">let</span> value2: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.2</span><br><span class="hljs-keyword">let</span> value3: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.5</span><br><span class="hljs-keyword">let</span> value4: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.7</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;raw   value: <span class="hljs-subst">\(value1)</span> <span class="hljs-subst">\(value2)</span> <span class="hljs-subst">\(value3)</span> <span class="hljs-subst">\(value4)</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;floor value: <span class="hljs-subst">\(floor(value1))</span> <span class="hljs-subst">\(floor(value2))</span> <span class="hljs-subst">\(floor(value3))</span> <span class="hljs-subst">\(floor(value4))</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ceil  value: <span class="hljs-subst">\(ceil(value1))</span> <span class="hljs-subst">\(ceil(value2))</span> <span class="hljs-subst">\(ceil(value3))</span> <span class="hljs-subst">\(ceil(value4))</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;round value: <span class="hljs-subst">\(round(value1))</span> <span class="hljs-subst">\(round(value2))</span> <span class="hljs-subst">\(round(value3))</span> <span class="hljs-subst">\(round(value4))</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">raw   value: 4.0 4.2 4.5 4.7<br>floor value: 4.0 4.0 4.0 4.0<br>ceil  value: 4.0 5.0 5.0 5.0<br>round value: 4.0 4.0 5.0 5.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 计算地图上两点的物理距离</title>
    <link href="/2025/01/11/Swift-%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E4%B8%8A%E4%B8%A4%E7%82%B9%E7%9A%84%E7%89%A9%E7%90%86%E8%B7%9D%E7%A6%BB/"/>
    <url>/2025/01/11/Swift-%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9B%BE%E4%B8%8A%E4%B8%A4%E7%82%B9%E7%9A%84%E7%89%A9%E7%90%86%E8%B7%9D%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>参考：<a href="https://stackoverflow.com/questions/7278094/moving-a-cllocation-by-x-meters">Moving a CLLocation by x meters</a></p><p>使用 Haversine Formula，公式考虑了地球的曲率，能够精确计算两个点之间的距离。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">calculateDistance</span>(<span class="hljs-params">from</span> <span class="hljs-params">coord1</span>: <span class="hljs-type">CLLocationCoordinate2D</span>, <span class="hljs-params">to</span> <span class="hljs-params">coord2</span>: <span class="hljs-type">CLLocationCoordinate2D</span>) -&gt; <span class="hljs-type">Double</span> &#123; <br><br>    <span class="hljs-keyword">let</span> earthRadius: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">6372797.6</span><br>    <br><span class="hljs-comment">// 将经纬度转换为弧度 </span><br>    <span class="hljs-keyword">let</span> lat1 <span class="hljs-operator">=</span> coord1.latitude <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <br>    <span class="hljs-keyword">let</span> lat2 <span class="hljs-operator">=</span> coord2.latitude <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <br>    <span class="hljs-keyword">let</span> deltaLat <span class="hljs-operator">=</span> (coord2.latitude <span class="hljs-operator">-</span> coord1.latitude) <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <br>    <span class="hljs-keyword">let</span> deltaLon <span class="hljs-operator">=</span> (coord2.longitude <span class="hljs-operator">-</span> coord1.longitude) <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <br>    <br>    <span class="hljs-comment">// Haversine公式 </span><br>    <span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> sin(deltaLat <span class="hljs-operator">/</span> <span class="hljs-number">2</span>) <span class="hljs-operator">*</span> sin(deltaLat <span class="hljs-operator">/</span> <span class="hljs-number">2</span>) <span class="hljs-operator">+</span> cos(lat1) <span class="hljs-operator">*</span> cos(lat2) <span class="hljs-operator">*</span> sin(deltaLon <span class="hljs-operator">/</span> <span class="hljs-number">2</span>) <span class="hljs-operator">*</span> sin(deltaLon <span class="hljs-operator">/</span> <span class="hljs-number">2</span>) <br>    <span class="hljs-keyword">let</span> c <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> atan2(sqrt(a), sqrt(<span class="hljs-number">1</span> <span class="hljs-operator">-</span> a)) <br>    <br>    <span class="hljs-comment">// 返回的距离单位为米 </span><br>    <span class="hljs-keyword">return</span> earthRadius <span class="hljs-operator">*</span> c <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>将经纬度转换成墨卡托投影坐标，然后通过 <code>MKMapPoint.distance</code> 计算两点的距离。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> coordinate1 <span class="hljs-operator">=</span> <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">28.209321</span>, longitude: <span class="hljs-number">112.843033</span>)<br><span class="hljs-keyword">let</span> coordinate2 <span class="hljs-operator">=</span> <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">28.209321</span>, longitude: <span class="hljs-number">112.843033</span>)<br><br><span class="hljs-keyword">let</span> point1: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(<span class="hljs-type">Coordinate1</span>)<br><span class="hljs-keyword">let</span> point2: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(<span class="hljs-type">Coordinate2</span>)<br><br><span class="hljs-keyword">let</span> distance <span class="hljs-operator">=</span> point1.distance(to: point2)<br></code></pre></td></tr></table></figure><h2 id="已知方向与距离，计算目标点的坐标"><a href="#已知方向与距离，计算目标点的坐标" class="headerlink" title="已知方向与距离，计算目标点的坐标"></a>已知方向与距离，计算目标点的坐标</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> Foundation<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">calculateNewLocation</span>(<span class="hljs-params">startLatitude</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">startLongitude</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">distanceInMeters</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">bearingInDegrees</span>: <span class="hljs-type">Double</span>) -&gt; (latitude: <span class="hljs-type">Double</span>, longitude: <span class="hljs-type">Double</span>) &#123;<br><br>    <span class="hljs-keyword">let</span> radiusOfEarth <span class="hljs-operator">=</span> <span class="hljs-number">6378137.0</span> <span class="hljs-comment">// 地球半径，单位米</span><br><br>    <span class="hljs-comment">// 将角度转换为弧度</span><br>    <span class="hljs-keyword">let</span> bearingRadians <span class="hljs-operator">=</span> bearingInDegrees <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">180.0</span><br><br>    <span class="hljs-comment">// 计算新的纬度和经度</span><br>    <span class="hljs-keyword">let</span> newLatitude <span class="hljs-operator">=</span> startLatitude <span class="hljs-operator">+</span> (distanceInMeters <span class="hljs-operator">*</span> cos(bearingRadians)) <span class="hljs-operator">/</span> (radiusOfEarth <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">180.0</span>)<br>    <span class="hljs-keyword">let</span> newLongitude <span class="hljs-operator">=</span> startLongitude <span class="hljs-operator">+</span> (distanceInMeters <span class="hljs-operator">*</span> sin(bearingRadians)) <span class="hljs-operator">/</span> (radiusOfEarth <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">180.0</span> <span class="hljs-operator">*</span> cos(startLatitude <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">180.0</span>))<br><br>    <span class="hljs-keyword">return</span> (latitude: newLatitude, longitude: newLongitude)<br>&#125;<br><br><span class="hljs-comment">// 示例用法</span><br><span class="hljs-keyword">let</span> startLat <span class="hljs-operator">=</span> <span class="hljs-number">22.302711</span>  <span class="hljs-comment">// 示例起始纬度 (香港)</span><br><span class="hljs-keyword">let</span> startLon <span class="hljs-operator">=</span> <span class="hljs-number">114.177216</span> <span class="hljs-comment">// 示例起始经度 (香港)</span><br><span class="hljs-keyword">let</span> distance <span class="hljs-operator">=</span> <span class="hljs-number">100.0</span>     <span class="hljs-comment">// 示例距离，100米</span><br><span class="hljs-keyword">let</span> bearing <span class="hljs-operator">=</span> <span class="hljs-number">45.0</span>       <span class="hljs-comment">// 示例方向，45度 (东北方向)</span><br><br><span class="hljs-keyword">let</span> newLocation <span class="hljs-operator">=</span> calculateNewLocation(startLatitude: startLat, startLongitude: startLon, distanceInMeters: distance, bearingInDegrees: bearing)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;起始点:  纬度: <span class="hljs-subst">\(startLat)</span>, 经度: <span class="hljs-subst">\(startLon)</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新点: 纬度: <span class="hljs-subst">\(newLocation.latitude)</span>, 经度: <span class="hljs-subst">\(newLocation.longitude)</span>&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 编译时自动 build canceled</title>
    <link href="/2025/01/11/Xcode-%E7%BC%96%E8%AF%91%E6%97%B6%E8%87%AA%E5%8A%A8-build-canceled/"/>
    <url>/2025/01/11/Xcode-%E7%BC%96%E8%AF%91%E6%97%B6%E8%87%AA%E5%8A%A8-build-canceled/</url>
    
    <content type="html"><![CDATA[<p>问题总结，版本号自动递增脚本导致的。</p><ol><li><a href="https://stackoverflow.com/questions/75797872/xcode-automatically-cancelled-custom-script-added-in-the-build-phase-of-a-projec">Xcode automatically cancelled custom script added in the build phase of a project closed</a></li><li><a href="https://forums.developer.apple.com/forums/thread/726830">Xcode automatically cancelled custom script which is added on build phase script</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 修改工程名称</title>
    <link href="/2025/01/09/Xcode-%E4%BF%AE%E6%94%B9%E5%B7%A5%E7%A8%8B%E5%90%8D%E7%A7%B0/"/>
    <url>/2025/01/09/Xcode-%E4%BF%AE%E6%94%B9%E5%B7%A5%E7%A8%8B%E5%90%8D%E7%A7%B0/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://wuotto.github.io/HomePage/2018/01/11/%E4%BF%AE%E6%94%B9Xcode%E5%B7%A5%E7%A8%8B%E5%90%8D%E7%A7%B0/">修改Xcode工程名称</a></li><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/xcode-change-name-of-project-%E6%9B%B4%E6%94%B9%E5%B0%88%E6%A1%88%E7%9A%84%E5%90%8D%E7%A8%B1-a68bf2add5d">Xcode Change Name of Project 更改專案的名稱</a></li><li><a href="https://www.cnblogs.com/hecanlin/p/17204345.html">XCode修改工程名(完美版)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 运行、编译按钮置灰的解决办法</title>
    <link href="/2025/01/09/Xcode-%E8%BF%90%E8%A1%8C%E3%80%81%E7%BC%96%E8%AF%91%E6%8C%89%E9%92%AE%E7%BD%AE%E7%81%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2025/01/09/Xcode-%E8%BF%90%E8%A1%8C%E3%80%81%E7%BC%96%E8%AF%91%E6%8C%89%E9%92%AE%E7%BD%AE%E7%81%B0%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在<strong>修改工程名称</strong>后，出现了标题描述的情况。</p><p>解决办法：在「Product - Scheme」中，删除原 Scheme，New 一个新的 Scheme。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 版本管理</title>
    <link href="/2025/01/09/Xcode-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <url>/2025/01/09/Xcode-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ul><li>‘A’ 新增。某文件后面有 “A” 标记，表示该文件是新添加的，已受 Git 管理。</li><li>‘D’ 删除。某文件后面有 “D” 标记，表示该文件在服务器上已被删除，这时update的话，可删除本地的文件。</li><li>‘M’ 修改。某文件后面有 “M” 标记，表示该文件已被修改</li><li>‘R’ 替代</li><li>‘C’ 冲突。某文件后面有 “C” 标记，表示该文件与服务器的文件冲突。</li><li>‘I’ 忽略</li><li>‘?’ 未受控。某文件后面有 “?” 标记，表示该文件是新添加的，并且脱离了 Git 的管理，首先需要 add，然后提交托管.（右键该文件 -&gt; source control -&gt; Add，这样该文件的标记就变为 “A”，然后提交托管）</li><li>‘!’ 丢失，一般是将受控文件直接删除导致</li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git push 出现错误 error: src refspec master does not match any</title>
    <link href="/2025/01/09/git-push-%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF-error-src-refspec-master-does-not-match-any/"/>
    <url>/2025/01/09/git-push-%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF-error-src-refspec-master-does-not-match-any/</url>
    
    <content type="html"><![CDATA[<p>使用指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin master<br></code></pre></td></tr></table></figure><p>出现标题所说报错。</p><p>问题在于分支名字不一样，仓库默认的是 main 分支。具体的原因：<a href="https://pages.carm.cc/doc/branch-main.html">为什么Git分支开始从“master”变为“main”了？</a></p><p>修改为 main 推送更新即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin main<br></code></pre></td></tr></table></figure><p>Ps：我之前在公司 gitee 仓库上传的项目是 master 分支，原因是手动设置了。如果没有手动设置 master 为默认分支，新建仓库时都是默认 main 分支。</p><p>另外：<a href="https://zhuanlan.zhihu.com/p/557304573">github问题：master和main分支合并</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 构建适用于 JSONEncoder 的[String: Any]格式</title>
    <link href="/2025/01/08/Swift-%E6%9E%84%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E-JSONEncoder-%E7%9A%84-String-Any-%E6%A0%BC%E5%BC%8F/"/>
    <url>/2025/01/08/Swift-%E6%9E%84%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E-JSONEncoder-%E7%9A%84-String-Any-%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>在对下面 json 数据使用 JSONEncoder 进行编码时</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xixi&quot;</span><br>        <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;male&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haha&quot;</span><br>        <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>会出现问题，具体代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">let</span> info: [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>报错提示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Type &#x27;User&#x27; does not conform to protocol &#x27;Decodable&#x27;<br>Type &#x27;User&#x27; does not conform to protocol &#x27;Encodable&#x27;<br></code></pre></td></tr></table></figure><p>问题出在 Any 上，下面这段代码很好解释：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;value1&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;value2&quot;</span>: <span class="hljs-string">&quot;String&quot;</span>]<br><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">JSONEncoder</span>().encode(data)<br><br><span class="hljs-comment">// 报错 Type &#x27;Any&#x27; cannot conform to &#x27;Encodable&#x27;</span><br></code></pre></td></tr></table></figure><p>此时，可以使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">JSONSerialization</span>.data(withJSONObject: data)<br></code></pre></td></tr></table></figure><p>按照这个思路，可以：</p><h2 id="1-使用-JSONSerialization"><a href="#1-使用-JSONSerialization" class="headerlink" title="1.使用 JSONSerialization"></a>1.使用 JSONSerialization</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">let</span> info: <span class="hljs-type">Data</span><br>&#125;<br><br><span class="hljs-keyword">let</span> info <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;sex&quot;</span>: <span class="hljs-string">&quot;male&quot;</span>] <span class="hljs-keyword">as</span> [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>]<br><span class="hljs-keyword">let</span> infoData <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">JSONSerialization</span>.data(withJSONObject: info)        <br><span class="hljs-keyword">let</span> user <span class="hljs-operator">=</span> <span class="hljs-type">User</span>(name: <span class="hljs-string">&quot;xixi&quot;</span>, info: infoData)<br><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">JSONEncoder</span>().encode(user)<br></code></pre></td></tr></table></figure><p>不过我不想用 JSONSerialization，还是想继续使用 JSONEncoder。</p><h2 id="2-继续使用-JSONEncoder"><a href="#2-继续使用-JSONEncoder" class="headerlink" title="2.继续使用 JSONEncoder"></a>2.继续使用 JSONEncoder</h2><p>使用 JSONEncoder 最的问题其实有 2 个：</p><ol><li>info 中包括了 Int 和 String，上面已经知道 Any 不可行；</li><li>info 中的键值对是不固定的。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">let</span> info: [<span class="hljs-type">InfoItem</span>]<br>    <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">InfoItem</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>        <span class="hljs-keyword">let</span> age: <span class="hljs-type">Int</span>?<br>        <span class="hljs-keyword">let</span> sex: <span class="hljs-type">String</span>?<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> info: [<span class="hljs-type">InfoItem</span>] <span class="hljs-operator">=</span> []<br><br><span class="hljs-keyword">let</span> info1 <span class="hljs-operator">=</span> <span class="hljs-type">InfoItem</span>(age: <span class="hljs-number">18</span>)<br>info.append(info1)<br><span class="hljs-keyword">let</span> info2 <span class="hljs-operator">=</span> <span class="hljs-type">InfoItem</span>(sex: <span class="hljs-string">&quot;male&quot;</span>)<br>info.append(info2)<br><br><span class="hljs-keyword">let</span> user <span class="hljs-operator">=</span> <span class="hljs-type">User</span>(name: <span class="hljs-string">&quot;xixi&quot;</span>, info: info)<br><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">JSONEncoder</span>().encode(user)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora 自定义主题</title>
    <link href="/2025/01/07/Typora-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98/"/>
    <url>/2025/01/07/Typora-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><p><a href="https://sspai.com/post/59450">如何自定义你的 typora 主题，以少数派为例</a></p><p>在 <code>font-family</code> 中定义了取用的字体。如果英文表达中有空格则需要引号包裹，否则不需要，会按照定义的顺序去查找字体，直到找到为止，否则取用默认字体。</p><p>这里建议先定义英文字体，再定义中文。因为中文字体中一般是含有字母的，那么会直接取用到中文的字体，英文效果比较差。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">100</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMonoNL-Thin&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-Thin.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">100</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMonoNL-ThinItalic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-ThinItalic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMonoNL-ExtraLight&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-ExtraLight.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMonoNL-ExtraLightItalic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-ExtraLightItalic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMonoNL-Light&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-Light.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-LightItalic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-LightItalic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMonoNL-Regular&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-Regular.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-Italic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-Italic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-Medium&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-Medium.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-MediumItalic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-MediumItalic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-Bold&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-Bold.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-BoldItalic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-BoldItalic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-ExtraBold&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-ExtraBold.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>;<br>    <span class="hljs-attribute">font-style</span>: italic;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">local</span>(<span class="hljs-string">&#x27;JetBrainsMono-ExtraBoldItalic&#x27;</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;misty/JetBrainsMonoNL-ExtraBoldItalic.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;JetBrains Mono&#x27;</span>, -apple-system, sans-serif;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#a9b7c6</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.7</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span><br><span class="hljs-comment">/* font-style: italic */</span><br><span class="hljs-comment">/* font-size: 1em */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p><strong>100 to 900、normal、bold</strong></p><p>100～900 来划分其字重(字体的粗细度)，与字体的字重则一一对应。并且 normal 等价于 400，bold 等价于 700。</p><p>常见的字重数值大致对应的字重描述词语:</p><ul><li>100 - Thin</li><li>200 - Extra Light (Ultra Light)</li><li>300 - Light</li><li>400 - Normal</li><li>500 - Medium</li><li>600 - Semi Bold (Demi Bold)</li><li>700 - Bold</li><li>800 - Extra Bold (Ultra Bold)</li><li>900 - Black (Heavy)</li></ul><blockquote><p>注意：bolder和lighter没有对应的数字，为什么呢？因为它们俩是相对父元素而言的。 例如：如果父元素设置的是font-weight:200; 子元素我设置为font-weight:bolder; 那么你在浏览器上查看的时候你会发 现最后显示就变成了normal的效果。因为bolder是相对父级元素而言的。同理lighter也是如此。</p></blockquote><h4 id="font-weight-设置失效"><a href="#font-weight-设置失效" class="headerlink" title="font-weight 设置失效"></a>font-weight 设置失效</h4><p>通常情况下，一个特定的字体仅会包含少数的可用字重。若所指定的字重不存在直接匹配，则会通过字体匹配算法规则匹配使用邻近的可用字重<strong>。</strong>这也就是为什么我们有时候使用特定字重时没有“生效”，看起来跟其它字重差不多的原因所在。</p><p><a href="https://cloud.tencent.com/developer/article/2144106">记录一次关于css font-weight引发的风波</a></p><blockquote><p>我们都知道，在 css 中，可以通过 font-family 指定不同的字体，并且可以给定一个先后顺序，由字体名或者字体族名组成。当指定的的字体找不到的时候，浏览器会按照 font-family 属性指定的先后顺序寻找支持的字体。</p><p>在 CSS 中，可以通过 font-weight 属性指定了字体的粗细程度，但是不同字体支持的字重不同，比如说有些字体可能只支持400,700两个权重，如果指定的权重值不可用，浏览器需要靠字重的回退机制去解决。</p><p><strong>如果指定的权重值在  <code>400</code>和  <code>500</code>之间（包括<code>400</code>和<code>500</code>）：</strong></p><ul><li>按升序查找指定值与<code>500</code>之间的可用权重;</li><li>如果未找到匹配项，按<strong>降序</strong>查找小于指定值的可用权重；</li><li>如果未找到匹配项，按<strong>升序</strong>查找大于<code>500</code>的可用权重。</li></ul><p><strong>如果指定值小于<code>400</code></strong></p><ul><li>按<strong>降序</strong>查找小于指定值的可用权重。 如果未找到匹配项，按<strong>升序</strong>查找大于指定值的可用权重（先尽可能的小，再尽可能的大）。</li></ul><p><strong>如果指定值大于<code>500</code></strong></p><ul><li>按<strong>升序</strong>查找大于指定值的可用权重。 如果未找到匹配项，按<strong>降序</strong>查找小于指定值的可用权重（先尽可能的大，再尽可能的小）。</li></ul></blockquote><p><a href="https://blog.csdn.net/qq_32102987/article/details/134807618">font-weight设置了为什么没生效</a></p><blockquote><p><strong>字体匹配算法</strong></p><p>选择字体的程度包括迭代由 <code>font-family</code> 属性所确定的字体家族、基于其他属性选择适当的字体外观以及确定指定字符对于的字形是否存在。</p><ol><li>使用指定元素上字体属性计算后的值，用户代理从由 <code>font-family</code> 属性所指定的字体列表中的第一个自己家族名开始。</li><li>如果家族名称没有被引号括起，且它是一个通用家族名称，则用户代理查找将要使用的恰当的字体家族名。用户代理可以基于包含元素的语言或字符的 Unicode 范围选择通用字体家族。</li><li>对于其他家族名称，用户代理尝试在 @font-face 规则中查找该家族名称，之后继续在可用系统字体中查找。名称匹配不区分大小写。在字体包含多种本地化字体家族名称的系统中，用户代理必须在匹配这些名称时独立于底层系统的语言或所使用的平台 API。如果一个由 @font-face 规则定义的字体家族仅包含无效的字体数据，则它应当被认为是一个存在的但包含空的字符映射的字体；在此情况下，拥有相同名称的平台字体不能匹配。</li><li>如果一个字体家族成功匹配，用户代理组合包含字符的字形的家族中的字体外观集。之后逐步的根据下面给出的顺序使用其他字体属性匹配一个外观：<ol><li>首先尝试 <code>font-stretch</code>。如果匹配集中包含宽度指匹配 <code>font-stretch</code> 值的外观，则从匹配集中删除拥有其他宽度值的字形。如果没有精确匹配该宽度值的外观，则使用相近的宽度。如果 <code>font-stretch</code> 为 <code>normal</code> 或收缩比例值之一，则首先检查较窄的宽度值，之后检查较宽的宽度值。如果 <code>font-stretch</code> 的值是扩大比例值之一，则首先检查较宽的宽度值，之后检查较窄的宽度值。一旦通过此过程确定了最近匹配的宽度，则从匹配集中删除其他宽度的外观。</li><li>之后尝试 <code>font-style</code>。如果 <code>font-style</code> 的值是 <code>italic</code>，则首先检查斜体外观，之后检查倾斜，然后检查正常外观。如果值为 <code>oblique</code>，则首先检查倾斜外观，之后检查斜体外观，然后检查正常外观。如果值为 <code>normal</code>，则首先检查正常外观，之后检查倾斜外观，然后检查斜体外观。从匹配集中删除拥有其他样式值的外观。我们允许用户代理在平台字体家族中区分斜体和倾斜外观，但这不是必须的，用户代理可以将斜体或倾斜外观都视为斜体外观。但是，在由 @font-face 规则定义的字体家族中，斜体和倾斜外观必须使用 <code>font-style</code> 描述符进行区分。</li><li>之后匹配 <code>font-weight</code>，它总能将匹配集缩小为一个字体外观。如果使用了更大&#x2F;更小相对重量，则基于继承的重量值计算有效重量，相关信息在 <code>font-weight</code> 属性的定义中描述。给定需要的重量和经过之前各步之后匹配集中外观的宽度，如果需要的重量可用，则匹配该外观。否则，使用下面的规则选择一个重量：<ol><li>如果需要的重量小于400，则首先降序检查小于所需重量的各重量，之后升序检查大于所需重量的各重量，直到找到匹配的重量。</li><li>如果需要的重量大于500，则首先升序检查大于所需重量的各重量，之后降序检查小于所需重量的各重量，直到找到匹配的重量。</li><li>如果所需的重量是400，则首先检查500，之后执行所需重量小于400的规则。</li><li>如果所需的重量是500，则首先检查400，之后执行所需重量大于500的规则。</li></ol></li><li><code>font-size</code> 必须在用户代理决定的容差边距中匹配。（典型的，可缩放字体被四舍五入到最近的整数像素，而点阵字体的容差可以到 20%。）进一步的计算（如其他属性中的“em”值）是基于使用的 <code>font-size</code> 值，而不是指定的值。</li><li>如果没有匹配的外观，或者匹配的外观不包含需要显示的字符的字形，则选择下一个家族名称，并重复前面两步。如果匹配的字体是使用 @font-face 规则定义的，则下载字体资源。如果匹配的字体是使用 @font-face 规则定义的且需要下载，则用户代理可以等待字体下载也可以先使用替代字体显示然后在字体下载之后再一次显示。</li><li>如果没有可考虑的字体家族，而且没有找到匹配的外观，则用户代理执行系统备用字体过程来查找用于显示的最佳匹配字符。这个过程的结果可能会因用户代理而不同。</li><li>如果个别字符不能使用任何字体显示，则用户代理应当使用某些方法表示该字体不能显示，可以显示一个表示缺少字形的符号（例如使用 Last Resort Font）或者使用默认字体中的缺失字符字形。</li></ol></li></ol></blockquote><h2 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#write</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1280px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-comment">/* padding: 20px 30px 100px */</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">36px</span> <span class="hljs-number">0</span> <span class="hljs-number">70px</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI ScrollView 合集</title>
    <link href="/2025/01/07/SwiftUI-ScrollView-%E5%90%88%E9%9B%86/"/>
    <url>/2025/01/07/SwiftUI-ScrollView-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="reader-scrollTo"><a href="#reader-scrollTo" class="headerlink" title="reader.scrollTo"></a>reader.scrollTo</h2><ol><li><a href="https://stackoverflow.com/questions/59080859/swiftui-how-to-scroll-to-the-top">SwiftUI, How to scroll to the top?</a></li><li><a href="https://stackoverflow.com/questions/64921390/swiftui-scrollview-scroll-to-bottom-of-list">Swiftui Scrollview scroll to bottom of list</a></li><li><a href="https://stackoverflow.com/questions/58376681/swiftui-automatically-scroll-to-bottom-in-scrollview-bottom-first">SwiftUI automatically scroll to bottom in ScrollView (Bottom first)</a></li><li><a href="http://123.57.164.21/?p=227">SwiftUI ScrollView通过代码滚动</a></li></ol><h2 id="滚动位置"><a href="#滚动位置" class="headerlink" title="滚动位置"></a>滚动位置</h2><ol><li><a href="https://stackoverflow.com/questions/62588015/get-the-current-scroll-position-of-a-swiftui-scrollview">Get the current scroll position of a SwiftUI ScrollView</a></li><li><a href="https://stackoverflow.com/questions/65062590/swiftui-detect-when-scrollview-has-finished-scrolling">SwiftUI - Detect when ScrollView has finished scrolling?</a></li><li><a href="https://blog.csdn.net/guoyongming925/article/details/132853536">SwiftUI之判断ScrollView是否滑动到底部及ChildSizeReader的使用</a></li></ol><h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><p><a href="https://fatbobman.com/zh/posts/how_to_judge_scrollview_is_scrolling/">如何判断 ScrollView、List 是否正在滚动中</a></p><p><a href="https://fatbobman.com/zh/posts/mastering-swiftui-scrolling-implementing-custom-paging/">精确掌控 SwiftUI 滚动：自定义 Paging 实现</a></p><p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-scrollview-%E7%9A%84%E6%8D%B2%E5%8B%95%E6%96%B9%E5%90%91-68027d8bdf0f">SwiftUI ScrollView 的捲動方向</a></p><p><a href="https://fatbobman.com/zh/posts/new-features-of-scrollview-in-swiftui5/">深入了解 SwiftUI 5 中 ScrollView 的新功能</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMU 精度问题</title>
    <link href="/2025/01/07/IMU-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/07/IMU-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li>动态情况下，所有纯惯导在地下几乎做不到 1cm 定位精度，谈不上保精度导航时长；</li><li>1cm 左右的检测任务，大概率需要以相机或激光反射仪等高精度测量为输入，结合深度学习算法来做，如果是移动机器人或小车，可能还需要 SLAM 技术</li></ol><p>具体分析如下：</p><ol><li><strong>纯惯导</strong>：如果是军用，纯惯导（Inertial Navigation System, INS）精度一般是米或海里这种级别，短时工作的可以到分米级别，很少用厘米来衡量；如果是民用，纯惯导几乎没办法做到1厘米这个精度；</li><li><strong>融合定位</strong>：惯性传感器（Inertial Measurement Unit，IMU）与其他传感器（camera、lidar、RTK 等）融合能做到厘米级别，5<del>10cm 还是可以的，但要 1cm 绝对精度，即使融合定位也很难做到，毕竟 RTK 作为最普遍的绝对定位神器，典型精度也是 5</del>10cm，况且地下收不到卫星信号；</li><li>如果是一些巡检类的应用，能做到 1cm 精度的应该是以 camera、激光&#x2F;红外反射镜等传感器为主的方案，很难以 IMU 为主设计方案，举一个使用 camera 做检测的例子：通过单目或多目的 camera 拍摄被检测目标，然后通过摄影几何算法计算感兴趣区域（可以结合深度学习检测感兴趣区域）的目标精度是否在 1cm 以内，当然，camera 可能是放在移动设备上的，可以融合 IMU，提高自身定位精度和鲁棒性，从而提高检测的准确率。</li></ol><h2 id="高精度（gyros-bias-0-1deg-hour）"><a href="#高精度（gyros-bias-0-1deg-hour）" class="headerlink" title="高精度（gyros bias &lt; 0.1deg&#x2F;hour）"></a>高精度（gyros bias &lt; 0.1deg&#x2F;hour）</h2><ol><li>使用激光陀螺&#x2F;静电陀螺&#x2F;光纤陀螺&#x2F;液浮陀螺，前些年也有一些冷原子陀螺研究，价钱在数万到数百万不等；</li><li>高精度惯导主要是军用，从保精度导航时长来看大概是：潜艇&gt;舰艇&gt;飞机&gt;导弹，潜艇水下工作时间最长，精度要求最高，保精度工作时长一般以周&#x2F;月为单位，飞机&#x2F;导弹更多追求高动态性能（例如：高过载、高旋转），保精度工作时长一般以小时计；</li><li>一般以舰艇的精度作为典型值，陀螺仪精度约 0.01deg&#x2F;hour，误差发散约为 1 海里 &#x2F;1 小时（1nmile&#x2F;1hour，大约 1 小时发散 1852 米），加上旋转调制，精度会显著提升，典型值可能是 1nmile&#x2F;24h；</li><li>曾经有资料中提到美军的双轴旋转式惯导精度大概是 3 天 1 海里或者 7 天 1 海里，陀螺仪的精度一般在 0.005deg&#x2F;hour 这样量级，即使不是最高精度的 INS，也已经是非常头部的了；</li></ol><h2 id="中精度（gyros-bias-0-1deg-s）"><a href="#中精度（gyros-bias-0-1deg-s）" class="headerlink" title="中精度（gyros bias ~ 0.1deg&#x2F;s）"></a>中精度（gyros bias ~ 0.1deg&#x2F;s）</h2><ol><li>使用精度较高的 MEMS 惯性传感器，大概 ￥1K 左右或更贵，也有一些光学的中精度惯性器件;</li><li>中精度惯导主要是民用，保精度导航时长以分钟计，一般用在测绘车、自动&#x2F;智能驾驶、无人机、AR&#x2F;VR、特种操控设备等领域;</li><li>这些惯导主要用于姿态测量、提高融合定位的鲁棒性，较少单独使用;</li><li>常用IMU型号如：BMI088、BMI055、ADI 16470等；</li></ol><h2 id="低精度-（gyros-bias-1deg-s）"><a href="#低精度-（gyros-bias-1deg-s）" class="headerlink" title="低精度 （gyros bias &gt; 1deg&#x2F;s）"></a>低精度 （gyros bias &gt; 1deg&#x2F;s）</h2><ol><li>使用普通的 MEME 惯性传感器，一般低于 ￥1000，量大的话可能几块钱一枚；</li><li>低精度惯导的应用场景就非常普遍了，从 iphone 4s 将 IMU 带给普罗大众开始，几乎所有智能手机都将 IMU 作为标配，摇一摇&#x2F;防抖&#x2F;健康统计(步行跑步的检测）&#x2F;屏幕旋转等等应用遍地开花，除了智能手机、智能手环，还有很多日常使用的设备上都有 IMU；</li><li>低精度惯导主要用于姿态测量、融合定位、状态检测，一般不会谈到保精度导航时长，几秒钟就发散到 m 级误差了；</li><li>常用IMU型号如：BMI160</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 打开多个窗口</title>
    <link href="/2025/01/07/Xcode-%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E7%AA%97%E5%8F%A3/"/>
    <url>/2025/01/07/Xcode-%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>command + T</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」Swift Equatable &amp; Hashable 通用协议</title>
    <link href="/2024/12/20/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSwift-Equatable-Hashable-%E9%80%9A%E7%94%A8%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/12/20/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSwift-Equatable-Hashable-%E9%80%9A%E7%94%A8%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://blog.csdn.net/qq_28323373/article/details/102310403">Swift 自定义结构体和类应该遵循的通用协议</a></p><h2 id="Equatable-Hashable"><a href="#Equatable-Hashable" class="headerlink" title="Equatable &amp; Hashable"></a>Equatable &amp; Hashable</h2><p>使用自定义类型对程序中的数据进行建模时，可能经常需要检查两个值是否相同或不同，或者值列表中是否包含特定值。 此功能以及将值存储在集合中或用作字典中的键的功能受两个相关的标准库协议Equatable和Hashable约束。</p><p>你可以使用等于（&#x3D;&#x3D;）和非等于（！&#x3D;）运算符比较等于类型的实例。</p><p>可散列类型的实例可以在数学上将其值减小为单个整数，集合和字典在内部使用该整数来快速一致地进行查找。</p><p>许多标准库类型都是可等于和可哈希的，包括字符串，整数，浮点值，布尔值以及可等于和可哈希的类型的集合。 在下面的示例中，&#x3D;&#x3D;比较和contains（_ :)方法调用取决于相等的字符串和整数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> username <span class="hljs-operator">==</span> <span class="hljs-string">&quot;Arturo&quot;</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi, Arturo!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> favoriteNumbers <span class="hljs-operator">=</span> [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> favoriteNumbers.contains(todaysDate.day) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;It&#x27;s a good day today!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>遵循Equatable和Hashable协议非常简单，可以轻松地在Swift中使用您自己的类型。 对于所有自定义模型类型而言，这都是一个好主意。</p><h2 id="自动遵循Equatable和Hashable"><a href="#自动遵循Equatable和Hashable" class="headerlink" title="自动遵循Equatable和Hashable"></a>自动遵循Equatable和Hashable</h2><p>您可以通过简单地在与类型的原始声明相同的文件中声明这些协议一致性，来使许多自定义类型可等于和可哈希化。 在声明类型时，将Equatable和Hashable添加到采用的协议列表中，然后编译器自动填写这两个协议的要求：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// A position in an x-y coordinate system.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Position</span>: <span class="hljs-title class_ inherited__">Equatable</span>, <span class="hljs-title class_ inherited__">Hashable</span> &#123;<br>    <span class="hljs-keyword">var</span> x: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">var</span> y: <span class="hljs-type">Int</span><br>    <br>    <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">y</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.x <span class="hljs-operator">=</span> x<br>        <span class="hljs-keyword">self</span>.y <span class="hljs-operator">=</span> y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Equatable一致性，您可以将等于运算符（&#x3D;&#x3D;）或不等于运算符（！&#x3D;）与Position类型的任意两个实例一起使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> availablePositions <span class="hljs-operator">=</span> [<span class="hljs-type">Position</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-type">Position</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), <span class="hljs-type">Position</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]<br><span class="hljs-keyword">let</span> gemPosition <span class="hljs-operator">=</span> <span class="hljs-type">Position</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">for</span> position <span class="hljs-keyword">in</span> availablePositions &#123;<br>    <span class="hljs-keyword">if</span> gemPosition <span class="hljs-operator">==</span> position &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Gem found at (<span class="hljs-subst">\(position.x)</span>, <span class="hljs-subst">\(position.y)</span>)!&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No gem at (<span class="hljs-subst">\(position.x)</span>, <span class="hljs-subst">\(position.y)</span>)&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// No gem at (0, 0)</span><br><span class="hljs-comment">// No gem at (0, 1)</span><br><span class="hljs-comment">// Gem found at (1, 0)!</span><br></code></pre></td></tr></table></figure><p>可散列的一致性意味着您可以将职位存储在集合中，并快速检查您之前是否访问过职位，如以下示例所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> visitedPositions: <span class="hljs-type">Set</span> <span class="hljs-operator">=</span> [<span class="hljs-type">Position</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-type">Position</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]<br><span class="hljs-keyword">let</span> currentPosition <span class="hljs-operator">=</span> <span class="hljs-type">Position</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">if</span> visitedPositions.contains(currentPosition) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Already visited (<span class="hljs-subst">\(currentPosition.x)</span>, <span class="hljs-subst">\(currentPosition.y)</span>)&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;First time at (<span class="hljs-subst">\(currentPosition.x)</span>, <span class="hljs-subst">\(currentPosition.y)</span>)&quot;</span>)<br>    visitedPositions.insert(currentPosition)<br>&#125;<br><span class="hljs-comment">// First time at (1, 3)</span><br></code></pre></td></tr></table></figure><p>除了简化代码外，这种自动一致性还减少了错误，因为在哈希和测试相等性时会自动包括添加到自定义类型的任何新属性。 如果类型是满足以下条件的结构或枚举，则该类型可自动符合Equatable和Hashable：</p><p>对于结构，其所有存储的属性必须符合Equatable和Hashable。</p><p>对于枚举，其所有关联值必须符合Equatable和Hashable。 （没有关联值的枚举即使没有声明采用也具有Equatable和Hashable一致性。）</p><h2 id="手动遵循-Equatable-Hashable"><a href="#手动遵循-Equatable-Hashable" class="headerlink" title="手动遵循 Equatable &amp; Hashable"></a>手动遵循 Equatable &amp; Hashable</h2><p>在以下情况下，您需要为类型手动实现Equatable和Hashable一致性：</p><p>该类型不符合上一节中列出的条件。</p><p>您要自定义类型的一致性。</p><p>您要扩展在另一个文件或模块中声明的类型以使其符合标准。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> &#123;<br>    <span class="hljs-keyword">var</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> position: <span class="hljs-type">Position</span><br>    <br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">position</span>: <span class="hljs-type">Position</span>) &#123;<br>        <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> name<br>        <span class="hljs-keyword">self</span>.position <span class="hljs-operator">=</span> position<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Player类型是一个类，因此不符合自动合成Equatable或Hashable要求的条件。 要使此类符合Equatable协议，请在扩展中声明符合性并实现静态&#x3D;&#x3D; 运算符方法。 比较 &#x3D;&#x3D;方法实现中每个重要属性的相等性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Player</span>: <span class="hljs-title class_ inherited__">Equatable</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">==</span>(<span class="hljs-params">lhs</span>: <span class="hljs-type">Player</span>, <span class="hljs-params">rhs</span>: <span class="hljs-type">Player</span>) -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">return</span> lhs.name <span class="hljs-operator">==</span> rhs.name <span class="hljs-operator">&amp;&amp;</span> lhs.position <span class="hljs-operator">==</span> rhs.position<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了使Player符合Hashable协议，请在另一个扩展中声明符合性并实现hash（into :)方法。 在hash（into :)方法中，对提供的具有每个重要属性的哈希器调用Combine（_ :)方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Player</span>: <span class="hljs-title class_ inherited__">Hashable</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">hash</span>(<span class="hljs-params">into</span> <span class="hljs-params">hasher</span>: <span class="hljs-keyword">inout</span> <span class="hljs-type">Hasher</span>) &#123;<br>        hasher.combine(name)<br>        hasher.combine(position)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将所有重要属性用于Equatable-Hashable"><a href="#将所有重要属性用于Equatable-Hashable" class="headerlink" title="将所有重要属性用于Equatable&amp;Hashable"></a>将所有重要属性用于Equatable&amp;Hashable</h2><p>在实现&#x3D;&#x3D;方法和hash(into :)方法时，请使用所有会影响自定义类型的两个实例是否相等的属性。 在上面的实现中，Player类型在两种方法中都使用名称和位置。</p><p>如果您的类型包含不会影响两个实例是否相等的属性，请在&#x3D;&#x3D;方法中进行比较，并从hash（into :)中的哈希中排除这些属性。 例如，一种类型可能会缓存一个昂贵的计算值，因此它只需要计算一次即可。 如果比较该类型的两个实例，则是否已缓存计算值不会影响它们的相等性，因此应将缓存值排除在比较和哈希之外。</p><p><strong>在&#x3D;&#x3D;和hash（into :)方法中始终使用相同的属性。 在集合和字典中使用自定义类型时，在两种方法中使用不同的属性组可能导致意外的行为或性能。</strong></p><h2 id="自定义NSObject子类行为"><a href="#自定义NSObject子类行为" class="headerlink" title="自定义NSObject子类行为"></a>自定义NSObject子类行为</h2><p>NSObject子类继承对Equatable和Hashable协议的一致性，并基于实例身份进行相等性处理。 如果需要自定义此行为，请重写isEqual（_ :)方法和hash属性，而不要使用&#x3D;&#x3D;运算符方法和hashValue属性。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">MyNSObjectSubclass</span> &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">isEqual</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">object</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>) -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> other <span class="hljs-operator">=</span> object <span class="hljs-keyword">as?</span> <span class="hljs-type">MyNSObjectSubclass</span><br>            <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.firstProperty <span class="hljs-operator">==</span> other.firstProperty <br>            <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-keyword">self</span>.secondProperty <span class="hljs-operator">==</span> other.secondProperty<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">var</span> hash: <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> hasher <span class="hljs-operator">=</span> <span class="hljs-type">Hasher</span>()<br>        hasher.combine(firstProperty)<br>        hasher.combine(secondProperty)<br>        <span class="hljs-keyword">return</span> hasher.finalize()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如前一节所述，被认为相等的两个实例必须具有相同的哈希值。 如果您覆盖这些声明之一，则也必须覆盖另一个声明以维持该保证。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Equatable 与 Hashable 协议</title>
    <link href="/2024/12/19/SwiftUI-Equatable-%E4%B8%8E-Hashable-%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/12/19/SwiftUI-Equatable-%E4%B8%8E-Hashable-%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>当我们用实例作为 tag 时，可能会出现这样的报错：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Instance <span class="hljs-keyword">method</span> &#x27;<span class="hljs-title function_">tag</span>&#x27; <span class="hljs-title function_">requires</span> <span class="hljs-title function_">that</span> &#x27;<span class="hljs-title function_">Class</span>&#x27; <span class="hljs-title function_">conform</span> <span class="hljs-title function_">to</span> &#x27;<span class="hljs-title function_">Hashable</span>&#x27;<br></code></pre></td></tr></table></figure><p>当我们对结构体使用 <code>onChang()</code> 的时候，可能会出现这样的报错：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Referencing instance <span class="hljs-keyword">method</span> &#x27;<span class="hljs-title function_">onChange</span><span class="hljs-params">(<span class="hljs-keyword">of</span>:initial:_:)</span>&#x27; <span class="hljs-title function_">on</span> &#x27;<span class="hljs-title function_">Optional</span>&#x27; <span class="hljs-title function_">requires</span> <span class="hljs-title function_">that</span> &#x27;<span class="hljs-title function_">Struct</span>&#x27; <span class="hljs-title function_">conform</span> <span class="hljs-title function_">to</span> &#x27;<span class="hljs-title function_">Equatable</span>&#x27;<br></code></pre></td></tr></table></figure><p>这些问题在使用 SwiftData 的时候不会存在——SwiftData 可以使用等于（&#x3D;&#x3D;）和非等于（！&#x3D;）运算符比较等于类型的实例。</p><p>原因是：</p><ol><li><a href="https://blog.csdn.net/qq_28323373/article/details/102310403">Swift 自定义结构体和类应该遵循的通用协议</a></li><li><a href="https://www.hackingwithswift.com/example-code/language/how-to-conform-to-the-equatable-protocol">How to conform to the Equatable protocol</a></li><li><a href="https://stackoverflow.com/questions/37541512/swift-struct-doesnt-conform-to-protocol-equatable">Swift Struct doesn’t conform to protocol Equatable?</a></li><li><a href="https://wonderhoi.com/2024/12/11/%E5%9C%A8-SwiftData-%E4%B8%AD%E4%BD%BF%E7%94%A8-CLLocationCoordinate2D-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">在 SwiftData 中使用 CLLocationCoordinate2D 数据类型</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 删除所选 List row</title>
    <link href="/2024/12/19/macOS-%E5%88%A0%E9%99%A4%E6%89%80%E9%80%89-List-row/"/>
    <url>/2024/12/19/macOS-%E5%88%A0%E9%99%A4%E6%89%80%E9%80%89-List-row/</url>
    
    <content type="html"><![CDATA[<h2 id="双击-List-row-删除"><a href="#双击-List-row-删除" class="headerlink" title="双击 List row 删除"></a>双击 List row 删除</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span>(selection: <span class="hljs-variable">$selection</span>) &#123;<br>    <span class="hljs-type">ForEach</span>(items, id: \.<span class="hljs-keyword">self</span>) &#123; item <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Text</span>(item)<br>            .contextMenu &#123;<br>                <span class="hljs-type">Button</span>(action: &#123;<br>                    <span class="hljs-comment">// delete item in items array</span><br>                &#125;)&#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Delete&quot;</span>)<br>                &#125;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/59765271/swiftui-on-macos-how-to-enable-ui-for-ondelete-deletion-from-list">SwiftUI on macOS: How to enable UI for onDelete (deletion from List)</a></p><h2 id="通过按钮删除"><a href="#通过按钮删除" class="headerlink" title="通过按钮删除"></a>通过按钮删除</h2><p><a href="https://stackoverflow.com/questions/76456703/macos-swiftui-how-to-trigger-deleting-an-item">macOS SwiftUI: how to trigger deleting an item?</a></p><h2 id="通过-onDeleteCommand-删除"><a href="#通过-onDeleteCommand-删除" class="headerlink" title="通过 onDeleteCommand 删除"></a>通过 <code>onDeleteCommand</code> 删除</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;Item1&quot;</span>, <span class="hljs-string">&quot;Item2&quot;</span>, <span class="hljs-string">&quot;Item3&quot;</span>]<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> selection: <span class="hljs-type">Set</span>&lt;<span class="hljs-type">String</span>&gt; <span class="hljs-operator">=</span> []<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> lastForcedId <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">NavigationView</span> &#123;<br>            <span class="hljs-type">List</span>(data, id: \.<span class="hljs-keyword">self</span>, selection: <span class="hljs-variable">$selection</span>) &#123; item <span class="hljs-keyword">in</span><br>                <span class="hljs-type">Text</span>(item)<br>            &#125;<br>            .onDeleteCommand &#123;<br>                data.removeAll(where: selection.contains) <span class="hljs-comment">// Removes selected items</span><br>                selection.removeAll()<br>                lastForcedId <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()<br>            &#125;<br>            .id(lastForcedId)<span class="hljs-comment">// Update View</span><br><br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Second Panel&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/68840131/ondeletecommand-menu-item-is-always-enabled">onDeleteCommand menu item is always enabled</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>App Icon 生成</title>
    <link href="/2024/12/19/App-Icon-%E7%94%9F%E6%88%90/"/>
    <url>/2024/12/19/App-Icon-%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>在 iOS 上，现在已经不用各种尺寸 App Icon 了，只需要一张 1024x1024 的 App Icon 图片即可。</p><p>参考：<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E5%88%A9%E7%94%A8-1024x1024-%E7%9A%84%E5%9C%96%E7%89%87%E8%A8%AD%E5%AE%9A-app-icon-xcode-14-%E6%96%B0%E5%8A%9F%E8%83%BD-b140cdd776c5">從 Xcode 設定 iOS App Icon</a></p><p>但是在 macOS 上的 App 还是需要 11 个不同尺寸的 App Icon。下面网站，只需要提供一张 1024x1024 的 App Icon 就能生成其它尺寸的 App Icon。</p><ol><li><a href="https://www.appicon.co/#app-icon">App icon Generator</a></li><li><a href="https://icon.wuruihong.com/">一键生成所有尺寸的应用图标</a></li></ol><h2 id="圆角的问题"><a href="#圆角的问题" class="headerlink" title="圆角的问题"></a>圆角的问题</h2><ol><li><a href="https://stackoverflow.com/questions/71118094/why-is-my-app-icon-bigger-than-the-others-in-the-macos-dock">Why is my app icon bigger than the others in the macOS dock?</a></li><li><a href="https://wenge365.com/a/Vi9FUHFsd2k0SndqQ2RCd2l0bHhOUT09.html">macOS App 圆角AppIcon</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 求正六边形网格中颜色相同且相邻的正六边形数量（递归）</title>
    <link href="/2024/12/12/Swift-%E6%B1%82%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2%E7%BD%91%E6%A0%BC%E4%B8%AD%E9%A2%9C%E8%89%B2%E7%9B%B8%E5%90%8C%E4%B8%94%E7%9B%B8%E9%82%BB%E7%9A%84%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%95%B0%E9%87%8F/"/>
    <url>/2024/12/12/Swift-%E6%B1%82%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2%E7%BD%91%E6%A0%BC%E4%B8%AD%E9%A2%9C%E8%89%B2%E7%9B%B8%E5%90%8C%E4%B8%94%E7%9B%B8%E9%82%BB%E7%9A%84%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>如图所示，蓝色正六边形族的数量应该是 4 和 2。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/121202.png"></p><p>下面介绍 Swift 代码的实现办法。</p><p>首先为正六边形进行编号，如图：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/121203.png"></p><p>再为每个正六边形关联相邻的六边形，例如</p><ul><li>1 - 2, 3, 4</li><li>2 - 1, 4, 6</li></ul><p>关联好之后，以 1 号六边形为例：</p><ol><li>将 1 号加入 check 数组 -&gt; [1]</li><li>遍历 check 数组，将 1 号加入 blue 数组 -&gt; [1]；将 1 号加入 checked 数组 -&gt; [1]</li><li>将 1 号关联六边形加入 check 数组 -&gt; [2, 3, 4]</li><li>遍历 check 数组，提取蓝色正六边形 -&gt; 3, 4，将其加入 blue 数组 -&gt; [1, 3, 4]，将 check 数组元素移至 checked 数组 -&gt; [1, 2, 3, 4]</li><li>将 3, 4 号的关联六边形加入 check 数组 -&gt; [1, 4, 5, 7, 1, 2, 3, 6, 7, 8]</li><li>check 数组去重 -&gt; [1, 2, 3, 4, 5, 6, 7, 8]</li><li>去除 check 数组与 checked 数组交集元素 -&gt; [5, 6, 7, 8]</li><li>遍历 check 数组，提取蓝色正六边形 -&gt; 6 ……</li></ol><p>可以发现，checked 数组的元素从 1 号开始，是一层层随着颜色往外遍历的。</p><p>编写成递归代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">blueHexagonCount</span>(<span class="hljs-params">check</span>: [<span class="hljs-type">Hexagon</span>]) -&gt; [<span class="hljs-type">Hexagon</span>] &#123;<br><br>    <span class="hljs-keyword">var</span> checked: [<span class="hljs-type">Hexagon</span>] <span class="hljs-operator">=</span> []     <span class="hljs-comment">// 存放遍历过的六边形</span><br>    <span class="hljs-keyword">var</span> result: [<span class="hljs-type">Hexagon</span>] <span class="hljs-operator">=</span> []      <span class="hljs-comment">// 存放颜色相同且相邻的六边形</span><br><br>    <span class="hljs-keyword">return</span> checking(check: check)<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">checking</span>(<span class="hljs-params">check</span>: [<span class="hljs-type">Hexagon</span>]) -&gt; [<span class="hljs-type">Hexagon</span>] &#123;<br><br>        <span class="hljs-keyword">var</span> target: [<span class="hljs-type">Hexagon</span>] <span class="hljs-operator">=</span> []  <span class="hljs-comment">// 临时存放颜色相同的六边形</span><br><br>        <span class="hljs-keyword">for</span> hexagon <span class="hljs-keyword">in</span> check &#123;<br>            <span class="hljs-keyword">if</span> hexagon.color <span class="hljs-operator">==</span> .blue &#123;<br>                target.append(hexagon)<br>            &#125;<br>        &#125;<br><br>        checked <span class="hljs-operator">+=</span> check<br><br>        <span class="hljs-keyword">if</span> target.count <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> result<br>        &#125;<br><br>        <span class="hljs-keyword">else</span> &#123;<br><br>            result <span class="hljs-operator">+=</span> target<br><br>            <span class="hljs-keyword">var</span> relation: [<span class="hljs-type">Hexagon</span>] <span class="hljs-operator">=</span> []    <span class="hljs-comment">// 存放与 target 中六边形相邻的六边形</span><br>            <span class="hljs-keyword">for</span> hexagon <span class="hljs-keyword">in</span> target &#123;<br>                relation <span class="hljs-operator">+=</span> hexagon.relations<br>            &#125;<br><br>            relation <span class="hljs-operator">=</span> relation.removeDuplicate()<br><br>            <span class="hljs-keyword">for</span> h1 <span class="hljs-keyword">in</span> checked &#123;<br>                <span class="hljs-keyword">for</span> h2 <span class="hljs-keyword">in</span> relation &#123;<br>                    <span class="hljs-keyword">if</span> h1 <span class="hljs-operator">==</span> h2 &#123;<br>                        relation.removeAll(where: &#123; <span class="hljs-variable">$0</span> <span class="hljs-operator">==</span> h2 &#125;) <span class="hljs-comment">// checked 中的六边形不再 checking</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> checking(check: relation)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 提示 Modifications to the layout engine must not be performed from a background thread after it has been accessed from the main thread.</title>
    <link href="/2024/12/12/Xcode-%E6%8F%90%E7%A4%BA-Modifications-to-the-layout-engine-must-not-be-performed-from-a-background-thread-after-it-has-been-accessed-from-the-main-thread/"/>
    <url>/2024/12/12/Xcode-%E6%8F%90%E7%A4%BA-Modifications-to-the-layout-engine-must-not-be-performed-from-a-background-thread-after-it-has-been-accessed-from-the-main-thread/</url>
    
    <content type="html"><![CDATA[<p>提示 <code>Modifications to the layout engine must not be performed from a background thread after it has been accessed from the main thread.</code>，翻译过来大概是「不能在后台线程中改变布局，必须在主线程中才能进行布局操作」。</p><p>报错出现的代码是在 <code>URLSession.shared.dataTask</code> 中，符合报错的解释。所以只需要将 Update UI 的代码丢到主线程中去执行：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.main.async &#123;<br><span class="hljs-comment">// update UI</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果是自己创建的子线程，也应该这样操作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.global().async &#123;<br> <span class="hljs-comment">// 一些比较花时间的操作</span><br>    <span class="hljs-type">DispatchQueue</span>.main.async &#123;<br>    <span class="hljs-comment">// update UI</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，还可能会出现这样的报错：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Publishing changes <span class="hljs-keyword">from</span> background threads <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> allowed; make sure <span class="hljs-keyword">to</span> publish <span class="hljs-keyword">values</span> <span class="hljs-keyword">from</span> the main thread (via operators <span class="hljs-keyword">like</span> receive(<span class="hljs-keyword">on</span>:)) <span class="hljs-keyword">on</span> model updates.<br>// 不允许从后台线程发布变化；确保在模型更新时从主线程（通过receive(<span class="hljs-keyword">on</span>:)等操作符）发布数值。<br></code></pre></td></tr></table></figure><p>解决办法都是一样的。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 在地图上绘制正六边形</title>
    <link href="/2024/12/11/Swift-%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2/"/>
    <url>/2024/12/11/Swift-%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="正六边形的结构"><a href="#正六边形的结构" class="headerlink" title="正六边形的结构"></a>正六边形的结构</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hexagon</span>:&#123;<br>    <span class="hljs-keyword">let</span> points: [<span class="hljs-type">CLLocationCoordinate2D</span>]<br>    <span class="hljs-keyword">let</span> centerLatitude: <span class="hljs-type">Double</span><br>    <span class="hljs-keyword">let</span> centerLongitude: <span class="hljs-type">Double</span><br>    <span class="hljs-keyword">let</span> startAngle: <span class="hljs-type">Double</span><br>    <span class="hljs-keyword">let</span> radius: <span class="hljs-type">Double</span>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正六边形顶点确认"><a href="#正六边形顶点确认" class="headerlink" title="正六边形顶点确认"></a>正六边形顶点确认</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// startAngle 正六边形的起始角度</span><br><span class="hljs-comment">// radius 正六边形中心到顶点的距离</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">drawHexagon</span>(<span class="hljs-params">centerLatitude</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">centerLongitude</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">startAngle</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">radius</span>: <span class="hljs-type">Double</span>) -&gt; <span class="hljs-type">Hexagon</span> &#123;<br><br>    <span class="hljs-keyword">let</span> point: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(<span class="hljs-type">CLLocationCoordinate2D</span>(latitude: centerLatitude, longitude: centerLongitude))<br>    <span class="hljs-keyword">var</span> i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> points: [<span class="hljs-type">MKMapPoint</span>] <span class="hljs-operator">=</span> []<br>    <span class="hljs-keyword">var</span> angle <span class="hljs-operator">=</span> startAngle <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi<br><br>    <span class="hljs-keyword">while</span> i <span class="hljs-operator">&lt;</span> <span class="hljs-number">6</span> &#123;<br>        <span class="hljs-keyword">let</span> x <span class="hljs-operator">=</span> point.x <span class="hljs-operator">+</span> radius <span class="hljs-operator">*</span> sin(angle) <span class="hljs-operator">*</span> <span class="hljs-number">7.612952538285698</span><br>        <span class="hljs-keyword">let</span> y <span class="hljs-operator">=</span> point.y <span class="hljs-operator">-</span> radius <span class="hljs-operator">*</span> cos(angle) <span class="hljs-operator">*</span> <span class="hljs-number">7.612952538285698</span><br>        angle <span class="hljs-operator">+=</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">3</span><br>        <span class="hljs-keyword">let</span> p: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(x: x, y: y)<br>        points.append(p)<br>        i <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-comment">// 实际距离，单位 m</span><br>    <span class="hljs-keyword">let</span> physicalDistance <span class="hljs-operator">=</span> points[<span class="hljs-number">0</span>].distance(to: points[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment">// CG 距离，两点的距离公式</span><br>    <span class="hljs-keyword">let</span> cgDistance <span class="hljs-operator">=</span> sqrt(pow((points[<span class="hljs-number">0</span>].x <span class="hljs-operator">-</span> points[<span class="hljs-number">1</span>].x), <span class="hljs-number">2</span>) <span class="hljs-operator">+</span> pow((points[<span class="hljs-number">0</span>].y <span class="hljs-operator">-</span> points[<span class="hljs-number">1</span>].y), <span class="hljs-number">2</span>))<br>    <span class="hljs-built_in">print</span>(cgDistance)<br>    <span class="hljs-built_in">print</span>(physicalDistance)<br>    <span class="hljs-built_in">print</span>(cgDistance <span class="hljs-operator">/</span> physicalDistance)<br>  <br>    <span class="hljs-keyword">let</span> hexagon <span class="hljs-operator">=</span> <span class="hljs-type">Hexagon</span>(points: [<br><br>      points[<span class="hljs-number">0</span>].coordinate,<br>      points[<span class="hljs-number">1</span>].coordinate,<br>      points[<span class="hljs-number">2</span>].coordinate,<br>      points[<span class="hljs-number">3</span>].coordinate,<br>      points[<span class="hljs-number">4</span>].coordinate,<br>      points[<span class="hljs-number">5</span>].coordinate<br>    <br>    ], centerLatitude: centerLatitude, centerLongitude: centerLongitude, startAngle: startAngle, radius: radius)<br>  <br>    <span class="hljs-keyword">return</span> hexagon<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 7.612952538285698，是通过 CG 距离除 cllocationdistance 也就是实际物理距离得到的。</p><h2 id="在已知正六边形的基础上绘制相邻的正六边形"><a href="#在已知正六边形的基础上绘制相邻的正六边形" class="headerlink" title="在已知正六边形的基础上绘制相邻的正六边形"></a>在已知正六边形的基础上绘制相邻的正六边形</h2><p>准确来说，应该分成两步：</p><ol><li>获得正六边形相邻 6 个正六边形的中心；</li><li>以新的中心为基础，确定新正六边形的 6 个顶点。</li></ol><h3 id="获得相邻正六边形的中心"><a href="#获得相邻正六边形的中心" class="headerlink" title="获得相邻正六边形的中心"></a>获得相邻正六边形的中心</h3><p>由图可以观察到，相邻正六边形的中心位于正六边形顶点 +30 度，距离根号三倍半径的地方。</p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/121201.png" style="zoom:33%;" /><p>于是有：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">getCenters</span>(<span class="hljs-params">hexagon</span>: <span class="hljs-type">Hexagon</span>, <span class="hljs-params">direction</span>: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">MKMapPoint</span> &#123;<br>    <span class="hljs-comment">// 取出中心点</span><br>    <span class="hljs-keyword">let</span> point: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(<span class="hljs-type">CLLocationCoordinate2D</span>(latitude: hexagon.centerLatitude, longitude: hexagon.centerLongitude))<br>    <span class="hljs-comment">// 一共有六个相邻 hex</span><br>    <span class="hljs-keyword">let</span> pointCount <span class="hljs-operator">=</span> <span class="hljs-number">6</span><br>    <span class="hljs-keyword">var</span> i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> centerPoints: [<span class="hljs-type">MKMapPoint</span>] <span class="hljs-operator">=</span> []<br>    <span class="hljs-comment">// 在生成顶点的角度下偏转 30 度即为六个相邻 hex 的中心点方向</span><br>    <span class="hljs-keyword">var</span> centerAngle <span class="hljs-operator">=</span> (hexagon.startAngle <span class="hljs-operator">+</span> <span class="hljs-number">30</span>) <span class="hljs-operator">/</span> <span class="hljs-number">180</span> <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi<br><br>    <span class="hljs-keyword">while</span> i <span class="hljs-operator">&lt;</span> pointCount &#123;<br>        <span class="hljs-comment">// 2 分之根号 3 为中心点到边的垂直距离，乘 2 为中心点到相邻 hex 中心点的距离</span><br>        <span class="hljs-keyword">let</span> x <span class="hljs-operator">=</span> point.x <span class="hljs-operator">+</span> hexagon.radius <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> sqrt(<span class="hljs-number">3</span>) <span class="hljs-operator">*</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> sin(centerAngle) <span class="hljs-operator">*</span> <span class="hljs-number">7.612952538285698</span><br>        <span class="hljs-keyword">let</span> y <span class="hljs-operator">=</span> point.y <span class="hljs-operator">-</span> hexagon.radius <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> sqrt(<span class="hljs-number">3</span>) <span class="hljs-operator">*</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> cos(centerAngle) <span class="hljs-operator">*</span> <span class="hljs-number">7.612952538285698</span><br>        centerAngle <span class="hljs-operator">+=</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-type">Double</span>(pointCount)<br>        <span class="hljs-keyword">let</span> center: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(x: x, y: y)<br>        centerPoints.append(center)<br>        i <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> centerPoints[direction]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="绘制相邻正六边形"><a href="#绘制相邻正六边形" class="headerlink" title="绘制相邻正六边形"></a>绘制相邻正六边形</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> hexagon <span class="hljs-operator">=</span> drawHexagon(<span class="hljs-operator">...</span>)<br><br><span class="hljs-comment">// 绘制正六边形相邻右上角的正六边形</span><br><span class="hljs-keyword">let</span> topRighthexagon <span class="hljs-operator">=</span> drawHexagon(<br>    centerLatitude: getCenters(hexagon: hexagon, direction: <span class="hljs-number">0</span>).latitude,<br>    centerLongitude: getCenters(hexagon: hexagon, direction: <span class="hljs-number">0</span>).longitude,<br>    startAngle: hexagon.startAngle,<br>    radius: hexagon.radius<br>)<br></code></pre></td></tr></table></figure><h2 id="全新的正六边形顶点确定方法"><a href="#全新的正六边形顶点确定方法" class="headerlink" title="全新的正六边形顶点确定方法"></a>全新的正六边形顶点确定方法</h2><p>参考：<a href="https://stackoverflow.com/questions/7278094/moving-a-cllocation-by-x-meters">Moving a CLLocation by x meters</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">drawHexagon</span>(<span class="hljs-params">origin</span>: <span class="hljs-type">CLLocationCoordinate2D</span>, <span class="hljs-params">distance</span>: <span class="hljs-type">Double</span>) -&gt; [<span class="hljs-type">CLLocationCoordinate2D</span>]&#123;<br>    <span class="hljs-keyword">let</span> distRadians <span class="hljs-operator">=</span> distance <span class="hljs-operator">/</span> (<span class="hljs-number">6372797.6</span>) <span class="hljs-comment">// earth radius in meters</span><br><br>    <span class="hljs-comment">// Degrees To Radians</span><br>    <span class="hljs-keyword">let</span> lat1 <span class="hljs-operator">=</span> origin.latitude <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span><br>    <span class="hljs-keyword">let</span> lon1 <span class="hljs-operator">=</span> origin.longitude <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span><br><br>    <span class="hljs-keyword">var</span> i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br><span class="hljs-comment">// 90 度转弧度</span><br>    <span class="hljs-comment">// var bearing = 90.0 * .pi / 180</span><br>    <br>    <span class="hljs-comment">// 90 度弧度</span><br>    <span class="hljs-comment">// var bearing = pi/2</span><br><br>    <span class="hljs-keyword">var</span> bearing <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">var</span> points: [<span class="hljs-type">CLLocationCoordinate2D</span>] <span class="hljs-operator">=</span> []<br><br>    <span class="hljs-keyword">while</span> i <span class="hljs-operator">&lt;</span> <span class="hljs-number">6</span> &#123;<br><br>        <span class="hljs-keyword">let</span> lat2 <span class="hljs-operator">=</span> asin(sin(lat1) <span class="hljs-operator">*</span> cos(distRadians) <span class="hljs-operator">+</span> cos(lat1) <span class="hljs-operator">*</span> sin(distRadians) <span class="hljs-operator">*</span> cos(bearing))<br>        <span class="hljs-keyword">let</span> lon2 <span class="hljs-operator">=</span> lon1 <span class="hljs-operator">+</span> atan2(sin(bearing) <span class="hljs-operator">*</span> sin(distRadians) <span class="hljs-operator">*</span> cos(lat1), cos(distRadians) <span class="hljs-operator">-</span> sin(lat1) <span class="hljs-operator">*</span> sin(lat2))<br><br>        <span class="hljs-keyword">let</span> point <span class="hljs-operator">=</span> <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: lat2 <span class="hljs-operator">*</span> <span class="hljs-number">180</span> <span class="hljs-operator">/</span> .pi, longitude: lon2 <span class="hljs-operator">*</span> <span class="hljs-number">180</span> <span class="hljs-operator">/</span> .pi)     <span class="hljs-comment">// Radians To Degrees</span><br>        i <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment">// 60 度弧度</span><br>        bearing <span class="hljs-operator">+=</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">3</span><br>        points.append(point)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> points<br>&#125;<br></code></pre></td></tr></table></figure><p>本质上是调用这个方法六次，每次 30 度：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">CLLocationCoordinate2D</span> &#123;<br><br>    <span class="hljs-comment">/// Get coordinate moved from current to `distanceMeters` meters with azimuth `azimuth` [0, Double.pi)</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// - Parameters:</span><br>    <span class="hljs-comment">///   - distanceMeters: the distance in meters</span><br>    <span class="hljs-comment">///   - azimuth: the azimuth (bearing)</span><br>    <span class="hljs-comment">/// - Returns: new coordinate</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">shift</span>(<span class="hljs-params">byDistance</span> <span class="hljs-params">distanceMeters</span>: <span class="hljs-type">Double</span>, <span class="hljs-params">azimuth</span>: <span class="hljs-type">Double</span>) -&gt; <span class="hljs-type">CLLocationCoordinate2D</span> &#123;<br>        <span class="hljs-keyword">let</span> bearing <span class="hljs-operator">=</span> azimuth<br>        <span class="hljs-keyword">let</span> origin <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span><br>        <span class="hljs-keyword">let</span> distRadians <span class="hljs-operator">=</span> distanceMeters <span class="hljs-operator">/</span> (<span class="hljs-number">6372797.6</span>) <span class="hljs-comment">// earth radius in meters</span><br><br>        <span class="hljs-keyword">let</span> lat1 <span class="hljs-operator">=</span> origin.latitude <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span><br>        <span class="hljs-keyword">let</span> lon1 <span class="hljs-operator">=</span> origin.longitude <span class="hljs-operator">*</span> <span class="hljs-type">Double</span>.pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span><br><br>        <span class="hljs-keyword">let</span> lat2 <span class="hljs-operator">=</span> asin(sin(lat1) <span class="hljs-operator">*</span> cos(distRadians) <span class="hljs-operator">+</span> cos(lat1) <span class="hljs-operator">*</span> sin(distRadians) <span class="hljs-operator">*</span> cos(bearing))<br>        <span class="hljs-keyword">let</span> lon2 <span class="hljs-operator">=</span> lon1 <span class="hljs-operator">+</span> atan2(sin(bearing) <span class="hljs-operator">*</span> sin(distRadians) <span class="hljs-operator">*</span> cos(lat1), cos(distRadians) <span class="hljs-operator">-</span> sin(lat1) <span class="hljs-operator">*</span> sin(lat2))<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: lat2 <span class="hljs-operator">*</span> <span class="hljs-number">180</span> <span class="hljs-operator">/</span> <span class="hljs-type">Double</span>.pi, longitude: lon2 <span class="hljs-operator">*</span> <span class="hljs-number">180</span> <span class="hljs-operator">/</span> <span class="hljs-type">Double</span>.pi)<br>    &#125;<br>&#125;<br><br>point.shift(byDistance: <span class="hljs-number">100.0</span>, azimuth: .pi)<br></code></pre></td></tr></table></figure><p>关于 azimuth：</p><ul><li>0 为正北（N）</li><li>pi&#x2F;2 为正东（90，E）</li><li>pi 为正南（180，S）</li><li>3&#x2F;2pi为正西（270，W）</li></ul><p>为了更好理解，可以将</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// let bearing = azimuth -&gt;</span><br><span class="hljs-keyword">let</span> bearing <span class="hljs-operator">=</span> azimuth <span class="hljs-operator">*</span> .pi <span class="hljs-operator">/</span> <span class="hljs-number">180</span><br><br>point.shift(byDistance: <span class="hljs-number">100.0</span>, azimuth: <span class="hljs-number">180</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 SwiftData 中使用 CLLocationCoordinate2D 数据类型</title>
    <link href="/2024/12/11/%E5%9C%A8-SwiftData-%E4%B8%AD%E4%BD%BF%E7%94%A8-CLLocationCoordinate2D-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/12/11/%E5%9C%A8-SwiftData-%E4%B8%AD%E4%BD%BF%E7%94%A8-CLLocationCoordinate2D-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>项目中 SwiftData 要将 CLLocationCoordinate2D 作为数组存储对象，但报错：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Referencing instance <span class="hljs-keyword">method</span> &#x27;<span class="hljs-title function_">setValue</span><span class="hljs-params">(forKey:<span class="hljs-keyword">to</span>:)</span>&#x27; <span class="hljs-title function_">on</span> &#x27;<span class="hljs-title function_">Array</span>&#x27; <span class="hljs-title function_">requires</span> <span class="hljs-title function_">that</span> &#x27;<span class="hljs-title function_">CLLocationCoordinate2D</span>&#x27; <span class="hljs-title function_">conform</span> <span class="hljs-title function_">to</span> &#x27;<span class="hljs-title function_">PersistentModel</span>&#x27;<br></code></pre></td></tr></table></figure><p>需要：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_ inherited__">String</span>, <span class="hljs-title class_ inherited__">CodingKey</span> &#123;<br>        <span class="hljs-keyword">case</span> latitude<br>        <span class="hljs-keyword">case</span> longitude<br>   &#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">CLLocationCoordinate2D</span>: <span class="hljs-title class_ inherited__">Decodable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">from</span> <span class="hljs-params">decoder</span>: <span class="hljs-type">Decoder</span>) <span class="hljs-keyword">throws</span> &#123;<br>        <span class="hljs-keyword">let</span> values <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.container(keyedBy: <span class="hljs-type">CodingKeys</span>.<span class="hljs-keyword">self</span>)<br>        <span class="hljs-keyword">self</span>.<span class="hljs-keyword">init</span>()<br>        latitude <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> values.decode(<span class="hljs-type">Double</span>.<span class="hljs-keyword">self</span>, forKey: .latitude)<br>        longitude <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> values.decode(<span class="hljs-type">Double</span>.<span class="hljs-keyword">self</span>, forKey: .longitude)<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">CLLocationCoordinate2D</span>: <span class="hljs-title class_ inherited__">Encodable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">to</span> <span class="hljs-params">encoder</span>: <span class="hljs-type">Encoder</span>) <span class="hljs-keyword">throws</span> &#123;<br>        <span class="hljs-keyword">var</span> container <span class="hljs-operator">=</span> encoder.container(keyedBy: <span class="hljs-type">CodingKeys</span>.<span class="hljs-keyword">self</span>)<br>        <span class="hljs-keyword">try</span> container.encode(latitude, forKey: .latitude)<br>        <span class="hljs-keyword">try</span> container.encode(longitude, forKey: .longitude)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里也可以看出，使用 SwiftData 存储的对象可以直接使用 <code>==</code> 来判断两者是否为同一对象（SwiftData 可以使用等于（&#x3D;&#x3D;）和非等于（！&#x3D;）运算符比较等于类型的实例）。</p><p>例如在获得数组元素 index 时：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 一般来说是这样</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> items.firstIndex(where: &#123; <span class="hljs-variable">$0</span>.id <span class="hljs-operator">==</span> item.id &#125;)<br><br><span class="hljs-comment">// 使用 SwiftData 后可以这样</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> items.firstIndex(where: &#123; <span class="hljs-variable">$0</span> <span class="hljs-operator">==</span> item &#125;)<br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://stackoverflow.com/questions/77633315/how-to-use-cllocationcoordinate2d-and-color-data-types-in-swift-data">How to use CLLocationCoordinate2D and Color data types in Swift Data?</a></li><li><a href="https://stackoverflow.com/questions/78264020/cllocationcoordinate2d-does-not-conform-to-persistentmodel-swiftdata">CLLocationCoordinate2d does not conform to ‘PersistentModel’ SwiftData</a></li><li><a href="https://blog.csdn.net/qq_28323373/article/details/102310403">Swift 自定义结构体和类应该遵循的通用协议</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPS、GNSS、RTK、PPK 的区别</title>
    <link href="/2024/12/10/GPS%E3%80%81GNSS%E3%80%81RTK%E3%80%81PPK-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/12/10/GPS%E3%80%81GNSS%E3%80%81RTK%E3%80%81PPK-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="GPS-与-GNSS-的区别"><a href="#GPS-与-GNSS-的区别" class="headerlink" title="GPS 与 GNSS 的区别"></a>GPS 与 GNSS 的区别</h2><p>GPS-全球定位系统-Global Positioning System，美国在 1994 年启用，是最早开放给全世界民间使用的定位系统。所以大家习惯认为 GPS 等同于卫星定位。</p><p>但是到现在，中国、俄罗斯、欧盟都各自发展出了自己的覆盖全球的卫星定位系统，以往依赖 GPS 作为单一定位系统的情况已经不存在了。所以新的叫法 GNSS-全球导航卫星定位系统-Global Navigation Satellite System 更为正确和全面。</p><p>截止 2020 年，全球定位卫星情况：</p><ul><li>美国，全球定位系统（GPS），在轨卫星数量约 31</li><li>中国，北斗卫星导航系统（BDS），在轨卫星数量约 30</li><li>俄罗斯，全球导航卫星系统（GLONASS），在轨卫星数量约 24</li><li>欧盟，伽利略定位系统（GALILEO），在轨卫星数量约 22</li></ul><p>区域定位卫星情况：</p><ul><li>印度，印度区域导航卫星系统（IRNSS），在轨卫星数量约 7</li><li>日本，准天顶卫星系统（QZSS），在轨卫星数量约 4</li></ul><p>下图是手机实测收到不同卫星系统的分布情况，有颜色代表收到信号，灰色则没有。</p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/卫星分布.jpg" style="zoom:33%;" /><p>GPS 有 9 颗，GLONASS 4，GALILEO 5，BDS 7，QZSS 2</p><h2 id="GNSS-定位的原理"><a href="#GNSS-定位的原理" class="headerlink" title="GNSS 定位的原理"></a>GNSS 定位的原理</h2><p>简单说就是 3 颗卫星可以定位，4 颗卫星才能显示准确的位置，卫星越多，定位越准确、越稳定。</p><h2 id="RTK"><a href="#RTK" class="headerlink" title="RTK"></a>RTK</h2><p>实时动态技术-Real Time Kinematic，通过一台基准站和一台移动站来同时接收卫星信号。其中基准站位于已知位置，可以精确测量由各种错误源引起的信号误差，并将这些数据实时发送给移动站。移动站接收来自基准站的数据和直接来自卫星的数据，通过差分计算，精确地确定自己与基准站之间的相对位置关系，实现厘米级定位。</p><p>基准站播发差分矫正报文(RTCM)，移动站实时接收差分数据和卫星信号，进行 RTK 解算，当移动站消除观测数据中的误差，并且“固定”载波相位观测量的整周数，获得厘米级位置信息时，即实现了 RTK 固定解算。只要移动站准确的进入固定解算状态，并且跟踪的卫星没有失锁，差分数据没有中断，那么移动站就可以持续的提供厘米级的位置信息。但如果移动站最初的固定解算位置有偏差，或者因为环境遮挡等原因导致卫星信号失锁，或者因为数据传输链路导致差分数据中断，那么移动站提供的位置信息可能是分米级或者米级。</p><p><strong>通俗的解释是，卫星测得基准站的坐标为 x1，基准站的实际坐标为 x2。通过 x1 与 x2 可以计算出差分数据。之后基准站将差分数据传给移动端，结合卫星测得移动站的坐标 y1，对 y1 坐标进行 RTK 差分解算，获得移动站的实际坐标 y2。</strong></p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/RTK.jpg" style="zoom:50%;" /><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（Continuously Operating Reference Stations，连续运行参考站）是一种基于卫星定位导航系统的高精度定位技术。通过在地面上建立一系列固定的参考站点，将这些站点的观测数据实时传输到中心控制站进行处理和分析，从而提供高精度的定位、导航和时间服务。可以将 CORS 定义为一个或若干个固定的、连续运行的 GNSS 参考站或基准站。</p><p><strong>也就是在使用 CORS 的情况下，基准站由第三方提供（千寻、六分等）。可通过在移动站上安装 SIM 卡，从 4G 网络获取差分 RTK 定位数据，此时便可舍去基站端，仅用移动站便可实现 RTK 定位。</strong></p><h2 id="PPK"><a href="#PPK" class="headerlink" title="PPK"></a>PPK</h2><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/PPK.jpg" style="zoom:33%;" /><p>动态后处理技术-Post Processed Kinematic，与 RTK 的区别在于它是在「事后」对移动站的坐标进行校准。省去了中间的通讯环节。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.mtandstream.com/post/%E6%99%BA%E8%83%BD%E6%89%8B%E6%A9%9Fgps%E5%8F%8Agnss%E5%AE%9A%E4%BD%8D">你部iphone或者android 【智能手機是用GPS還是GNSS定位】? 智能手機如何定位?</a></li><li><a href="https://blog.yanjingang.com/?p=9273#12_RTK">GNSS—G70差分定位RTK模块</a></li><li><a href="https://www.cnblogs.com/lsgxeva/p/17489084.html">GPS、RTK、PPK</a></li><li><a href="https://blog.csdn.net/msq19895070/article/details/139072136">RTK定位技术解密！厘米级定位精度如何实现？</a></li><li><a href="https://dronesboy.com/ppk-or-rtk-which-is-best-in-drone-mapping/#">【無人機測繪知識】無人機測繪該選擇RTK或PPK ? 完整解析!</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sensor</tag>
      
      <tag>Map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 拼接 JSON 字符串</title>
    <link href="/2024/12/09/Swift-%E6%8B%BC%E6%8E%A5-JSON-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/12/09/Swift-%E6%8B%BC%E6%8E%A5-JSON-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用 #"></a>使用 <code>#</code></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>key1<span class="hljs-subst">\&quot;</span>: <span class="hljs-subst">\&quot;</span>value<span class="hljs-subst">\&quot;</span>, <span class="hljs-subst">\&quot;</span>key2<span class="hljs-subst">\&quot;</span>: 123&#125;&quot;</span><br><span class="hljs-built_in">print</span>(string) <span class="hljs-comment">/// &#123;&quot;key1&quot;: &quot;value&quot;, &quot;key2&quot;: 123&#125;</span><br><br><span class="hljs-keyword">let</span> string2 <span class="hljs-operator">=</span> <span class="hljs-string">#&quot;&#123;&quot;key1&quot;: &quot;value&quot;, &quot;key2&quot;: 123&#125;&quot;#</span><br><span class="hljs-built_in">print</span>(string2) <span class="hljs-comment">/// &#123;&quot;key1&quot;: &quot;value&quot;, &quot;key2&quot;: 123&#125;</span><br><br><span class="hljs-keyword">let</span> value <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">let</span> string3 <span class="hljs-operator">=</span> <span class="hljs-string">#&quot;&#123;&quot;key1&quot;: <span class="hljs-subst">\#(value)</span>, &quot;key2&quot;: 123&#125;&quot;#</span><br><span class="hljs-built_in">print</span>(string3) <span class="hljs-comment">/// &#123;&quot;key1&quot;: 5, &quot;key2&quot;: 123&#125;</span><br></code></pre></td></tr></table></figure><ol><li><a href="https://blog.csdn.net/yao1500/article/details/119345353">Swift 开发：优雅处理转义字符必定用到小技巧，OC 可没有此福利</a></li><li><a href="https://juejin.cn/post/6844903768572559373">在 Swift 5 中如何使用原始字符串</a></li><li><a href="https://stackoverflow.com/questions/71119132/why-i-cannot-use-or-backslash-in-a-string-in-swift">Why I cannot use \ or backslash in a String in Swift?</a></li></ol><h2 id="使用-“””"><a href="#使用-“””" class="headerlink" title="使用 “””"></a>使用 “””</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[<span class="hljs-subst">\&quot;</span>one<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>two<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>three<span class="hljs-subst">\&quot;</span>]&quot;</span><br><br><span class="hljs-keyword">let</span> jsonString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[&quot;one&quot;,&quot;two&quot;,&quot;three&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol><li><a href="https://stackoverflow.com/questions/48359483/how-to-parse-array-of-strings-in-swift">How to parse array of strings in swift?</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 删除 SwiftData 数据缓存</title>
    <link href="/2024/12/09/Xcode-%E5%88%A0%E9%99%A4-SwiftData-%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98/"/>
    <url>/2024/12/09/Xcode-%E5%88%A0%E9%99%A4-SwiftData-%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>在 Xcode 中调试的时候，我们有时候需要删除创建的 SwiftData 缓存数据。在 Xcode 中 Clean Build Folder 并不能清除 SwiftData 的数据。</p><p>通常会创建一个 checkDatabaseLocation() 方法，使用这个方法来获取数据库的位置：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> Foundation<br><span class="hljs-keyword">import</span> SwiftData<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">checkDatabaseLocation</span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> urlApp <span class="hljs-operator">=</span> <span class="hljs-type">FileManager</span>.default.urls(<br>        for: .applicationSupportDirectory, in: .userDomainMask<br>    ).last &#123;<br>        <span class="hljs-keyword">let</span> url <span class="hljs-operator">=</span> urlApp.appendingPathComponent(<span class="hljs-string">&quot;default.store&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-type">FileManager</span>.default.fileExists(atPath: url.path) &#123;<br>            <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> url.path  <span class="hljs-comment">// 获取标准文件路径</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SwiftData DB at <span class="hljs-subst">\(path)</span>&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SwiftData DB not found at <span class="hljs-subst">\(url.path)</span>&quot;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to locate application support directory.&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在我们的任意 View 文件中，通过 .onApper 来调用函数，此时终端中即可打印数据库文件地址，最后在终端中使用 rm 命令删除文件即可。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
      <tag>SwiftData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 权限修饰关键字</title>
    <link href="/2024/12/09/Swift-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2024/12/09/Swift-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="private"><a href="#private" class="headerlink" title="private :"></a><code>private</code> :</h3><ol><li><code>private</code> 修饰的属性或方法只能在当前类中使用；当调用不在当前类中，即使是当前类相关对象也不能使用</li><li><code>private</code> 修饰的<code>Class</code>或<code>Struct</code> 在除在自身内部使用；其它的都不被允许（包括类的继承和实例化），因此一般开发中不会用<code>private</code> 修饰<code>Class</code> 和<code>Struct</code></li><li><code>private</code> 修饰的<code>protocol</code>，只允许在当前文件中遵循该<code>protocol</code>；其它的都是不被允许的(包括类型申明，函数或方法中的形参申明)</li></ol><h3 id="filePrivate"><a href="#filePrivate" class="headerlink" title="filePrivate:"></a><code>filePrivate</code>:</h3><ol><li><code>filePrivate</code> 修饰的属性或方法，只能在当前文件中使用；当前文件内，可以跨类调用</li><li><code>fileprivate</code> 修饰<code>Class</code>或<code>Struct</code>，<code>Class</code>在当前文件内可以实例化和继承使用，在当前文件之外的任何地方都不允许被使用</li><li><code>fileprivate</code> 修饰的<code>protocol</code>，同<code>private</code>修饰<code>protocol</code> 效果一致，都是只允许在当前文件中遵循，不允许类型申明使用，函数和方法的形参声明</li></ol><h3 id="internal"><a href="#internal" class="headerlink" title="internal:"></a><code>internal</code>:</h3><p><code>Swift</code> 默认权限修饰关键字，一般不用声明，只允许在当前<code>module</code>中使用，继承，重写</p><h3 id="public"><a href="#public" class="headerlink" title="public:"></a><code>public</code>:</h3><ol><li><code>public</code> 修饰的属性， <code>Struct</code>和<code>protocol</code>，允许跨<code>module</code> 使用</li><li><code>public</code> 修饰的<code>Class</code>，允许跨<code>module</code>使用，但是<code>public</code>修饰的<code>Class</code>是不允许跨<code>module</code>继承</li><li><code>public</code> 修饰的方法，允许跨<code>module</code>使用；但是不允许跨<code>module</code>重写，即使是该方法的类是采用<code>open</code>修饰</li></ol><h3 id="open"><a href="#open" class="headerlink" title="open:"></a><code>open</code>:</h3><ol><li><code>open</code> 修饰的属性，跟<code>public</code>一致，因为存储型属性不予许重写</li><li><code>open</code> 不允许修饰<code>protocol</code>，<code>Struct</code>，<code>Struct</code>方法，是因为open修饰的，表示可重载</li><li><code>open</code> 修饰方法，允许跨<code>module</code>调用和重写</li><li><code>open</code> 修饰<code>class</code>，允许跨<code>module</code>使用和继承</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 判断字符串是否为 nil 或者 empty</title>
    <link href="/2024/12/09/Swift-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA-nil-%E6%88%96%E8%80%85-empty/"/>
    <url>/2024/12/09/Swift-%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA-nil-%E6%88%96%E8%80%85-empty/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> myString: <span class="hljs-type">String</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">if</span> (myString <span class="hljs-operator">??</span> <span class="hljs-string">&quot;&quot;</span>).isEmpty &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;String is nil or empty&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI NavigationStack&amp;NavigationSplitView 合集</title>
    <link href="/2024/12/09/SwiftUI-NavigationStack-NavigationSplitView-%E5%90%88%E9%9B%86/"/>
    <url>/2024/12/09/SwiftUI-NavigationStack-NavigationSplitView-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="NavigationStack"><a href="#NavigationStack" class="headerlink" title="NavigationStack"></a>NavigationStack</h2><p><a href="https://fatbobman.com/zh/posts/new_navigator_of_swiftui_4/">SwiftUI 4.0 的全新导航系统</a></p><p><a href="https://ivensliaoblog.com/swiftui-navigationstack-page-navigation-tutorial/#%E5%A6%82%E4%BD%95%E5%9C%A8-sheet-%E8%A7%86%E5%9B%BE%E4%B8%AD%E6%98%BE%E7%A4%BA%E5%AF%BC%E8%88%AA%E6%A0%8F%EF%BC%9F">使用 SwiftUI 的 NavigationStack 组件进行页面导航</a></p><p><a href="https://ivensliaoblog.com/customize-navigationstack-appearance/">自定义你的 NavigationStack 导航栏外观</a></p><h3 id="跳转的几种方式"><a href="#跳转的几种方式" class="headerlink" title="跳转的几种方式"></a>跳转的几种方式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NavigationLinkView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> path: <span class="hljs-type">NavigationPath</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>()<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isPresented: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> items: [<span class="hljs-type">Item</span>] <span class="hljs-operator">=</span> [<span class="hljs-type">Item</span>(text: <span class="hljs-string">&quot;ForEach 中跳转&quot;</span>)]<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-comment">// 使用 NavigationLink 会导致组件多一个箭头</span><br>        <span class="hljs-type">NavigationStack</span>(path: <span class="hljs-variable">$path</span>) &#123;<br>            <span class="hljs-type">List</span> &#123;<br>                <span class="hljs-type">NavigationLink</span>(<span class="hljs-string">&quot;跳转方式一&quot;</span>) &#123;<br>                    <span class="hljs-comment">// destination</span><br>                &#125;<br>                <span class="hljs-type">NavigationLink</span>(<span class="hljs-string">&quot;跳转方式一&quot;</span>, destination: &#123;<br>                    <span class="hljs-comment">// destination</span><br>                &#125;)<br>                <span class="hljs-type">NavigationLink</span>(destination: &#123;<br>                    <span class="hljs-comment">// destination</span><br>                &#125;, label: &#123;<br>                    <span class="hljs-type">LabeledContent</span>(<span class="hljs-string">&quot;跳转方式&quot;</span>, value: <span class="hljs-string">&quot;一&quot;</span>)<br>                &#125;)<br>                <br>                <span class="hljs-type">Button</span>(action: &#123;<br>                    isPresented.toggle()<br>                &#125;, label: &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;跳转方式二&quot;</span>)<br>                &#125;)<br>                <br>                <span class="hljs-type">NavigationLink</span>(<span class="hljs-string">&quot;跳转方式三&quot;</span>, value: <span class="hljs-string">&quot;3&amp;4&quot;</span>)<br>                <br>                <span class="hljs-type">Button</span>(action: &#123;<br>                    path.append(<span class="hljs-string">&quot;3&amp;4&quot;</span>)<br>                &#125;, label: &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;跳转方式四&quot;</span>)<br>                &#125;)<br>                <br>                <span class="hljs-comment">// ForEach 跳转方式一</span><br>                <span class="hljs-type">ForEach</span>(items) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">NavigationLink</span>(value: item) &#123;<br>                        <span class="hljs-type">Text</span>(item.text)<br>                    &#125;<br>                &#125;<br>                <br>                <span class="hljs-comment">// ForEach 跳转方式二</span><br>                <span class="hljs-type">ForEach</span>(items) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">Text</span>(item.text)<br>                        .onTapGesture &#123;<br>                            path.append(item)<br>                        &#125;<br>                &#125;<br>                <br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 跳转方式二</span><br>        .navigationDestination(isPresented: <span class="hljs-variable">$isPresented</span>) &#123;<br>            <span class="hljs-comment">// destination</span><br>        &#125;<br>        <br>        <span class="hljs-comment">// 跳转方式三 &amp; 四</span><br>        .navigationDestination(for: <span class="hljs-type">String</span>.<span class="hljs-keyword">self</span>) &#123; destination <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">if</span> destination <span class="hljs-operator">==</span> <span class="hljs-string">&quot;3&amp;4&quot;</span> &#123;<br>                <span class="hljs-comment">// destination</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// ForEach 跳转</span><br>        .navigationDestination(for: <span class="hljs-type">Item</span>.<span class="hljs-keyword">self</span>) &#123; item <span class="hljs-keyword">in</span><br>            <span class="hljs-comment">// destination</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Item</span>: <span class="hljs-title class_ inherited__">Identifiable</span>, <span class="hljs-title class_ inherited__">Hashable</span> &#123;<br>    <span class="hljs-keyword">let</span> id <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()<br>    <span class="hljs-keyword">let</span> text: <span class="hljs-type">String</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="隐藏-NavigationLink-的箭头"><a href="#隐藏-NavigationLink-的箭头" class="headerlink" title="隐藏 NavigationLink 的箭头"></a>隐藏 NavigationLink 的箭头</h3><p>常规手段</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;The cell&quot;</span>)<br>        .background(<span class="hljs-comment">// 使用 overlay 也可以</span><br>            <span class="hljs-type">NavigationLink</span>(value: item) &#123;<br>            <span class="hljs-type">EmptyView</span>()<br>            &#125;.opacity(<span class="hljs-number">0</span>)<br>        )<br>&#125;<br><br><span class="hljs-comment">// 或者</span><br><br><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">ZStack</span> &#123;<br>        <span class="hljs-type">NavigationLink</span>(value: item) &#123;<br>            <span class="hljs-type">EmptyView</span>()<br>        &#125;.opacity(<span class="hljs-number">0</span>)<br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;The cell&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非常规手段，使用 <code>.navigationLinkIndicatorVisibility(.hidden)</code>，参考：</p><p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E9%9A%B1%E8%97%8F-%E9%A1%AF%E7%A4%BA%E5%90%91%E5%8F%B3%E7%AE%AD%E9%A0%AD%E7%9A%84-navigationlinkindicatorvisibility-8d0e21708eda">隱藏 &amp; 顯示向右箭頭的 navigationLinkIndicatorVisibility</a></p><p><a href="https://developer.apple.com/documentation/swiftui/view/navigationlinkindicatorvisibility(_:)?changes=latest_minor">navigationLinkIndicatorVisibility(_:)</a></p><p>但不知道为什么，反正我用不了。</p><h2 id="NavigationSplitView"><a href="#NavigationSplitView" class="headerlink" title="NavigationSplitView"></a>NavigationSplitView</h2><ol><li><a href="https://stackoverflow.com/questions/77464914/navigationstack-inside-navigationsplitview-detail-in-swiftui">NavigationStack inside NavigationSplitView detail in SwiftUI</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI @Published 与 onReceive 组合使用</title>
    <link href="/2024/12/09/SwiftUI-Published-%E4%B8%8E-onReceive-%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/12/09/SwiftUI-Published-%E4%B8%8E-onReceive-%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@StateObject</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> state: <span class="hljs-type">ContentViewState</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>()<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Text</span>(state.count.description)<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Count Up&quot;</span>) &#123; state.countUp() &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Reset&quot;</span>) &#123; state.reset() &#125;<br>        &#125;<br>        .onReceive(state.<span class="hljs-variable">$count</span>) &#123; count <span class="hljs-keyword">in</span><br>            <span class="hljs-built_in">print</span>(count)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContentViewState</span>: <span class="hljs-title class_ inherited__">ObservableObject</span> &#123;<br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">private(set)</span> <span class="hljs-keyword">var</span> count: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">countUp</span>() &#123;<br>        count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">reset</span>() &#123;<br>        count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI ForEach 警告 Non-constant range: argument must be an integer literal</title>
    <link href="/2024/12/09/SwiftUI-ForEach-%E8%AD%A6%E5%91%8A-Non-constant-range-argument-must-be-an-integer-literal/"/>
    <url>/2024/12/09/SwiftUI-ForEach-%E8%AD%A6%E5%91%8A-Non-constant-range-argument-must-be-an-integer-literal/</url>
    
    <content type="html"><![CDATA[<p>这个 Warning 的字面意思是「非常数范围：参数必须是整数字面量。」所以除非是常数，比如直接用「0..&lt;4」这样的代码消除这个警告，但是大多数情况下，我们不可能去这样写，因为这部分 View 就是动态生成的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">4</span>) &#123; index <span class="hljs-keyword">in</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>查阅官方文档：</p><blockquote><p>The instance only reads the initial value of the provided data and doesn’t need to identify views across updates. To compute views on demand over a dynamic range, use ForEach&#x2F;init(​​).</p></blockquote><p>简单地说，这个方法只会读取提供数据的初始数，如果你不需要 View 在之后发生变化，那么可以用这个方法，</p><p>所以只要把代码改成下面这样就可以了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">4</span>, id: \.<span class="hljs-keyword">self</span>) &#123; index <span class="hljs-keyword">in</span><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode Logger 合集</title>
    <link href="/2024/12/09/Xcode-Logger-%E5%90%88%E9%9B%86/"/>
    <url>/2024/12/09/Xcode-Logger-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E4%BD%BF%E7%94%A8%E6%9B%B4%E6%96%B9%E4%BE%BF-debug-%E7%A8%8B%E5%BC%8F%E7%9A%84-logger-%E5%88%97%E5%8D%B0%E8%A8%8A%E6%81%AF-4b4622f906ef">使用更方便 debug 程式的 Logger 列印訊息</a></li><li><a href="https://vocus.cc/article/66753004fd8978000148707b">使用Logger取代print()在Xcode上輸出訊息</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 更换主题</title>
    <link href="/2024/12/06/Xcode-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    <url>/2024/12/06/Xcode-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>前往 <code>~/Library/Developer/Xcode/UserData/FontAndColorThemes/</code> 把下载好的 <code>.xcolortheme</code> 文件放进去重启 Xcode 就行了。</p><p>需要注意的是，与其说是主题，更像是配色主题。字体以及字体大小都需要自己设置。</p><p>Xcode 主题下载：</p><p><a href="https://github.com/jasonm23/xcode-themes">XCode Themes</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 工程报错 Error: Error Domain=NSPOSIXErrorDomain Code=1 「Operation not permitted」</title>
    <link href="/2024/12/02/macOS-%E5%B7%A5%E7%A8%8B%E6%8A%A5%E9%94%99-Error-Error-Domain-NSPOSIXErrorDomain-Code-1-%E3%80%8COperation-not-permitted%E3%80%8D/"/>
    <url>/2024/12/02/macOS-%E5%B7%A5%E7%A8%8B%E6%8A%A5%E9%94%99-Error-Error-Domain-NSPOSIXErrorDomain-Code-1-%E3%80%8COperation-not-permitted%E3%80%8D/</url>
    
    <content type="html"><![CDATA[<p>在 macOS 工程中调试接口时出现报错：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Error: <span class="hljs-built_in">Error</span> <span class="hljs-attribute">Domain</span>=NSPOSIXErrorDomain <span class="hljs-attribute">Code</span>=1 <span class="hljs-string">&quot;Operation not permitted&quot;</span> UserInfo=&#123;<span class="hljs-attribute">_NSURLErrorFailingURLSessionTaskErrorKey</span>=LocalDataTask &lt;E0BD2CC5-BC74-4624-A308-020EECDC00AE&gt;.&lt;1&gt;, <span class="hljs-attribute">_kCFStreamErrorDomainKey</span>=1, <span class="hljs-attribute">_kCFStreamErrorCodeKey</span>=1, _NSURLErrorRelatedURLSessionTaskErrorKey=(<br>    <span class="hljs-string">&quot;LocalDataTask &lt;E0BD2CC5-BC74-4624-A308-020EECDC00AE&gt;.&lt;1&gt;&quot;</span><br>), <span class="hljs-attribute">_NSURLErrorNWPathKey</span>=satisfied (Path is satisfied), interface: en0[802.11], ipv4, dns, proxy, uses wifi&#125;<br></code></pre></td></tr></table></figure><p>解决办法：</p><p>在「TARGETS - Singin &amp; Capabilities」中找到 App Sandbox，勾选：</p><ul><li>Incoming Connections (Server)</li><li>Outgoing Connections (Client)</li></ul><p>如图所示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120207.png"></p><p>参考：</p><ol><li><a href="https://stackoverflow.com/questions/47797446/nsposixerrordomain-when-binding-to-socket-on-macos-10-12">NSPOSIXErrorDomain when binding to socket on macOS 10.12</a></li><li><a href="https://stackoverflow.com/questions/55457744/error-while-binding-a-socket-nsposixerrordomain-code-1-operation-not-permitte">Error while binding a socket : NSPOSIXErrorDomain Code&#x3D;1 “Operation not permitted”</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 裁剪图片后被裁剪部分仍然可以点击的解决办法</title>
    <link href="/2024/12/02/SwiftUI-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E5%90%8E%E8%A2%AB%E8%A3%81%E5%89%AA%E9%83%A8%E5%88%86%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%82%B9%E5%87%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2024/12/02/SwiftUI-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E5%90%8E%E8%A2%AB%E8%A3%81%E5%89%AA%E9%83%A8%E5%88%86%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E7%82%B9%E5%87%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>图片裁剪前</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;cube&quot;</span>)<br>        .resizable()<br>        .scaledToFill()<br>        .frame(width: <span class="hljs-number">200</span>, height: <span class="hljs-number">200</span>)<br>        <span class="hljs-comment">// .clipped()</span><br>        .onTapGesture &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tapped mainContainer<span class="hljs-subst">\(count)</span><span class="hljs-subst">\n</span>&quot;</span>)<br>            count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120205.png" style="zoom:25%;" /><p>去掉 <code>.clipped()</code> 注释后:</p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120206.png" style="zoom:25%;" /><p>但是被裁剪掉的部分仍然可以触发点击事件。解决办法，添加 <code>.contentShape(Rectangle())</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;cube&quot;</span>)<br>        .resizable()<br>        .scaledToFill()<br>        .frame(width: <span class="hljs-number">200</span>, height: <span class="hljs-number">200</span>)<br>        .clipped()<br>.contentShape(<span class="hljs-type">Rectangle</span>())<br>        .onTapGesture &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tapped mainContainer<span class="hljs-subst">\(count)</span><span class="hljs-subst">\n</span>&quot;</span>)<br>            count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 发送 GET/POST 请求</title>
    <link href="/2024/11/29/Swift-%E5%8F%91%E9%80%81-GET-POST-%E8%AF%B7%E6%B1%82/"/>
    <url>/2024/11/29/Swift-%E5%8F%91%E9%80%81-GET-POST-%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> urlComponents <span class="hljs-operator">=</span> <span class="hljs-type">URLComponents</span>(string: <span class="hljs-string">&quot;your url&quot;</span>)<span class="hljs-operator">!</span><br><br><span class="hljs-comment">// 查询条件</span><br>urlComponents.queryItems <span class="hljs-operator">=</span> [<br>    <span class="hljs-type">URLQueryItem</span>(name: <span class="hljs-string">&quot;collection&quot;</span>, value: <span class="hljs-string">&quot;map&quot;</span>)<br>]<br><br><span class="hljs-keyword">var</span> request <span class="hljs-operator">=</span> <span class="hljs-type">URLRequest</span>(url: urlComponents.url<span class="hljs-operator">!</span>)<br><br><span class="hljs-comment">// or</span><br><span class="hljs-comment">// let url = URL(string: &quot;your url&quot;)!</span><br><span class="hljs-comment">// var request = URLRequest(url: url)</span><br><br>request.httpMethod <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span><br>request.setValue(<span class="hljs-string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="hljs-string">&quot;Content-Type&quot;</span>)<br><span class="hljs-comment">// 查询时可能需要加入 token 验证权限</span><br>request.setValue(<span class="hljs-string">&quot;Bearer &quot;</span> <span class="hljs-operator">+</span> token, forHTTPHeaderField: <span class="hljs-string">&quot;Authorization&quot;</span>)<br><br><span class="hljs-keyword">let</span> task <span class="hljs-operator">=</span> <span class="hljs-type">URLSession</span>.shared.dataTask(with: request) &#123; (data, response, error) <span class="hljs-keyword">in</span><br>    <br>    <span class="hljs-keyword">guard</span> error <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: <span class="hljs-subst">\(error<span class="hljs-operator">!</span>)</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> data <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data is nil&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> responseString <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(data: data, encoding: .utf8) <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the response is not in UTF-8&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    logger.info(<span class="hljs-string">&quot;API Response: <span class="hljs-subst">\(responseString)</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">JSONDecoder</span>().decode(<span class="hljs-type">Result</span>.<span class="hljs-keyword">self</span>, from: data)<br>      <span class="hljs-comment">// 处理解析后的数据</span><br>    &#125; <span class="hljs-keyword">catch</span> &#123;<br>        logger.error(<span class="hljs-string">&quot;API: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>    &#125;<br>&#125;<br>task.resume()<br></code></pre></td></tr></table></figure><p>URLComponents 参考：<a href="https://stackoverflow.com/questions/27723912/swift-get-request-with-parameters">Swift GET request with parameters</a></p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> url <span class="hljs-operator">=</span> <span class="hljs-type">URL</span>(string: <span class="hljs-string">&quot;your url&quot;</span>)<span class="hljs-operator">!</span><br><span class="hljs-keyword">var</span> request <span class="hljs-operator">=</span> <span class="hljs-type">URLRequest</span>(url: url)<br>request.httpMethod <span class="hljs-operator">=</span> <span class="hljs-string">&quot;POST&quot;</span><br>request.setValue(<span class="hljs-string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="hljs-string">&quot;Content-Type&quot;</span>)<br><span class="hljs-comment">// 请求时可能需要 token 验证权限</span><br>request.setValue(<span class="hljs-string">&quot;Bearer &quot;</span> <span class="hljs-operator">+</span> token, forHTTPHeaderField: <span class="hljs-string">&quot;Authorization&quot;</span>)<br><br><span class="hljs-keyword">let</span> parameters <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;key1&quot;</span>: value1, <span class="hljs-string">&quot;key2&quot;</span>: value2]<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">JSONEncoder</span>().encode(parameters)<br>    request.httpBody <span class="hljs-operator">=</span> jsonData<br>    <br>    <span class="hljs-keyword">let</span> task <span class="hljs-operator">=</span> <span class="hljs-type">URLSession</span>.shared.dataTask(with: request) &#123; (data, response, error) <span class="hljs-keyword">in</span><br>        <br>        <span class="hljs-keyword">guard</span> error <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: <span class="hljs-subst">\(error<span class="hljs-operator">!</span>)</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> data <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data is nil&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> responseString <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(data: data, encoding: .utf8) <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the response is not in UTF-8&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <br>        logger.info(<span class="hljs-string">&quot;API Response: <span class="hljs-subst">\(responseString)</span>&quot;</span>)<br>        <br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">JSONDecoder</span>().decode(<span class="hljs-type">CreateRoomResult</span>.<span class="hljs-keyword">self</span>, from: data)<br>          <span class="hljs-comment">// 处理解析后的数据</span><br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            logger.error(<span class="hljs-string">&quot;API: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>    <br>    task.resume()<br>    <br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    logger.error(<span class="hljs-string">&quot;API: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 post 需要特别注意的是，如果 parameters 的 value 为不同格式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> parameters <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;key1&quot;</span>: <span class="hljs-type">Int</span>, <span class="hljs-string">&quot;key2&quot;</span>: <span class="hljs-type">String</span>] <span class="hljs-keyword">as</span> [<span class="hljs-type">String</span> : <span class="hljs-keyword">Any</span>]<br></code></pre></td></tr></table></figure><p>此时再使用 <code>JSONEncoder()</code> 则会报错提示 <code>Type &#39;Any&#39; cannot conform to &#39;Encodable&#39;</code>。解决办法是定义一个遵循 <code>Codable</code> 协议的结构：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Parameters</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> key1: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">let</span> key2: <span class="hljs-type">String</span><br>&#125;<br></code></pre></td></tr></table></figure><p>之后再：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> parameters <span class="hljs-operator">=</span> <span class="hljs-type">Parameters</span>(key1: <span class="hljs-type">Int</span>, key2: <span class="hljs-type">String</span>)<br></code></pre></td></tr></table></figure><p>或者直接使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">JSONSerialization</span>.data(withJSONObject: parameters)<br><span class="hljs-comment">// 替换</span><br><span class="hljs-comment">// let jsonData = try JSONEncoder().encode(parameters)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI LabeledContent 合集</title>
    <link href="/2024/11/29/SwiftUI-LabeledContent-%E5%90%88%E9%9B%86/"/>
    <url>/2024/11/29/SwiftUI-LabeledContent-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.danijelavrzan.com/posts/2024/02/labeled-content/">LabeledContent in SwiftUI</a></p><p>下面代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Form</span> &#123;<br>            <span class="hljs-comment">// Version 1</span><br>            <span class="hljs-type">HStack</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Name&quot;</span>)<br>                <span class="hljs-type">Spacer</span>()<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Samantha Carter&quot;</span>)<br>                    .foregroundStyle(.secondary)<br>            &#125;<br><br>            <span class="hljs-comment">// Version 2</span><br>            <span class="hljs-type">HStack</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Age&quot;</span>)<br>                <span class="hljs-type">Text</span>(<span class="hljs-number">43</span>, format: .number)<br>                    .frame(maxWidth: .infinity, alignment: .trailing)<br>                    .foregroundStyle(.secondary)<br>            &#125;<br><br>            <span class="hljs-comment">// Version 3</span><br>            <span class="hljs-type">HStack</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Home Planet&quot;</span>)<br>                <span class="hljs-type">Spacer</span>()<br>                <span class="hljs-type">Group</span> &#123;<br>                    <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;globe.europe.africa.fill&quot;</span>)<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Earth&quot;</span>)<br>                &#125;<br>                .foregroundStyle(.secondary)<br>            &#125;<br><br>            <span class="hljs-comment">// Version 4</span><br>            <span class="hljs-type">HStack</span> &#123;<br>                <span class="hljs-type">VStack</span>(alignment: .leading) &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Team&quot;</span>)<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;SGC&quot;</span>)<br>                        .font(.callout)<br>                        .foregroundStyle(.secondary)<br>                &#125;<br>                <span class="hljs-type">Spacer</span>()<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;SG-1&quot;</span>)<br>                    .foregroundStyle(.secondary)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>等效于：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Form</span> &#123;<br>            <span class="hljs-type">Section</span> &#123;<br>                <span class="hljs-comment">// Version 1: String label &amp; String value</span><br>                <span class="hljs-type">LabeledContent</span>(<span class="hljs-string">&quot;Name&quot;</span>, value: <span class="hljs-string">&quot;Samantha Carter&quot;</span>)<br><br>                <span class="hljs-comment">// Version 2: String label &amp; formatted value</span><br>                <span class="hljs-type">LabeledContent</span>(<span class="hljs-string">&quot;Age&quot;</span>, value: <span class="hljs-number">43</span>, format: .number)<br><br>                <span class="hljs-comment">// Version 3: String label &amp; any View as value</span><br>                <span class="hljs-type">LabeledContent</span>(<span class="hljs-string">&quot;Home Planet&quot;</span>) &#123;<br>                    <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;globe.europe.africa.fill&quot;</span>)<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Earth&quot;</span>)<br>                &#125;<br><br>                <span class="hljs-comment">// Version 4: Any View as value &amp; any View as a label</span><br>                <span class="hljs-type">LabeledContent</span> &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;SG-1&quot;</span>)<br>                &#125; label: &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Team&quot;</span>)<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;SGC&quot;</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，LabeledContent 还能这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Form</span> &#123;<br>            <span class="hljs-comment">// Version 4: Any View as value &amp; any View as a label</span><br>            <span class="hljs-type">LabeledContent</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Value&quot;</span>)<br>            &#125; label: &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Label&quot;</span>)<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Second Label&quot;</span>)<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Third Label&quot;</span>)<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Fourth Label&quot;</span>)<br>                <span class="hljs-comment">// You can add more views, but styling won&#x27;t change</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Toolbar 合集</title>
    <link href="/2024/11/29/SwiftUI-Toolbar-%E5%90%88%E9%9B%86/"/>
    <url>/2024/11/29/SwiftUI-Toolbar-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><p>在 <code>.toolbar</code> 修饰符的闭包中添加组件即可，结合 <code>NavigationView</code> 的时候，添加的组件默认都在导航栏的右侧排布。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift">.toolbar &#123;<br>    <span class="hljs-type">Button</span>(action: &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Saved&quot;</span>)<br>    &#125;, label: &#123;<br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Save&quot;</span>)<br>    &#125;)<br>    <br>    <span class="hljs-type">Button</span>(action: &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Added&quot;</span>)<br>    &#125;, label: &#123;<br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Add&quot;</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ToolbarItem"><a href="#ToolbarItem" class="headerlink" title="ToolbarItem"></a>ToolbarItem</h2><p><code>ToolbarItem</code> 持有一个将被放置在工具栏中的视图。它的特殊之处在于你可以在工具栏中为视图添加位置。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift">.toolbar &#123;<br>    <span class="hljs-type">ToolbarItem</span>(placement: .topBarLeading) &#123;<br>        <span class="hljs-type">Button</span>(action: &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Saved&quot;</span>)<br>        &#125;, label: &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Save&quot;</span>)<br>        &#125;)<br>    &#125;<br>    <br>    <span class="hljs-type">ToolbarItem</span>(placement: .topBarLeading) &#123;<br>        <span class="hljs-type">Button</span>(action: &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Added&quot;</span>)<br>        &#125;, label: &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Add&quot;</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面看一下 <code>placement</code> 参数的可选值，<code>placement</code> 属于 ToolbarItemPlacement 类型，以下类型针对 iOS, iPadOS, and tvOS等平台。</p><ul><li>automatic：默认的放置位置。系统会根据上下文自动决定最合适的位置。在 iOS 和 tvOS 上，默认放在导航栏的右侧。</li><li>principal：将工具栏项放置在导航栏的中心位置。这通常用于标题或者重要控件的展示（如果使用了 <code>principal</code>，那么之前设置的navigation title就失效了。）。</li><li>navigation：将工具栏项放置在导航栏的左侧位置。如果左侧在 compact 模式下有返回按钮的话，那么将工具栏项放置在 primaryAction 的位置。</li><li>primaryAction：将工具栏项放置在导航栏的右侧位置。</li><li>confirmationAction：将工具栏项放置在导航栏的右侧。专门用于放置确认或完成操作的位置。这通常用于模态视图或表单提交的场景。</li><li>cancellationAction：将工具栏项放置在导航栏的左侧。专门用于放置取消操作的位置。这通常用于模态视图中，提供明显的取消选项。</li><li>destructiveAction：将工具栏项放置在导航栏的右侧。专门用于放置可能导致数据删除或其他重要更改的操作，通常用红色或其他警示颜色标记。</li><li>keyboard：将工具栏项放置在键盘的顶部工具栏上。这适用于输入场景，如文本编辑时提供快捷操作。</li><li>navigationBarLeading：将工具栏项放置在导航栏的左侧。建议用 <code>.topBarLeading</code> 代替。</li><li>navigationBarTrailing：将工具栏项放置在导航栏的右侧。建议用 <code>.topBarTrailing</code> 代替。</li><li>bottomBar：将工具栏项放置在屏幕底部的工具栏中。这适用于那些需要常驻底部、易于访问的操作。</li></ul><h2 id="ToolbarItemGroup"><a href="#ToolbarItemGroup" class="headerlink" title="ToolbarItemGroup"></a>ToolbarItemGroup</h2><p><code>ToolbarItemGroup</code> 允许我们定义一组位于同一部位的 item，这样可以简化一些代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift">.toolbar &#123;<br>    <span class="hljs-type">ToolbarItemGroup</span>(placement: .topBarTrailing) &#123;<br>        <span class="hljs-type">Button</span>(action: &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Saved&quot;</span>)<br>        &#125;, label: &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Saved&quot;</span>)<br>        &#125;)<br>        <br>        <span class="hljs-type">Button</span>(action: &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Added&quot;</span>)<br>        &#125;, label: &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Add&quot;</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ToolbarContent"><a href="#ToolbarContent" class="headerlink" title="ToolbarContent"></a>ToolbarContent</h2><p>如果我们要加的 Toolbar item 较多，那么整个代码看起来就非常臃肿了，有的时候有些 <code>Toolbar</code> 是可以复用的，我们可以将 <code>toolbar</code> 修饰符中的内容单独提出来，使用协议 <code>ToolbarContent</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HomeToolbar</span>: <span class="hljs-title class_ inherited__">ToolbarContent</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">ToolbarContent</span> &#123;<br>        <span class="hljs-type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Home&quot;</span>)<br>        &#125;<br>        <br>        <span class="hljs-type">ToolbarItem</span>(placement: .principal) &#123;<br>            <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;bus&quot;</span>)<br>        &#125;<br>        <br>        <span class="hljs-type">ToolbarItem</span>(placement: .bottomBar) &#123;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Save&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Saved&quot;</span>)<br>            &#125;<br>            .buttonStyle(.borderedProminent)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在调用的地方，只需要实例化一个 <code>HomeToolbar</code> 即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">.toolbar &#123;<br>    <span class="hljs-type">HomeToolbar</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ToolbarTitleMenu"><a href="#ToolbarTitleMenu" class="headerlink" title="ToolbarTitleMenu"></a>ToolbarTitleMenu</h2><p><code>toolbarTitleMenu</code> 修饰符允许我们在导航栏的中间部分添加一个 menu 按钮，点击后出现一个下拉菜单。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift">.toolbar &#123;<br>    <span class="hljs-type">ToolbarTitleMenu</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Save&quot;</span>) &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Saved&quot;</span>)<br>        &#125;<br>        <br>        <span class="hljs-type">Button</span>(action: &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Added&quot;</span>)<br>        &#125;, label: &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Add&quot;</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://blog.csdn.net/guoyongming925/article/details/139409033">SwiftUI中Toolbar使用介绍（ToolbarItem, ToolbarItemPlacement, ToolbarItemGroup, ToolbarContent）</a></li><li><a href="https://lingshunlab.com/program/how-to-add-icons-and-custom-layouts-to-the-window-title-bar-in-swiftui-app-on-macos">MacOS 如何在SwiftUI应用的窗口标题栏中添加并图标和自定义布局</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Picker&amp;Segmented 合集</title>
    <link href="/2024/11/29/SwiftUI-Picker-Segmented-%E5%90%88%E9%9B%86/"/>
    <url>/2024/11/29/SwiftUI-Picker-Segmented-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h2><p><a href="https://developer.apple.com/documentation/swiftui/picker">Picker</a></p><p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E9%81%B8%E6%93%87%E9%A0%85%E7%9B%AE%E7%9A%84-picker-%E6%88%91%E8%A6%81%E9%81%B8%E6%9D%8E%E7%99%BD-aabd95adc601">SwiftUI 選擇項目的 Picker &amp; 我要選李白</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Picker</span>()<br><span class="hljs-comment">/// .radioGroup, 点</span><br><span class="hljs-comment">/// .menu 下拉</span><br><span class="hljs-comment">/// .palette .segmented 方块</span><br>.pickerStyle(.radioGroup)<br>.controlSize(.large)<br></code></pre></td></tr></table></figure><h2 id="Segmented"><a href="#Segmented" class="headerlink" title="Segmented"></a>Segmented</h2><p><a href="https://www.hackingwithswift.com/forums/swiftui/segmented-controller/4181">Segmented Controller</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 使用 UserDefaults</title>
    <link href="/2024/11/29/Swift-%E4%BD%BF%E7%94%A8-UserDefaults/"/>
    <url>/2024/11/29/Swift-%E4%BD%BF%E7%94%A8-UserDefaults/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.jianshu.com/p/3796886b4953">Swift中安全优雅的使用UserDefaults</a></p><p>Objective-C 中的 NSUserDefaults 我们并不陌生, 通常作为数据持久化的一种方式, 一般用来存储用户信息和基础配置信息. Swift 中使用 UserDefaults 来替代 NSUserDefaults, 两者的使用基本相同.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> defaults <span class="hljs-operator">=</span> <span class="hljs-type">UserDefaults</span>.standard<br>defaults.set(<span class="hljs-number">123</span>, forKey: <span class="hljs-string">&quot;defaultKey&quot;</span>)<br>defaults.integer(forKey: <span class="hljs-string">&quot;defaultKey&quot;</span>)<br></code></pre></td></tr></table></figure><p>上面的用法是最基本的用法, 也是我们平常开发中使用频率最高的用法, 但也是最危险的用法, 为什么呢?</p><ol><li>在应用内部我们可以随意地覆盖和删除存储的值, 直接使用字符串来作为存储数据的 key 是非常危险的, 容易导致存数据时使用的 key 和取数据的时候使用的 key 不一致.</li><li>UserDefaults.standard 是一个全局的单例, 如果需要存储账户信息(AccountInfo), 配置信息(SettingInfo), 此时按照最基本的使用方式, 简单的使用 key 来存取数据, 那么 key 值会随着存储的数据越来越多, 到时候不管是新接手的小伙伴还是我们自己都很难明白每个 key 值对应的意义. 也就是说我们不能根据方法调用的上下文明确知道我存取数据的具体含义, 代码的可读性和可维护性就不高.所以我们要利用 Swift 强大的灵活性来让我们使用 UserDefaults 存取数据的时候更加便捷和安全.</li></ol><p>所以要想把 UserDefaults 玩出花来就得解决下面两个问题:</p><ul><li><code>一致性</code></li><li><code>上下文</code></li></ul><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>使用 UserDefaults 存取数据时使用的 key 值不同就会导致存在一致性问题. 原因就在于通常我们在存取数据的时候, 手动键入 key 或者复制粘贴 key 可能会出错, 输入的时候也很麻烦. 那我们的目的就比较明确了, 就是为了让存取的 key 一致, 即使改了其中一个另外一个也随之更改.</p><p>解决办法:</p><ul><li>常量保存</li><li>分组存储</li></ul><h3 id="常量保存字符串"><a href="#常量保存字符串" class="headerlink" title="常量保存字符串"></a>常量保存字符串</h3><p>既然涉及到两个重复使用的字符串, 很容易就想到用常量保存字符串, 只有在初始化的时候设置 key 值, 存取的时候拿来用即可, 简单粗暴的方式.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> defaultStand <span class="hljs-operator">=</span> <span class="hljs-type">UserDefaults</span>.standard<br><span class="hljs-keyword">let</span> defaultKey <span class="hljs-operator">=</span> <span class="hljs-string">&quot;defaultKey&quot;</span><br>defaultStand.set(<span class="hljs-number">123</span>, forKey: defaultKey)<br>defaultStand.integer(forKey: defaultKey)<br></code></pre></td></tr></table></figure><p>是不是感觉有点换汤不换药? 上面使用常量存储 key 值, 虽然能够保证存取的时候 key 值相同, 但是在设置 key 值的时候稍显麻烦.<br>最重要的一点就是如果需要存很多账户信息或者配置信息的时候, 按照这种方式都写在同一处地方就稍微欠妥, 比如下面这个场景, 在 app 启动后, 需要存储用户信息和登录信息, 用户信息里面包含: userName, avatar, password, gender等, 登录信息里包含: token, userId, timeStamp等等, 也就说需要存两类不同的信息, 那么此时这种方式就不合时宜了, 我们就会想办法把同类的信息归为一组, 进行分组存取.</p><h3 id="分组存储"><a href="#分组存储" class="headerlink" title="分组存储"></a>分组存储</h3><p>分组存储 key 可以把存储数据按不同类别区分开, 代码的可读性和可维护性大大提升. 我们可以采用类class, 结构体struct, 枚举enum来进行分组存储 key, 下面使用结构体来示例.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 账户信息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AccountInfo</span> &#123;<br>    <span class="hljs-keyword">let</span> userName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userName&quot;</span><br>    <span class="hljs-keyword">let</span> avatar <span class="hljs-operator">=</span> <span class="hljs-string">&quot;avatar&quot;</span><br>    <span class="hljs-keyword">let</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span><br>    <span class="hljs-keyword">let</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gender&quot;</span><br>    <span class="hljs-keyword">let</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&quot;age&quot;</span><br>    <br>&#125;<br><span class="hljs-comment">// 登录信息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginInfo</span> &#123;<br>    <span class="hljs-keyword">let</span> token <span class="hljs-operator">=</span> <span class="hljs-string">&quot;token&quot;</span><br>    <span class="hljs-keyword">let</span> userId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userId&quot;</span><br>&#125;<br><span class="hljs-comment">// 配置信息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SettingInfo</span> &#123;<br>    <span class="hljs-keyword">let</span> font <span class="hljs-operator">=</span> <span class="hljs-string">&quot;font&quot;</span><br>    <span class="hljs-keyword">let</span> backgroundImage <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backgroundImage&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>存取数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> defaultStand <span class="hljs-operator">=</span> <span class="hljs-type">UserDefaults</span>.standard<br><span class="hljs-comment">// 账户信息</span><br>defaultStand.set(<span class="hljs-string">&quot;Chilli Cheng&quot;</span>, forKey: <span class="hljs-type">AccountInfo</span>().avatar)<br>defaultStand.set(<span class="hljs-number">18</span>, forKey: <span class="hljs-type">AccountInfo</span>().age)<br><span class="hljs-comment">// 登录信息</span><br>defaultStand.set(<span class="hljs-string">&quot;achj167&quot;</span>, forKey: <span class="hljs-type">LoginInfo</span>().token)<br><span class="hljs-comment">// 配置信息</span><br>defaultStand.set(<span class="hljs-number">24</span>, forKey: <span class="hljs-type">SettingInfo</span>().font)<br>        <br><span class="hljs-keyword">let</span> userName <span class="hljs-operator">=</span> defaultStand.string(forKey: <span class="hljs-type">AccountInfo</span>().avatar)<br><span class="hljs-keyword">let</span> age <span class="hljs-operator">=</span> defaultStand.integer(forKey: <span class="hljs-type">AccountInfo</span>().age)<br><span class="hljs-keyword">let</span> token <span class="hljs-operator">=</span> defaultStand.string(forKey: <span class="hljs-type">LoginInfo</span>().token)<br><span class="hljs-keyword">let</span> font <span class="hljs-operator">=</span> defaultStand.integer(forKey: <span class="hljs-type">SettingInfo</span>().font)<br></code></pre></td></tr></table></figure><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><p>上面这种方式是不是比直接使用常量的效果更好? 但是仍然有个问题, 账户信息, 登录信息, 配置信息都是属于要存储的信息, 那我们就可以把这三类信息归到一个大类里, 在这个大类中有这三个小类, 三个小类作为大类的属性, 既能解决一致性问题, 又能解决上下文的问题, 需要存储到 UserDefaults 里面的数据, 我只需要去特定的类中找到对应分组里面的属性即可. 示例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">UserDefaultKeys</span> &#123;<br>    <span class="hljs-comment">// 账户信息</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AccountInfo</span> &#123;<br>        <span class="hljs-keyword">let</span> userName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userName&quot;</span><br>        <span class="hljs-keyword">let</span> avatar <span class="hljs-operator">=</span> <span class="hljs-string">&quot;avatar&quot;</span><br>        <span class="hljs-keyword">let</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span><br>        <span class="hljs-keyword">let</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gender&quot;</span><br>        <span class="hljs-keyword">let</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&quot;age&quot;</span><br>    &#125;<br>    <span class="hljs-comment">// 登录信息</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginInfo</span> &#123;<br>        <span class="hljs-keyword">let</span> token <span class="hljs-operator">=</span> <span class="hljs-string">&quot;token&quot;</span><br>        <span class="hljs-keyword">let</span> userId <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userId&quot;</span><br>    &#125;<br>    <span class="hljs-comment">// 配置信息</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SettingInfo</span> &#123;<br>        <span class="hljs-keyword">let</span> font <span class="hljs-operator">=</span> <span class="hljs-string">&quot;font&quot;</span><br>        <span class="hljs-keyword">let</span> backgroundImage <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backgroundImage&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存取数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> defaultStand <span class="hljs-operator">=</span> <span class="hljs-type">UserDefaults</span>.standard<br><span class="hljs-comment">// 账户信息</span><br>defaultStand.set(<span class="hljs-string">&quot;Chilli Cheng&quot;</span>, forKey:<span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>().userName)<br>defaultStand.string(forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>().userName)<br></code></pre></td></tr></table></figure><p>上面的代码看起来可读性好了很多, 不仅是为了新接手的小伙伴能看懂, 更是为了我们自己过段时间能看懂. 我亲眼见过自己写的代码看不懂反而要进行重构的小伙伴.</p><h3 id="避免初始化"><a href="#避免初始化" class="headerlink" title="避免初始化"></a>避免初始化</h3><p>但是上面的代码存在一个明显的缺陷, 每次存取值的时候需要初始化 struct 出一个实例, 再访问这个实例的属性获取 key 值, 其实是不必要的, 怎么才能做到不初始化实例就能访问属性呢? 可以使用静态变量, 直接通过类型名字访问属性的值.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AccountInfo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> userName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userName&quot;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> avatar <span class="hljs-operator">=</span> <span class="hljs-string">&quot;avatar&quot;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gender&quot;</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&quot;age&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>存取的时候:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">defaultStand.set(<span class="hljs-string">&quot;Chilli Cheng&quot;</span>, forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>.userName)<br>defaultStand.string(forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>.userName)<br></code></pre></td></tr></table></figure><h2 id="枚举分组存储"><a href="#枚举分组存储" class="headerlink" title="枚举分组存储"></a>枚举分组存储</h2><p>上面的方法虽然能基本满足要求, 但是仍然不完美, 我们依然需要手动去设置 key, 当 key 值很多的时候, 需要一个个的设置, 那有没有可以一劳永逸的办法呢? 不需要我们自己设置 key 的值, 让系统默认给我们设置好 key 的初始值, 我们直接拿 key 去进行存取数据. Swift这么好的语言当然可以实现, 即用枚举的方式, 枚举不仅可以分组设置 key, 还能默认设置 key 的原始值. 前提是我们需要遵守 String 协议, 不设置 rawValue 的时候, 系统会默认给我们的枚举 case 设置跟成员名字相同的原始值(rawValue), 我们就可以拿这个 rawValue 来作为存取数据的 key.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">UserDefaultKeys</span> &#123;<br>    <span class="hljs-comment">// 账户信息</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AccountInfo</span>: <span class="hljs-title class_ inherited__">String</span> &#123;<br>        <span class="hljs-keyword">case</span> userName<br>        <span class="hljs-keyword">case</span> age<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 存账户信息</span><br>defaultStand.set(<span class="hljs-string">&quot;Chilli Cheng&quot;</span>, forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>.userName.rawValue)<br>defaultStand.set(<span class="hljs-number">18</span>, forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>.age.rawValue)<br><br><span class="hljs-comment">// 取存账户信息</span><br>defaultStand.string(forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>.userName.rawValue)<br>defaultStand.integer(forKey: <span class="hljs-type">UserDefaultKeys</span>.<span class="hljs-type">AccountInfo</span>.age.rawValue)<br></code></pre></td></tr></table></figure><h3 id="优化-key-值路径"><a href="#优化-key-值路径" class="headerlink" title="优化 key 值路径"></a>优化 key 值路径</h3><p>虽然上面的代码能很好的达到目的, 但是写法和使用上还是欠妥, 我们仍需要继续改进, 上面的代码主要存在两个问题:</p><ul><li>key 值路径太长</li><li>rawValue 没必要写</li></ul><p>我们先分析一下为什么会出现这个两个问题:<br>key值的路径长是因为我们想分组存储 key, 让key具有上下文, 可读性更改,<br>rawValue 的作用是因为我们使用枚举来存储 key, 就不需要去手动设置 key 的初始值.</p><p>看起来简直是”鱼和熊掌不能兼得”, 有什么办法能解决”鱼和熊掌”的问题呢?<br>那就是”砍掉抓着鱼的熊掌”. 也就是说我们必须先解决一个问题(先让熊抓鱼), 再想法”砍熊掌”.</p><p>有了上面的一系列步骤, 解决第一个问题并不像刚开始一样使用简单的字符串, 而必须是使用枚举, 在这个前提下去”抓鱼”. 也就是我能不能直接传枚举成员值进去, 先利用枚举的 rawValue 解决第一个问题,例如这样使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">defaultStand.set(<span class="hljs-string">&quot;Chilli Cheng&quot;</span>, forKey: .userName)<br>defaultStand.string(forKey: .userName)<br></code></pre></td></tr></table></figure><p>很明显能够实现, 只要给 userDefaults 扩展自定义方法即可, 在自定义方法中调用系统的方法进行存取, 为了使用方便我们扩展类方法.示例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UserDefaults</span> &#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AccountKeys</span>: <span class="hljs-title class_ inherited__">String</span> &#123;<br>        <span class="hljs-keyword">case</span> userName<br>        <span class="hljs-keyword">case</span> age<br>    &#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>: <span class="hljs-type">String</span>, <span class="hljs-params">forKey</span> <span class="hljs-params">key</span>: <span class="hljs-type">AccountKeys</span>) &#123;<br>        <span class="hljs-keyword">let</span> key <span class="hljs-operator">=</span> key.rawValue<br>        <span class="hljs-type">UserDefaults</span>.standard.set(value, forKey: key)<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">string</span>(<span class="hljs-params">forKey</span> <span class="hljs-params">key</span>: <span class="hljs-type">AccountKeys</span>) -&gt; <span class="hljs-type">String</span>? &#123;<br>        <span class="hljs-keyword">let</span> key <span class="hljs-operator">=</span> key.rawValue<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UserDefaults</span>.standard.string(forKey: key)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 存取数据</span><br><span class="hljs-type">UserDefaults</span>.set(value: <span class="hljs-string">&quot;chilli cheng&quot;</span>, forKey: .userName)<br><span class="hljs-type">UserDefaults</span>.string(forKey: .userName)<br></code></pre></td></tr></table></figure><h3 id="前置上下文"><a href="#前置上下文" class="headerlink" title="前置上下文"></a>前置上下文</h3><p>能实现上面的目的之一, 但是没有上下文, 既然在 key 那里不能加, 换一个思路, 那就在前面加, 例如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">UserDefaults</span>.<span class="hljs-type">AccountInfo</span>.set(value: <span class="hljs-string">&quot;chilli cheng&quot;</span>, forKey: .userName)<br><span class="hljs-type">UserDefaults</span>.<span class="hljs-type">AccountInfo</span>.string(forKey: .userName)<br></code></pre></td></tr></table></figure><p>要实现上面的实现方式, 需要扩展 UserDefaults, 添加 AccountInfo 属性, 再调用 AccountInfo 的方法, key值由 AccountInfo 来提供, 因为AccountInfo 提供分组的 key, 由于是自定义的一个分组信息, 需要实现既定方法, 必然想到用协议呀, 毕竟 Swift 的协议很强大, Swift 就是面向协议编程的.<br>那我们先把自定义的方法抽取到协议中, 额, 但是协议不是只能提供方法声明, 不提供方法实现吗? 谁说的? 站出来我保证不打死他! Swift 中可以对协议 protocol 进行扩展, 提供协议方法的默认实现, 如果遵守协议的类&#x2F;结构体&#x2F;枚举实现了该方法, 就会覆盖掉默认的方法.<br>我们来试着实现一下, 先写一个协议, 提供默认的方法实现:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">UserDefaultsSettable</span> &#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UserDefaultsSettable</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>: <span class="hljs-type">String</span>, <span class="hljs-params">forKey</span> <span class="hljs-params">key</span>: <span class="hljs-type">AccountKeys</span>) &#123;<br>        <span class="hljs-keyword">let</span> key <span class="hljs-operator">=</span> key.rawValue<br>        <span class="hljs-type">UserDefaults</span>.standard.set(value, forKey: key)<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">string</span>(<span class="hljs-params">forKey</span> <span class="hljs-params">key</span>: <span class="hljs-type">AccountKeys</span>) -&gt; <span class="hljs-type">String</span>? &#123;<br>        <span class="hljs-keyword">let</span> key <span class="hljs-operator">=</span> key.rawValue<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UserDefaults</span>.standard.string(forKey: key)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要我的 AccountInfo 类&#x2F;结构体&#x2F;枚举遵守这个协议, 就能调用存取方法了, 但是, 现在问题来了, 也是至关重要的问题, AccountKeys 从哪儿来? 我们上面是把 AccountKeys 写在UserDefaults扩展里面的, 在协议里面如何知道这个变量是什么类型呢? 而且还使用到了 rawValue, 为了通用性, 那就需要在协议里<a href="https://link.jianshu.com/?t=http://wiki.jikexueyuan.com/project/swift/chapter2/23_Generics.html%23associated_types">关联类型</a>, 而且传入的值能拿到 rawValue, 那么这个关联类型需要遵守 RawRepresentable 协议, 这个很关键!!!</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">UserDefaultsSettable</span> &#123;<br>    <span class="hljs-keyword">associatedtype</span> defaultKeys: <span class="hljs-type">RawRepresentable</span><br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UserDefaultsSettable</span> <span class="hljs-keyword">where</span> defaultKeys.<span class="hljs-type">RawValue</span><span class="hljs-operator">==</span><span class="hljs-type">String</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>: <span class="hljs-type">String</span>?, <span class="hljs-params">forKey</span> <span class="hljs-params">key</span>: defaultKeys) &#123;<br>        <span class="hljs-keyword">let</span> aKey <span class="hljs-operator">=</span> key.rawValue<br>        <span class="hljs-type">UserDefaults</span>.standard.set(value, forKey: aKey)<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">string</span>(<span class="hljs-params">forKey</span> <span class="hljs-params">key</span>: defaultKeys) -&gt; <span class="hljs-type">String</span>? &#123;<br>        <span class="hljs-keyword">let</span> aKey <span class="hljs-operator">=</span> key.rawValue<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UserDefaults</span>.standard.string(forKey: aKey)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>必须在扩展中使用 where 子语句限制关联类型是字符串类型, 因为 UserDefaults 的 key 就是字符串类型.<br>where defaultKeys.RawValue&#x3D;&#x3D;String</p></blockquote><p>在 UserDefaults 的扩展中定义分组 key:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UserDefaults</span> &#123;<br>    <span class="hljs-comment">// 账户信息</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AccountInfo</span>: <span class="hljs-title class_ inherited__">UserDefaultsSettable</span> &#123;<br>        <span class="hljs-keyword">enum</span> <span class="hljs-title class_">defaultKeys</span>: <span class="hljs-title class_ inherited__">String</span> &#123;<br>            <span class="hljs-keyword">case</span> userName<br>            <span class="hljs-keyword">case</span> age<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 登录信息</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LoginInfo</span>: <span class="hljs-title class_ inherited__">UserDefaultsSettable</span> &#123;<br>        <span class="hljs-keyword">enum</span> <span class="hljs-title class_">defaultKeys</span>: <span class="hljs-title class_ inherited__">String</span> &#123;<br>            <span class="hljs-keyword">case</span> token<br>            <span class="hljs-keyword">case</span> userId<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存取数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">UserDefaults</span>.<span class="hljs-type">AccountInfo</span>.set(value: <span class="hljs-string">&quot;chilli cheng&quot;</span>, forKey: .userName)<br><span class="hljs-type">UserDefaults</span>.<span class="hljs-type">AccountInfo</span>.string(forKey: .userName)<br>        <br><span class="hljs-type">UserDefaults</span>.<span class="hljs-type">LoginInfo</span>.set(value: <span class="hljs-string">&quot;ahdsjhad&quot;</span>, forKey: .token)<br><span class="hljs-type">UserDefaults</span>.<span class="hljs-type">LoginInfo</span>.string(forKey: .token)<br></code></pre></td></tr></table></figure><p>打完收工, 既没有手动去写 key, 避免了写错的问题, 实现了key的一致性, 又实现了上下文, 能够直接明白 key 的含义.<br>如果还有需要存储的分类数据, 同样在 UserDefaults extension 中添加一个结构体, 遵守 UserDefaultsSettable 协议, 实现 defaultKeys 枚举属性, 在枚举中设置该分类存储数据所需要的 key.</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 支持 http 请求</title>
    <link href="/2024/11/29/Xcode-%E5%85%81%E8%AE%B8%E5%8F%91%E9%80%81-http-%E8%AF%B7%E6%B1%82/"/>
    <url>/2024/11/29/Xcode-%E5%85%81%E8%AE%B8%E5%8F%91%E9%80%81-http-%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>Xcode 现在新建项目默认只支持 HTTPS 请求，认为 HTTP 请求不安全，所以不支持。但是开发环境一般都是 HTTP 模式，所以需要单独配置才可以访问。</p><p>需要到「TARGETS - Info」中添加 App Transport Security Setting，之后选中再添加 Allow Arbitary Loads 并设置为 YES。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 对齐代码快捷键</title>
    <link href="/2024/11/29/Xcode-%E5%AF%B9%E9%BD%90%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2024/11/29/Xcode-%E5%AF%B9%E9%BD%90%E4%BB%A3%E7%A0%81%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>control + i</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 自定义组件样式</title>
    <link href="/2024/11/28/SwiftUI-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/"/>
    <url>/2024/11/28/SwiftUI-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;World&quot;</span>)<br>        &#125;<br>        .padding()<br>        .background(<span class="hljs-type">Color</span>.cyan)<br>        .shadow(color: <span class="hljs-type">Color</span>.black, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120201.png"></p><p>可以发现 hello world 也存在阴影。代码需要调整为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;World&quot;</span>)<br>        &#125;<br>        .padding()<br>        .background(<br>            <span class="hljs-type">Color</span>.cyan<br>                .shadow(color: <span class="hljs-type">Color</span>.black, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>)<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120202.png"></p><p>问题解决。</p><h2 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;World&quot;</span>)<br>        &#125;<br>        .padding()<br>        .background(<br>            <span class="hljs-type">Color</span>.cyan<br>                .cornerRadius(<span class="hljs-number">12</span>)<br><span class="hljs-comment">// .clipShape(.rect(cornerRadius: 12))，胶囊 .clipShape(.capsule)</span><br>                .shadow(color: <span class="hljs-type">Color</span>.black, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>)<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120203.png"></p><p>使用 <code>.clipShape(.rect(cornerRadius: 12))</code> 也可以绘制圆角，使用 <code>.clipShape(.capsule)</code> 则是绘制胶囊图形。</p><p>另外也可以：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;World&quot;</span>)<br>        &#125;<br>        .padding()<br>        .background(<span class="hljs-type">Color</span>.cyan)<br>        .cornerRadius(<span class="hljs-number">12</span>)<br><span class="hljs-comment">// .clipShape(.rect(cornerRadius: 12))，胶囊 .clipShape(.capsule)</span><br>        .shadow(color: <span class="hljs-type">Color</span>.black, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义圆角的位置"><a href="#自定义圆角的位置" class="headerlink" title="自定义圆角的位置"></a>自定义圆角的位置</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestView</span>:<span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;World&quot;</span>)<br>        &#125;<br>        .padding()<br>        .background(<br>            <span class="hljs-type">RoundedCorners</span>(color: .cyan, tl: <span class="hljs-number">0</span>, tr: <span class="hljs-number">12</span>, bl: <span class="hljs-number">12</span>, br: <span class="hljs-number">0</span>)<br>                .shadow(color: <span class="hljs-type">Color</span>.black, radius: <span class="hljs-number">10</span>, x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>)<br>        )<br>        <span class="hljs-comment">//.shadow(color: Color.black, radius: 10, x: 0, y: 0) .shadow 在这里使用的话阴影显示会有问题，hello world 也会带阴影</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">RoundedCorners</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> color: <span class="hljs-type">Color</span> <span class="hljs-operator">=</span> .blue<br>    <span class="hljs-keyword">var</span> tl: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">var</span> tr: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">var</span> bl: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">var</span> br: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">GeometryReader</span> &#123; geometry <span class="hljs-keyword">in</span><br>            <span class="hljs-type">Path</span> &#123; path <span class="hljs-keyword">in</span><br><br>                <span class="hljs-keyword">let</span> w <span class="hljs-operator">=</span> geometry.size.width<br>                <span class="hljs-keyword">let</span> h <span class="hljs-operator">=</span> geometry.size.height<br><br>                <span class="hljs-comment">// Make sure we do not exceed the size of the rectangle</span><br>                <span class="hljs-keyword">let</span> tr <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(<span class="hljs-keyword">self</span>.tr, h<span class="hljs-regexp">/2), w/</span><span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">let</span> tl <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(<span class="hljs-keyword">self</span>.tl, h<span class="hljs-regexp">/2), w/</span><span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">let</span> bl <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(<span class="hljs-keyword">self</span>.bl, h<span class="hljs-regexp">/2), w/</span><span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">let</span> br <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(<span class="hljs-keyword">self</span>.br, h<span class="hljs-regexp">/2), w/</span><span class="hljs-number">2</span>)<br><br>                path.move(to: <span class="hljs-type">CGPoint</span>(x: w <span class="hljs-operator">/</span> <span class="hljs-number">2.0</span>, y: <span class="hljs-number">0</span>))<br>                path.addLine(to: <span class="hljs-type">CGPoint</span>(x: w <span class="hljs-operator">-</span> tr, y: <span class="hljs-number">0</span>))<br>                path.addArc(center: <span class="hljs-type">CGPoint</span>(x: w <span class="hljs-operator">-</span> tr, y: tr), radius: tr, startAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-operator">-</span><span class="hljs-number">90</span>), endAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">0</span>), clockwise: <span class="hljs-literal">false</span>)<br>                path.addLine(to: <span class="hljs-type">CGPoint</span>(x: w, y: h <span class="hljs-operator">-</span> br))<br>                path.addArc(center: <span class="hljs-type">CGPoint</span>(x: w <span class="hljs-operator">-</span> br, y: h <span class="hljs-operator">-</span> br), radius: br, startAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">0</span>), endAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">90</span>), clockwise: <span class="hljs-literal">false</span>)<br>                path.addLine(to: <span class="hljs-type">CGPoint</span>(x: bl, y: h))<br>                path.addArc(center: <span class="hljs-type">CGPoint</span>(x: bl, y: h <span class="hljs-operator">-</span> bl), radius: bl, startAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">90</span>), endAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">180</span>), clockwise: <span class="hljs-literal">false</span>)<br>                path.addLine(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: tl))<br>                path.addArc(center: <span class="hljs-type">CGPoint</span>(x: tl, y: tl), radius: tl, startAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">180</span>), endAngle: <span class="hljs-type">Angle</span>(degrees: <span class="hljs-number">270</span>), clockwise: <span class="hljs-literal">false</span>)<br>            &#125;<br>            .fill(<span class="hljs-keyword">self</span>.color)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/120204.png"></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift Model 与 JSON 转换</title>
    <link href="/2024/11/28/Swift-Model-%E4%B8%8E-JSON-%E8%BD%AC%E6%8D%A2/"/>
    <url>/2024/11/28/Swift-Model-%E4%B8%8E-JSON-%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>首先声明，这里不考虑 <code>JSONSerialization</code> 的 <code>JSONSerialization.jsonObject(with: jsonData, options: [])</code> 和 <code>JSONSerialization.data(withJSONObject: data, options: [])</code>，使用 <code>JSONDecode</code> 和 <code>JSONEncode</code></p><p>原因：</p><ol><li><a href="https://yongpenglovemimi123.gitbook.io/henry/swift/jsonencode-jsondecode">JSONEncode JSONDecode</a></li><li><a href="https://stackoverflow.com/questions/58363994/whats-the-difference-between-using-jsonserialization-and-jsondecoder-in-swift">What’s the difference between using JSONSerialization and JSONDecoder in swift?</a></li><li><a href="https://flight.school/articles/benchmarking-codable/">JSONDecoder vs. JSONSerialization… FIGHT!</a></li><li><a href="https://betterprogramming.pub/time-to-abandon-swiftyjson-switch-jsondecoder-codable-407f9988daec">It’s Time to Abandon SwiftyJSON</a> &#x2F; <a href="https://juejin.cn/post/7325722812816900122">是时候放弃 SwiftyJSON</a></li><li><a href="https://www.appcoda.com.tw/intermediate-swift-tips/json.html">JSON 與 Swift Codable 的介紹</a></li><li><a href="https://blog.51cto.com/u_16175477/8637779">Swift http json</a></li></ol><h2 id="Model-转-JSON"><a href="#Model-转-JSON" class="headerlink" title="Model 转 JSON"></a>Model 转 JSON</h2><p>定义 Model 的结构，需要声明结构遵循 Codable 协议。Codable 协议是一个组合协议，同时声明了 Decoable 和 Encodable 协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">let</span> age: <span class="hljs-type">Int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>之后：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> user <span class="hljs-operator">=</span> <span class="hljs-type">User</span>(id: <span class="hljs-number">1</span>, name: <span class="hljs-string">&quot;haha&quot;</span>, age: <span class="hljs-number">25</span>)<br><br><span class="hljs-keyword">let</span> encoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONEncoder</span>()<br>encoder.outputFormatting <span class="hljs-operator">=</span> [.sortedKeys, .prettyPrinted]<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> encoder.encode(user)  <span class="hljs-comment">// 到这一步就转换成功了</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> jsonString <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(data: jsonData, encoding: .utf8) &#123;<br>        <span class="hljs-built_in">print</span>(jsonString)<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-built_in">print</span>(error.localizedDescription)<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><p><code>.prettyPrinted</code> 的作用是将打印时的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;haha&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">25</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>优化为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;haha&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">25</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>而 <code>.sortedKeys</code> 的作用是对字典进行排序：</p><ol><li><a href="https://juejin.cn/post/7023988923269382151">Swift的字典排序问题</a></li><li><a href="https://stackoverflow.com/questions/50640878/dictionary-key-order-in-swift-4-jsonencoder">Dictionary Key Order in Swift 4 JSONEncoder</a></li><li><a href="https://blog.51cto.com/u_16175450/11998274">iOS开发字典转json之后顺序会变</a></li></ol><h3 id="JSON-String-转-JSON"><a href="#JSON-String-转-JSON" class="headerlink" title="JSON String 转 JSON"></a>JSON String 转 JSON</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> jsonString <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>wall<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>age<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>22<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>hobby<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ball<span class="hljs-subst">\&quot;</span>&#125;&quot;</span><br><span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> jsonData <span class="hljs-operator">=</span> jsonString.data(using: .utf8) <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to jsonString -&gt; jsonData&quot;</span>)<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON-转-Model"><a href="#JSON-转-Model" class="headerlink" title="JSON 转 Model"></a>JSON 转 Model</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> user <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">User</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-built_in">print</span>(user.name)<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-built_in">print</span>(error.localizedDescription)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义复杂的-Model-结构"><a href="#定义复杂的-Model-结构" class="headerlink" title="定义复杂的 Model 结构"></a>定义复杂的 Model 结构</h3><h4 id="数组一"><a href="#数组一" class="headerlink" title="数组一"></a>数组一</h4><p>JSON 格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haha&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xixi&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的 Model 结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">UserList</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <br>    <span class="hljs-keyword">let</span> users: [<span class="hljs-type">User</span>]<br>    <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>        <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span><br>        <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>        <span class="hljs-keyword">let</span> age: <span class="hljs-type">Int</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> userList <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode(<span class="hljs-type">UserList</span>.<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-built_in">print</span>(userList.users)<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-built_in">print</span>(error.localizedDescription)<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/strengthen/p/12381682.html">Swift原生：JSON转换Model</a></p><h4 id="数组二"><a href="#数组二" class="headerlink" title="数组二"></a>数组二</h4><p>JSON 格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haha&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xixi&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>对应的 Model 结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">let</span> age: <span class="hljs-type">Int</span><br>&#125;<br><br><span class="hljs-keyword">let</span> decoder <span class="hljs-operator">=</span> <span class="hljs-type">JSONDecoder</span>()<br><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">let</span> users <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> decoder.decode([<span class="hljs-type">User</span>].<span class="hljs-keyword">self</span>, from: jsonData)<br>    <span class="hljs-built_in">print</span>(user)<br>&#125; <span class="hljs-keyword">catch</span> &#123;<br>    <span class="hljs-built_in">print</span>(error.localizedDescription)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>JSON 格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haha&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;China&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Suzhou&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的 Model 结构如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>    <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">let</span> age: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">let</span> location: <span class="hljs-type">Location</span><br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Location</span>: <span class="hljs-title class_ inherited__">Codable</span> &#123;<br>        <span class="hljs-keyword">let</span> country: <span class="hljs-type">String</span><br>        <span class="hljs-keyword">let</span> city: <span class="hljs-type">String</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://juejin.cn/post/6844904180608417800">Swift中的JSON数据解析</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift WebSocket 合集</title>
    <link href="/2024/11/27/Swift-WebSocket-%E5%90%88%E9%9B%86/"/>
    <url>/2024/11/27/Swift-WebSocket-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Starscream"><a href="#Starscream" class="headerlink" title="Starscream"></a>Starscream</h2><p><a href="https://github.com/daltoniam/Starscream">Starscream</a></p><p><a href="https://juejin.cn/post/7306388118914629670">「SwiftUI」监听回调方法</a></p><p><a href="https://juejin.cn/post/7382216166487621683">swift使用websocket通讯，依赖库Starscream集成，并验证apple watch实现websocket可行性</a></p><h2 id="Stomp"><a href="#Stomp" class="headerlink" title="Stomp"></a>Stomp</h2><p><a href="https://github.com/Romixery/SwiftStomp">SwiftStomp</a></p><p><a href="https://github.com/WrathChaos/StompClientLib">StompClientLib</a></p><p><a href="https://blog.csdn.net/renyuhost/article/details/139627700">Web端在线&#x2F;离线Stomp服务测试与WebSocket服务测试</a> -&gt; <a href="http://www.daelui.com/#/tigerlair/saas/preview/lxbho9lkzvgc">Stomp服务测试</a></p><p><a href="https://blog.csdn.net/weixin_63490470/article/details/141181176">深入解析 STOMP SUBSCRIBE 帧：订阅消息的奥秘</a></p><h2 id="URLSessionWebSocketTask"><a href="#URLSessionWebSocketTask" class="headerlink" title="URLSessionWebSocketTask"></a>URLSessionWebSocketTask</h2><p><a href="https://medium.com/@jqkqq7895/websocket-swift-71ed0104ab81">Websocket使用原生的方式 (Swift)</a></p><p><a href="https://everythingswift.hashnode.dev/websockets-in-swift-using-urlsessions-websockettask-bc372c47a7b3">WebSockets in Swift Using URLSession’s WebSocketTask</a></p><p><a href="https://kristaps.me/blog/websockets-ios-13-swift">Websockets in iOS 13 using Swift and Xcode 11</a></p><p><a href="https://medium.com/@Demian0926/%E4%BD%BF%E7%94%A8websocket-%E6%94%B6%E7%99%BC%E5%8D%B3%E6%99%82%E8%B3%87%E8%A8%8A-edd9ee4afdd1">使用 WebSocket 收發即時資訊</a></p><p><a href="https://medium.com/@ios_guru/swiftui-and-websocket-connectivity-478aa5fddfc7">SwiftUI and WebSocket Connectivity in iOS Development with Swift</a></p><p><a href="https://jayeshkawli.com/using-websockets-on-ios-using/">WebSockets on iOS using URLSessionWebSocketTask</a></p><p><a href="https://www.appspector.com/blog/websockets-in-ios-using-urlsessionwebsockettask?ref=jayeshkawli.com">WWDC Review: How to use URLSessionWebSocketTask in Swift</a></p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><p><a href="http://www.websocket-test.com/">WebSocket 在线测试 v13</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 工程开启定位服务</title>
    <link href="/2024/11/26/macOS-%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%90%AF%E5%AE%9A%E4%BD%8D%E6%9C%8D%E5%8A%A1/"/>
    <url>/2024/11/26/macOS-%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%90%AF%E5%AE%9A%E4%BD%8D%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>macOS 的定位服务不同于 iOS，不需要添加 Privacy 描述，也无需进行  <code>requestAlwaysAuthorization()</code>  或者  <code>requestWhenInUseAuthorization()</code>。</p><p>而是在 .entitlements 文件中添加一条 Location 属性并设置成 YES，如图：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/112701.png"></p><p>或者在「TARGETS - Singin &amp; Capabilities」中找到 App Sandbox，勾选 Location，如图：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/112702.png"></p><p>两者为同一操作，完成其中一个操作，另一个操作会自动完成。</p><p>之后就能在「Mac 设置 - 隐私与安全性 - 定位服务」中找到对应的应用并授权。</p><p>参考：</p><ol><li><a href="https://stackoverflow.com/questions/45008592/how-to-request-auth-for-cllocationmanager-on-macos">how to request auth for CLLocationManager on macOS</a></li></ol><blockquote><p>According to the <a href="https://developer.apple.com/videos/play/wwdc2016/716/">Core Location Best Practices</a> WWDC 2016 session, </p><blockquote><p>For macOS, we only support always authorization. Furthermore, Core Location will automatically display a prompt when you attempt to access location information.</p><p>You don’t need to call requestAlwaysAuthorization on macOS.</p></blockquote><p>Don’t forget to turn on “Location” under the “App Sandbox” capability for your target. Also, in my tests, the prompt was only shown the first time the app was run.</p></blockquote><ol start="2"><li><a href="https://stackoverflow.com/questions/46138816/cllocationmanager-on-macos-app-does-not-ask-for-location">CLLocationManager on macOS app does not ask for location</a></li></ol><blockquote><p>This error message means that the application has not been granted permission to obtain the user’s location. To fix this you need to ensure that the application is properly “sandboxed” and that the location is enabled. You can do this in Xcode with the following steps:</p><p>In the project navigator, click on your application’s target. This should bring up a view with tabs such as “General”, “Capabilities”, “Resource Tags”, etc.</p><p>Click on the “Capabilities” tab. This will give you a list of items such as “App Groups”, “App Sandbox” and so on. Each item will have an “On&#x2F;Off” button.</p><p>Turn on the “App Sandbox” item and press the “&gt;” button on the left to show the sandbox stuff.</p><p>In the “App Data” section, select “Location”.</p><p>Now the next time you run your application, it will ask the user to allow it to use the current location. Assuming they answer in the affirmative, you should no longer see the error but instead should see the current position highlighted on the map.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 原生 UI&amp;UX 开发</title>
    <link href="/2024/11/26/SwiftUI-%E5%8E%9F%E7%94%9F-UI-UX-%E5%BC%80%E5%8F%91/"/>
    <url>/2024/11/26/SwiftUI-%E5%8E%9F%E7%94%9F-UI-UX-%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><ul><li><a href="https://www.swiftyplace.com/blog/swiftui-font-and-texts">SwiftUI Font and Texts</a></li><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/ios-app-%E7%9A%84-4-%E7%A8%AE%E7%B3%BB%E7%B5%B1%E5%AD%97%E9%AB%94-da51d4f8e77b">iOS App 的 4 種系統字體</a></li></ul><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><ul><li><a href="https://ivensliaoblog.com/best-practices-for-implementing-dark-mode-in-swiftui/">在 SwiftUI 中添加 Dark Mode 最佳实践</a></li></ul><h2 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h2><ul><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E5%88%A9%E7%94%A8-1024x1024-%E7%9A%84%E5%9C%96%E7%89%87%E8%A8%AD%E5%AE%9A-app-icon-xcode-14-%E6%96%B0%E5%8A%9F%E8%83%BD-b140cdd776c5">從 Xcode 設定 iOS App Icon</a></li></ul><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 判断用户是否处于地图上的某一区域内</title>
    <link href="/2024/11/21/SwiftUI-%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E6%9F%90%E4%B8%80%E5%8C%BA%E5%9F%9F%E5%86%85/"/>
    <url>/2024/11/21/SwiftUI-%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E6%9F%90%E4%B8%80%E5%8C%BA%E5%9F%9F%E5%86%85/</url>
    
    <content type="html"><![CDATA[<p>将用户以及围成区域的点的坐标全部转换为 MKMapPoint，再绘制路径，最后判断用户的点是否被路径包含。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> point1: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(hexagon.points[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">let</span> point2: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(hexagon.points[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">let</span> point3: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(hexagon.points[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">let</span> point4: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(hexagon.points[<span class="hljs-number">3</span>])<br><span class="hljs-keyword">let</span> point5: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(hexagon.points[<span class="hljs-number">4</span>])<br><span class="hljs-keyword">let</span> point6: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(hexagon.points[<span class="hljs-number">5</span>])<br><br><span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> <span class="hljs-type">UIBezierPath</span>()<br>path.move(to: <span class="hljs-type">CGPoint</span>(x: point1.x, y: point1.y))<br>path.addLine(to: <span class="hljs-type">CGPoint</span>(x: point2.x, y: point2.y))<br>path.addLine(to: <span class="hljs-type">CGPoint</span>(x: point3.x, y: point3.y))<br>path.addLine(to: <span class="hljs-type">CGPoint</span>(x: point4.x, y: point4.y))<br>path.addLine(to: <span class="hljs-type">CGPoint</span>(x: point5.x, y: point5.y))<br>path.addLine(to: <span class="hljs-type">CGPoint</span>(x: point6.x, y: point6.y))<br>path.addLine(to: <span class="hljs-type">CGPoint</span>(x: point1.x, y: point1.y))<br>path.close()<br><br><span class="hljs-keyword">if</span> path.contains(<span class="hljs-type">CGPoint</span>(x: userPosition.x, y: userPosition.y)) &#123;<br><span class="hljs-operator">...</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map</tag>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 使用 CoreLocation 获取设备的经纬度与方向</title>
    <link href="/2024/11/21/Swift-%E4%BD%BF%E7%94%A8-CoreLocation-%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    <url>/2024/11/21/Swift-%E4%BD%BF%E7%94%A8-CoreLocation-%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E7%9A%84%E7%BB%8F%E7%BA%AC%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h2><p>需要在 Targets 中的 Info 中添加：</p><p>Privacy - Location When In Use Usage Description</p><p>或者</p><p>Privacy - Location Always Usage Description</p><p>Privacy - Location Always and When In Use Usage Description</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> CoreLocation<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LocationDataManager</span>: <span class="hljs-title class_ inherited__">NSObject</span>, <span class="hljs-title class_ inherited__">CLLocationManagerDelegate</span>, <span class="hljs-title class_ inherited__">ObservableObject</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> locationManager <span class="hljs-operator">=</span> <span class="hljs-type">CLLocationManager</span>()<br>    <br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> currentPosition: <span class="hljs-type">CLLocationCoordinate2D</span>?<span class="hljs-comment">// 坐标</span><br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> currentSpeed: <span class="hljs-type">CLLocationSpeed</span>?<span class="hljs-comment">// 速度</span><br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> authorizationStatus: <span class="hljs-type">CLAuthorizationStatus</span>?<span class="hljs-comment">// 状态</span><br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> heading: <span class="hljs-type">CLLocationDirection</span>?<span class="hljs-comment">// 方向</span><br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">init</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()<br>        locationManager.delegate <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span><br>        locationManager.desiredAccuracy <span class="hljs-operator">=</span> kCLLocationAccuracyBestForNavigation<br><span class="hljs-comment">//        locationManager.distanceFilter = 10     // 感觉没啥用</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">locationManagerDidChangeAuthorization</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">manager</span>: <span class="hljs-type">CLLocationManager</span>) &#123;<br>        <br>        <span class="hljs-keyword">switch</span> manager.authorizationStatus &#123;<br>        <span class="hljs-keyword">case</span> .authorizedWhenInUse:<br>            authorizationStatus <span class="hljs-operator">=</span> .authorizedWhenInUse<br>            manager.startUpdatingLocation()<br>            manager.startUpdatingHeading()<br>            <span class="hljs-keyword">break</span><br>            <br>        <span class="hljs-keyword">case</span> .restricted:       <span class="hljs-comment">// 受限</span><br>            authorizationStatus <span class="hljs-operator">=</span> .restricted<br>            manager.stopUpdatingLocation()<br>            manager.stopUpdatingHeading()<br>            <span class="hljs-keyword">break</span><br>            <br>        <span class="hljs-keyword">case</span> .denied:           <span class="hljs-comment">// 拒绝</span><br>            authorizationStatus <span class="hljs-operator">=</span> .denied<br>            manager.stopUpdatingLocation()<br>            manager.stopUpdatingHeading()<br>            <span class="hljs-keyword">break</span><br>            <br>        <span class="hljs-keyword">case</span> .notDetermined:    <span class="hljs-comment">// 等待回应</span><br>            authorizationStatus <span class="hljs-operator">=</span> .notDetermined<br>            manager.requestWhenInUseAuthorization()<br>            <span class="hljs-keyword">break</span><br>            <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">locationManager</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">manager</span>: <span class="hljs-type">CLLocationManager</span>, <span class="hljs-params">didUpdateLocations</span> <span class="hljs-params">locations</span>: [<span class="hljs-type">CLLocation</span>]) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> newPosition <span class="hljs-operator">=</span> manager.location &#123;<br>            currentPosition <span class="hljs-operator">=</span> newPosition.coordinate<br>            currentSpeed <span class="hljs-operator">=</span> newPosition.speed<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">locationManager</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">manager</span>: <span class="hljs-type">CLLocationManager</span>, <span class="hljs-params">didUpdateHeading</span> <span class="hljs-params">newHeading</span>: <span class="hljs-type">CLHeading</span>) &#123;<br>        heading <span class="hljs-operator">=</span> newHeading.trueHeading<br>        <span class="hljs-comment">// magneticHeading ：磁极方向（磁北对应于随时间变化的地球磁场极点）</span><br><span class="hljs-comment">// trueHeading ：真实方向（真北始终指向地理北极点）</span><br><span class="hljs-comment">// headingAccuracy ：方向的精度</span><br><span class="hljs-comment">// timestamp ：Core Loaction确定位置时的时间戳</span><br><span class="hljs-comment">// description ： 方向数据</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">locationManager</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">manager</span>: <span class="hljs-type">CLLocationManager</span>, <span class="hljs-params">didFailWithError</span> <span class="hljs-params">error</span>: <span class="hljs-type">Error</span>) &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error: <span class="hljs-subst">\(error.localizedDescription)</span>&quot;</span>)<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">stopLocation</span>() &#123;<br>        locationManager.stopUpdatingLocation()<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@StateObject</span> <span class="hljs-keyword">var</span> locationDataManager <span class="hljs-operator">=</span> <span class="hljs-type">LocationDataManager</span>()<br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <br>            <span class="hljs-keyword">switch</span> locationDataManager.authorizationStatus &#123;<br>            <br>            <span class="hljs-keyword">case</span> .authorizedWhenInUse:<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Your current location is:&quot;</span>)<br>                <span class="hljs-type">Text</span>(locationDataManager.currentPosition<span class="hljs-operator">?</span>.latitude.description <span class="hljs-operator">??</span> <span class="hljs-string">&quot;Error&quot;</span>)<br>                <span class="hljs-type">Text</span>(locationDataManager.currentPosition<span class="hljs-operator">?</span>.longitude.description <span class="hljs-operator">??</span> <span class="hljs-string">&quot;Error&quot;</span>)<br>                <br>                   <br>            <span class="hljs-keyword">case</span> .restricted, .denied:<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;前往 App 的设置中开启定位...&quot;</span>)<br>                <br>            <span class="hljs-keyword">case</span> .notDetermined:<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;等待授权...&quot;</span>)<br>                <span class="hljs-type">ProgressView</span>()<br>                <br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-type">ProgressView</span>()<br>            &#125;<br>        &#125;<br>        .onReceive(locationDataManager.<span class="hljs-variable">$currentPosition</span>) &#123; position <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">if</span> locationDataManager.authorizationStatus <span class="hljs-operator">==</span> .authorizedWhenInUse &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Location Is Change&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>#<span class="hljs-type">Preview</span> &#123;<br>    <span class="hljs-type">ContentView</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定位精度"><a href="#定位精度" class="headerlink" title="定位精度"></a>定位精度</h2><p>有两个属性 <code>.desiredAccuracy</code> 与 <code>.distanceFilter</code>。</p><h3 id="desiredAccuracy"><a href="#desiredAccuracy" class="headerlink" title=".desiredAccuracy"></a>.desiredAccuracy</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">kCLLocationAccuracyBestForNavigation    <span class="hljs-comment">// 精度最高，一般用于导航</span><br>kCLLocationAccuracyBest                 <span class="hljs-comment">// 精确度最佳</span><br>kCLLocationAccuracynearestTenMeters     <span class="hljs-comment">// 精确度10m以内</span><br>kCLLocationAccuracyHundredMeters        <span class="hljs-comment">// 精确度100m以内</span><br>kCLLocationAccuracyKilometer            <span class="hljs-comment">// 精确度1000m以内</span><br>kCLLocationAccuracyThreeKilometers      <span class="hljs-comment">// 精确度3000m以内</span><br></code></pre></td></tr></table></figure><h3 id="distanceFilter"><a href="#distanceFilter" class="headerlink" title=".distanceFilter"></a>.distanceFilter</h3><p>我们无法直接控制 loctionManager 更新的频率，但可使用 distanceFilter 属性（单位米）进行间接控制。</p><p>它指设备（水平或垂直）移动多少米后才将另一个更新发送给委托。定位要求的精度越高，distanceFilter 属性的值越小，应用程序的耗电量就越大。</p><p><strong>但是目前看下来，好像没什么效果。</strong></p><p>参考：</p><ol><li><a href="https://www.createwithswift.com/updating-the-users-location-with-core-location-and-swift-concurrency-in-swiftui/">Updating the User’s Location with Core Location and Swift Concurrency in SwiftUI</a></li><li><a href="https://coledennis.medium.com/tutorial-connecting-core-location-to-a-swiftui-app-dc62563bd1de">Tutorial: Connecting Core Location to a SwiftUI App</a></li><li><a href="https://blog.csdn.net/guoyongming925/article/details/139517701">SwiftUI获取用户的位置信息 CLLocationManager，CLLocationManagerDelegate</a></li><li><a href="https://www.cnblogs.com/LiuLady12138/p/5048521.html">Swift - 使用CoreLocation实现定位（经纬度、海拔、速度、距离等）</a></li><li><a href="https://gist.github.com/koher/ecf5471a8f47c55f70b575350936b57d">An example how to use onReceive with @published</a></li><li><a href="https://stackoverflow.com/questions/6979319/difference-between-desiredaccuracy-and-distancefilter">difference between desiredAccuracy and distanceFilter</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 两种刷新视图的方法</title>
    <link href="/2024/11/21/SwiftUI-%E4%B8%A4%E7%A7%8D%E5%88%B7%E6%96%B0%E8%A7%86%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/11/21/SwiftUI-%E4%B8%A4%E7%A7%8D%E5%88%B7%E6%96%B0%E8%A7%86%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>有两种做法，一种是在写入数据的时候修改元素的属性，这要求 Item 必须带有 r 字段，r 字段用来 View 的显示和刷新。另一种是在 View 显示时返回需要的值。</p><p>前者因为是定制的关系，所以计算量小，但根据需求变动可能需要频繁调整 Item 的属性，代码修改起来工程量大，不灵活；后者泛用，类似于 Foreach 中的筛选，不会直接操作数据源，但代码写起来比较麻烦且计算量会比较大。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> item: <span class="hljs-type">Item</span> <span class="hljs-operator">=</span> .<span class="hljs-keyword">init</span>(id: <span class="hljs-type">UUID</span>(), r: <span class="hljs-number">0</span>, array: [])<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">backR</span>() -&gt; <span class="hljs-type">CGFloat</span> &#123;<br>        <span class="hljs-keyword">let</span> r: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-type">CGFloat</span>(item.array.count)<br>        <span class="hljs-keyword">return</span> r<br>    &#125;<br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <br>        <span class="hljs-type">VStack</span> &#123;<br>            <br>            <span class="hljs-type">Button</span>(action: &#123;<br>                item.array.append(<span class="hljs-number">1</span>)<br>                item.r <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Add&quot;</span>)<br>            &#125;<br>            <br>            <span class="hljs-type">Circle</span>()<br>                .frame(width: <span class="hljs-type">CGFloat</span>(item.r), height: <span class="hljs-type">CGFloat</span>(item.r))<br>            <span class="hljs-type">Circle</span>()<br>                .frame(width: backR(), height: backR())<br>                        <br>        &#125;<br>    &#125;<br>&#125;<br><br>#<span class="hljs-type">Preview</span> &#123;<br>    <span class="hljs-type">ContentView</span>()<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Item</span>: <span class="hljs-title class_ inherited__">Identifiable</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span>?<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> r: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> array: <span class="hljs-type">Array</span>&lt;<span class="hljs-keyword">Any</span>&gt;<br>    <br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UUID</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span>, <span class="hljs-params">r</span>: <span class="hljs-type">Int</span>, <span class="hljs-params">array</span>: <span class="hljs-type">Array</span>&lt;<span class="hljs-keyword">Any</span>&gt;) &#123;<br>        <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id<br>        <span class="hljs-keyword">self</span>.r <span class="hljs-operator">=</span> r<br>        <span class="hljs-keyword">self</span>.array <span class="hljs-operator">=</span> array<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」Mixing Chamber VS Breath by Breath</title>
    <link href="/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DMixing-Chamber-VS-Breath-by-Breath/"/>
    <url>/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DMixing-Chamber-VS-Breath-by-Breath/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.redbackbiotek.com/mixing-chamber">Mixing Chamber VS Breath by Breath</a></p><h2 id="Modern-Indirect-Respiratory-Metabolic-Analysis-VO2"><a href="#Modern-Indirect-Respiratory-Metabolic-Analysis-VO2" class="headerlink" title="Modern Indirect Respiratory Metabolic Analysis(VO2)"></a>Modern Indirect Respiratory Metabolic Analysis(VO2)</h2><p>Sometimes called CPET (Cardio Pulmonary Exercise Testing), or VO2 max testing. Despite this being a very commonplace test, it is actually very hard to do properly. This is because, in reality, there are a multitude of factors that can conspire against a diligent scientist that can go wrong. Unfortunately this type of testing has been made to look simple with a much more convenient technology in recent times called Breath by Breath (BxB) CPET. See picture below. Note how much less cumbersome this looks, is to work with for the scientist and use for the athlete.</p><p>It is only fair to hope that life can be made easier with changing technology, this however has camouflaged the reality of the significant errors that result from this BxB methodology. Too great to be ignored or in fact useful for athletic measurements.</p><p>This methodology was initially proposed in the late 1960’s by Beaver and Wasserman of Harbor-UCLA and later with Brian Whipp became the gurus and advocates of BxB measurements. It was hoped that the intra-breath information of BBB measurements would yield information about the dynamics of muscle O2 uptake. (Ref. John Hoppe and Andrew Huszczuk Ph.D.)</p><p>Unfortunately, at the time, the technology didn’t exist to do this properly. Now that the technology does exist and we can measure this information with more detailed sensors, we’ve learnt that the methodology is flawed. In fact the many problems and magnitude of errors makes this system unfit for the purpose of tracking athletic performance (despite the many manufacturer’s claims). Lets examine why…</p><h2 id="Summary-of-Breath-by-Breath-issues"><a href="#Summary-of-Breath-by-Breath-issues" class="headerlink" title="Summary of Breath by Breath issues:"></a>Summary of Breath by Breath issues:</h2><p>Firstly let us summarise the issues and expand on this understanding later.</p><ol><li>BxB system use very noisy (real) instantaneous O2, CO2, and flow signals.</li><li>Time misalignment of O2, CO2 and flow signals are almost impossible to correct.</li><li>The instantaneous multiplication of these signals to VO2 create incredibly noisy VO2 signals.</li><li>Very small changes or errors in O2 results in very large changes or errors in VO2 (about 50 times).</li><li>Gas sampling at a point with large flow variations means flow to sensors is unstable.</li><li>Mouthpeice sampling means very large swings in gas concentrations from room air to sample.</li><li>If running, then a very noisy flow resulting from lung vibrations adds to the noise in BxB systems.</li></ol><h3 id="1-Flow-O2-and-CO2-versus-time-graphs-are-very-noisy"><a href="#1-Flow-O2-and-CO2-versus-time-graphs-are-very-noisy" class="headerlink" title="1.Flow, O2 and CO2 versus time graphs are very noisy"></a>1.Flow, O2 and CO2 versus time graphs are very noisy</h3><p>This is a typical resting flow versus time graph. See below.</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Flow-graph.jpg"></p><p>You may not think that this is a very noisy signal right. Just smooth it and work with the smoothed curve? That is exactly what mixing chambers do. But BxB systems do not have this luxury. They must sample this curve at least 200 times per second and hence the data they are using is every single noisy point. (also this graph is using older more forgiving technology). Newer technology (Hans Rudolph Pneumotach…a gold standard well above most) will have far more variations.</p><p>This graph is for rested breathing but in reality, for exercise, this graph is even noisier, varies significantly in amplitude for each breath, is faster and harder to track and is very inconsistent. This makes it very hard to determine when an actual breath starts and finishes… certainly an issue if you need to look at segments within each breath as you do in BxB…where you need to know precisely where each section of each breath is for time alignment. Also the graphs for O2 and CO2 concentrations are also very noisy with the added issue that they vary within the breath. Typically the O2 values are high at the start of the breath and low at the end, with the CO2 being the opposite. </p><p>(ref. L.E. Armstrong and D.L. Costill. Variability of respiration and metabolism 1985)</p><h3 id="2-Time-misalignment-of-flow-O2-and-CO2"><a href="#2-Time-misalignment-of-flow-O2-and-CO2" class="headerlink" title="2.Time misalignment of flow, O2 and CO2"></a>2.Time misalignment of flow, O2 and CO2</h3><p>The first sensor signal to be received is usually the flow (Ve or Vi). This is because generally it is used as the reference point but also as it is normally closest to the subject. The O2 and CO2 must wait their turn as the sample line takes a little longer to take the sample from the mouth to the sensors and their electronics. (<em>Again in Mixing chamber systems this is much more forgiving because they only need to synchronise this once per breath and being a little out is no great sin. Also as the tubing bore is about 25 times wider than a BxB sample line, transport time is easy to calculate using simple physics, is not subject to issues of restricted flow due to sample line humidity and other issues we’ll discuss shortly</em>).</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/flow-O2-CO2-curves11222018-1024x718.jpg"></p><p>And here we are now at a very significant point where we must now multiply the exact portion of breath for each Flow, O2 and CO2. Now if you’ve been following this discussion at all, you’ll realise we have the following:</p><ol><li>very noisy flow, O2 and CO2 signals</li><li>these signals have been sampled about 200 times per breath (to reconstruct the breath properly)</li><li>the signals are misaligned</li><li>we must multiply the exact same sections of this breath.</li></ol><p>If we say a breath is one second long for simplicity, then we want to multiply every 1&#x2F;200th of breath Flow, O2 and CO2 with each other. Lets just look at one of these points, say sample at time 0.500 to 0.505. This means we must realign sections of Flow(0.500s to 0.505s), O2(0.500s to 0.505s) and CO2(0.500s to 0.505s). But in such a noisy signal how can we be sure we have aligned these at all? We need to be sure where each breath starts and finishes. Its just not possible given how much the data is changing in real time. So manufacturers just produce an algorithm to guess this and curve fit. This is why none of them will give you the algorithm, not because there is some genius in their knowledge (this kind of signal processing is very well understood) but because they employ fudge factors to make all this work…and they still cant make it work if you explore published findings. So what does this mean to our information? Well if we are multiplying the data as follows for example Flow(0.505s), O2(0.540), CO2(0.545), which is very likely because we have misaligned data, then we are just creating new data based on our sampling methods that never existed. If you feel that perhaps these are trivial changes to the data, then read on. You will realise that the slightest error in say O2 will result in a very significant error in VO2. (in fact about 50x the O2 error). Read on.</p><h3 id="3-Multiplying-instantaneous-values-of-Flow-O2-and-CO2-creates-very-noisy-signals"><a href="#3-Multiplying-instantaneous-values-of-Flow-O2-and-CO2-creates-very-noisy-signals" class="headerlink" title="3.Multiplying instantaneous values of Flow, O2 and CO2 creates very noisy signals"></a>3.Multiplying instantaneous values of Flow, O2 and CO2 creates very noisy signals</h3><p>Below is a spreadsheet developed by us to track mathematically an error in any one or multiple VO2 parameters and their effect on VO2 error. We normally use these to see how much error any metabolic system has based on manufacturer’s specifications. </p><p><a href="https://www.redbackbiotek.com/wp-content/uploads/2018/01/VO2-calculator-Redback-Biotek-Error-sum-of-squares-for-absolute-error-2.xlsx">VO2 calculator Redback Biotek – Error sum of squares for absolute error (2)</a></p><p>Lets just see what happens if we insert an O2 error of about 5% relative and a Flow error of the same. This I’m sure you’ll agree looking at the above graph is pretty generous, as it could be much more with all the probable causes in error already discussed (with much more to come).</p><p>So with reference values set at say: FiO2&#x3D;21%, <strong>FeO2&#x3D;17.5%</strong>, FiCO2&#x3D;0.04, FeCO2&#x3D;3.8, <strong>Ve&#x3D;137L&#x2F;min</strong>.</p><p>Now lets add the 5% relative error to <strong>FeO2</strong> and <strong>Ve</strong> only. This would change these values to: <strong>FeO2&#x3D; 18.3% , Ve&#x3D;143.8L&#x2F;min</strong></p><p>Its not looking too drastic at all at this stage. However using our error algorithm above, this amounts to a <strong>VO2 error &#x3D; 33.9%</strong></p><p>If you cant follow or dont believe the algorithm, simply do the VO2 calculation yourself with these  new values and see what the new VO2 will be.</p><p>Also keep in mind we have not added any error to CO2 or any other sensors. For example humidity can play havoc on this measurement if we dont have an excellent drying system. Any if you test many athletes at once, this perfect drying system will certainly have its work cut out.(Dr. Chris Gore et. al, Australian Institute of Sport. Error contributions to VO2.)</p><p>Now one could say, that we could smooth these values by averaging and this is very true. But now you have created a very noisy signal that you need to smooth and average. This will never properly reconstruct the data to something useful for athletic use, where we know that very small changes of say 2-5% in VO2 are very large improvements for an athlete even over the course of one to two years. Added to the fact that not only is it noisy but seriously erroneous based on misaligned data.</p><h3 id="4-Small-errors-in-O2-result-in-very-large-errors-in-VO2"><a href="#4-Small-errors-in-O2-result-in-very-large-errors-in-VO2" class="headerlink" title="4.Small errors in O2 result in very large errors in VO2"></a>4.Small errors in O2 result in very large errors in VO2</h3><p>To get closer to the culprit in VO2 errors we simply need to examine the effect of O2 errors on the VO2 calculation. This holds true for mixing chamber as well as BxB systems.</p><p>If we take the error calculating spreadsheet above and look at FeO2&#x3D;17.5% as previously discussed, what happens if we have even just 0.1% absolute error in the O2 sensor. (pretty common accuracy) So FeO2&#x3D;17.6%, put this to the VO2 equation and you’ll find a VO2 error of about 4%. Too high an increment for tracking athlete improvements. Add the typical flow sensor error of 2-3% and you have quite a lot of error already.</p><p><strong>0.1% O2 error &#x3D; 4% VO2 error<br>2.5% Flow error &#x3D; 2.5% VO2 error</strong></p><p>So its not enough to have a mixing chamber system, you must have a very accurate O2 sensor also! Its goes without saying that you can add the error of your calibration gas to this error. So for this reason, any calibration gas that has an error of more than 0.02% absolute is not useful. (VO2 error&#x3D;about 0.8%) Some gases supplied to many labs have certification at 5% relative (This is roughly 1% absolute). If 0.1% gives an error of about 4% VO2, how can we accept a gas with a 1.0% error (ten times worse)?</p><p>O2 Cal gas error 0.02% &#x3D; 0.8% VO2 error<br>O2 Cal gas error 0.1% &#x3D; 4.0% VO2 error<br>O2 Cal gas error 1.0% &#x3D; 33.2% VO2 error</p><h3 id="5-Flow-variations-cause-havoc-with-O2-and-CO2-sensors"><a href="#5-Flow-variations-cause-havoc-with-O2-and-CO2-sensors" class="headerlink" title="5.Flow variations cause havoc with O2 and CO2 sensors"></a>5.Flow variations cause havoc with O2 and CO2 sensors</h3><p>Some people may think that sensors measure the percentage of O2 or CO2. This is not true. In fact, all a sensor can hope to measure is the amount of O2 or CO2. At least with sensors to date. So it responds to the amount of O2 or CO2 presented to the sensor. This means that we must keep the flow through the sensor as constant as possible. So that the changes in O2 or CO2 can only be the result in the change in concentration. </p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/mouthpiece11222018_0001-1024x718.jpg"></p><p>This is not a problem for Mixing chamber systems as the mixing chamber dampens any flow variations from the breathing tube. Unfortunately, in the case of BxB systems, the sample line is constantly experiencing large flow changes. This is due to the normal flow of expired followed by inspired air happening right at the point of sampling. This means it is well-nigh impossible to maintain a constant flow into the O2 and CO2 sensors. This makes for a very erroneous and unsettled O2 and CO2 values (keep in mind sensors take time…about 0.1 to 3.0 seconds, just to settle…how can you ever get a true reading of the situation). Unfortunately, you now must also mutiply this oscillating signal of O2 to Flow as per above. As if the situation wasnt bad enough already when we didnt assume these issues, we’re really making a bad situation very much worse.</p><h3 id="6-Mouthpiece-sampling-means-large-swings-from-room-air-to-sample-air-gas-concentrations"><a href="#6-Mouthpiece-sampling-means-large-swings-from-room-air-to-sample-air-gas-concentrations" class="headerlink" title="6.Mouthpiece sampling means large swings from room air to sample air gas concentrations"></a>6.Mouthpiece sampling means large swings from room air to sample air gas concentrations</h3><p>To make matters worse, the sample line is not just subject to unstable flow, but it is also subject to large swings in concentration, due to the pressure changes at the mouthpeice. To explain, as the breath is expired, the sample line and sensors see the human expired gas but when an inspiration occurs, the pressure reverses and the sample line and sensors are now looking at the room air coming into the mouthpeice. This means that not only are the sensors given no chance to settle but they are also having to make these large changes from room air (21% O2) to expired gas (15% O2), in a very short space of time. (<em>Here the mixing chamber wins again as the expired gas goes from a narrow tube to a large volume of mixing chamber and any pressure variations are damped significantly, giving the sensors a view of really only expired gas and not room air</em>).</p><p>Mixing chamber…see below.</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/mixing-chamber-2.jpg"></p><h3 id="7-Running-mechanics-causes-noise-variations-in-the-flow-signal"><a href="#7-Running-mechanics-causes-noise-variations-in-the-flow-signal" class="headerlink" title="7.Running mechanics causes noise variations in the flow signal"></a>7.Running mechanics causes noise variations in the flow signal</h3><p>In the special case where running is involved (but most movements will cause these issues), we have an added overlayed error in the signal caused by movement mechanics. This means in exercise we have an extra noisy flow signal (and possibly…not yet known…O2 and CO2). See below. Again, this noise is absorbed in a Mixing chamber system. The BxB method is really now looking like an exceptionally noisy and erroneous methodology compared to other methods. <em>Daley MA, (2013) Impact Loading and Locomotor-Respiratory Coordination Significantly Influence Breathing Dynamics in Running Humans.</em></p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/flow-breath-running.png"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you can see there are many significant disadvantages of BxB systems over other methodologies, including Mixing chamber. In essence, it is not reliable for athletic measurements. If however, you can live with errors in the order of 15 to 30%, then you’re probably OK with BxB. </p><p>Finally, Mixing chamber systems are not perfect but they have far more chance of measuring the actual values originally created by the human subject. The main issue with them (apart from being more awkward to implement) is that the mixing chamber is not perfectly one breath in volume, which leads to some minor errors. In fact if someone could invent a mixing chamber that adapted its volume to one breath for every individual, we’d be much closer to a perfect system.</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三角形 Project 简介</title>
    <link href="/2024/11/18/%E4%B8%89%E8%A7%92%E5%BD%A2-Project-%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/18/%E4%B8%89%E8%A7%92%E5%BD%A2-Project-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>项目参考 <a href="https://ingress.com/en">ingress</a> 的玩法，通过占领地图上的点位生成三角形区域，然后比较三角形区域的大小。</p><p>不同的是，项目多了一条底层规则——<strong>双方的区域不可相交</strong>。</p><p>项目具体可以分为两个板块：</p><ol><li>三角形绘制；</li><li>面积计算。</li></ol><h2 id="三角形绘制"><a href="#三角形绘制" class="headerlink" title="三角形绘制"></a>三角形绘制</h2><ol><li><a href="https://wonderhoi.com/2024/09/06/Swift-%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/">Swift 无序排列组合</a></li><li><a href="https://wonderhoi.com/2024/09/10/SwiftUI-%E8%AE%BE%E7%BD%AE-macOS-%E7%AA%97%E5%8F%A3%E9%BB%98%E8%AE%A4%E5%B0%BA%E5%AF%B8/">SwiftUI 设置 macOS 窗口默认尺寸</a></li><li><a href="https://wonderhoi.com/2024/09/06/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%B9%B3%E9%9D%A2%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/">判断一个平面内的两个三角形是否相交</a></li></ol><h2 id="面积计算"><a href="#面积计算" class="headerlink" title="面积计算"></a>面积计算</h2><ol><li><a href="https://wonderhoi.com/2024/09/05/Xcode-%E5%88%9B%E5%BB%BA-C-%E5%B7%A5%E7%A8%8B/">Xcode 创建 C++ 工程</a></li><li><a href="https://wonderhoi.com/2024/09/06/%E9%9D%A2%E7%A7%AF%E5%B9%B6/">面积并</a></li></ol><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><ol><li>我方每占领一个点位，判断我方总占领点位是否大于等于 3；</li><li>若是大于等于 3——以 4 个点位为例，将 4 个点位进行无序排列组合，共 4 个三角形：<ol><li>(1, 2, 3)</li><li>(1, 2, 4)</li><li>(1, 3, 4)</li><li>(2, 3, 4)</li></ol></li><li>遍历这 4 个三角形与敌方三角形的关系，以 (1, 2, 3) 为例：<ol><li>首先判断 123 三个顶点是否在敌方三角形中。这里计算量小，如果顶点在敌方三角形中，说明该三角形区域一定会与敌方三角形相交；</li><li>若三个顶点均不在敌方任意的三角形中，再判断边 12、23、31 是否与敌方任意三角形的边相交。如果相交，说明该三角形区域一定会与敌方三角形相交；</li></ol></li><li>绘制出我方不与敌方三角形区域相交的三角形，并计算面积并。</li></ol>]]></content>
    
    
    <categories>
      
      <category>三角形 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」为什么动作类游戏越来越多加入体力值限制玩家的行动?</title>
    <link href="/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%B8%B8%E6%88%8F%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E5%8A%A0%E5%85%A5%E4%BD%93%E5%8A%9B%E5%80%BC%E9%99%90%E5%88%B6%E7%8E%A9%E5%AE%B6%E7%9A%84%E8%A1%8C%E5%8A%A8/"/>
    <url>/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8A%A8%E4%BD%9C%E7%B1%BB%E6%B8%B8%E6%88%8F%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E5%8A%A0%E5%85%A5%E4%BD%93%E5%8A%9B%E5%80%BC%E9%99%90%E5%88%B6%E7%8E%A9%E5%AE%B6%E7%9A%84%E8%A1%8C%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.zhihu.com/question/476871052">为什么动作类游戏越来越多加入体力值限制玩家的行动?</a></p><p>总体上是为了平衡难度，使不同操作水平的玩家上下限可控。</p><p>动作游戏的极限是格斗游戏。格斗游戏正是因为没有出招限制，为了获得胜利，狂热玩家会研究到动画帧级别的操作精度，然后出现了一堆术语：发生帧、持续帧、收招帧、立回、确认、目押、确反、差合、相杀… 这时候，一个萌新还敢跟大佬 battle 吗？</p><p>但这不是最重要的问题，最重要的是，在玩家水平差异这么大的情况下，敌人要怎么设计？按照目押水平设计，游戏注定变得越来越小众，玩的没有看的多；按照大众水平设计，会浪费主角能力，游戏变得寡淡。</p><p>体力槽的设定，一定程度上把玩家从追求目押连段的操作精准性中解脱出来，玩法变成了时机判断+资源分配。奔跑、跳跃、攻击动作共享体力，更是强化了这种资源分配在玩法中的优先级。在不能无限出招的情况下，当玩家面对多个敌人时，就更难依靠目押级别的操作迅速使敌方减员，考虑一下兰彻斯特定律，这时候游戏的难度变高了，上下限的极差也变小了。这时候过多的敌人会导致全水平的玩家都难以处理，所以采用了这种设计的游戏，一般比忍龙之类的游戏同时面对的敌人量少很多。</p><p>实际上体力槽只是一种显式的设计，更多动作游戏没有体力槽，但用了相同的思路去限制操作。主要体现在更符合现实的前后摇、连段时间窗口和动作打断的优先级上。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」独立游戏开发者谈游戏设计：从怀疑已有的设计开始</title>
    <link href="/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E7%8B%AC%E7%AB%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%80%85%E8%B0%88%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E4%BB%8E%E6%80%80%E7%96%91%E5%B7%B2%E6%9C%89%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%A7%8B/"/>
    <url>/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E7%8B%AC%E7%AB%8B%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%80%85%E8%B0%88%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%EF%BC%9A%E4%BB%8E%E6%80%80%E7%96%91%E5%B7%B2%E6%9C%89%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.gamelook.com.cn/2018/07/336371">独立游戏开发者谈游戏设计：从怀疑已有的设计开始</a></p><p>写在前面的话：我一直对固有的游戏框架抱有怀疑，这可能跟我的游戏喜好有关，我喜欢别出心裁的设计，喜欢变换维度的解谜，喜欢用各种形式表现的文本，而讨厌一成不变的设计。所以我一直在思考，如何去优化、改良、甚至重新塑造框架。</p><blockquote><p>每个人都是带着偏见看这个世界的，如果你不带着偏见，那么你对这个世界根本就没有看待的方式。</p><p>——许知远</p></blockquote><p>我很喜欢许知远的这句话，而以下，便全是我的偏见。</p><p>1974年，万物起源的DND横空出世，它提出了血条的概念，并将其数值化，六种骰子一共七颗（四天王有五个，七宗罪有八个人是常识）造就了核心的游戏规则。而《异域镇魂曲》、《冰风谷》、《博德之门》便都是DND规则的衍生物，黑岛工作室是游戏业界的巨人，可实际上他们依旧是站在了巨人的肩膀。</p><p>1980年，南梦宫还没开始炒冷饭的世代，推出了风靡全球的吃豆人，而其中有一个有意思的设计，主角吃豆人吃了超级豆子后，可以变身，并能吃掉来追杀的敌人。这可以说是最早的主角升级的概念。</p><p>而同样也是这一年，rogue问世，随机生成的地下城、开放的玩法，乃至于真实死亡的设计，都极其地优秀并相对成熟。沙盒，开放世界的启蒙者，其设定甚至启蒙了很多美式角色扮演类游戏。而如今，《杀戮尖塔》、《以撒》作为继承其衣钵的优秀作品仍旧名扬四海，而rougelike也被理所当然地当做了游戏类型。</p><p>1981年《大金刚》第一个让角色拥有了跳跃的能力，82年十字键应允而生，而83年，哦，对不起，好像和设计没啥关系，这一年是雅达利大崩溃，数以万计的卡带被埋葬在了沙漠之下。</p><p>而我一直对这些优秀的设计抱有怀疑，它们是否适合当今的世代，亦或是每一款作品难道都必须要有血条、蓝量、变身等等？老实说，上田文人给了所有人一个答案，大刀阔斧地用减法，有些时候并不是坏事。</p><p><strong>你不打破旧规则，就无法创造新规则。</strong></p><p>而这四十年间，经济爆炸，互联网产生，人们变得更加忙碌，而闲暇时间也更加的碎片化。以上这些东西，我们耳濡目击，老实说，如果不是这两天我在看98年的韩剧《看了又看》，我甚至已经忘记了千禧年的交替、世代的变更。</p><p>而世代的变化，产生了非常多的新产业。家用机的诞生，也让我们重新思考了死亡系统，并构建了更多的任务与剧情，游戏时长也被一些玩家当成了挑选游戏的标准之一。网络的兴起让游戏的购买更加方便，北京鼓楼的电玩街，如今已经比PS2那个年代凄凉更多，我们甚至再也不用为如何堆叠深度，创造无聊且冗长的游戏体验而烦恼，因为玩家玩腻了，可以很轻松地就购买到下一款游戏。游戏论坛、视频网站、直播平台，视频通关变成了很多“玩家”体验游戏的一种方式，剧情类游戏越发地叫好不叫座。</p><p>游戏业渐渐失去了机能的枷锁，但我仍旧感觉到，我们的设计受到了很多以往游戏的禁锢。在重新看待游戏史的时候，我有一种很奇怪的感受，循规蹈矩，就会造成公式化，而公式化的东西无法带给玩家新鲜感。</p><p>什么意思呢？</p><p><strong>我一直将游戏内的需求分为四部分：学习需求、数值需求、挑战需求、荣耀需求，而这四种需求也相应的有四种阶段。</strong></p><p>玩家处在学习阶段时，因为接收到的都是新东西，在探究游戏的构成，在了解游戏中的元素，所以玩家会不断地尝试。</p><p>数值阶段，玩家基本已经找到了心目中的最优解，怎么打怪比较轻松不费力，怎样才能更轻易地拿到自己想要的物品，处在这个阶段时，玩家会反复地进行某项活动，从而提升数值。</p><p>挑战阶段，挑战boss，检验数值和操作。</p><p>荣耀阶段，在现今的游戏中，更多体现在脑补和游戏之外，比如《骑马与砍杀》，我们经常会说自己打赢了至关重要的一仗，明明游戏里没有给任何提示，可我们却因为战斗的艰难，脑补了自己所获得的荣耀。以及上传自己的极限通关与速通视频，这些都处在荣耀阶段。</p><p>当然，这些阶段在游戏体验时，是有重合的部分，就比如数值需求往往贯穿了整个游戏。</p><p>马里奥关卡设计的四步法则，起承转合的关卡设计，把一个大关分成四部分，那么前两关必定是学习阶段，了解新的机制。而第三关往往会把条件限制地稍微苛刻，让玩家更努力地找到最优解，而最后一关往往是给了玩家更艰难的挑战，从而让玩家在不断尝试的过程后获得满足感。</p><p>为什么roguelike好玩？我个人觉得，就在于每一次死亡后，我们都会重新回到学习阶段，而在这个阶段，玩家需要更专注地去思考新元素会带给自己怎样的优势与劣势，也就会更容易达到心流。</p><p>学习阶段往往是连续的乐趣，但数值需求不一样，拿大菠萝2代举例，其实刷刷刷的时候带给我们快感的是获得心怡装备的瞬间，是升级的小火光闪起的瞬间，而并非无限地打怪时机械化的操作。所以我认为在数值阶段，乐趣是间断的点。</p><p>而挑战阶段必定伴随着负反馈，如果难度过低，称不上挑战，如果难度过高，玩家便会陷入无限的负反馈循环，宫崎英高所谓的<strong>“战胜压倒性优势的快感”</strong>便是对挑战阶段很好的诠释，玩家需要检验自己的操作与数值，那么提供相应的挑战就是我们的重点。而在挑战时，只有0和1的区别，过关或死亡。玩家会越发地专注，因为稍有不慎便会game over，而这时候，我认为也自然会很容易达到心流，在赢得挑战过后，紧绷的瞬间得以放松，再加上数值的奖励，便是巨大的满足感。</p><p><strong>而公式化的框架，最容易导致的就是丧失掉学习阶段的乐趣</strong>，属性的相性背的滚瓜烂熟，战斗时甚至本能地就选择好了属性。见过许多次的系统根本掀不起心中的波澜，大概地了解一遍天赋树的各类分支，就大概明白其所带来的体验。任务变换的也只是接到任务、完成任务的地方，杀n只怪，取得宝物……</p><p>我怀疑的不是这些前人用汗水和灵感打造的设计，我怀疑的是让玩家一次又一次经历是否正确，以及这些设计是否在当代被滥用。</p><p>《上古卷轴5》是否真的需要跳跃键？从头至尾，我都觉得跳跃键本身是多余的设计，它丝毫和核心玩法挂不上钩，唯一带来的，只是玩家跑路时无聊的消遣手段。</p><p>传说系列是否必须要有繁多的物品收集？那远处诱人的宝箱装着普通的药草是否真的合适？每一个显眼的收集品，都会促使玩家前行，但实际究竟有没有回报？翻箱倒柜固然是一些玩家的心头好，但更多的，是大部分人的眼中刺，如果不采集就会因为缺少物品无法打赢boss，那为什么没有简化的途径，捡一颗草药和捡另一颗草药在体验上没有不同，那为什么要让玩家反复经历，延长游戏时间？做更多的趋向性路径？我们明明可以有更有趣的内容来完成这种功能性。</p><p>快速旅行是否真的必要？《黑魂1》的路线需要思考究竟有哪里不好？老实讲，这便是轻量化的产物，和小地图一样，在我眼里这两者都只会使美术精心打造的地图变得无关紧要，有快速旅行这个简单直接的办法，我们就不会选择慢吞吞地移动，那行走就变成了纯粹开地图的手段。《黑魂3》固然神作，但是玩的时候，老实说，我怀念《黑魂1》的传火竞技场，四通八达，慢慢熟悉地图，感受它的精妙是一段非常有意思的体验。</p><p>但往往谈到以上这些时，经常会有人问我：“这些是玩家的诉求啊，你怎么能忽视掉？”那么这时候就引出了另外一个话题，在设计时，玩家需要的、索求的东西，我们需不需要满足，又或者说玩家需要的，真的是我们必须提供的设计么？</p><p>我记得很早以前，我看过一个演讲，里面说了这么一个例子，来解释，人们其实不知道自己想要什么。</p><p>很久以前，一家做意大利面酱的公司找到一位教授，希望他能通过调查了解到人们究竟想要什么样子的意大利面酱，又或者说最影响意大利面酱卖得好坏的元素是什么。教授便做了这样那样的调研，人们的关注点往往在甜度多少，咸度多少，是浓还是稀。于是他继续了研究，他做出了n多种意大利面酱，让人们来进行选择，有的只有甜度进行变化，有的只有咸度进行变化，然而在得到数据的时候，他惊讶地发现，数据极其地不规律，只要甜得不齁儿，咸得不让人咂舌，人们便都能接受，他进行了无数次的数据统计，但依旧不具有明显的规律。于是在8年的研究之后，他发现，其实最能影响意大利面酱卖的好坏的，并非这些，而是可见颗粒物的种类多少，番茄块，牛肉块，洋葱块是否多种多样。然而一开始，却没人说的出这些。</p><p>回到游戏本身，其实大多数的玩家不具备理性。他们会将随机性归结为设计的不合理，他们甚至不经常反思，将赢归结为自己操作的好，死归结给糟糕的设计。所以我一直保有一个态度，在游戏制作时，玩家与我相关，但又与我无关。</p><p><strong>玩家的意见只是参考，但绝不能予取予求。</strong></p><p>写在后面的话：游戏应该是多元的，但只可惜，循规蹈矩的设计让一切都同质化，离经叛道也成了白日做梦的笑料。</p><p>一阵唏嘘罢。</p><p>最后有句话希望与各位共勉——在我们还什么都不是的时候，我们就还不配失去希望。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」血瓶vs蓝瓶：对能量系统设计的思考</title>
    <link href="/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E8%A1%80%E7%93%B6vs%E8%93%9D%E7%93%B6%EF%BC%9A%E5%AF%B9%E8%83%BD%E9%87%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E8%A1%80%E7%93%B6vs%E8%93%9D%E7%93%B6%EF%BC%9A%E5%AF%B9%E8%83%BD%E9%87%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://maniahero.com/2013/04/06/%E8%A1%80%E7%93%B6vs%E8%93%9D%E7%93%B6%EF%BC%9A%E5%AF%B9%E8%83%BD%E9%87%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/">血瓶vs蓝瓶：对能量系统设计的思考</a></p><h2 id="血瓶vs蓝瓶：红蓝二元系统"><a href="#血瓶vs蓝瓶：红蓝二元系统" class="headerlink" title="血瓶vs蓝瓶：红蓝二元系统"></a>血瓶vs蓝瓶：红蓝二元系统</h2><p>让我用这张图来开始这篇文章。这图上画出了一般的MMORPG杀怪升级的循环图，血和魔法值（由于传统上用蓝色表示，所以就是图中的蓝色方块）是玩家的两种资源，击败或被击败的关键在于使生命值（红）降低至0以下，而削弱对方生命值或补充自己生命值（或补充他人生命值）都要靠技能来实现，而技能是消耗魔法值（蓝）这一资源的。我把这种类似的结构统称为<strong>“红蓝二元系统”</strong>，因而这种系统中的其他所有子系统如消耗品（红瓶蓝瓶），装备（提升属性从而提升技能威力与红、蓝最大值或恢复速度）都是围绕着红与蓝两个存量进行设计的。图中的红线部分为消耗掉的蓝的走向，绿线为战斗胜利后获得的战利品。</p><p>进一步，我们要思考为什么要如此设计，红与蓝二个存量存在的意义是什么。<strong>由于是战斗系统的核心存量，我们可以发现，红是战胜与战败的条件，蓝是实现该手段的限制。</strong>如果你令敌人的红降低至0，则你获胜，反之你的生命值降低至0则你战败，而降低敌人或提高自己红存量要通过技能来实现，而释放技能是要消耗蓝的，当蓝不足的时候玩家就无法使用技能，只能任人宰割，因而实际上只要把对手的蓝耗光，也是获胜的一种手段——这十分类似于《万智牌》的两种获胜手段，你可以击杀对手，也可以耗光对手的牌库使其无法施展任何能力从而战败。</p><h2 id="努力练级，拼命嗑药，不断加血"><a href="#努力练级，拼命嗑药，不断加血" class="headerlink" title="努力练级，拼命嗑药，不断加血"></a>努力练级，拼命嗑药，不断加血</h2><p>我们可以简单的考虑这样一个模型：在蓝耗光之前，假设我们可以稳定的为自己恢复生命值，同时稳定的对对方的生命值造成伤害，这样就有了从蓝指向自己生命值，以及从蓝指向对方生命值的两个流量，同样对方也有这两个流量。当某一方对对方造成伤害的流量大于其恢复流量时，对方的生命存量就开始下降，直到为0则战败。其中存在着两个变数：</p><ol><li>若蓝被耗光，则自己的流量都会变为0。</li><li>单位时间内，造成伤害的总流量大于对方生命值库存总量，于是无论对方恢复生命的流量有多大，都会被秒杀。</li></ol><p>由于这两个问题的存在，我们要尽力避免自己的蓝被耗光，同时防止被对手秒杀。由于秒杀是无视对手对自己造成伤害以及恢复生命的能力的，因而会有一种随便虐对手，他根本没有还手之力的感觉，很爽。然而，很多游戏秒杀同等级的对手是十分困难的，在战斗中并没有太多突增流量的办法，因而玩家优先考虑的是避免情况1的发生，而不太担心情况2的发生，于是就变成了狂按红瓶蓝瓶的无聊嗑药泡菜游戏，玩家并不在意自己当前的红蓝存量，而更在意包里的红瓶与蓝瓶，因为这些消耗品才是真正的战斗力。</p><p>在传统的RPG中玩家是会不断成长的，因而这一战斗模型会随着玩家等级的提升而提升，由于养成要素的存在，拥有更高等级、更好装备、更强大或更多消耗品的玩家很容易获胜。我们怎么避免这一状况呢？</p><p>《暗黑破坏神2》对嗑药进行了改良，游戏中默认的红瓶与蓝瓶不会直接提高玩家的红与蓝存量，而是在一段时间内提高其输入流量。这样的做法首先大大降低了玩家无脑按红瓶与蓝瓶的可能性，从瞬间生效变为缓慢恢复大大延长了药瓶的有效时间，而其效果并不叠加，所以最优做法是等上一个瓶子效果结束后再按下一个，而之前的最优做法则是无脑狂按的button smasher。其次，这种做法强化了战斗的稳定性，我们可以这样想象，若你一次致命攻击把对手打得濒死，而他却瞬间吃了2个血瓶血又满了，游戏就变成了一个人品游戏，而如果血瓶增加的是流量，受到致命攻击的玩家在很长一段时间内依然会是保持劣势。对于战斗系统中伤害和恢复能力都相当于流量的游戏来说，流量无限大的血瓶与蓝瓶就是BUG一样的存在。不过《暗黑破坏神2》也保留了瞬间增加红与蓝的强力版紫色瓶子，玩家吃下后能够瞬间按百分比恢复红与蓝，但这种瓶子较为稀少，并不是烂大街的存在。</p><p>《魔兽世界》也明白，瞬间提高红与蓝的存量是近乎于BUG的玩法，因而所有治疗手段都有以下几个特点：</p><ol><li>能够一下回复大量生命值的法术，需要很长的咏唱时间，用恢复量除以咏唱时间就可以得出其流入量，流量并不是无限大（伤害法术同理）。</li><li>不需要咏唱时间的治疗法术，大多并不会一下回复大量生命值，而是在一个长时间内持续恢复，也就是提高了生命值的流入量（HOT或DOT法术）。</li><li>能够一下回复大量生命值且无咏唱时间的法术，拥有很长的冷却时间（还可能同时伴有不成正比的大量蓝消耗以降低其性价比，如圣疗术），由于其流量无限大是BUG，因而要用长CD使其不能成为一般恢复手段。磕血瓶也在此列，《魔兽世界》的血瓶是拥有很长的CD的，这比《暗黑破坏神2》中紫瓶子通过稀有度来控制高明的很多——你包里揣着再多的瓶子也救不了你。</li></ol><h2 id="但我能平A，蓝的存在真的有必要么？"><a href="#但我能平A，蓝的存在真的有必要么？" class="headerlink" title="但我能平A，蓝的存在真的有必要么？"></a>但我能平A，蓝的存在真的有必要么？</h2><p>红的存在是由于其是胜负的根本条件，而蓝实际上存在的唯一意义在于使上文中状况1的发生——没蓝的角色是完全无能的。然而，实际上有很多游戏，并不是所有技能都耗蓝的，只依赖这种手段，依然可以达成战胜对手的目标。</p><p>我们考察RTS游戏和FPS游戏。在FPS游戏中，几乎所有枪械都是有弹量限制的，这就相当于蓝，子弹打光了并且找不到补给，玩家就只能用效率低下但不需要弹药就能使用的近战武器或小手枪来进行游戏了。而在RTS游戏中，由于单位很多，游戏的scale更大，因而对于单个单位是不宜计较其残弹量的（也有一些RTS很计较，比如《猪兔大战》，但这无疑降低了游戏的scale），早期的RTS游戏从坦克到步兵的弹药都是无限的，在《命令与征服》中只有飞机例外，它们由于无视地形且移动力超强，因而需要不断地回到停机坪进行补给。而我们把这一现代战争背景改为奇幻，得到的就是近战步兵用刀砍人不会崩刃，远程单位用箭射人弹药无限。这些单位不用蓝，因为他们只会“平砍”或者说“平A”，这是他们唯一的战斗能力，而且效率未必像FPS游戏中一样低下。</p><p>何人发明的“平砍”一词现在不得而知，我个人猜想是从麻将中的“平和”或者“屁和”引申来的，这一“平”字正暗示了其效率的低下——大多麻将中“平和”是赢的最少的获胜方式。情况在到了《魔兽争霸3》的时候发生了改变，《魔兽争霸3》由于引入了英雄，英雄有了蓝，而普通小兵没有蓝，只能平砍，而英雄则又能平砍又能用蓝放技能，这一游戏机制催化了MOBA类游戏的诞生，到了《DOTA》和《英雄联盟》盛行的年代后更加分化，物理英雄平砍为主要输出手段，法术英雄则是通过耗蓝放技能作为主要的输出手段——虽然大家都能平砍。《魔兽世界》也是如此，法师也能平砍，但正常人都不会干这种傻事的。</p><p>在FPS游戏中，弹尽粮绝的情况下才会展开白刃战，而《魔兽世界》或《英雄联盟》（甚至《魔兽争霸3》中的敏捷英雄）中平砍却往往成为玩家追求的主要伤害能力，于是蓝的存在的价值就变得很尴尬：我没蓝也不要紧，因为平砍是我的主要输出手段。</p><p>这导致了两个解决方案的出现：</p><ol><li>为近战职业提供其他机制的能量槽以修正蓝对其没用的问题。</li><li>取消蓝的消耗，所有技能都是“平砍”。</li></ol><p>方案1是《魔兽世界》中的所有物理职业成为永动机的根本原因，战士，猎人，盗贼，死亡骑士和非治疗的武僧，在战斗时其能量都有一个固定的流入量，利用这些能量尽量提高输出能力就成了其主要的玩法循环，而平砍（或者说平射，如果是猎人的话）在这些职业输出中占了相当大的比重。当法师们没蓝了开始喝药、唤醒、激活、生命分流时，近战职业不用管这些，这样好像近战职业就变得十分IMBA，但在《魔兽世界》的团队战中，首先大部分情况下近战的输出位置并不占优势，其次一旦治疗职业的蓝用光了所有人都得死不管你是不是永动机，因而问题并不大。</p><p>方案2是《激战2》的做法，该游戏所有职业都没有能量槽，所有的技能都是平砍——更恰当的说法是，所有的平砍都是一个没有CD、自动施法的技能，这个技能的快捷键是1，其他9个技能从2至0都是有CD的技能。</p><p>这时候我们应该来想一想格斗游戏。格斗游戏中，玩家拥有普通技能，必杀技和超必杀技。普通技能是直接按键就能释放的轻拳LP、轻脚LK、重拳HP、重脚HK等，有的游戏还有中拳MP和中脚MK，如《街头霸王》或者其他脚踢或投技按钮，但总之这些只要按键就能释放的技能，就是最普通的攻击手段。必杀技则是需要输入一定指令才能释放的技能，如波动拳、升龙拳或是暗勾手、鬼烧。超必杀技则需要消耗一定的资源（蓝），这种资源是通过攻击和挨揍来获得的，超必杀技的指令比必杀技更为复杂，往往拥有一发定胜负的强大威力，并且视觉表现极其华丽。</p><p>我们再看回《魔兽世界》，从强度上来说平砍就相当于普通技，英勇打击或寒冰箭则相当于必杀技，盾墙、圣盾术、冰箱、唤醒等技能则相当于超必杀技。在《魔兽世界》中“必杀技”级别的技能就已经开始消耗蓝（或者是其他资源）了，而“超必杀技”级别的技能则只用能长CD来限制了。而格斗游戏不是这样。一方面是由于两个游戏的节奏不同，格斗游戏往往不到一分钟就能分出胜负，而《魔兽世界》的团队或竞技场战斗往往会打上十几分钟。令一方面在于，格斗游戏一个人物的技能只有十个左右，而《魔兽世界》一个人物的技能则有几十个，技能多了的话平衡性就需要利用资源系统来控制其性价比（我想《激战2》也正是由于每个人只有10个技能因而不需要能量系统，只有CD就够了）。</p><p>我们再来考虑卡牌游戏，如《万智牌》。《万智牌》的牌库总张数已经达到了字面意义的成千上万张，因而必须要有一个能量系统来控制每一张牌的性价比，如果是一个所有牌打出的价值都一样的游戏（比如《三国杀》，所有手牌都是每一张都可以随意打出，不消耗任何资源），后期必然难以扩展。《万智牌》不但拥有能量系统，且能量系统复杂，法术力拥有5种颜色，每一个法术或生物召唤时都会指定要求法术力的颜色，这就进一步加强了游戏的深度，而所有能量系统是从《万智牌》简化而来的游戏（如暴雪的新作《炉石传说》，法术简化到了只有一种颜色），其复杂性和深度在日后的扩展上都是难以望其项背的。</p><p>这再次说明了格斗游戏的绝大多数技能与《激战2》为什么可以做到技能不消耗任何能量，而不用担心平衡问题，这是因为角色的可定制性并没有那么高（《激战2》的10个技能中只有5个是玩家自选的，且这5个技能基本都是战术性技能而不是伤害性技能，另外5个与格斗游戏类似，拿上了一个武器&#x2F;选了一个人之后就是那固定的5种技能，为伤害性技能）。但虽然技能少了，格斗游戏和《激战2》却拥有其他游戏所没有的复杂的COMBO机制，因而其简化了战术层的决策，强化了即时战斗的临场反应和配合能力，依然是十分出色的游戏。</p><p>《万智牌》由于其法术槽多达5种的复杂性，只能作为回合游戏存在，玩家可以花大量的时间思考下一步的行动，即时游戏《魔兽世界》的绝大多数职业只有1种能量槽，这使得玩家在紧张激烈的战斗时依然能有闲暇来看一下自己的能量状态。如果《魔兽世界》的某个角色也和《万智牌》一样拥有5色法术力，不同的技能所消耗的法术力都不相同，那么这游戏就没法玩了——然而，暴雪似乎正在犯这样一个错误，就是不断地使能量系统更加复杂，这样一来整个游戏的方向都发生了偏转。下面我们就来挨个说一说，《魔兽世界》和《暗黑破坏神3》中各个职业的能量系统设计。</p><h2 id="怒气：从格斗游戏那扒不一定是个好事"><a href="#怒气：从格斗游戏那扒不一定是个好事" class="headerlink" title="怒气：从格斗游戏那扒不一定是个好事"></a>怒气：从格斗游戏那扒不一定是个好事</h2><p>战士和野蛮人的怒气机制是和格斗游戏的能量机制是十分类似的：</p><ol><li>揍人会涨怒气</li><li>挨揍会涨怒气</li><li>由于《魔兽世界》与《暗黑破坏神3》并不像格斗游戏一样是回合制的，因而还有另外一条限制：不战斗的时候会减怒气。</li></ol><p>问题接着就来了。在PVE中，挨揍会涨怒气使得扛怪的战士坦克拥有大量的怒气溢出，他们往往可以变成button smasher狂拍按键而不用担心怒气不够用。挨揍会涨怒气也使得闪避几率成为了一个矛盾属性，闪避高了固然可以加强生存几率，但也会降低你的怒气获取量，于是就成了一个失败的设计。在PVP中，挨揍会涨怒气曾经会使得1个战士1个治疗的战斗力大于对方的2个玩家，这是因为格斗游戏基本没有回血手段，而《魔兽世界》中充满了恢复手段，只要有足够的生命流入量确保战士不死，承受大量伤害的战士的战斗能力就是远高于其他职业的。从60级满级的年代开始战士就是如此（一个战士后面跟着一队治疗职业横扫战场），而暴雪并没有意识到这是其机制导致的问题，而草率地认为是战士过强从而被一砍再砍，直到如今战士终于被取消了挨揍会涨怒气的设计，但这改动相当于颠覆了之前沉淀了六七年的概念，使得大量战士玩家不满。</p><p>所以说暴雪在扒怒气机制的时候，显然忘了《魔兽世界》能加血，而且非常能加血，而格斗游戏根本不能加血这一问题。</p><p>到了《暗黑破坏神3》，这一问题貌似被解除了：玩家最多只能4人进行游戏，而这4人中没有任何一个人是能专业加血的。野蛮人的技能分成了三类：平砍，涨怒气的技能，以及消耗怒气的技能。大家都发现了暴雪的白痴之处：玩家完全可以用涨怒气的技能代替平砍，这样一来平砍还有什么意义？可暴雪是没发现这一点的，事实上《暗黑破坏神3》的任何职业的平砍都是没有意义的冗余设计，因为总会有某些增加能量或0能量消耗的技能能够代替掉平砍。《暗黑破坏神3》虽然砍掉了专业治疗职业，也颇为“进步”的不以血瓶为主要生命恢复手段，但令人遗憾的是核心的战斗循环依然和本文开头的那一张图一样，因而砍掉了专业治疗职业的结果就是，这部分生命流出量的压力要玩家自己来负责——每一个玩家都要自己为自己提供恢复生命的手段。暴雪意识到了这一问题，于是他们推出了“血球”系统，玩家在攻击怪物时怪物会掉落血球，玩家走到血球旁边就可以恢复生命，这样一来玩家并不用考虑生命恢复手段，只要拥有足够的攻击力和生命存量，就可以不断杀怪，并在生命值降低到危险状态前吃一个血球。这听起来不错，是吧？但暴雪就是高超的没做好，失败在于两点：</p><ol><li>首先血球掉落是一个几率问题，因而你完全无法预测血球掉落的位置。你可以挑选一个增加拾取半径的装备来让你更容易拾取血球，但这种装备同时会使得你更难以选择拾取血球的时机——可能你现在血很多想等着掉更多的血的时候再捡，但由于你的拾取半径过大，你浪费了一个血球，大量治疗溢出了。这种情况下，依靠血球恢复生命变得极其不稳定。</li><li>第二个是上面早就说过的问题：怪物的伤害流量实在是太猛了，很容易就能秒了你，而血球的发挥又极其不稳定，因而玩家需要强力的吸血属性来保证存活，这使得拥有吸血属性的装备价格飞涨，而玩家的输出能力与承受伤害能力完全不成正比，往往DPS高达几十万而生命值还不到十万，这样一来游戏的大部分过程是你脆弱的血线飘忽不定，只要怪物的一招没能秒了你，你超高的DPS带来的成吨吸血治疗量就能使你瞬间满血，而只要怪物的攻击力高了那么一点或者你没能躲开某个技能，恭喜你被秒了，因而血球、血瓶都是浮云，游戏的实际状况是：满血orDIE。</li></ol><p>由于野蛮人是挨揍涨怒气的，第二个问题也直接使得野蛮人变成了怒气满or断怒俩状态，没有第三种。很多装备足够好的玩家是完全放弃了产生怒气的技能的，全靠挨揍来获得怒气，并且用DPS远高于产怒技能的耗怒技能来当做“平砍”用的，由于DPS超高回血也超高，因而其实生存能力更强了，于是暴雪不但平砍变成了冗余设计，产生怒气的技能也变成了没必要存在的东西，不知道这是不是他们的设计初衷？</p><h2 id="能量：不攒豆会死星人"><a href="#能量：不攒豆会死星人" class="headerlink" title="能量：不攒豆会死星人"></a>能量：不攒豆会死星人</h2><p>《魔兽世界》的武僧和盗贼有什么区别？区别在于盗贼的连击点数在敌人身上，而武僧的连击点数在自己身上。上文提到了暴雪痴迷于在即时战斗游戏中复杂化能量系统，死亡骑士与武僧这两个最新的职业都拥有了双套能量系统（以及《暗黑破坏神3》中的恶魔猎手）都是好例子，而且其他原本只耗蓝的职业也增加了新的能量机制，如牧师的查克拉，或者骑士的那个类似于连击点的系统。</p><p>武僧、盗贼和死亡骑士的共同点在于，要用一种低端能量来生成一种高端能量，不同的技能要求的能量不同。这样一来，消耗“低端能量”的技能依然相当于格斗游戏中的“必杀技”，消耗高端能量的技能则相当于格斗游戏中的“超必杀技”了。然而在《魔兽世界》快节奏的战斗中，原本要同时监测目标的状态，自己的位置，技能的CD，自己的血量，自己的能量就已经很吃力了，现在又多了一种能量，游戏的强度就变得更大了，玩这些双能量的职业总是比玩单能量的职业更累的，那是肯定的，而实际上这种复杂性并没有对游戏玩法的提升有很大的帮助，玩家基本也是很快就能掌握一套固定的输出思路——消耗低端能量，攒高端能量，攒到一定程度释放某个“超必杀技”，然后回到第一步——其他那些只有一种能量系统的职业，基本也都是这个思路的。</p><h2 id="集中值：实在设计不出来了，用这个凑数吧"><a href="#集中值：实在设计不出来了，用这个凑数吧" class="headerlink" title="集中值：实在设计不出来了，用这个凑数吧"></a>集中值：实在设计不出来了，用这个凑数吧</h2><p>集中值是一个混合的东西，首先像能量一样能够自动恢复，其次有类似于《暗黑破坏神3》的”产怒技能“。这样玩起来的实际方式和盗贼&#x2F;武僧没有任何区别，集中值不够的情况下拼命用产集中值的技能，集中值够了就放一个消耗集中值的技能——产集中值的技能相当于”必杀技“，消耗集中值的技能相当于”超必杀技“。这本来是个烂设计，因为在持续战斗中本质上与能量系统没有任何区别，而暴雪却把这东西套在了《暗黑破坏神3》的所有职业设计思路里，他们真的是疯了。</p><p>这个系统的进一步修改产物是《暗黑破坏神3》武僧的精力能量系统，他们取消了集中值自动回复的那部分，所有能量都要靠产生该能量的技能来提供。听着耳熟是吧？这其实就是挨揍不回怒的怒气系统，而且对玩家体验没有任何影响，依然是能量不够的时候拼命产能量，能量够了拼命花能量，实战的时候没有任何变数，这就是唯一的最优解，再加上打怪过程是“满血orDIE“，游戏过程非常无聊，因为你知道了最优解你不需要任何作战技术，只要装备够，傻子都能赢，装备不够的话技术再高超也是被怪秒，武僧的游戏过程就是“按住鼠标左键，精力够了就按右键，要死了按1，1冷却的情况下按2，2冷却的情况下按3，3冷却的情况下按4，4个技能都冷却怪还没死的话就等死”。</p><h2 id="彻底的双能量系统：奇葩恶魔猎人"><a href="#彻底的双能量系统：奇葩恶魔猎人" class="headerlink" title="彻底的双能量系统：奇葩恶魔猎人"></a>彻底的双能量系统：奇葩恶魔猎人</h2><p>刚才说了，《魔兽世界》中大部分职业其实都是双能量系统了，尤其是盗贼、武僧、死亡骑士最具代表性，但《魔兽世界》中的能量系统都是“用低端能量产生高端能量”的思路，而《暗黑破坏神3》的恶魔猎人则完全不一样——她就是拥有两套能量，一套用于进攻，一套用于防守，且两套能量几乎不能互相转换。用于进攻的憎恨系统与集中值一样，自动回复且有产憎恨值的技能，用于防守的戒律则与能量一样完全靠自然回复。</p><p>首先这样在战斗的过程中你要多留意一种资源，所以玩起来肯定更累这是没说的了，其次《暗黑破坏神3》只能同时携带6个技能，你要带产憎恨的技能，还要带消耗憎恨的技能，还要带消耗戒律的技能，那么你每种技能能挑几个？因而恶魔猎人的技能搭配自由度从理论上来说是远低于其他职业的（而从实践上来说，每个职业有效的组合只有那么几种，因而差别不大。这算因祸得福吧？）。</p><p>而且还有一个问题就是之前我们说过了，复杂的能量机制一般都是伴有大量的技能的，恶魔猎人的能量机制比他人复杂，但技能也只是能带6个而已，暴雪的解决方法是不给恶魔猎人设计长CD的“超必杀技”，也就是说恶魔猎人消耗戒律的技能就相当于其他职业的“超必杀技”了，考虑到戒律恢复速度是如此之慢，这是说的过去的，然而笔者认为在只有6个技能的情况下还设计长CD的超必杀技，这绝对是嘬死行为，一下从《暗黑破坏神2》的所有技能随便用、所有技能没CD变成了如今的只能带6个技能而且还有大招，这难道是受到了《DOTA》的影响吗？然而《DOTA》是一局一利索的对战游戏，并且是5v5，团战的时候是同时有几十个技能在天上飞来飞去的，可不是角色在线达几百小时的RPG！如此过犹不及的做法，绝对是找死行为。</p><p>总而言之，产能量技能的设计、只有6个技能以及长技能CD的设计统统是很糟糕的，从根本思路上来说就既无法达到《激战2》一般的战斗体验（而且《激战2》拥有特殊的死亡系统），也无法达到像《魔兽世界》一样的RPG体验，更何况在实际游戏中由于数值过于糟糕，因而《暗黑破坏神3》的end game可以说是雪上加霜的糟糕，而《魔兽世界》的思路也在从RPG往格斗游戏上偏。</p><h2 id="那么多能量系统就真的不好么？"><a href="#那么多能量系统就真的不好么？" class="headerlink" title="那么多能量系统就真的不好么？"></a>那么多能量系统就真的不好么？</h2><p>归根结底，笔者认为这是个scale问题，也就是系统边界划分错误的问题。人脑能够同时处理的事情最多是7件，因而如果一个游戏玩家需要同时思考的东西过多，那么游戏就过于复杂，过少的话又会过于无聊。《命令与征服3》中就犯了一个错误，作为一个操纵大量单位作战的游戏，你还必须像FPS游戏一样为每一个单位手动reload换子弹才能达到最优解，这种做法是反人类的。《战争机器》也有着一样的设计，reload的时候其实是一个小游戏，当滑块到达适当位置的时候再次按R键就能立刻装好子弹，这是因为该游戏还有用另外一个强大的掩体系统，你在reload的时候一般都是躲在掩体后面无事可做的，因而来玩玩小游戏再好不过；而一个RTS游戏里单位几十上百不说还要不断的采集资源、建造单位、控制部队移动，还哪有功夫为每一个单位reload？我们可以想一下如果《模拟城市》融入了竞速或模拟驾驶成分，每一个市民每天上班下班都要玩家为其开车控制，一个有40万居民的城市玩起来将会是多么过瘾——这就是scale的问题，在《坦克世界》中一辆坦克的复杂程度，也就是子系统的数量及其之间的连接，必然是远远高于《命令与征服》中的一辆坦克的。</p><p>刚才说的之所以即时战斗不适用太复杂的能量系统也是如此，人脑是处理不过来的，不管是无脑还是烧脑，都是过犹不及的设计。实际上很多回合游戏都是拥有多能量系统的，而且像《万智牌》一样玩家可以围绕着某一种能量系统构建自己的战术，然而在激烈的即时战斗中玩家往往只会想”不够就用这个，够就用那个“，虽然比无脑搓寒冰箭复杂了一些，但其实并没有本质改变——”有蓝就搓寒冰箭，没蓝就唤醒&#x2F;喝血瓶“，增加了玩家的操作强度，而又没能提升游戏深度，就是冗余设计了。</p><p>《激战2》是对传统RPG能量系统的一大颠覆，它打破了”红蓝二元系统“，做到了像格斗游戏一样的激烈对战与COMBO，并且意识到了不能让玩家带大量技能，采用5个固定技能5个自定义技能这一方式，使得玩家在不容易轻松找到最优解的情况下，又保证了很高的自由度与平衡性。《英雄联盟》也借鉴了很多《魔兽世界》中的新系统，并不再是所有英雄都用蓝条了，而且很多英雄也是干脆就没有能量系统的，如德玛西亚之力，或者某些英雄的能量槽就是生命槽，如蒙多或吸血鬼。但《英雄联盟》毕竟每个人物只有4个技能，而且是类似于格斗游戏的回合游戏，因而在MMORPG的设计上能借鉴的并不太多，弄不好还会像《暗黑破坏神3》一样弄巧成拙。</p><p>因而我们在设计一个游戏的时候，可以根据游戏的激烈程度与节奏，自由地设计能量系统以使得游戏更加爽快或更加复杂。能量系统并不是必须存在的，也并不是越复杂越好的，要和具体状况结合才能知道。</p><p>也许有朝一日，不但”蓝“这边会有诸多变种，”红“这边的设计也会像《家园》或《辐射》一样，引入多血槽系统或其他更加颠覆性的系统，届时”红蓝二元系统“会进化成什么样子，更加令人期待了不是吗？</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」M is for Magic——游戏里“魔法值”的来源</title>
    <link href="/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DM-is-for-Magic%E2%80%94%E2%80%94%E6%B8%B8%E6%88%8F%E9%87%8C%E2%80%9C%E9%AD%94%E6%B3%95%E5%80%BC%E2%80%9D%E7%9A%84%E6%9D%A5%E6%BA%90/"/>
    <url>/2024/11/18/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DM-is-for-Magic%E2%80%94%E2%80%94%E6%B8%B8%E6%88%8F%E9%87%8C%E2%80%9C%E9%AD%94%E6%B3%95%E5%80%BC%E2%80%9D%E7%9A%84%E6%9D%A5%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://mp.weixin.qq.com/s?__biz=MjM5MzgwODIyNw==&mid=208527611&idx=1&sn=f0ba06f897841985184482460a3a4351&key=af154fdc40fed0038809da7bbed18fa4fed1827896679387da08a2701ca112c015f0c044e29291bcff2e899d32172a1b&ascene=1&uin=MTE5NzA3OTkwMA==&devicetype=Windows+8&version=61010029&pass_ticket=jerrVEAbMvDsWQtRKRvQLU2yGSJ/b3bFgT5cWch7eQml1drSVvQpTfdVJEAbCp2D">M is for Magic——游戏里“魔法值”的来源</a></p><p>但凡玩过游戏的人，大约都知道“魔法值（Mana Point，有时也写作Magic Point，简称MP）”，没有魔法值，你召唤不了恶魔，搓不了火球，放不出治疗术，就连传送回基地可能都够呛。不过……MP这个概念到底是怎么来的？</p><h2 id="从生命值说起"><a href="#从生命值说起" class="headerlink" title="从生命值说起"></a><strong>从生命值说起</strong></h2><p>要讲这个概念，首先要从我的男神之一龙与地下城之父加里·盖加克斯（Gary Gygax）说起。</p><p>20世纪60到70年代是现代游戏业的萌芽时期，虽然当时还没有个人计算机，但并不妨碍宅男们用模型、骰子以及纸和笔在幻想的世界中神游。</p><p><strong>游戏设计的本质是数学建模——把要设计的东西转化为数学的机制和规则，去除日常语言的不精确性，然后大家才可以愉快地一起玩耍。</strong>例如你说卓尔精灵崔斯特刀法惊人，怎么个惊人法？无法衡量。但是如果说他有+31的攻击加值（20级满级的战士的基础攻击加值也只有+20而已），大家就知道他到底厉害到什么程度了。</p><p>盖加克斯就是这样一个为游戏建构数学模型的人。1971年，他和杰夫·佩伦一起创作了战棋游戏《链甲》，游戏采用中世纪背景，和很多战棋游戏一样，战斗时采用的是扔骰子的系统，根据骰子的判定结果，防守方会损失一部分兵力。</p><p>在《链甲》的偏奇幻风格的补充规则的基础上，盖加克斯和戴夫·阿内森一起开发了《龙与地下城》。这个游戏是小队冒险型的奇幻游戏，玩家控制的单位从成建制的军队改成了个体的冒险者，那么问题来了：如果沿用攻击骰子判定成功就击杀一个人的话……这游戏没法玩了。所以，俩人把兵力值改成了“抗击打值（Hit Point）”，也经常被称为“生命值（Health Point）”，再加上从一个海军战棋游戏引入的“防御等级（Armor Class）”，事就这样成了。</p><p>生命值不仅解决了战斗机制问题，也让游戏中的角色得以个性化。例如在《龙与地下城》第三版中，野蛮人通常比法师强壮，所以野蛮人每升一级平均增加6.5点生命值上限（掷一次十二面骰的结果），而法师每升一级平均只增加2.5点生命值（掷一次四面骰的结果）。</p><h2 id="复杂的法术系统"><a href="#复杂的法术系统" class="headerlink" title="复杂的法术系统"></a><strong>复杂的法术系统</strong></h2><p>《龙与地下城》第三版的数学机制的核心叫“二十面骰系统（D20 System）”。这是一个伟大的发明，因为它把大部分带有随机性的行为都简化到了可以通过投一次二十面骰来决定的程度。</p><p>简单地说，每件事有一个难度等级（Difficult Class），玩家在试图完成这件事时，就丢一个二十面骰子，只要投出的数加上各种原因造成的调整值不小于难度等级，就算成功。（If D20+Bonus &gt; or &#x3D; DC）</p><p>举一个来自《龙与地下城3.5版玩家手册》的例子吧：</p><blockquote><p>吟游诗人金宝在一间旅店遇到一群矮人，他想为这些矮人弹奏鲁特琴。在此之前，金宝已仔细聆听这些矮人喝酒唱歌的曲调，并藉以调整演出。因此，DM给予「表演」技能检定+2环境加值。扮演金宝的玩者掷出5，加上技能调整值+9（技能级数4、魅力调整值+3、对矮人歌曲的临时研究+2），检定结果为14。另一方面，DM裁定在一般情况下，这类工作的DC是15。但由于这群矮人最近刚突袭击败附近的兽人强盗，心情很好，所以DM暗中把DC降到13。（金宝的演奏不会因为矮人高兴而变好，故技能调整值并不因此获得加值。然而，矮人的好心情让DC降低了。）状况不只如此，这群矮人的领袖听说有侏儒间谍帮兽人强盗工作，因此怀疑金宝。因此，取悦矮人领袖比平常困难，DC为17，而非15。于是金宝的表演（技能检定结果14）换来矮人领袖的怀疑眼光（DC 17），但其他矮人则鼓掌叫好，争相请他喝酒（DC 13）。</p></blockquote><p>如果把难度等级DC替换为防御等级AC，调整值替换为攻击加值，就变成了战斗中的进攻流程：如果骰子结果加上攻击加值不小于防御等级，则视为命中。</p><p>这个系统简单好用，而且非常适合移植到计算机上。但是，法术系统就没那么简单了。</p><p>法术的效果普遍比较强大，尤其是动辄造成大量伤害的高等级法术，所以需要一种机制来限制使用次数。《龙与地下城》是这样运作的：</p><p>所有法术被分为零到九级，施法者在每个法术等级上，有一个每天的施法数量上限。比如，不考虑智力的影响，一个5级的法师每天可以施放4个零级法术、3个一级法术、2个二级法术和1个三级法术。</p><p>为了模拟奇幻小说的设定，《龙与地下城》里的“法力值”相当“离散”（当然，严格说来现代电脑游戏里的法力值系统也不“连续”）。比如，你不能把两个三级法术的施法机会合并起来，施放一个四级法术；如果用四级法术的施法机会施放了三级法术，也不会得到一个一级法术作为找零。</p><p>但是这样的设定毕竟太过繁琐，不利于推广。而且对于早期的游戏机&#x2F;电脑来说，移植起来也不是很省心。</p><h2 id="法力值和变体规则"><a href="#法力值和变体规则" class="headerlink" title="法力值和变体规则"></a><strong>法力值和变体规则</strong></h2><p>于是电子游戏开发者建立了生命值类似的法力值（Mana Point）系统，所有的施法行为消耗的都是同一个法力值，法术越强大，消耗的法力值越多。1983年发行的《创世纪3：出埃及记》中就已经有了法力值这个概念，此后的《最终幻想》等日系游戏也接受了这个概念。深受日本影响的台湾游戏里页游法力值的影子，不过台湾游戏大都是武侠背景，法力值会被替换成内力值。</p><p>到了90年代中后期，以《暗黑破坏神》为代表的即时动作角色扮演游戏崛起，此后流行的网络游戏，大都有它的影子，法力值（或者怒气、能量、内力等替代系统）也由此成为标配。</p><p><strong>简化后的法力值系统有明显的弱点：既然所有法术消耗的是同一种资源，那么只要法力还够，玩家一定会选择最强的法术，这就破坏了游戏的多样性，所以游戏设计师必须用别的方式来限制玩家的选择：比如给强力技能设置冷却时间，比如引入其他约束性的新资源（例如魔兽世界里盗贼的连击点数）等等。</strong></p><p>所以，答案其实很简单，法力值这个属性是电脑&#x2F;主机游戏对龙与地下城里施法次数系统简化后形成的产物（很可能参考了生命值系统），随着创世纪（80年代到新世纪初的超级神作）、最终幻想、暗黑破坏神等殿堂级系列游戏逐渐变成了电子游戏的标配。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 图片缓存</title>
    <link href="/2024/11/13/SwiftUI-%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"/>
    <url>/2024/11/13/SwiftUI-%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>图片缓存分为两种：</p><ol><li>Memory Cache；</li><li>Disk Cache。</li></ol><h2 id="原生实现"><a href="#原生实现" class="headerlink" title="原生实现"></a>原生实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageCache</span> &#123;<br>    <br>    <span class="hljs-keyword">var</span> cache <span class="hljs-operator">=</span> <span class="hljs-type">NSCache</span>&lt;<span class="hljs-type">NSString</span>, <span class="hljs-type">UIImage</span>&gt;()<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> shared <span class="hljs-operator">=</span> <span class="hljs-type">ImageCache</span>()<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">forKey</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">UIImage</span>? &#123;<br>        <span class="hljs-keyword">return</span> cache.object(forKey: <span class="hljs-type">NSString</span>(string: forKey))<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">forKey</span>: <span class="hljs-type">String</span>, <span class="hljs-params">image</span>: <span class="hljs-type">UIImage</span>) &#123;<br>        cache.setObject(image, forKey: <span class="hljs-type">NSString</span>(string: forKey))<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-type">ImageCache</span>.shared.set(forKey: <span class="hljs-string">&quot;...&quot;</span>, image: <span class="hljs-type">UIImage</span>())<br><span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> <span class="hljs-type">ImageCache</span>.shared.get(forKey: <span class="hljs-string">&quot;...&quot;</span>)<br></code></pre></td></tr></table></figure><p>参考：<a href="https://xavier7t.com/image-caching-in-swiftui">Image Caching in SwiftUI</a></p><p>另外就是使用 SwiftUI 的 AsyncImage——<a href="https://stackoverflow.com/questions/69214543/how-can-i-add-caching-to-asyncimage">How can I add caching to AsyncImage</a></p><h2 id="使用第三方库实现"><a href="#使用第三方库实现" class="headerlink" title="使用第三方库实现"></a>使用第三方库实现</h2><ul><li><a href="https://github.com/SDWebImage/SDWebImageSwiftUI">SDWebImageSwiftUI</a></li></ul><p>首先，SDWebImage 的图片缓存采用的是 Memory(内存) 和 Disk(硬盘) 双重 Cache 机制，SDImageCache 中有一个叫做 memCache 的属性，它是一个 NSCache 对象，用于实现我们对图片的 Memory Cache，其实就是接受系统的内存警告通知，然后清除掉自身的图片缓存。Disk Cache，也就是文件缓存，SDWebImage 会将图片存放到 NSCachesDirectory 目录中，然后为每一个缓存文件生成一个 md5 文件名，存放到文件中。</p><p>整体机制如下：</p><p>Memory(内存)中查找：SDImageCache 类的 queryDiskCacheForKey 方法，查询图片缓存，queryDiskCacheForKey 方法内部，先会查询 Memory Cache，如果查找到就直接返回，反之进入下面的硬盘查找。</p><p>Disk(硬盘) 中查找：如果 Memory Cache 查找不到，就会查询 Disk Cache，查询 Disk Cache 的时候有一个小插曲，就是如果 Disk Cache 查询成功，还会把得到的图片再次设置到 Memory Cache 中。这样做可以最大化那些高频率展现图片的效率。如果找不到就进入下面的网络下载。</p><p>网路下载：请求网络使用的是 imageDownloader 属性，这个示例专门负责下载图片数据。如果下载失败，会把失败的图片地址写入 failedURLs 集合，为什么要有这个 failedURLs 呢，因为 SDWebImage 默认会有一个对上次加载失败的图片拒绝再次加载的机制。也就是说，一张图片在本次会话加载失败了，如果再次加载就会直接拒绝，SDWebImage 这样做可能是为了提高性能。如果下载图片成功了，接下来就会使用 [self.imageCache storeImage] 方法将它写入缓存，同时也会写入硬盘，并且调用 completedBlock 告诉前端显示图片。</p><p>Disk(硬盘)缓存清理策略：SDWebImage 会在每次 APP 结束的时候执行清理任务。清理缓存的规则分两步进行。第一步先清除掉过期的缓存文件。如果清除掉过期的缓存之后，空间还不够。那么就继续按文件时间从早到晚排序，先清除最早的缓存文件，直到剩余空间达到要求。</p><ul><li><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a></li></ul><p>暂时没有使用过。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 多线程</title>
    <link href="/2024/11/13/Swift-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/11/13/Swift-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.main.async &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Main&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主线程延迟"><a href="#主线程延迟" class="headerlink" title="主线程延迟"></a>主线程延迟</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="hljs-operator">+</span> <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1s&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong>GCD</strong> 和 <strong>Operation</strong> 的区别：</p><ol><li>GCD 遵循先进先出顺序 FIFO， 是轻量级的方式来执行并发过程. 你不用计划这些任务的执行单元，系统会帮你处理执行时间表。添加依赖关系会很头疼。取消，挂起任务会增加很多工作量!</li><li>Operation 不遵循先进先出顺序 FIFO，增加了更多的灵活度，也复杂一些。好处就是方便添加任务依赖关系，并且可以重用，取消，挂起任务。</li></ol><h3 id="global"><a href="#global" class="headerlink" title="global()"></a>global()</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">DispatchQueue</span>.global().async &#123;<br> <span class="hljs-comment">// 一些比較花時間的操作</span><br>    <span class="hljs-type">DispatchQueue</span>.main.async &#123;<br>    <span class="hljs-comment">// update UI</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OperationQueue"><a href="#OperationQueue" class="headerlink" title="OperationQueue"></a>OperationQueue</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> queue <span class="hljs-operator">=</span> <span class="hljs-type">OperationQueue</span>()<br>queue.maxConcurrentOperationCount <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">// 队列宽度为 1</span><br><br><span class="hljs-keyword">let</span> delay <span class="hljs-operator">=</span> <span class="hljs-type">BlockOperation</span>.<span class="hljs-keyword">init</span> &#123;<br>    sleep(<span class="hljs-number">3</span>)<br>&#125;<br>            <br><span class="hljs-keyword">let</span> doing <span class="hljs-operator">=</span> <span class="hljs-type">BlockOperation</span>.<span class="hljs-keyword">init</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3s Later&quot;</span>)<br>&#125;<br><br>queue.addOperation(delay)<br>queue.addOperation(doing)<br>queue.cancelAllOperations() <span class="hljs-comment">// 取消所有 operation</span><br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://www.jianshu.com/p/8d4cc42b095b">Swift多线程操作GCD使用总结</a></li><li><a href="https://blog.csdn.net/zgpeace/article/details/103133287">Operation和OperationQueue详解</a></li><li><a href="https://juejin.cn/post/6844903766701916168">iOS - 多线程分析之 DispatchQueue Ⅰ</a></li><li><a href="https://vocus.cc/article/653a1e0afd89780001e7c5a0">GCD 神秘面紗揭開：讓你的 Swift 應用更強大</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 通过 XPath 显示网站信息</title>
    <link href="/2024/11/13/SwiftUI-%E9%80%9A%E8%BF%87-XPath-%E6%98%BE%E7%A4%BA%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF/"/>
    <url>/2024/11/13/SwiftUI-%E9%80%9A%E8%BF%87-XPath-%E6%98%BE%E7%A4%BA%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>首先需要 <a href="https://github.com/tid-kijyun/Kanna">Kanna</a> 第三方库解析 HTML。</p><p>解析完成后，再根据 XPath 找到指定想要展示的内容进行展示。这里展示网站的名称和 favicon。</p><p>代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><span class="hljs-keyword">import</span> Kanna<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> imageUrl: <span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> webTitle: <span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <br>            <span class="hljs-type">Text</span>(webTitle)<br>            <br>            <span class="hljs-type">AsyncImage</span>(url: <span class="hljs-type">URL</span>(string: imageUrl)) &#123; image <span class="hljs-keyword">in</span><br>                image<br>                    .resizable()<br>                    .scaledToFit()<br>                    .frame(width: <span class="hljs-number">40</span>, height: <span class="hljs-number">40</span>)<br>                    .clipped()<br>                    .cornerRadius(<span class="hljs-number">4</span>)<br>            &#125; placeholder: &#123;<br>                <span class="hljs-type">ProgressView</span>()<br>            &#125;<br>            <br>        &#125;<br>        .onAppear &#123;<br>            <br>            <span class="hljs-keyword">let</span> url <span class="hljs-operator">=</span> <span class="hljs-type">URL</span>(string: <span class="hljs-string">&quot;https://wonderhoi.com&quot;</span>)<br>            <br>            <span class="hljs-keyword">var</span> appleTouchIconString: <span class="hljs-type">String</span>?<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-type">UIApplication</span>.shared.canOpenURL(url<span class="hljs-operator">!</span>) &#123;<br>            <br>                <span class="hljs-keyword">let</span> task <span class="hljs-operator">=</span> <span class="hljs-type">URLSession</span>.shared.dataTask(with: url<span class="hljs-operator">!</span>) &#123; data, response, error <span class="hljs-keyword">in</span><br>                    <span class="hljs-keyword">guard</span> error <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">print</span>(error<span class="hljs-operator">!</span>)<br>                        <span class="hljs-keyword">return</span><br>                    &#125;<br>                    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> data <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data is nil&quot;</span>)<br>                        <span class="hljs-keyword">return</span><br>                    &#125;<br>                    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> html <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(data: data, encoding: .utf8) <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the response is not in UTF-8&quot;</span>)<br>                        <span class="hljs-keyword">return</span><br>                    &#125;<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> doc <span class="hljs-operator">=</span> <span class="hljs-keyword">try?</span> <span class="hljs-type">HTML</span>(html: html, encoding: .utf8) &#123;<br>                        <br>                        webTitle <span class="hljs-operator">=</span> doc.title <span class="hljs-operator">??</span> <span class="hljs-string">&quot;None&quot;</span><br>                        <br>                        <span class="hljs-keyword">for</span> appleTouchIcon <span class="hljs-keyword">in</span> doc.xpath(<span class="hljs-string">&quot;//meta[@rel = &#x27;apple-touch-icon&#x27;]/@content | //link[@rel = &#x27;apple-touch-icon&#x27;]/@href | //meta[@rel = &#x27;apple-touch-icon&#x27;]/@href | //link[@rel = &#x27;apple-touch-icon&#x27;]/@content&quot;</span>) &#123;<br>                            appleTouchIconString <span class="hljs-operator">=</span> appleTouchIcon.text<br>                            <br>                            <span class="hljs-keyword">let</span> iconUrl <span class="hljs-operator">=</span> <span class="hljs-type">URL</span>(string: appleTouchIconString<span class="hljs-operator">!</span>)<br>                            <br>                            <span class="hljs-keyword">if</span> <span class="hljs-type">UIApplication</span>.shared.canOpenURL(iconUrl<span class="hljs-operator">!</span>) &#123;<br>                                <br>                                <span class="hljs-keyword">let</span> task <span class="hljs-operator">=</span> <span class="hljs-type">URLSession</span>.shared.dataTask(with: iconUrl<span class="hljs-operator">!</span>) &#123; data, response, error <span class="hljs-keyword">in</span><br>                                    <span class="hljs-keyword">guard</span> error <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123;<br>                                        <span class="hljs-built_in">print</span>(error<span class="hljs-operator">!</span>)<br>                                        <span class="hljs-keyword">return</span><br>                                    &#125;<br>                                    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> data <span class="hljs-keyword">else</span> &#123;<br>                                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data is nil&quot;</span>)<br>                                        <span class="hljs-keyword">return</span><br>                                    &#125;<br>                                    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>(data: data) <span class="hljs-keyword">else</span> &#123;<br>                                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no picture&quot;</span>)<br>                                        <span class="hljs-keyword">return</span><br>                                    &#125;<br>                                    <br>                                    imageUrl <span class="hljs-operator">=</span> appleTouchIconString<span class="hljs-operator">!</span><br>                                    <br>                                &#125;<br>                                task.resume()<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                task.resume()<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中，XPath 语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">//meta[@rel = &#x27;apple-touch-icon&#x27;]/@content | //link[@rel = &#x27;apple-touch-icon&#x27;]/@href | //meta[@rel = &#x27;apple-touch-icon&#x27;]/@href | //link[@rel = &#x27;apple-touch-icon&#x27;]/@content<br></code></pre></td></tr></table></figure><p>以 <code>//meta[@rel = &#39;apple-touch-icon&#39;]/@content</code> 为例：</p><ul><li>**&#x2F;&#x2F;**：选中节点的标记符号</li><li><strong>meta</strong>：节点的标记名称</li><li>**@**：选中属性的标记符号</li><li><strong>rel</strong>：节点属性的名称</li><li>**&#x2F;@**：提取当前路径下的属性值</li></ul><p>参考：</p><ol><li><a href="https://blog.csdn.net/Winterto1990/article/details/47903653">XPath在python中的高级应用</a></li><li><a href="https://learnku.com/articles/50459">selenium之xpath语法总结</a></li><li><a href="https://builtvisible.com/seo-guide-to-xpath/">An SEO’s guide to XPath</a></li></ol><p>另外，还可以通过 <code>//meta[@property = &#39;og:image&#39;]/@content</code> 获取网站的 ogImage。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 预测 VO2max</title>
    <link href="/2024/11/13/PyTorch-%E9%A2%84%E6%B5%8B-VO2max/"/>
    <url>/2024/11/13/PyTorch-%E9%A2%84%E6%B5%8B-VO2max/</url>
    
    <content type="html"><![CDATA[<p>目前通过神经网络训练出来的模型准确率并不高，但收敛速度要比线性回归快上很多。</p><p>几个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HumanDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, labels</span>):<br>        <span class="hljs-variable language_">self</span>.features = features<br>        <span class="hljs-variable language_">self</span>.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.features)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        item_feature = <span class="hljs-variable language_">self</span>.features[index]<br>        item_label = <span class="hljs-variable language_">self</span>.labels[index]<br>        <span class="hljs-keyword">return</span> item_feature, item_label<br><br><span class="hljs-comment"># ANN 网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLPNet</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_feature, n_hidden1, n_hidden2, n_label</span>):<br>        <span class="hljs-built_in">super</span>(MLPNet, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.hidden1 = torch.nn.Linear(n_feature, n_hidden1)<br>        <span class="hljs-variable language_">self</span>.hidden2 = torch.nn.Linear(n_hidden1, n_hidden2)<br>        <span class="hljs-variable language_">self</span>.output = torch.nn.Linear(n_hidden2, n_label)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.hidden1(x))<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.hidden2(x))<br>        <span class="hljs-comment"># 不要分类，直接输出结果</span><br>        <span class="hljs-comment"># x = torch.nn.functional.softmax(self.output(x))</span><br>        x = <span class="hljs-variable language_">self</span>.output(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># 线性回归模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinearNet</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_feature</span>):<br>        <span class="hljs-built_in">super</span>(LinearNet, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.linear = torch.nn.Linear(n_feature, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.linear(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><p>数据处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将 .csv 文件转换为训练集和训练集</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    tic = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;load .csv&#x27;</span>)<br>    cvs_path = <span class="hljs-string">&#x27;/Users/wonderhoi/Downloads/mipace_mlproject.csv&#x27;</span><br>    df = pd.read_csv(cvs_path)<br><br>    human_features = np.zeros((<span class="hljs-number">540</span>, <span class="hljs-number">12</span>), dtype=<span class="hljs-built_in">float</span>)<br>    human_labels = []<br><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df.itertuples():<br>        human_features[[item[<span class="hljs-number">0</span>]], :] = [item[<span class="hljs-number">1</span>], item[<span class="hljs-number">2</span>], <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> item[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;Male&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>, item[<span class="hljs-number">4</span>], item[<span class="hljs-number">5</span>], item[<span class="hljs-number">6</span>],<br>                                        item[<span class="hljs-number">7</span>], item[<span class="hljs-number">8</span>], item[<span class="hljs-number">9</span>], item[<span class="hljs-number">10</span>], item[<span class="hljs-number">11</span>], item[<span class="hljs-number">12</span>]]<br>        human_labels.append(item[<span class="hljs-number">13</span>])<br><br>    <span class="hljs-comment"># 缩放</span><br>    <span class="hljs-comment"># scaler = MinMaxScaler(feature_range=(0, 1))</span><br>    <span class="hljs-comment"># human_features = scaler.fit_transform(human_features)</span><br><br>    <span class="hljs-comment"># 标准化处理</span><br>    <span class="hljs-comment"># scaler = StandardScaler()</span><br>    <span class="hljs-comment"># human_features = scaler.fit_transform(human_features)</span><br><br>    <span class="hljs-comment"># 归一化处理</span><br>    scaler = Normalizer()<br>    human_features = scaler.fit_transform(human_features)<br><br>    <span class="hljs-comment"># 标准化处理</span><br>    <span class="hljs-comment"># human_features = (human_features - np.mean(human_features)) / np.std(human_features)</span><br><br>    <span class="hljs-comment"># mean = torch.mean(X, dim=0)</span><br>    <span class="hljs-comment"># std = torch.std(X, dim=0)</span><br>    <span class="hljs-comment"># X = (X - mean) / std</span><br><br>    human_features = torch.FloatTensor(human_features)<br>    human_labels = torch.FloatTensor(human_labels)<br><br>    <span class="hljs-comment"># 把数据集按照 8:2 的比例来划分为训练集和测试集</span><br>    X_train, x_test, Y_train, y_train = train_test_split(human_features, human_labels, test_size=<span class="hljs-number">0.2</span>)<br><br>    train = HumanDataset(X_train, Y_train)<br><br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Time: &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> train, x_test, y_train<br></code></pre></td></tr></table></figure><p>训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>():<br>    tic = time.time()<br><br>    model = MLPNet(n_feature=<span class="hljs-number">12</span>, n_hidden1=<span class="hljs-number">64</span>, n_hidden2=<span class="hljs-number">32</span>, n_label=<span class="hljs-number">1</span>)   <span class="hljs-comment"># ANN</span><br>    <span class="hljs-comment"># model = LinearNet(12)   # 线性回归</span><br><br>    optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.01</span>)<br><br>    <span class="hljs-comment"># loss_func = torch.nn.CrossEntropyLoss()       # 分类损失函数</span><br>    <span class="hljs-comment"># loss_func = torch.nn.MSELoss()                # 损失函数爆炸</span><br>    loss_func = torch.nn.SmoothL1Loss()<br><br>    dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, pin_memory=<span class="hljs-literal">True</span>)<br><br>    count_loss = <span class="hljs-number">0</span><span class="hljs-comment">#绘制损失函数的 x 轴</span><br>    count_recall = <span class="hljs-number">0</span><span class="hljs-comment"># 绘制召回率的 x 轴</span><br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        <span class="hljs-keyword">for</span> step, (features, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>            output = model(features)<br>            loss = loss_func(output, labels)<br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch: &#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Step: &#x27;</span>, step + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Loss: &#x27;</span>, loss.item())<br>            Y_loss.append(loss.item())<br>            count_loss = count_loss + <span class="hljs-number">1</span><br>            X_loss.append(count_loss)<br><br>        count_recall = count_recall + <span class="hljs-number">1</span><br>        predictions = model(test_features)<br>        errors = torch.<span class="hljs-built_in">abs</span>(test_labels - predictions.t())       <span class="hljs-comment"># 转置 predictions size[68, 1]-&gt;[1, 68]</span><br><br>        errors = errors / test_labels<br>        correct_predictions = (errors &lt;= threshold/<span class="hljs-number">100</span>).<span class="hljs-built_in">float</span>().<span class="hljs-built_in">sum</span>().item()<br><br>        recall = (<span class="hljs-built_in">len</span>(test_labels) - correct_predictions) / <span class="hljs-built_in">len</span>(test_labels)<br>        Y_recall.append(recall)<br>        X_recall.append(count_recall)<br><br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练结束&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>绘制图表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 绘制损失函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_loss</span>():<br>    fig = plt.figure(figsize=(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>))<br>    ax = fig.add_subplot()<br>    ax.scatter(X_loss, Y_loss, c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;loss&#x27;</span>)<br>    ax.set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">&#x27;loss&#x27;</span>)<br>    ax.legend(loc=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 绘制召回率</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_recall</span>():<br>    fig = plt.figure(figsize=(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>))<br>    ax = fig.add_subplot()<br>    ax.scatter(X_recall, Y_recall, c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;recall&#x27;</span>)<br>    ax.set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">&#x27;recall&#x27;</span>)<br>    ax.legend(loc=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>Main：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler, Normalizer, MinMaxScaler<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    epochs 迭代次数</span><br><span class="hljs-string">    batch_size 每次迭代中子批次数量，目前共 432 训练样本，如果取值为 16，则每次迭代会分 432/16=27 次进行</span><br><span class="hljs-string">    threshold 接受误差范围，5=5%</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    epochs = <span class="hljs-number">200</span><br>    batch_size = <span class="hljs-number">432</span><br>    threshold = <span class="hljs-number">5</span><br><br>    Y_loss = []<br>    Y_recall = []<br>    X_loss = []<br>    X_recall = []<br>    train_dataset, test_features, test_labels = get_data()<br>    train_model()<br><br>    plot_recall()<br>    plot_loss()<br>    plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VO2</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VO2max 特征选择</title>
    <link href="/2024/11/12/VO2max-%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/"/>
    <url>/2024/11/12/VO2max-%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<p>从 12 个特征中选择出最优组合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dataset</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HumanDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, labels</span>):<br>        <span class="hljs-variable language_">self</span>.features = features<br>        <span class="hljs-variable language_">self</span>.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.features)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        item_feature = <span class="hljs-variable language_">self</span>.features[index]<br>        item_label = <span class="hljs-variable language_">self</span>.labels[index]<br>        <span class="hljs-keyword">return</span> item_feature, item_label<br><br><span class="hljs-comment"># Net</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLPNet</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_feature, n_hidden1, n_hidden2, n_label</span>):<br>        <span class="hljs-built_in">super</span>(MLPNet, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.hidden1 = torch.nn.Linear(n_feature, n_hidden1)<br>        <span class="hljs-variable language_">self</span>.hidden2 = torch.nn.Linear(n_hidden1, n_hidden2)<br>        <span class="hljs-variable language_">self</span>.output = torch.nn.Linear(n_hidden2, n_label)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.hidden1(x))<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.hidden2(x))<br>        <span class="hljs-comment"># 不要分类，直接输出结果</span><br>        <span class="hljs-comment"># x = torch.nn.functional.softmax(self.output(x))</span><br>        x = <span class="hljs-variable language_">self</span>.output(x)<br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><p>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">chose_feature</span>():<br>    columns_header = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]<span class="hljs-comment"># 12 个特征</span><br>    vo2max_labels = np.zeros((<span class="hljs-number">540</span>, <span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">float</span>)<br>    recalls = []<span class="hljs-comment"># 召回率</span><br>    r2s = []<span class="hljs-comment"># r2 评分</span><br>    all_header = []<span class="hljs-comment"># 所有特征的组合</span><br><br>    cvs_path = <span class="hljs-string">&#x27;/Users/wonderhoi/Downloads/mipace_mlproject.csv&#x27;</span><br>    df = pd.read_csv(cvs_path)<br><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df.itertuples():<br>        vo2max_labels[[item[<span class="hljs-number">0</span>]], :] = item[<span class="hljs-number">13</span>]<span class="hljs-comment"># 按照 index 将 VO2max 放入 labels 中</span><br><br>    vo2max_labels = torch.FloatTensor(vo2max_labels)<br><br>    i = <span class="hljs-number">4</span><span class="hljs-comment"># 选择特征开始数量，这里是 4 到 12</span><br>    count = <span class="hljs-number">0</span><span class="hljs-comment"># 组合序号</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">13</span>:<br><span class="hljs-comment"># 无序排列组合，例如（1, 2, 3）</span><br>        <span class="hljs-comment"># [(1, 2), (1, 3), (2, 3)]</span><br>        headers = <span class="hljs-built_in">list</span>(itertools.combinations(columns_header, i))<br>        <span class="hljs-keyword">for</span> header <span class="hljs-keyword">in</span> headers:<br>          <span class="hljs-comment"># header = (1, 2)</span><br>            all_header.append(header)<br>            custom_features = np.zeros((<span class="hljs-number">540</span>, i), dtype=<span class="hljs-built_in">float</span>)<br>            count += <span class="hljs-number">1</span><br>            <br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df.itertuples():<br>                row = []<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>                  <span class="hljs-comment"># header[0] = 1 </span><br>                    <span class="hljs-comment"># header[1] = 2</span><br>                    row.append(item[header[j]] <span class="hljs-keyword">if</span> header[j] != <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> item[header[j]] == <span class="hljs-string">&#x27;Male&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>)<br>                custom_features[[item[<span class="hljs-number">0</span>]], :] = row<br><br>            <span class="hljs-comment"># 归一化处理</span><br>            scaler = Normalizer()<br>            custom_features = scaler.fit_transform(custom_features)<br>            custom_features = torch.FloatTensor(custom_features)<br><br>            <span class="hljs-comment"># 把数据集按照 8:2 的比例来划分为训练集和测试集</span><br>            train_features, \<br>                test_features, \<br>                train_labels, \<br>                test_labels = train_test_split(custom_features, vo2max_labels, test_size=<span class="hljs-number">0.2</span>)<br><br>            train_dataset = HumanDataset(train_features, train_labels)<br>            model = MLPNet(n_feature=i, n_hidden1=<span class="hljs-number">64</span>, n_hidden2=<span class="hljs-number">32</span>, n_label=<span class="hljs-number">1</span>)  <span class="hljs-comment"># ANN</span><br>            optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.01</span>)<br>            loss_func = torch.nn.SmoothL1Loss()<br>            dataloader = DataLoader(train_dataset, batch_size=<span class="hljs-number">432</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, pin_memory=<span class="hljs-literal">True</span>)<br><br>            <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>                <span class="hljs-keyword">for</span> step, (features, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>                    output = model(features)<br>                    loss = loss_func(output, labels)<br>                    optimizer.zero_grad()<br>                    loss.backward()<br>                    optimizer.step()<br><br>            predictions = model(test_features)<br>            r2 = r2_score(test_labels.detach(), predictions.detach())<br>            r2s.append(r2)<br><br>            errors = torch.<span class="hljs-built_in">abs</span>(test_labels - predictions)<span class="hljs-comment"># 计算预测值与测试 label 的误差</span><br>            errors = errors / test_labels<span class="hljs-comment"># 将误差转换成百分比</span><br>            correct_predictions = (errors &lt;= <span class="hljs-number">5</span> / <span class="hljs-number">100</span>).<span class="hljs-built_in">float</span>().<span class="hljs-built_in">sum</span>().item()<span class="hljs-comment"># 统计误差低于 5% 的个数</span><br><br>            recall = (<span class="hljs-built_in">len</span>(test_labels) - correct_predictions) / <span class="hljs-built_in">len</span>(test_labels)<br>            recalls.append(recall)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;组合序号：&#x27;</span> + <span class="hljs-built_in">str</span>(count) + <span class="hljs-string">&#x27;， 召回率：&#x27;</span> + <span class="hljs-built_in">str</span>(recall) + <span class="hljs-string">&#x27;， r2：&#x27;</span> + <span class="hljs-built_in">str</span>(r2))<br><br>        i += <span class="hljs-number">1</span><br><br>    max_recalls = heapq.nlargest(<span class="hljs-number">10</span>, <span class="hljs-built_in">enumerate</span>(recalls), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br>    max_recall_index, max_recall = <span class="hljs-built_in">zip</span>(*max_recalls)<br><br>    min_recalls = heapq.nsmallest(<span class="hljs-number">10</span>, <span class="hljs-built_in">enumerate</span>(recalls), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br>    min_recall_index, min_recall = <span class="hljs-built_in">zip</span>(*min_recalls)<br><br>    max_r2s = heapq.nlargest(<span class="hljs-number">10</span>, <span class="hljs-built_in">enumerate</span>(r2s), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br>    max_r2_index, max_r2 = <span class="hljs-built_in">zip</span>(*max_r2s)<br><br>    min_r2s = heapq.nsmallest(<span class="hljs-number">10</span>, <span class="hljs-built_in">enumerate</span>(r2s), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br>    min_r2_index, min_r2 = <span class="hljs-built_in">zip</span>(*min_r2s)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;recall指标最坏特征组合：&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(max_recall)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> max_recall_index:<br>        result = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> all_header[i]:<br>            <span class="hljs-keyword">if</span> item == <span class="hljs-number">1</span> :<br>                result.append(<span class="hljs-string">&#x27;age&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">2</span> :<br>                result.append(<span class="hljs-string">&#x27;HRMax&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">3</span> :<br>                result.append(<span class="hljs-string">&#x27;gender&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">4</span> :<br>                result.append(<span class="hljs-string">&#x27;weight&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">5</span> :<br>                result.append(<span class="hljs-string">&#x27;height&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">6</span> :<br>                result.append(<span class="hljs-string">&#x27;bmi&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">7</span> :<br>                result.append(<span class="hljs-string">&#x27;AmbTemp&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">8</span> :<br>                result.append(<span class="hljs-string">&#x27;RHHumidity&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">9</span> :<br>                result.append(<span class="hljs-string">&#x27;avgHR&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">10</span> :<br>                result.append(<span class="hljs-string">&#x27;MaxSpeed&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">11</span> :<br>                result.append(<span class="hljs-string">&#x27;avgRE&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">12</span> :<br>                result.append(<span class="hljs-string">&#x27;eSV&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(result)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r2指标最坏特征组合：&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(min_r2)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> min_r2_index:<br>        result = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> all_header[i]:<br>            <span class="hljs-keyword">if</span> item == <span class="hljs-number">1</span> :<br>                result.append(<span class="hljs-string">&#x27;age&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">2</span> :<br>                result.append(<span class="hljs-string">&#x27;HRMax&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">3</span> :<br>                result.append(<span class="hljs-string">&#x27;gender&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">4</span> :<br>                result.append(<span class="hljs-string">&#x27;weight&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">5</span> :<br>                result.append(<span class="hljs-string">&#x27;height&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">6</span> :<br>                result.append(<span class="hljs-string">&#x27;bmi&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">7</span> :<br>                result.append(<span class="hljs-string">&#x27;AmbTemp&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">8</span> :<br>                result.append(<span class="hljs-string">&#x27;RHHumidity&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">9</span> :<br>                result.append(<span class="hljs-string">&#x27;avgHR&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">10</span> :<br>                result.append(<span class="hljs-string">&#x27;MaxSpeed&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">11</span> :<br>                result.append(<span class="hljs-string">&#x27;avgRE&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">12</span> :<br>                result.append(<span class="hljs-string">&#x27;eSV&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(result)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;recall指标最优特征组合：&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(min_recall)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> min_recall_index:<br>        result = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> all_header[i]:<br>            <span class="hljs-keyword">if</span> item == <span class="hljs-number">1</span>:<br>                result.append(<span class="hljs-string">&#x27;age&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">2</span>:<br>                result.append(<span class="hljs-string">&#x27;HRMax&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">3</span>:<br>                result.append(<span class="hljs-string">&#x27;gender&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">4</span>:<br>                result.append(<span class="hljs-string">&#x27;weight&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">5</span>:<br>                result.append(<span class="hljs-string">&#x27;height&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">6</span>:<br>                result.append(<span class="hljs-string">&#x27;bmi&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">7</span>:<br>                result.append(<span class="hljs-string">&#x27;AmbTemp&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">8</span>:<br>                result.append(<span class="hljs-string">&#x27;RHHumidity&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">9</span>:<br>                result.append(<span class="hljs-string">&#x27;avgHR&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">10</span>:<br>                result.append(<span class="hljs-string">&#x27;MaxSpeed&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">11</span>:<br>                result.append(<span class="hljs-string">&#x27;avgRE&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">12</span>:<br>                result.append(<span class="hljs-string">&#x27;eSV&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(result)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r2指标最优特征组合：&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(max_r2)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> max_r2_index:<br>        result = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> all_header[i]:<br>            <span class="hljs-keyword">if</span> item == <span class="hljs-number">1</span>:<br>                result.append(<span class="hljs-string">&#x27;age&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">2</span>:<br>                result.append(<span class="hljs-string">&#x27;HRMax&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">3</span>:<br>                result.append(<span class="hljs-string">&#x27;gender&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">4</span>:<br>                result.append(<span class="hljs-string">&#x27;weight&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">5</span>:<br>                result.append(<span class="hljs-string">&#x27;height&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">6</span>:<br>                result.append(<span class="hljs-string">&#x27;bmi&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">7</span>:<br>                result.append(<span class="hljs-string">&#x27;AmbTemp&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">8</span>:<br>                result.append(<span class="hljs-string">&#x27;RHHumidity&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">9</span>:<br>                result.append(<span class="hljs-string">&#x27;avgHR&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">10</span>:<br>                result.append(<span class="hljs-string">&#x27;MaxSpeed&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">11</span>:<br>                result.append(<span class="hljs-string">&#x27;avgRE&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> item == <span class="hljs-number">12</span>:<br>                result.append(<span class="hljs-string">&#x27;eSV&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> heapq<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler, Normalizer, MinMaxScaler<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    chose_feature()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VO2</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VO2max 数据集</title>
    <link href="/2024/11/12/VO2max-%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2024/11/12/VO2max-%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>VO2max 的数据集来自开源项目 <a href="https://github.com/joshch100/MiPace">MiPace</a>。</p><p>其中有提到项目的 dataset 来自 MiPR lab —— This dataset was collected by CPET in the MiPR lab, which was part of the research funded by Apple Inc。</p><ul><li><a href="https://hpssc.umich.edu/performance-lab/">Michigan Performance Research Laboratory</a></li><li><a href="https://www.kines.umich.edu/research/labs-centers/michigan-performance-research-laboratory">MICHIGAN PERFORMANCE RESEARCH LABORATORY</a></li></ul><p>具体的数据如下：</p><p>index,id,visit,age,HR Max,gender,weight,height,bmi,Amb Temp,RH Humidity,Grade,avgHR last 30,MaxSpeed,avgRE,eSV,V02max<br>0,TR000208,1,53.35659185,167,Male,93.4,181,28.5,22,35,TRUE,169.1904762,7.6,35.33206154,147.3952381,43.01904762<br>1,TR000237,1,37.37028139,183,Male,83.3,184.3,24.5,24,35,FALSE,177.2592593,8.6,45.98839401,152.1592593,51.66518519<br>2,TR000230,1,28.3757572,192,Male,92.7,196.7,24,22,32,TRUE,186.9285714,9.3,45.59797243,167.5928571,54.45428571<br>3,TR000239,1,34.01368954,186,Female,59.1,167.8,21,22,28,TRUE,174.4242424,9.3,43.8363813,111.9909091,53.47212121<br>4,TR000206,1,60.16427442,160,Female,43,158.5,17.1,22,36,FALSE,162.8461538,9.3,53.69682603,96.22307692,58.25538462<br>5,TR000201,1,71.8028707,149,Male,71.8,171.8,24.3,23,29,FALSE,139.25,7.3,37.0972399,131.675,41.7496875<br>6,TR000255,1,26.17248814,194,Female,51.9,156.5,21.2,23,36,FALSE,181.4615385,7.6,39.58665603,79.21923077,45.08769231<br>7,TR000252,1,34.94797977,186,Male,50.6,154.5,21.2,25,45,TRUE,189.36,7.2,43.70655475,85.964,52.1308<br>8,TR000299,1,23.69609232,197,Male,74,176.6,23.7,26,42,TRUE,189,9.3,44.24882077,116.7642857,48.94964286<br>9,TR000264,1,24.51539046,196,Male,77.1,179.3,24,24,43,FALSE,187.7666667,9.9,52.03786259,145.9466667,58.932<br>10,TR000290,1,38.02737907,182,Male,63.7,174.5,20.9,26,43,FALSE,178.96,10.5,51.58314838,131.904,58.8108<br>11,TR000297,1,20.29843186,200,Female,63.1,173.6,20.9,25,41,FALSE,178.5217391,8.8,39.49336351,103.6869565,46.99913043<br>12,TR000200,1,30.4140879,190,Male,68.3,177.3,21.7,23,33,TRUE,178.3225806,10.5,52.65289896,145.916129,60.94774194<br>13,TR000238,1,45.84941511,175,Female,71.8,163,27,21,28,FALSE,168.3181818,6.4,29.02750546,101.3,37.89681818<br>14,TR000231,1,39.79465697,181,Male,99.6,179.4,30.9,22,30,FALSE,173.6086957,7.2,34.45514555,153.8782609,43.52869565<br>15,TR000209,1,21.47432185,199,Female,64,170,22.1,21,35,FALSE,184.8709677,9.3,44.20797473,106.6612903,49.40258065<br>16,TR000236,1,34.01642744,186,Female,66.4,166,24.1,23,36,FALSE,165.6896552,9.8,42.81154586,121.7103448,49.25793103<br>17,TR000262,1,33.18070186,187,Female,76.7,164.5,28.3,24,37,TRUE,186.2222222,6.7,28.33737762,88.48888889,34.37888889<br>18,TR000296,1,23.81656023,197,Male,80.5,179.1,25.1,25,42,FALSE,195.5882353,8.8,42.34808754,121.4441176,47.57441176<br>19,TR000291,1,38.29021814,182,Female,69.3,170.4,23.9,24,43,FALSE,176.9677419,6.7,28.93342398,90.96774194,37.56419355<br>20,TR000265,1,32.18070186,188,Female,63.7,172.8,21.3,24,43,TRUE,172.96,8.8,41.6253919,119.364,52.3808<br>21,TR000253,1,28.5701486,192,Female,52.2,155,21.7,23,35,FALSE,182.1612903,7.6,36.64298225,78.02903226,44.08129032<br>22,TR000298,1,23.20808093,197,Female,57.9,161.5,22.2,24,42,TRUE,175.4090909,7.9,39.71335712,94.03181818,46.11090909<br>23,TR000114,1,46.61395511,174,Male,68.9,167,24.7,21,34,TRUE,186.1875,9.3,44.92248356,125.53125,52.923125<br>24,TR000113,1,37.43872906,183,Male,88.5,192.2,24,21,33,TRUE,193.3043478,7.2,38.20294619,134.7434783,45.93478261<br>25,TR000317,1,23.32033512,197,Female,58.5,163.4,21.9,21,39,FALSE,190.78125,8.6,43.97079043,90.5625,47.745<br>26,TR000125,1,23.9206007,197,Female,68.9,173.6,22.9,22,29,TRUE,197.9642857,7.9,39.50612019,109.3321429,49.26714286<br>27,TR000122,1,24.44420488,196,Female,54.2,160,21.2,20,23,TRUE,188.7096774,8.8,41.60455501,84,47.07516129<br>28,TR000310,1,28.42711349,192,Male,97.1,185,28.4,25,43,TRUE,198.7333333,7.6,37.01524916,131.5633333,43.20333333<br>29,TR000182,1,37.3730193,183,Male,93.5,189.5,26,21,29,FALSE,180.2173913,10.5,48.82170149,182.4782609,57.0126087<br>30,TR000176,1,54.41682581,166,Female,54.8,157.4,22.1,21,28,TRUE,168.375,6.2,28.22753307,75.87083333,37.07208333<br>31,TR000149,1,18.89595953,202,Male,65.7,176.8,21,21,26,FALSE,194.2666667,9.9,51.4108918,122.4733333,56.60966667<br>32,TR000171,1,75.52086627,145,Female,66.2,162.5,25.1,20,31,FALSE,160.5,6.1,30.68231578,102.05,40.07909091<br>33,TR000185,1,52.60026558,168,Male,76.8,161.3,29.5,21,29,TRUE,165.1333333,7,34.21206795,116.2733333,40.43266667<br>34,TR000147,1,32.1813658,188,Male,102.8,190.5,28.3,22,26,TRUE,187.52,6.4,31.23706314,151.828,45.0008<br>35,TR000178,1,30.03559279,190,Male,63.9,172.5,21.5,21,28,TRUE,183.0909091,9.8,51.61379604,123.5590909,57.36272727<br>36,TR000140,1,39.48253558,181,Female,63.9,157,25.9,21,41,TRUE,169.2962963,7.6,38.29023478,111.3851852,47.69407407<br>37,TR000311,1,30.03011698,190,Male,74.7,176.8,23.9,24,42,TRUE,178.5517241,8.8,43.08098468,124.1724138,48.45<br>38,TR000123,1,66.20053115,154,Female,64.5,168.2,22.8,21,26,FALSE,177.6086957,7,33.79451378,93.06086957,39.96782609<br>39,TR000124,1,42.71799558,178,Female,56.9,158,22.8,20,25,FALSE,179.0833333,7.2,37.05250037,86.4125,44.62458333<br>40,TR000124,1,42.71799558,178,Female,56.9,158,22.8,20,25,FALSE,179.0833333,7.2,37.05250037,86.4125,44.62458333<br>41,TR000316,1,35.45996838,185,Male,93.5,169.1,32.7,24,48,TRUE,182.2857143,6.2,30.67103271,124.5214286,40.27928571<br>42,TR000115,1,37.9233386,183,Male,77.3,183,23.1,22,38,TRUE,193,8.3,44.54899908,127.8814815,51.75296296<br>43,TR000141,1,48.34016441,172,Male,76.5,184.7,22.4,22,42,TRUE,158.2857143,8.3,40.39334999,170.2619048,57.53<br>44,TR000146,1,67.70704395,153,Female,52.6,167.5,18.7,20,26,FALSE,151.625,5.6,35.91925268,86.825,40.51791667<br>45,TR000179,1,50.29088209,170,Male,83.8,183.7,24.8,22,29,TRUE,182.9473684,6.7,31.4386522,136.0842105,46.96631579<br>46,TR000184,1,21.84941511,199,Male,67.3,174.2,22.2,20,27,TRUE,185.3928571,11.2,50.00543292,125.7892857,56.58428571<br>47,TR000170,1,30.63312046,190,Male,70.2,181.2,21.4,21,32,FALSE,158.0869565,9.2,47.63746888,148.326087,53.59695652<br>48,TR000170,1,30.63312046,190,Male,70.2,181.2,21.4,21,32,FALSE,158.0869565,9.2,47.63746888,148.326087,53.59695652<br>49,TR000177,1,27.27171674,193,Male,72.7,187.2,20.7,22,28,FALSE,176.6666667,9.2,48.26667628,144.625,57.48583333<br>50,TR000183,1,65.24159976,155,Male,60.7,174.5,19.9,22,30,FALSE,158,8.6,49.32516412,142.6818182,67.31863636<br>51,TR000148,1,30.59752767,190,Female,60.7,165,22.3,20,27,FALSE,192.32,6.7,29.98940899,72.82,37.184<br>52,TR000199,1,32.90964907,188,Male,75.5,172.4,25.4,24,33,FALSE,186.6538462,10.5,54.99736185,157.8346154,63.18384615<br>53,TR000152,1,21.57562441,199,Male,73.3,184,21.7,21,26,FALSE,183.1818182,10,52.47552392,138.7818182,56.28909091<br>54,TR000190,1,40.43872906,180,Male,75,190.2,20.7,22,32,TRUE,178.44,9.8,48.3623766,145.28,56.8588<br>55,TR000164,1,36.66597535,184,Male,73.2,184.9,21.4,21,25,TRUE,177.826087,8.8,47.90485091,149.1086957,56.93565217<br>56,TR000163,1,32.15332279,188,Male,92.7,188,26.2,22,29,TRUE,177.1724138,9.3,44.00097497,167.8344828,52.15965517<br>57,TR000197,1,72.99452419,148,Male,76.5,170.8,26.2,24,36,FALSE,139.1034483,5.8,30.53353147,124.8862069,37.10310345<br>58,TR000137,1,22.89869744,198,Male,74.5,182.2,22.4,22,30,TRUE,181.5416667,10.5,49.32792733,149.2958333,58.14875<br>59,TR000305,1,20.70978186,200,Male,88,192.8,23.7,26,43,FALSE,194.4782609,9.9,50.07363188,150.7217391,55.74565217<br>60,TR000108,1,32.71251976,188,Female,66.3,166.5,23.9,22,26,FALSE,189.6818182,6.6,35.48675105,84.57272727,39.27818182<br>61,TR000302,1,22.31759721,198,Male,71,174.2,23.4,26,43,FALSE,193.35,9.9,52.34441389,131.88,58.866<br>62,TR000130,1,53.37849511,167,Female,63.8,173.8,21.1,22,26,TRUE,173.3461538,7.2,39.92294764,115.6884615,48.81653846<br>63,TR000106,1,55.98904837,165,Male,70.8,172.3,23.8,21,27,TRUE,167.1333333,8.3,46.42199413,138.4466667,54.79533333<br>64,TR000139,1,28.55098325,192,Male,67.5,191.5,18.4,22,38,TRUE,190.0666667,13.2,59.82243101,173.1033333,77.305<br>65,TR000101,1,54.43872906,166,Female,55.8,169,19.5,21,29,FALSE,147,8.3,41.01193883,110.092,47.1124<br>66,TR000101,1,54.59205186,166,Female,55.8,170,19.3,21,36,FALSE,148.137931,8.3,40.81189409,112.0344828,47.36551724<br>67,TR000162,1,74.47158395,146,Male,67.5,169.5,23.5,21,28,TRUE,135.9230769,7.2,32.63745406,123.55,40.40423077<br>68,TR000165,1,47.41134999,173,Female,50.6,162.4,19.2,20,24,TRUE,174.6923077,9.3,43.82192925,95.46538462,55.04769231<br>69,TR000191,1,39.2196965,181,Male,83.2,186.4,23.9,20,32,TRUE,158.5172414,9.8,48.30481597,185.4655172,56.36862069<br>70,TR000198,1,29.51539046,191,Female,56.2,163.5,21,21,34,TRUE,192.1428571,9.3,47.70963841,102.2107143,55.90464286<br>71,TR000153,1,26.85489093,194,Female,67.1,164,24.9,21,22,TRUE,179.5652174,7.9,36.93741908,98.69130435,42.61956522<br>72,TR000154,1,30.77822953,190,Female,78.5,166.3,28.4,22,24,FALSE,189.037037,7.5,40.14439777,113.9740741,44.15666667<br>73,TR000100,1,37.93429023,183,Female,52.1,159.9,20.4,21,27,TRUE,188.5,9.8,53.98690615,98.7875,59.31416667<br>74,TR000138,1,41.41134999,179,Male,75.1,170,26,20,37,TRUE,180.65625,8.8,45.54900531,132.709375,51.7434375<br>75,TR000131,1,23.34016441,197,Female,65.5,169.5,22.8,21,26,TRUE,106.36,8.8,43.09253886,199.712,52.0412<br>76,TR000303,1,33.79191907,187,Female,68,174.3,22.4,24,41,FALSE,175.9259259,7.3,36.0450297,101.462963,42.47333333<br>77,TR000304,1,32.98631046,188,Male,86,172.7,28.8,25,40,FALSE,180.1818182,9.9,48.60816592,162.9090909,56.32363636<br>78,TR000109,1,65.63585837,155,Male,78.6,180.9,24,22,29,FALSE,162.5517241,8.8,40.90599543,137.6586207,46.1837931<br>79,TR000249,1,22.35592791,198,Female,68.8,160,26.9,23,41,FALSE,190.5625,8.3,38.56274018,95.78125,43.0803125<br>80,TR000276,1,30.11225419,190,Male,90.3,186.2,26,25,41,TRUE,173.5925926,9.8,46.22935012,166.8333333,51.79481481<br>81,TR000282,1,33.29569396,187,Female,60.8,160.8,23.5,26,41,FALSE,185.7419355,9.741935484,47.6942115,107.7387097,53.61483871<br>82,TR000285,1,30.76454,190,Male,70,169,24.5,25,41,FALSE,194.1818182,10.6,55.44131677,134.0454545,57.99681818<br>83,TR000271,1,21.30116977,199,Male,72.6,187.6,20.6,24,45,TRUE,187.2380952,7.9,41.30473273,117.1142857,48.68333333<br>84,TR000278,1,26.85489093,194,Female,63.7,165,23.4,24,41,FALSE,189.1818182,7,40.37586231,95.49545455,46.20227273<br>85,TR000247,1,43.21903256,177,Female,65.9,158.5,26.2,23,38,FALSE,179.1428571,7.6,36.59801627,95.60357143,42.17821429<br>86,TR000240,1,22.55919697,198,Female,51.8,158.2,20.7,22,32,FALSE,176.8518519,8.8,38.49357344,79.46666667,43.93592593<br>87,TR000214,1,31.35385395,189,Male,78.2,185.2,22.8,22,26,TRUE,170.0869565,9.3,44.76565125,151.126087,53.10434783<br>88,TR000213,1,25.53729372,195,Female,50.5,166.5,18.2,24,20,TRUE,186.09375,9.8,47.56447116,93.621875,55.6284375<br>89,TR000225,1,39.41134999,181,Male,102.7,186.3,29.6,22,39,TRUE,171.2916667,8.3,42.71566885,188.3333333,50.00916667<br>90,TR000222,1,41.02190326,179,Female,69.4,174.5,22.8,21,33,FALSE,174.6666667,9.3,44.11439392,124.8407407,50.64333333<br>91,TR000241,1,46.20260512,174,Male,67.1,165.3,24.6,24,27,TRUE,181.1111111,8.3,44.66940424,125.4833333,61.42444444<br>92,TR000279,1,26.05202023,194,Male,84.7,177.2,27,24,40,FALSE,189.2333333,7.3,39.53954247,129.21,46.94433333<br>93,TR000246,1,21.93976605,199,Female,57.3,171,19.6,22,28,TRUE,181.7142857,8.8,42.22378785,93.15,47.71<br>94,TR000270,1,39.30390768,181,Female,53.3,157,21.6,23,43,FALSE,178.6538462,8.6,42.79862296,95.06538462,51.48038462<br>95,TR000284,1,24.16701233,196,Male,62.1,174,20.5,24,40,FALSE,181.03125,11.6,56.76898104,137.46875,64.4015625<br>96,TR000248,1,55.0793993,165,Female,55.1,160,21.5,22,42,TRUE,174.6206897,6.7,31.32320481,78.36551724,39.97<br>97,TR000283,1,26.30938349,194,Male,71.4,179,22.3,24,41,FALSE,182.375,13.2,53.55107914,162.490625,67.1165625<br>98,TR000277,1,40.16427442,180,Male,91.5,181.7,27.7,24,43,FALSE,176.1428571,7.3,35.40432535,130.0464286,40.79142857<br>99,TR000223,1,24.90417325,196,Male,65.8,169.6,22.9,24,32,FALSE,194.6176471,11.6,50.4300821,130.9029412,59.76705882<br>100,TR000224,1,50.2963579,170,Female,66.3,157,26.9,20,37,FALSE,171.3333333,5.6,28.6401091,88.98333333,38.36555556<br>101,TR000212,1,28.12868163,192,Male,83.6,185.9,24.2,22,35,TRUE,182.6923077,8.8,45.54090061,146.8192308,51.465<br>102,TR000215,1,36.77001581,184,Female,60.7,169,21.3,21,30,FALSE,173.3043478,7.3,36.93812211,87.33478261,41.02086957<br>103,TR000251,1,35.31485931,185,Female,59.3,166,21.5,23,43,FALSE,176.1515152,7.9,40.61547552,93.72727273,44.97969697<br>104,TR000256,1,27.94797977,193,Female,60.8,167,21.8,22,39,FALSE,197,7.9,36.78432338,83.63076923,44.00461538<br>105,TR000269,1,21.60574139,199,Male,86,191.1,23.5,24,44,FALSE,181.826087,8.1,46.14730856,161.826087,54.5226087<br>106,TR000294,1,40.10951628,180,Female,45.9,156.6,18.7,24,41,FALSE,170.6666667,9.8,46.32388961,88.59393939,53.02363636<br>107,TR000260,1,47.75906418,173,Female,58.2,161,22.5,23,41,FALSE,153.44,7.7,39.29045541,105.036,44.562<br>108,TR000267,1,19.92881442,201,Female,75,174,24.8,24,43,FALSE,190.8965517,6.6,25.16001998,65.22068966,27.16103448<br>109,TR000293,1,34.54003162,186,Male,86.5,166.1,31.4,25,43,FALSE,167.5,8.3,39.81412287,159.3555556,49.48333333<br>110,TR000258,1,29.13415744,191,Female,103.4,166.5,37.3,24,44,FALSE,176.52,5.792,26.61649141,121.968,33.0328<br>111,TR000202,1,42.73168511,178,Female,80.1,169,28,22,29,TRUE,169,7.6,35.59887814,122.2458333,41.91083333<br>112,TR000205,1,25.4524186,195,Female,66.3,162,25.3,21,33,FALSE,193.7241379,7,35.57102472,82.56551724,38.88275862<br>113,TR000292,1,34.77275372,186,Female,70.1,177,22.4,24,42,FALSE,177.5769231,7.2,35.05981721,108.4730769,43.18115385<br>114,TR000266,1,35.40247233,185,Male,83.5,185,24.4,23,43,FALSE,192.5833333,9.3,49.09567218,154.8458333,58.16791667<br>115,TR000259,1,35.56193488,185,Female,60.2,161,23.2,23,42,TRUE,163.4782609,8.3,41.35056236,118.2782609,51.2073913<br>116,TR000261,1,41.72894721,179,Female,68.5,166,24.9,24,40,TRUE,172.3214286,7.6,30.97892744,97.98928571,39.85321429<br>117,TR000295,1,30.05749605,190,Male,68.9,177,22,25,41,TRUE,184.826087,9.3,45.02560948,121.826087,52.47608696<br>118,TR000257,1,29.91238698,191,Male,68.9,179.3,21.4,24,40,FALSE,176.9310345,10.5,50.18619136,132.5103448,55.53172414<br>119,TR000268,1,31.30664558,189,Female,61.4,165.5,22.4,23,43,TRUE,189.3333333,7.9,39.37284502,99.45833333,49.41291667<br>120,TR000250,1,30.70978186,190,Male,73.9,188,20.9,24,43,FALSE,181.1428571,8.6,47.67548439,140.8714286,55.20571429<br>121,TR000204,1,47.02464116,173,Male,67.8,175,22.1,22,34,FALSE,175.4516129,10.6,58.06807008,159.0419355,66.67193548<br>122,TR000203,1,34.10951628,186,Female,58.5,160.5,22.7,20,33,TRUE,183.84375,9.3,45.71732078,103.35625,52.1865625<br>123,TR000235,1,27.63585837,193,Female,63.4,161.4,24.3,22,47,FALSE,182.3333333,8.8,43.53561864,115.3592593,52.29074074<br>124,TR000232,1,35.45789441,185,Female,55.3,160.7,21.4,22,37,FALSE,185.6190476,7.2,35.30841832,78.32380952,42.65<br>125,TR000172,1,50.49622511,170,Female,55.1,153.3,23.4,22,35,FALSE,185.52,8.6,46.20391514,93.52,49.7404<br>126,TR000186,1,52.84120139,168,Male,80.8,183.5,24,21,28,TRUE,174,9.3,40.59407556,132.2387097,46.58806452<br>127,TR000181,1,59.01095163,161,Male,68.1,177.1,21.7,23,28,FALSE,185.1111111,8.6,40.21624498,101.1888889,43.50222222<br>128,TR000175,1,41.0383307,179,Female,60.1,168.5,21.2,21,29,FALSE,168.3181818,7.9,44.49623554,113.8363636,51.04818182<br>129,TR000143,1,37.18410371,183,Male,61.6,175.9,19.9,21,33,TRUE,186.6785714,8.8,48.90552094,124.2107143,60.08357143<br>130,TR000188,1,51.26350302,169,Male,74.5,183.4,22.1,21,27,FALSE,182.6153846,9.3,43.91062746,130.9884615,51.88884615<br>131,TR000144,1,27.8056086,193,Female,47.4,155,19.7,21,31,TRUE,193.28,9.3,51.6681257,96.936,62.8676<br>132,TR000110,1,38.74263674,182,Female,66.6,165,24.5,21,30,FALSE,189.2068966,8.8,42.08860116,103.3689655,47.51724138<br>133,TR000128,1,22.79191907,198,Male,84.5,180.7,25.9,21,37,FALSE,209.7037037,7.7,38.90432929,114.2407407,42.51259259<br>134,TR000313,1,28.22450837,192,Female,48.8,151.2,21.3,24,43,TRUE,187,9.8,47.52041723,88.8,55.41<br>135,TR000121,1,49.72347139,171,Male,79.2,181.6,24,22,25,TRUE,143.1052632,8.8,40.99211763,175.0210526,47.84368421<br>136,TR000119,1,35.14851092,185,Male,87.3,186.2,25.2,22,21,TRUE,182.8387097,11.2,48.80814599,167.6032258,56.72451613<br>137,TR000314,1,19.93702814,201,Male,78.9,182.1,23.8,24,44,TRUE,191.2258065,11.2,51.32039551,151.4870968,59.3816129<br>138,TR000145,1,55.62216883,165,Male,72.2,171.9,24.4,22,33,FALSE,170.8181818,7.9,36.67682827,117.6954545,44.35045455<br>139,TR000142,1,18.90417325,202,Female,51,160,19.9,20,31,TRUE,189.1290323,7.9,36.85536313,70.48387097,41.88548387<br>140,TR000189,1,32.06023395,188,Female,56,157.6,22.5,20,30,FALSE,181.1621622,8.8,46.29639356,102.9918919,53.86324324<br>141,TR000174,1,60.14237116,160,Female,72.7,162.5,27.5,21,29,FALSE,183.32,6.4,27.20997994,88.604,35.4996<br>142,TR000180,1,22.05749605,198,Female,56.6,168.5,19.9,21,26,TRUE,195,8.8,42.82590856,93.47096774,52.02612903<br>143,TR000187,1,65.46884604,155,Male,84.7,185.7,24.6,22,27,FALSE,158.7272727,7,34.10843494,130.2409091,40.30545455<br>144,TR000118,1,35.11773,185,Male,77,174.1,25.4,21,24,FALSE,165.875,10.6,52.52875053,179.1,60.416875<br>145,TR000315,1,37.06844768,183,Female,64.8,170,22.4,24,47,FALSE,182.9130435,9.3,50.63599432,121.8652174,55.97608696<br>146,TR000127,1,43.77001581,177,Male,70,186.5,20.1,20,34,TRUE,159.1578947,9.8,51.07642233,154.7157895,57.02578947<br>147,TR000120,1,41.43599116,179,Female,45.2,154,19.1,21,21,FALSE,179.8148148,8.6,41.30938401,68.44444444,43.99703704<br>148,TR000312,1,19.56948466,201,Male,86.9,178.5,27.3,24,43,TRUE,189.6785714,7.2,33.73360462,116.6785714,40.02392857<br>149,TR000129,1,55.39218464,165,Male,80.4,174.2,26.5,21,37,FALSE,157.16,7.9,41.34676947,149.256,46.0312<br>150,TR000116,1,35.45789441,185,Female,54.3,160,21.2,20,20,FALSE,192.8,6.3,29.33483302,55.1,31.55<br>151,TR000111,1,59.43051534,161,Male,76.9,174.9,25.1,21,30,TRUE,155.3448276,8.3,46.05498044,178.7689655,58.55655172<br>152,TR000133,1,25.91238698,195,Female,56.2,171.2,19.2,22,27,TRUE,191.1428571,9.3,45.33009679,104.0821429,54.7825<br>153,TR000133,1,25.91238698,195,Female,56.2,171.2,19.2,22,27,TRUE,191.1428571,9.3,45.33009679,104.0821429,54.7825<br>154,TR000301,1,29.19165349,191,Male,75.7,177.4,24.1,25,41,FALSE,169.7931034,9.8,46.17216248,148.1965517,53.17827586<br>155,TR000306,1,40.21629465,180,Female,63.4,160,24.8,24,41,FALSE,187,7.9,37.57396927,93.288,44.4436<br>156,TR000134,1,44.69883023,176,Female,65.3,163,24.6,21,30,TRUE,172.0833333,6.4,28.88036564,84.0375,35.94083333<br>157,TR000102,1,53.93155232,167,Male,65.3,173,21.8,22,24,TRUE,171.12,9.3,43.82424136,120.804,51.0224<br>158,TR000105,1,52.75906418,168,Female,44.1,151,19.3,21,27,TRUE,164.7826087,7.2,43.99101695,87.45652174,52.59913043<br>159,TR000308,1,38.92607651,182,Female,60,163.5,22.4,24,43,FALSE,195,8.6,39.74538278,84.328,44.6316<br>160,TR000151,1,41.12320582,179,Male,99.2,163.2,37.2,22,28,FALSE,165.1538462,5.6,32.97821497,161.2576923,42.93115385<br>161,TR000156,1,28.17041418,192,Female,58.5,168,20.7,22,26,TRUE,183.8928571,7.9,43.90729885,104.4071429,51.42642857<br>162,TR000160,1,42.2580272,178,Male,79.2,170,27.4,22,29,TRUE,194.5384615,7.2,33.7257765,103.05,40.81230769<br>163,TR000158,1,36.09035093,184,Female,54.7,167.7,19.5,22,27,TRUE,186.4814815,6.7,37.47079859,86.43703704,46.90555556<br>164,TR000193,1,30.98083465,190,Female,51.5,163.5,19.3,21,35,FALSE,183.5483871,9.2,46.95605173,88.2483871,50.86451613<br>165,TR000167,1,25.40039837,195,Female,65.1,172,22,21,21,TRUE,167.0909091,7.6,35.44325688,107.9606061,43.25151515<br>166,TR000104,1,37.66049953,183,Female,57.8,170.7,19.8,20,25,TRUE,174.6521739,8.8,47.20585659,113.3434783,55.66434783<br>167,TR000309,1,26.05475814,194,Female,76.6,170.8,26.3,25,43,TRUE,188.0714286,7.9,35.5283297,109.7535714,43.64964286<br>168,TR000103,1,29.42503953,191,Female,56.6,161.3,21.8,22,27,FALSE,172,9.9,50.06100405,112.5777778,55.61777778<br>169,TR000135,1,35.0383307,185,Male,78.9,180.9,24.1,22,27,FALSE,182.3043478,10,47.51226265,145.6652174,52.93173913<br>170,TR000135,1,35.0383307,185,Male,78.9,180.9,24.1,22,27,FALSE,182.3043478,10,47.51226265,145.6652174,52.93173913<br>171,TR000307,1,23.35592791,197,Male,69.8,175.5,22.7,26,41,TRUE,196.1034483,7.6,39.20129661,98.27241379,44.82931034<br>172,TR000300,1,36.59752767,184,Female,66.7,173,22.3,24,42,FALSE,174.6153846,7.6,35.26819213,99.47692308,42.12076923<br>173,TR000132,1,38.6878786,182,Female,70.5,171.5,24,21,27,TRUE,117.7878788,8.8,43.7281589,191.9484848,51.7230303<br>174,TR000159,1,54.2580272,166,Female,94.5,170,32.7,21,28,FALSE,178.1111111,5.6,26.76965559,111.4962963,34.39740741<br>175,TR000166,1,56.91786279,164,Male,84.3,179.8,26.1,23,21,TRUE,157.9583333,8.3,43.26064079,179.1666667,52.295<br>176,TR000192,1,34.20600697,186,Male,71.7,176.1,23.1,22,33,FALSE,186.5789474,8.3,47.76543878,127.3315789,53.80368421<br>177,TR000195,1,28.8056086,192,Female,55.6,161,21.4,22,35,FALSE,185.1481481,8.3,36.33179488,77.2962963,41.72666667<br>178,TR000161,1,50.31826116,170,Female,65.1,164,24.2,21,26,TRUE,182.037037,7.2,35.17978119,95.12222222,41.98814815<br>179,TR000168,1,24.65502372,196,Female,47.3,160,18.5,21,24,TRUE,191.15,7.9,37.08768633,70.885,45.2855<br>180,TR000157,1,33.04380651,187,Female,63.5,171,21.7,20,27,TRUE,182.2413793,8.3,37.70239088,101.1034483,46.60482759<br>181,TR000150,1,23.38944674,197,Female,69.5,175,22.7,20,25,TRUE,190.7083333,7.9,38.70153272,99.29166667,43.84541667<br>182,TR000210,1,33.39218464,187,Female,63.3,158.5,25.2,21,36,FALSE,204.6296296,7,31.6671118,70.72592593,36.98222222<br>183,TR000217,1,36.39218464,184,Male,82.7,185.8,24,22,36,TRUE,159.6666667,9.8,47.45421959,175.8515152,52.44484848<br>184,TR000228,1,33.50170092,187,Male,86.3,177.2,27.5,22,35,TRUE,186.5862069,8.8,45.26361223,154.0965517,54.0237931<br>185,TR000221,1,31.90417325,189,Female,55.1,154.5,23.1,20,34,FALSE,189,7.3,40.72332154,74.72258065,41.91580645<br>186,TR000226,1,33.06297186,187,Female,59.7,171.6,20.3,21,41,TRUE,189.3043478,8.3,41.14372532,100.7565217,51.77217391<br>187,TR000219,1,39.43872906,181,Female,68.3,165.4,25,20,31,FALSE,161,7.7,37.14891761,112.5380952,41.56428571<br>188,TR000286,1,24.04928233,196,Male,67.2,176,21.7,25,40,FALSE,194.4333333,11.6,52.91592593,139.8266667,63.71466667<br>189,TR000272,1,39.03285488,181,Female,68.8,175,22.5,24,42,FALSE,194.1851852,8.8,45.57192198,116.5037037,53.10925926<br>190,TR000275,1,28.64681,192,Male,57.7,174,19.1,24,41,TRUE,185,11.2,53.5214554,120.24,63.496<br>191,TR000281,1,33.02464116,187,Male,70.9,191,19.4,25,40,FALSE,193.3214286,11.2,53.08579247,138.3178571,60.94285714<br>192,TR000288,1,33.12594372,187,Male,138,186,39.9,25,40,TRUE,180.55,7,28.77381413,167.05,35.312<br>193,TR000243,1,27.67966488,193,Male,65.8,178.7,20.6,22,39,FALSE,180.3333333,11.2,51.28268793,135.7030303,59.85878788<br>194,TR000244,1,36.45789441,184,Female,55.1,157,22.4,22,28,FALSE,143.4615385,10,55.43134149,152.9461538,64.44230769<br>195,TR000227,1,48.42503953,172,Male,72.2,166,26.2,21,34,TRUE,171.8387097,7.9,42.47223985,127.5032258,49.06935484<br>196,TR000218,1,40.04380651,180,Male,66.4,179.6,20.6,21,33,FALSE,185.1666667,11.98,49.64125939,131.89,58.81533333<br>197,TR000220,1,43.82477395,177,Female,57.3,167.1,20.5,22,34,FALSE,172.48,9.8,54.87324851,121.76,58.0512<br>198,TR000229,1,26.55645906,194,Male,80.8,171.1,27.6,23,35,TRUE,193.4285714,9.3,43.99123374,128.375,48.86642857<br>199,TR000245,1,24.59205186,196,Female,61.3,170.3,21.1,23,28,TRUE,184.4782609,7.6,42.34738,98.89130435,49.0073913<br>200,TR000289,1,37.09582675,183,Male,81.4,176.5,26.1,25,43,FALSE,178.1428571,7.7,41.18349593,135.4428571,48.1347619<br>201,TR000242,1,41.46337023,179,Female,61,155.5,25.2,21,29,FALSE,190.0740741,6.4,28.97343381,69.75555556,35.18777778<br>202,TR000280,1,27.73716093,193,Female,53.2,163,20,24,39,TRUE,183.1666667,9.3,40.31869117,92.96666667,50.5575<br>203,TR000274,1,34.56467279,186,Male,74.9,182.5,22.5,25,43,FALSE,179.4166667,11,52.08526399,153.4,59.70958333<br>204,TR000273,1,33.10951628,187,Female,61.6,166.5,22.2,25,41,FALSE,170.4210526,7.6,36.13987372,99,43.25210526<br>205,TR000287,1,42.49896302,178,Male,80.3,180.5,24.6,24,40,FALSE,176.8529412,10.5,45.94584242,147.5264706,52.86911765<br>206,TR000208,2,53.4934872,167,Male,91.3,180.4,28.1,25,42,TRUE,161.5454545,7.6,7.6,169.2090909,48.59909091<br>207,TR000230,2,28.64407209,192,Male,91.3,197,23.5,24,42,TRUE,184.4285714,9.3,9.3,156.4428571,48.23321429<br>208,TR000239,2,34.33950047,186,Female,59.5,167.8,21.1,23,44,TRUE,172.1212121,9.3,9.3,108.469697,50.06151515<br>209,TR000206,2,60.56674675,160,Female,45.1,158,18.1,24,45,FALSE,158.1428571,9.3,9.3,90.89642857,51.21142857<br>210,TR000201,2,71.93702814,149,Male,70.8,171.3,24.1,24,33,TRUE,136,7.9,7.9,136.0147059,41.45176471<br>211,TR000255,2,26.60507745,194,Female,52.4,156,21.5,21,36,TRUE,179.375,7.6,7.6,86.92916667,47.81416667<br>212,TR000252,2,35.12046791,185,Male,47.7,154.6,20,24,39,TRUE,187.08,7.2,7.2,92.612,58.5448<br>213,TR000299,2,23.88774581,197,Male,77.4,176.4,24.9,22,38,TRUE,184.5294118,9.3,9.3,129.4323529,50.26794118<br>214,TR000264,2,24.80013279,196,Male,77,178.9,24.1,24,49,FALSE,189.1785714,9.9,9.9,144.3,57.10892857<br>215,TR000263,2,36.74263674,184,Male,83.8,178,26.4,23,44,TRUE,179,8.3,8.3,134.9695652,46.55869565<br>216,TR000200,2,30.69061651,190,Male,65.3,177.6,20.7,26,40,TRUE,171.9,10.5,10.5,147.6933333,63.15966667<br>217,TR000238,2,46.13689535,175,Female,72.2,166,26.2,24,43,TRUE,173.5217391,6.4,6.4,108.9652174,42.34913043<br>218,TR000207,2,25.49829908,195,Female,51.5,166,18.7,25,45,TRUE,190.1666667,8.8,8.8,104.6208333,63.69541667<br>219,TR000231,2,40.20808093,181,Male,101.7,178,32.1,25,47,FALSE,166,6.6,6.6,145.5818182,38.58363636<br>220,TR000209,2,21.89048372,199,Female,63.1,169.7,21.9,23,44,TRUE,176.5625,9.3,9.3,116.084375,52.07375<br>221,TR000236,2,34.26557698,186,Female,64,166.2,23.2,24,40,FALSE,180.3928571,9.8,9.8,111.8821429,50.65642857<br>222,TR000262,2,33.35319,187,Female,76.3,164.7,28.1,23,41,TRUE,183,6.7,6.7,95.93333333,36.89666667<br>223,TR000296,2,23.93429023,197,Male,80.1,179.6,24.8,25,44,TRUE,186.3636364,8.8,8.8,132.8636364,50.05363636<br>224,TR000291,2,38.46270628,182,Female,73.9,170.4,25.5,23,47,FALSE,179.8387097,6.7,6.7,96.05806452,37.40806452<br>225,TR000265,2,32.37235535,188,Female,64.7,172.4,21.8,23,45,TRUE,169.1153846,8.8,8.8,121.3769231,50.38923077<br>226,TR000253,2,28.76454,192,Female,51.6,155.5,21.3,25,41,FALSE,177.4814815,7.6,7.6,86.22962963,46.86222222<br>227,TR000298,2,23.35319,197,Female,56.7,161.5,21.7,22,49,TRUE,171.1818182,7.9,7.9,99.37727273,48.52227273<br>228,TR000254,2,28.06297186,193,Female,70.7,164.2,26.2,24,42,FALSE,160.9,7,7,99.34,36.60566667<br>229,TR000114,2,46.87953209,174,Male,68.9,166,25,24,44,FALSE,179.75,8,8,111.425,47.14458333<br>230,TR000113,2,37.6878786,183,Male,89.2,191.3,24.4,25,37,TRUE,188.75,7.2,7.2,136.875,47.5725<br>231,TR000125,2,24.20808093,197,Female,67.1,173.8,22.2,25,42,TRUE,192.6071429,7.9,7.9,116.0857143,53.05964286<br>232,TR000122,2,24.63312046,196,Female,55.2,160.2,21.5,22,41,TRUE,182.2413793,8.8,8.8,93.22758621,49.93068966<br>233,TR000310,2,28.61055326,192,Male,98.3,185,28.7,23,37,TRUE,197,7.6,7.6,138.696,44.7004<br>234,TR000182,2,37.54550744,183,Male,91.8,189.8,25.5,25,35,TRUE,177,10.5,10.5,196.1777778,63.13<br>235,TR000176,2,54.53455581,166,Female,55.1,156.7,22.4,22,25,TRUE,168.2173913,6.2,6.2,77.23913043,35.45<br>236,TR000171,2,75.70156814,145,Female,64.6,162.4,24.5,24,34,FALSE,162.1304348,6.543478261,6.543478261,96.90869565,39.47130435<br>237,TR000185,2,52.86858046,168,Male,77.1,160.6,29.9,25,43,FALSE,165.0833333,7,7,121.9958333,41.50833333<br>238,TR000147,2,32.43325325,188,Male,99.8,190.4,27.5,23,43,TRUE,183.8076923,6.4,6.4,166.8307692,48.77384615<br>239,TR000178,2,30.17248814,190,Male,63.7,172,21.5,22,24,TRUE,184.5925926,9.8,9.8,132.0259259,58.03<br>240,TR000140,2,39.67145116,181,Female,63.8,157,25.9,22,36,TRUE,192.8666667,7.6,7.6,103.1,51.06933333<br>241,TR000311,2,30.20534303,190,Male,76,176.8,24.3,21,42,FALSE,185.6071429,8.8,8.8,121.5571429,47.55857143<br>242,TR000123,2,66.31826116,154,Female,63.9,167.5,22.8,20,40,FALSE,179.6538462,7,7,88.87307692,40.05923077<br>243,TR000123 V2,2,66.31826116,154,Female,63.9,167.5,22.8,20,40,FALSE,179.6538462,7,7,88.87307692,40.05923077<br>244,TR000316,2,35.61055326,185,Male,84.6,169.2,29.6,22,48,TRUE,177.483871,6.2,6.2,139.8516129,47.61903226<br>245,TR000112,2,54.44968069,166,Male,95.2,175.5,30.9,24,39,FALSE,167.5714286,5.6,5.6,102.3666667,29.18619048<br>246,TR000115,2,38.12320582,183,Male,76.9,182.9,23,24,42,TRUE,186.8148148,8.3,8.3,136.4259259,53.79592593<br>247,TR000141,2,48.59205186,172,Male,78.4,183.5,23.3,23,43,TRUE,155.8571429,8.3,8.3,150.9809524,49.5752381<br>248,TR000146,2,68.03559279,152,Female,51.7,168.4,18.2,25,41,TRUE,148.75,6.2,6.2,82.6375,38.3275<br>249,TR000179,2,50.48527348,170,Male,85.4,184,25.2,23,41,TRUE,178.0416667,6.7,6.7,116.2083333,38.91333333<br>250,TR000184,2,22.21355675,199,Male,65.2,173.3,21.7,24,40,TRUE,183,11.2,11.2,134.0433333,60.849<br>251,TR000170,2,30.8056086,190,Male,67.4,180.7,20.6,24,31,FALSE,160.1923077,9.8,9.8,142.7961538,55.03307692<br>252,TR000177,2,27.52634209,193,Male,72.7,187.2,20.7,25,43,TRUE,189.3103448,9.8,9.8,144.8034483,61.23931034<br>253,TR000183,2,65.52634209,155,Male,58.8,174.4,19.3,26,41,FALSE,154.6363636,8.6,8.6,140.4318182,61.49454545<br>254,TR000148,2,30.82477395,190,Female,62.3,165.2,22.8,24,41,FALSE,183.44,6.676,6.676,78.132,37.1904<br>255,TR000199,2,33.03559279,188,Male,75.3,171.9,25.5,22,38,FALSE,187.2413793,9.9,9.9,159.3586207,64.03<br>256,TR000152,2,21.74811256,199,Male,75.5,184.3,22.2,24,25,FALSE,183.2857143,10,10,152.8285714,60.97619048<br>257,TR000164,2,36.81929814,184,Male,73.8,185.6,21.4,23,25,TRUE,178.375,8.8,8.8,150.1625,59.64625<br>258,TR000163,2,32.45996838,188,Male,88.7,187,25.4,24,41,TRUE,186.1612903,9.3,9.3,154.2580645,51.51870968<br>259,TR000305,2,20.87131837,200,Male,85.7,192.8,23.1,25,48,FALSE,193,10.5,10.5,46.21538462,16.1<br>260,TR000302,2,22.51198861,198,Male,69,175,22.5,22,46,FALSE,193.375,10.5,10.5,134.325,60.55958333<br>261,TR000130,2,53.48253558,167,Female,64.8,173.2,21.6,21,22,TRUE,171.28,7.2,7.2,113.944,47.5948<br>262,TR000130 V2,2,53.48253558,167,Female,64.8,173.2,21.6,21,22,TRUE,171.28,7.2,7.2,113.944,47.5948<br>263,TR000106,2,56.18343977,165,Male,68.4,172.6,23,24,25,TRUE,170.96,8.3,8.3,138.936,55.5068<br>264,TR000139,2,28.95893139,192,Male,68.1,191.3,18.6,26,41,TRUE,188.3846154,13.2,13.2,169.1692308,74.14692308<br>265,TR000101,2,54.59205186,166,Female,55.8,170,19.3,21,36,FALSE,148.137931,8.3,8.3,112.0344828,47.36551724<br>266,TR000196,2,27.98631046,193,Male,63.6,174.2,21,25,38,TRUE,184,11.2,11.2,134.6857143,64.76619048<br>267,TR000162,2,74.64407209,146,Male,68.5,169,24,23,39,TRUE,141.8571429,7.2,7.2,131.2785714,43.29642857<br>268,TR000165,2,47.67966488,173,Female,49.8,162,19,23,44,TRUE,175,9.3,9.3,92.36538462,52.25769231<br>269,TR000191,2,39.48801139,181,Male,82.8,186.4,23.8,25,41,TRUE,157.5769231,9.8,9.8,184.8538462,56.23346154<br>270,TR000198,2,29.93702814,191,Female,58.5,163.5,21.9,23,47,FALSE,193.7037037,9.3,9.3,97.84814815,51.87037037<br>271,TR000153,2,26.97809674,194,Female,67.5,165,24.8,27,34,TRUE,180.2758621,7.9,7.9,113.4137931,47.92758621<br>272,TR000100 V2,2,38.08761302,182,Female,51.2,160.1,20,22,40,FALSE,183.6470588,9.2,9.2,112.6058824,64.44058824<br>273,TR000100,2,38.08761302,182,Female,51.2,160.1,20,22,40,FALSE,183.6470588,9.2,9.2,112.6058824,64.44058824<br>274,TR000107,2,33.07392349,187,Male,70.6,178,22.3,23,44,TRUE,185,10.5,10.5,127.1727273,54.13606061<br>275,TR000138,2,41.55098325,179,Male,74.8,170,25.9,22,32,TRUE,179,8.8,8.8,134.3730769,52.35230769<br>276,TR000131,2,23.56741069,197,Female,65.1,170.2,22.5,24,33,TRUE,181.8095238,8.8,8.8,125.3904762,56.61190476<br>277,TR000303,2,33.95893139,187,Female,68.8,174.7,22.5,23,48,FALSE,175.7307692,7.3,7.3,101.6846154,42.26423077<br>278,TR000304,2,33.13963326,188,Male,81.4,172.7,27.3,24,49,TRUE,184.6,10.5,10.5,165.28,59.328<br>279,TR000136,2,27.79465697,193,Female,64.2,163.5,24,23,33,TRUE,184.2857143,8.3,8.3,103.9678571,48.62392857<br>280,TR000109,2,65.90417325,155,Male,78.1,181.4,23.7,23,36,FALSE,157.2962963,8.1,8.1,124.0407407,39.44259259<br>281,TR000249,2,22.60781536,198,Female,65,161,25.1,23,45,FALSE,196.2333333,8.3,8.3,91.64666667,43.90433333<br>282,TR000276,2,30.30116977,190,Male,88.7,186,25.6,23,44,TRUE,180.21875,9.8,9.8,180.375,57.906875<br>283,TR000282,2,33.5065128,187,Female,60.8,160.7,23.5,25,49,FALSE,182.8666667,9.8,9.8,108.8,52.78533333<br>284,TR000285,2,30.95619349,190,Male,69.1,168.4,24.4,25,46,FALSE,178.3214286,10,10,142.225,57.99857143<br>285,TR000271,2,21.48734745,199,Male,72.9,190.5,20.1,25,44,TRUE,186.5714286,7.9,7.9,122.5,50.9047619<br>286,TR000278,2,27.04380651,194,Female,63.4,165,23.3,24,45,FALSE,189.8571429,7.6,7.6,101.5047619,49.55333333<br>287,TR000247,2,43.45996838,177,Female,68.2,159.4,26.8,25,43,FALSE,173.6666667,7,7,95.85185185,39.12814815<br>288,TR000214,2,31.63859628,189,Male,80.4,185.5,23.4,25,40,FALSE,178.3913043,9.3,9.3,134.2956522,47.98434783<br>289,TR000213,2,25.81108442,195,Female,52.5,167.2,18.8,24,41,FALSE,152.0882353,9.8,9.8,117.3735294,51.81147059<br>290,TR000225,2,39.73716093,181,Male,98.1,186,28.4,24,42,TRUE,162.7727273,8.3,8.3,197.4045455,53.93045455<br>291,TR000222,2,41.41342396,179,Female,67.4,175,22,23,44,FALSE,174.8148148,9.3,9.3,124.1592593,51.38148148<br>292,TR000241,2,46.45449256,174,Male,66.4,165.3,24.3,26,40,TRUE,172.7894737,8.3,8.3,122.5789474,53.43842105<br>293,TR000279,2,26.24367372,194,Male,82.4,177.6,26.1,24,45,TRUE,188.59375,7.9,7.9,134.025,48.3925<br>294,TR000246,2,22.13689535,198,Female,58.1,172.4,19.5,25,41,TRUE,186.2058824,8.8,8.8,100.5588235,51.25470588<br>295,TR000270,2,39.49829908,181,Female,51.8,157.4,20.9,23,43,FALSE,176.1923077,9.3,9.3,99.45384615,54.28923077<br>296,TR000284,2,24.39973442,196,Male,61.5,174,20.3,22,37,FALSE,181.65625,11.6,11.6,145.090625,68.29375<br>297,TR000283,2,26.48187163,194,Male,72.1,179.3,22.4,25,47,TRUE,182.9333333,13.2,13.2,176.44,72.75866667<br>298,TR000277,2,40.33950047,180,Male,94,182.3,28.3,25,45,FALSE,166.96,7.3,7.3,135.4,39.0372<br>299,TR000223,2,25.2327221,195,Male,65.9,169.5,22.9,24,43,FALSE,194.7428571,11.6,11.6,123.7542857,59.55857143<br>300,TR000224,2,50.61669302,170,Female,64.3,157,26.1,23,40,FALSE,179,6.2,6.2,81.35238095,36.35714286<br>301,TR000212,2,28.24093582,192,Male,82.8,186.5,23.8,24,34,TRUE,182.5,8.8,8.8,157.9,56.61038462<br>302,TR000215,2,36.8439393,184,Female,61.2,169.2,21.4,22,29,TRUE,186.5,7.9,7.9,89.98076923,44.26192308<br>303,TR000251,2,35.49829908,185,Female,60,165.6,21.9,26,42,TRUE,176.1764706,7.9,7.9,98.80588235,46.89823529<br>304,TR000256,2,28.13963326,193,Female,61.7,167,22.1,23,41,TRUE,195.1538462,7.9,7.9,84.31923077,43.48<br>305,TR000294,2,40.29843186,180,Female,46,156.5,18.8,22,49,TRUE,166.9090909,9.8,9.8,98.7,56.26772727<br>306,TR000260,2,47.95071767,173,Female,58.5,161,22.6,24,40,FALSE,156.16,7.7,7.7,102.084,44.5808<br>307,TR000267,2,20.12868163,201,Female,69.1,174,22.8,24,44,FALSE,189.0322581,7.3,7.3,83.0516129,36.48483871<br>308,TR000293,2,34.73168511,186,Male,88.8,166.8,31.9,23,48,FALSE,169.25,8.3,8.3,142.625,41.975<br>309,TR000258,2,29.34771419,191,Female,102.9,167,36.9,24,42,FALSE,168.1333333,5,5,102.5466667,27.23866667<br>310,TR000233,2,30.58657604,190,Male,80.7,187.4,23,24,43,TRUE,189.8064516,9.8,9.8,140.8129032,51.70451613<br>311,TR000202,2,43.09582675,178,Female,79.4,170,27.5,23,43,TRUE,170.5217391,7.6,7.6,123.6391304,43.16347826<br>312,TR000205,2,25.70704395,195,Female,66.1,161.7,25.3,25,41,FALSE,189.6129032,7.6,7.6,90.16451613,42.09<br>313,TR000292,2,34.95345558,186,Female,68.5,177,21.9,23,49,TRUE,164.6296296,7.2,7.2,116.4814815,44.7062963<br>314,TR000266,2,35.59412582,185,Male,85.6,185.5,24.9,23,46,FALSE,179.3703704,8.6,8.6,152.4481481,50.95925926<br>315,TR000259,2,35.78918116,185,Female,60.9,162,23.2,24,44,TRUE,181.0952381,8.3,8.3,105.3190476,50.68380952<br>316,TR000295,2,30.24914954,190,Male,70.3,177,22.4,22,49,TRUE,187.0869565,9.3,9.3,123.4956522,53.31434783<br>317,TR000257,2,30.14784698,191,Male,72.4,179,22.6,24,45,TRUE,180.4193548,10.5,10.5,150.1677419,60.72677419<br>318,TR000268,2,31.51746442,189,Female,60.8,165.2,22.3,23,44,TRUE,191.5135135,7.9,7.9,96.40810811,48.78324324<br>319,TR000250,2,30.90143535,190,Male,77.5,188.6,21.8,24,42,FALSE,180,9.3,9.3,139.3823529,52.04941176<br>320,TR000204,2,47.2327221,173,Male,69.8,174.4,22.9,24,42,FALSE,169.7741935,10,10,155.0612903,61.5183871<br>321,TR000203,2,34.36140372,186,Female,57.3,160.3,22.3,24,39,TRUE,183.1176471,9.3,9.3,102.7058824,52.41529412<br>322,TR000232,2,35.82203604,185,Female,54.4,160.6,21.1,23,43,FALSE,194.1428571,7.2,7.2,77.88571429,42.81952381<br>323,TR000172,2,50.92607651,170,Female,55.4,153.4,23.5,24,42,FALSE,172.8571429,8,8,91.76190476,46.33619048<br>324,TR000186,2,52.97535884,168,Male,81.6,183.8,24.2,23,25,TRUE,170.0625,9.3,9.3,146.990625,50.62625<br>325,TR000181,2,59.29021814,161,Male,66.7,177.1,21.3,24,41,FALSE,173.1612903,8.6,8.6,112.2064516,47.41516129<br>326,TR000175,2,41.38604489,179,Female,60.7,166.5,21.9,24,42,FALSE,169,7.3,7.3,108.1363636,48.50818182<br>327,TR000143,2,37.39492255,183,Male,62.1,175.8,20.1,25,37,TRUE,190.9166667,8.8,8.8,126.7333333,62.45833333<br>328,TR000188,2,51.51265255,169,Male,73.3,183,21.9,23,43,TRUE,174.1153846,9.3,9.3,131.8807692,50.82346154<br>329,TR000144,2,28.18617768,192,Female,50.1,155,20.9,25,41,TRUE,189.9310345,9.3,9.3,95.91724138,58.78551724<br>330,TR000110,2,38.95345558,182,Female,66.7,164,24.8,22,26,FALSE,188.3103448,8.8,8.8,101.2413793,46.15793103<br>331,TR000128,2,23.1971293,198,Male,85.6,179.2,26.7,25,42,FALSE,201.1153846,7.1,7.1,115.4,42.98807692<br>332,TR000117,2,47.67692697,173,Female,55.8,162,21.3,21,25,TRUE,167.6521739,7,7,90.27391304,43.99608696<br>333,TR000313,2,28.39425861,192,Female,48.7,151.3,21.3,21,38,TRUE,146.6666667,9.8,9.8,108.4074074,52.02185185<br>334,TR000121,2,49.88500791,171,Male,78.5,181.8,23.8,23,32,TRUE,165.55,8.8,8.8,138.135,46.7045<br>335,TR000119,2,35.36206767,185,Male,87.2,186.1,25.2,22,41,TRUE,180.0714286,11.2,11.2,176.5964286,58.12464286<br>336,TR000126,2,25.50170092,195,Female,60.4,173.7,20,24,43,FALSE,177.7916667,7.3,7.3,91.64166667,43.38958333<br>337,TR000314,2,20.01916535,200,Male,75.2,183,22.5,22,49,TRUE,195.45,11.2,11.2,142.39,60.492<br>338,TR000145,2,55.81382232,165,Male,71.9,171.1,24.6,24,41,TRUE,173.1818182,7.9,7.9,120.2681818,47.04545455<br>339,TR000142,2,19.1971293,202,Female,48.7,159.5,19.1,23,43,FALSE,186.53125,7.9,7.9,72.665625,45.0628125<br>340,TR000189,2,32.17522605,188,Female,55.1,158.3,22,22,33,TRUE,181.1428571,8.8,8.8,110.9685714,59.17685714<br>341,TR000174,2,60.47365791,160,Female,69.8,162.2,26.5,25,42,TRUE,178.72,6.4,6.4,96.14,39.6512<br>342,TR000180,2,22.20260512,198,Female,58,168.7,20.4,21,36,TRUE,185.2352941,8.8,8.8,95.94117647,49.82647059<br>343,TR000187,2,65.79465697,155,Male,82.2,184.6,24.1,24,38,FALSE,162,7.6,7.6,120.8695652,38.44608696<br>344,TR000173,2,25.83298767,195,Female,67.5,165,24.8,24,42,TRUE,173.7083333,8.3,8.3,110.2083333,46.00291667<br>345,TR000118 V2,2,35.24367372,185,Male,75.9,174.1,25,21,34,FALSE,166.5,10.6,10.6,170.3875,61.2825<br>346,TR000118,2,35.24367372,185,Male,75.9,174.1,25,21,34,FALSE,166.5,10.6,10.6,170.3875,61.2825<br>347,TR000315,2,37.19165349,183,Female,64,170,22.1,22,37,FALSE,185.84,9.9,9.9,119.416,56.2476<br>348,TR000127,2,43.93976605,177,Male,72.1,186.3,20.8,23,26,TRUE,160.75,9.8,9.8,161.63125,58.970625<br>349,TR000120,2,41.73989883,179,Female,46,154,19.4,23,41,FALSE,181.68,8.6,8.6,75.432,46.0868<br>350,TR000312,2,19.31485931,201,Male,83.9,179.2,26.1,23,43,TRUE,194.2307692,7.2,7.2,114.0884615,42.55961538<br>351,TR000129,2,55.67966488,165,Male,81,173,27.1,25,39,TRUE,157,7.9,7.9,147.7272727,46.51636364<br>352,TR000116,2,35.70704395,185,Female,54.1,161,20.9,24,41,FALSE,184.9166667,6.3,6.3,62.51666667,35.445<br>353,TR000111,2,59.67418907,161,Male,72.9,176.1,23.5,24,31,TRUE,160.0666667,8.3,8.3,157.14,55.46566667<br>354,TR000133,2,26.12320582,195,Female,58.3,170.3,20.1,23,38,TRUE,186.7272727,9.3,9.3,109.8545455,58.90318182<br>355,TR000301,2,29.38330698,191,Male,74.3,177.4,23.6,21,49,TRUE,178.0967742,9.8,9.8,142.0870968,54.52677419<br>356,TR000306,2,40.35866582,180,Female,62,160.2,24.2,23,51,FALSE,171.8636364,7.9,7.9,103.25,45.915<br>357,TR000102 V2,2,54.08487512,166,Male,64.4,173,21.5,22,32,TRUE,174.9090909,9.3,9.3,129.7181818,56.37545455<br>358,TR000102,2,54.08487512,166,Male,64.4,173,21.5,22,32,TRUE,174.9090909,9.3,9.3,129.7181818,56.37545455<br>359,TR000105,2,53.03011698,167,Female,45.3,151,19.9,23,29,TRUE,164.173913,7.2,7.2,88.38695652,53.04217391<br>360,TR000308,2,39.09856465,182,Female,60.2,163.4,22.5,21,45,FALSE,195.9655172,9.3,9.3,84.1862069,43.99137931<br>361,TR000151 V2,2,41.23819791,179,Male,101.7,161.9,38.8,21,32,FALSE,158.3913043,5.6,5.6,158.926087,39.50217391<br>362,TR000151,2,41.23819791,179,Male,101.7,161.9,38.8,21,32,FALSE,158.3913043,5.6,5.6,158.926087,39.50217391<br>363,TR000169,2,28.78096744,192,Male,73,184.5,21.4,25,42,TRUE,182.1666667,8.8,8.8,127.5944444,51.78055556<br>364,TR000156,2,28.43872906,192,Female,60,167.3,21.4,24,42,TRUE,189.037037,7.9,7.9,104.7,53.35296296<br>365,TR000160,2,42.46884604,178,Male,77.8,170.9,26.6,24,31,TRUE,195.36,7.2,7.2,100.628,40.9908<br>366,TR000194,2,33.67692697,187,Male,71.1,182.3,21.4,25,43,FALSE,188.5,11.6,11.6,146.12,62.00333333<br>367,TR000158,2,36.27105279,184,Female,54.9,167,19.7,21,38,TRUE,181.0454545,6.7,6.7,86.8,46.76454545<br>368,TR000167,2,25.52360418,195,Female,64.8,171.7,22,21,29,TRUE,184.6176471,7.6,7.6,104.4411765,48.72735294<br>369,TR000104,2,37.75632628,183,Female,58.9,170,20.4,21,28,TRUE,174.5652174,8.8,8.8,112.0782609,53.52913043<br>370,TR000104,2,37.75632628,183,Female,58.9,170,20.4,21,28,TRUE,174.5652174,8.8,8.8,112.0782609,53.52913043<br>371,TR000309,2,26.18617768,194,Female,76.7,169.9,26.6,26,43,FALSE,136.6428571,7.9,7.9,157.7071429,43.31964286<br>372,TR000103,2,29.57836232,191,Female,57.7,161.7,22.1,20,30,FALSE,169,9.9,9.9,112.1142857,51.23857143<br>373,TR000103 V2,2,29.57836232,191,Female,57.7,161.7,22.1,20,30,FALSE,169,9.9,9.9,112.1142857,51.23857143<br>374,TR000135,2,35.22998419,185,Male,78.5,180.2,24.2,22,37,FALSE,182.84,10,10,138.744,51.386<br>375,TR000307,2,23.53936768,197,Male,70.1,175.7,22.7,23,41,TRUE,187.2592593,7.6,7.6,101.862963,44.88666667<br>376,TR000300,2,36.71525767,184,Female,65.5,173.8,21.7,24,45,FALSE,138.15,5.1,5.1,83.215,28.5565<br>377,TR000159,2,54.66323744,166,Female,92,170.3,31.7,24,44,FALSE,171.1538462,5.6,5.6,109.5307692,32.68038462<br>378,TR000166,2,57.18343977,164,Male,85,179.5,26.4,24,44,TRUE,160.173913,8.3,8.3,175.4782609,52.55304348<br>379,TR000192,2,34.36480557,186,Male,71.2,175.8,23,24,37,TRUE,178.8947368,8.3,8.3,129.1736842,53.55789474<br>380,TR000195,2,29.05749605,192,Female,55.1,161,21.3,24,42,FALSE,181.5217391,7.7,7.7,79.01304348,42.18347826<br>381,TR000161,2,50.4934872,170,Female,63.9,163.4,23.9,22,34,TRUE,164.7272727,7.2,7.2,115.6727273,47.91181818<br>382,TR000168,2,24.9233386,196,Female,46.6,160,18.2,24,43,TRUE,181.75,7.9,7.9,74.435,47.9985<br>383,TR000150,2,23.56193488,197,Female,69.4,175,22.7,23,24,TRUE,187.3043478,7.9,7.9,103.626087,45.50391304<br>384,TR000210,2,33.65228581,187,Female,62.9,159,24.9,25,36,TRUE,197.2592593,7,7,79.79259259,40.74851852<br>385,TR000217,2,36.77549163,184,Male,83.7,183.8,24.8,25,48,TRUE,169.6774194,9.8,9.8,139.6483871,43.72387097<br>386,TR000228,2,33.88774581,187,Male,84.3,176.3,27.1,24,44,TRUE,186.6666667,8.8,8.8,142.68,51.57933333<br>387,TR000221,2,32.22177047,189,Female,53.7,154.5,22.5,24,42,FALSE,185.1764706,7.3,7.3,80.63529412,45.18558824<br>388,TR000226,2,33.31759721,187,Female,56.8,172,19.2,24,43,TRUE,191.4285714,8.3,8.3,104.7,55.27571429<br>389,TR000219,2,39.76454,181,Female,67.9,166,24.6,24,41,FALSE,165.037037,8.077777778,8.077777778,110.0851852,44.53962963<br>390,TR000272,2,39.20808093,181,Female,68.5,176,22.1,25,47,FALSE,194.8461538,8.8,8.8,123.8423077,56.36692308<br>391,TR000281,2,33.1971293,187,Male,67.8,190.8,18.6,25,44,FALSE,190.6785714,11.2,11.2,140.7107143,64.94785714<br>392,TR000288,2,33.35866582,187,Male,137.4,186,39.7,22,42,TRUE,184.8518519,7,7,178.5259259,37.54148148<br>393,TR000243,2,28.10130256,192,Male,63,178.6,19.8,22,45,FALSE,179.7941176,11.2,11.2,128.7617647,58.815<br>394,TR000227,2,48.55919697,172,Male,71.9,166.9,25.8,24,44,TRUE,174.8235294,7.9,7.9,133.0794118,51.67264706<br>395,TR000218,2,40.36687954,180,Male,67.2,179.5,20.9,25,42,FALSE,180.6296296,11.6,11.6,132.6222222,56.48555556<br>396,TR000220,2,44.09308884,176,Female,57.5,167.5,20.5,24,39,FALSE,164.44,9.2,9.2,117.544,52.764<br>397,TR000216,2,60.7262093,160,Female,60.7,166.6,21.9,23,33,TRUE,163.32,6.4,6.4,92.388,40.492<br>398,TR000229,2,26.89869744,194,Male,79,171.1,27,24,43,FALSE,196.0357143,9.3,9.3,117.2857143,46.855<br>399,TR000245,2,24.78370535,196,Female,61.9,169.3,21.6,25,42,TRUE,194.6296296,7.6,7.6,89.40740741,46.34037037<br>400,TR000289,2,37.30116977,183,Male,76.7,176.5,24.6,24,48,TRUE,190.7142857,8.3,8.3,126.8035714,49.19071429<br>401,TR000242,2,41.63585837,179,Female,61.2,156,25.1,24,42,TRUE,196.1071429,6.4,6.4,70.86428571,36.21<br>402,TR000280,2,27.96714512,193,Female,54.8,163.2,20.6,23,51,TRUE,181,9.3,9.3,104.0857143,55.12<br>403,TR000274,2,34.8056086,186,Male,77.3,183,23.1,24,48,FALSE,178.4583333,11.05,11.05,156.85,56.8875<br>404,TR000273,2,33.44080303,187,Female,62.2,168.2,22,23,44,TRUE,167.5652174,7.6,7.6,106.0217391,46.29608696<br>405,TR000287,2,42.68514069,178,Male,76.8,181.2,23.4,24,47,FALSE,175.516129,9.9,9.9,154.5064516,57.57193548<br>406,TR000208,3,53.75906418,167,Male,88.4,179.4,27.5,23,45,TRUE,169.4782609,7.6,7.6,141.8869565,41.7373913<br>407,TR000230,3,28.95071767,192,Male,91.3,197,23.5,23,47,TRUE,189.75,9.3,9.3,167.2142857,54.72214286<br>408,TR000239,3,34.63793233,186,Female,59.1,168.5,20.8,22,33,TRUE,170.4848485,9.3,9.3,105.2151515,49.16181818<br>409,TR000201,3,72.20808093,149,Male,73.1,171.8,24.8,24,44,TRUE,142.9411765,7.9,7.9,134.1117647,41.35529412<br>410,TR000252,3,35.38878279,186,Male,48.9,155,20.4,23,36,TRUE,186.9583333,7.2,7.2,88.05416667,54.58166667<br>411,TR000200,3,31.00547581,190,Male,65,177.6,20.6,22,32,TRUE,180.3333333,10.5,10.5,139.0966667,62.31233333<br>412,TR000238,3,46.44354094,174,Female,68.8,163.7,25.7,22,33,FALSE,163.7368421,6.4,6.4,104.5210526,40.34842105<br>413,TR000207,3,25.78851722,195,Female,52.4,165.5,19.1,22,32,TRUE,195.1481481,8.8,8.8,96.89259259,57.80666667<br>414,TR000209,3,22.16427442,199,Female,63.2,169.8,21.9,21,31,TRUE,183.2424242,9.3,9.3,116.2181818,52.68969697<br>415,TR000262,3,33.64067024,187,Female,75.6,165,27.8,20,32,TRUE,184.6111111,6.7,6.7,88.25,35.54944444<br>416,TR000253,3,29.03011698,192,Female,50.7,156,20.8,21,34,FALSE,183.5517241,7.6,7.6,79.51034483,46.72448276<br>417,TR000254,3,28.32854884,192,Female,65.4,164.6,24.1,20,28,FALSE,168.3571429,7,7,101.15,42.1175<br>418,TR000114,3,47.16975023,173,Male,70.4,166,25.5,25,45,FALSE,185.7878788,9.3,9.3,122.6575758,52.02<br>419,TR000113,3,38.01368954,183,Male,90.4,191.3,24.7,24,47,TRUE,183.05,7.2,7.2,152.405,50.752<br>420,TR000125,3,24.52841605,196,Female,68.3,173.4,22.7,22,48,TRUE,171.1785714,7.9,7.9,129.3714286,51.68214286<br>421,TR000122,3,24.94524186,196,Female,54.8,160.5,21.3,22,45,TRUE,178.6333333,8.8,8.8,95.30666667,48.236<br>422,TR000182,3,37.79465697,183,Male,90.8,190,25.2,25,44,TRUE,172.4705882,10.5,10.5,193.3529412,59.84823529<br>423,TR000176,3,54.77822953,166,Female,56.2,156.7,22.9,24,42,FALSE,166.375,6.2,6.2,76.29166667,36.49708333<br>424,TR000149,3,19.50103698,202,Male,66.4,177.5,21.1,22,37,FALSE,185.1481481,10.5,10.5,130.2851852,57.54185185<br>425,TR000171,3,76.02190326,144,Female,64.6,162.2,24.6,24,49,FALSE,161.375,6.15,6.15,103.9583333,42.14583333<br>426,TR000185,3,53.17522605,167,Male,76.1,160.6,29.5,21,37,TRUE,170.8461538,7,7,112.3346154,39.88192308<br>427,TR000147,3,32.69061651,188,Male,100.6,191.5,27.4,24,46,TRUE,182,6.4,6.4,156.5571429,45.60857143<br>428,TR000178,3,30.40247233,190,Male,66.2,172,22.4,24,42,TRUE,179.7741935,9.8,9.8,145.8870968,62.07870968<br>429,TR000140,3,40.04380651,181,Female,59.3,157.4,23.9,23,48,TRUE,182.4615385,7.6,7.6,112.1846154,54.89807692<br>430,TR000123 V2,3,66.55919697,154,Female,64.8,168.2,22.9,24,37,FALSE,172.24,7,7,93.736,40.3628<br>431,TR000124,3,43.06570977,178,Female,60,157.5,24.2,24,41,FALSE,151.9,7.2,7.2,85.33,34.44366667<br>432,TR000112,3,54.85215302,166,Male,97.2,175,31.7,22,36,FALSE,155.4210526,4.4,4.4,106.3368421,25.00368421<br>433,TR000141,3,48.91512488,172,Male,77.2,184.1,22.8,23,48,TRUE,165,8.3,8.3,157.872,53.93<br>434,TR000146,3,68.33950047,153,Female,51.4,168.4,18.1,21,44,TRUE,156.1666667,6.2,6.2,85.95416667,42.51958333<br>435,TR000179,3,50.71525767,170,Male,81.4,183.3,24.2,24,42,TRUE,181.2142857,6.7,6.7,128.2357143,44.5325<br>436,TR000184,3,22.52020233,199,Male,64.7,173,21.6,20,37,TRUE,187.6,11.2,11.2,147.57,69.52266667<br>437,TR000170,3,31.07392349,190,Male,68.4,180.4,21,24,44,TRUE,160,9.8,9.8,161,70.4<br>438,TR000177,3,27.84667721,193,Male,75.9,187.2,21.7,22,43,TRUE,189.6521739,9.8,9.8,146.6086957,60.59565217<br>439,TR000183,3,65.79465697,155,Male,58.7,174.4,19.3,24,40,FALSE,160.9130435,9.3,9.3,134.673913,63.8226087<br>440,TR000148,3,31.03559279,190,Female,62,164.6,22.9,24,43,FALSE,191.6,6.1,6.1,69.92,34.0252<br>441,TR000199,3,33.26283907,188,Male,75.5,172.7,25.3,25,40,TRUE,186.0714286,10.5,10.5,162.4,65.01678571<br>442,TR000152,3,22.01095163,199,Male,74.7,184.2,22,25,43,FALSE,180.44,10.6,10.6,154.036,61.0636<br>443,TR000164,3,37.08761302,183,Male,72.7,185.4,21.2,24,42,TRUE,179.5454545,8.8,8.8,159.4636364,62.05772727<br>444,TR000163,3,32.78577931,188,Male,87.2,187,24.9,22,33,TRUE,187.8333333,9.3,9.3,151.2966667,52.02633333<br>445,TR000197,3,73.57222256,148,Male,75.6,170.5,26,23,31,TRUE,139.6,6.4,6.4,107.44,31.354<br>446,TR000137,3,23.49282326,198,Male,71,181.5,21.6,23,48,FALSE,168.1304348,10.47391304,10.47391304,151.7304348,58.38<br>447,TR000130 V2,3,53.69335442,167,Female,64.7,172,21.9,25,43,TRUE,176.4583333,7.2,7.2,102.8958333,45.57166667<br>448,TR000106,3,56.52567815,165,Male,68.1,172.8,22.8,24,44,TRUE,172.75,8.3,8.3,128.175,53.50625<br>449,TR000139,3,29.26557698,192,Male,67.1,191.3,18.3,22,31,TRUE,192.4333333,13.2,13.2,158.0133333,70.16266667<br>450,TR000101V2,3,54.84120139,166,Female,56.4,170,19.5,24,42,FALSE,150.4285714,8.3,8.3,103.7357143,44.88714286<br>451,TR000196,3,28.27926651,193,Male,62,174.3,20.4,22,44,TRUE,186.1666667,11.2,11.2,134.0666667,64.70583333<br>452,TR000162,3,74.93429023,146,Male,67.2,170,23.3,25,45,TRUE,133.6666667,7.2,7.2,141.8583333,45.4975<br>453,TR000165,3,47.98904837,173,Female,48.9,162.5,18.5,21,41,TRUE,171.3333333,9.3,9.3,93.03333333,49.98666667<br>454,TR000100 V2,3,38.31759721,182,Female,51.7,160.2,20.1,25,41,TRUE,189.6923077,9.8,9.8,107.6615385,64.07423077<br>455,TR000107,3,33.28748024,187,Male,70.8,178.2,22.3,23,42,TRUE,184.4857143,10.5,10.5,140.8971429,58.812<br>456,TR000138,3,41.93429023,179,Male,75.1,170.5,25.8,23,48,FALSE,181,8.8,8.8,134.7214286,52.6775<br>457,TR000136,3,28.1560607,192,Female,65.4,164.2,24.3,24,49,TRUE,191.5714286,8.3,8.3,101.5571429,50.44821429<br>458,TR000109,3,66.17248814,155,Male,78.6,180.7,24.1,25,44,TRUE,162.8275862,8.8,8.8,142.3586207,47.30793103<br>459,TR000278,3,27.24641163,194,Female,63.1,166,22.9,21,32,FALSE,190,7.571428571,7.571428571,105.9857143,51.90428571<br>460,TR000247,3,43.72554536,177,Female,67.2,158.3,26.8,23,46,TRUE,182.3333333,7.6,7.6,100.7466667,44.38<br>461,TR000214,3,31.95345558,189,Male,78.4,185.2,22.9,22,46,TRUE,179,9.3,9.3,149.7666667,56.50666667<br>462,TR000213,3,26.11225419,195,Female,52.9,167.2,18.9,21,40,FALSE,185.4594595,9.8,9.8,89.62972973,51.13189189<br>463,TR000225,3,40.00821372,180,Male,100.5,185.5,29.2,22,33,TRUE,161.173913,8.3,8.3,195.7217391,50.89391304<br>464,TR000241,3,46.70638001,174,Male,65.5,165.3,24,21,32,TRUE,175.047619,8.3,8.3,119.2904762,50.65666667<br>465,TR000279,3,26.44354094,194,Male,81.3,178.7,25.5,20,29,TRUE,198.6896552,7.9,7.9,136.6551724,54.03275862<br>466,TR000246,3,22.40521024,199,Female,58.8,172,19.9,21,30,TRUE,185.0294118,8.8,8.8,95.9,48.86676471<br>467,TR000248,3,55.65983559,165,Female,54.7,160.5,21.2,20,29,TRUE,177.3571429,6.7,6.7,92.38928571,48.61321429<br>468,TR000223,3,25.52294024,196,Male,66.6,169.2,23.3,22,34,FALSE,190.5757576,10.9,10.9,129.4878788,59.6669697<br>469,TR000224,3,50.94797977,170,Female,67.2,157,27.3,21,35,FALSE,177.05,5.6,5.6,94.215,40.4715<br>470,TR000212,3,28.59960163,192,Male,85.8,186.2,24.7,23,45,TRUE,182.8461538,8.8,8.8,147.1653846,50.35769231<br>471,TR000215,3,37.18891558,184,Female,62.3,169.2,21.8,23,43,FALSE,185,7.3,7.3,87.664,41.5016<br>472,TR000251,3,35.80220675,185,Female,59.9,165.4,21.9,22,33,FALSE,181.1764706,7.9,7.9,97.26470588,47.27352941<br>473,TR000256,3,28.40521024,192,Female,60.9,167,21.8,22,32,FALSE,196,7.9,7.9,87.2,45.14521739<br>474,TR000260,3,48.18070186,173,Female,57.1,161,22,21,43,FALSE,158.1578947,8.3,8.3,97.31052632,43.71210526<br>475,TR000258,3,29.59686373,191,Female,102.7,167,36.8,23,41,FALSE,181.8181818,6.2,6.2,115.7772727,32.54318182<br>476,TR000233,3,30.87679418,190,Male,80.2,187.3,22.9,25,47,TRUE,192.28125,9.8,9.8,143.903125,54.8678125<br>477,TR000202,3,43.35319,178,Female,82.1,168.2,29,22,45,TRUE,169.7307692,7.6,7.6,124.2230769,41.79923077<br>478,TR000205,3,26.03285488,195,Female,67.3,161.5,25.8,21,29,FALSE,194.3214286,7,7,87.56071429,41.12392857<br>479,TR000266,3,35.8186342,185,Male,84.5,186.3,24.3,23,33,FALSE,196.7741935,8.983870968,8.983870968,130.6935484,47.38129032<br>480,TR000259,3,36.06023395,185,Female,57.9,161.5,22.2,21,33,TRUE,184.3043478,8.3,8.3,109.1956522,56.38478261<br>481,TR000257,3,30.4298514,191,Male,71,179,22.2,21,36,FALSE,181.2666667,10.5,10.5,139.4233333,57.90133333<br>482,TR000250,3,31.24641163,190,Male,77.2,188.1,21.8,22,32,FALSE,177.75,9.3,9.3,139.335,52.106<br>483,TR000204,3,47.45175466,173,Male,68.3,175,22.3,24,43,FALSE,174.25,10.6,10.6,154.40625,64.0915625<br>484,TR000203,3,34.74471071,186,Female,53.4,160.2,20.8,21,34,FALSE,181.5,9.3,9.3,98.865625,54.485625<br>485,TR000172,3,51.1971293,170,Female,55.1,152.6,23.7,20,33,FALSE,167.0952381,8,8,104.7095238,51.51761905<br>486,TR000181,3,59.60507745,161,Male,66.1,177,21.1,22,44,TRUE,185.34375,9.3,9.3,109.7,49.363125<br>487,TR000175,3,41.64067024,179,Female,61,167.2,21.8,21,34,FALSE,174.7619048,7.3,7.3,101.5619048,47.31714286<br>488,TR000143,3,37.62764465,183,Male,62.4,175.6,20.2,23,41,TRUE,191.96875,8.8,8.8,115.771875,57.3565625<br>489,TR000188,3,51.83024977,169,Male,73.9,183.3,22,22,37,TRUE,176.6666667,9.3,9.3,146.4833333,57.93916667<br>490,TR000144,3,28.51746442,193,Female,52.4,155.5,21.7,22,35,FALSE,174.8181818,8,8,108.5909091,58.72<br>491,TR000110,3,39.29843186,182,Female,67.5,164,25.1,24,46,FALSE,189,8.8,8.8,104.2290323,46.95322581<br>492,TR000128,3,23.53936768,198,Male,85.2,180.5,26.2,22,36,FALSE,206.7241379,7.7,7.7,103.8206897,40.88<br>493,TR000117,3,48.0766614,173,Female,57.6,162,21.9,23,40,TRUE,160.4545455,7,7,103.1318182,47.07727273<br>494,TR000121,3,50.10677837,171,Male,80.6,181.5,24.5,25,40,TRUE,163.3,8.8,8.8,156.18,50.4835<br>495,TR000119,3,35.66871325,185,Male,89.2,186.8,25.6,24,45,TRUE,180,11.2,11.2,180.025,58.8578125<br>496,TR000126,3,25.82751186,195,Female,60.9,173.5,20.2,22,50,FALSE,182.2916667,7.9,7.9,93.125,43.83333333<br>497,TR000145,3,56.1971293,164,Male,68.7,171,23.5,23,48,TRUE,173.826087,7.9,7.9,113.9652174,46.47304348<br>498,TR000142,3,19.49282326,202,Female,47.1,160.4,18.3,22,50,TRUE,188.28125,7.9,7.9,66.059375,42.8021875<br>499,TR000189,3,32.42711349,188,Female,55.7,158.2,22.3,23,41,TRUE,183.6451613,8.8,8.8,102.2548387,54.94096774<br>500,TR000174,3,60.79399303,160,Female,67.7,162.4,25.7,21,49,TRUE,179.4545455,6.4,6.4,94.6,40.99090909<br>501,TR000180,3,22.41889977,198,Female,57.9,167,20.8,24,38,FALSE,183.3548387,8.8,8.8,89.19032258,45.63354839<br>502,TR000187,3,66.13141954,155,Male,77.9,184.7,22.8,22,38,FALSE,165.7727273,7.6,7.6,117.1954545,40.43<br>503,TR000173,3,26.10951628,195,Female,67.6,165,24.8,22,41,TRUE,178.826087,8.3,8.3,113.4608696,48.31695652<br>504,TR000118,3,35.61876698,185,Male,76.5,173.6,25.4,24,44,FALSE,167.5384615,10.6,10.6,174.7923077,60.69846154<br>505,TR000127,3,44.21081884,177,Male,70,186,20.2,24,42,TRUE,161.7142857,9.8,9.8,164.1666667,60.83857143<br>506,TR000120,3,42.06844768,179,Female,45.7,154,19.3,21,37,TRUE,183.0740741,9.3,9.3,72.75185185,44.60148148<br>507,TR000129,3,55.94250395,165,Male,80,173.4,26.6,24,48,FALSE,155.4642857,7.9,7.9,144.525,45.16642857<br>508,TR000116,3,36.03285488,185,Female,55,160,21.5,23,51,FALSE,189.137931,7,7,63.14827586,35.05<br>509,TR000111,3,59.98631046,161,Male,72.7,175.7,23.5,25,46,TRUE,158.6,8.3,8.3,176.87,62.63766667<br>510,TR000133,3,26.42437559,194,Female,55.1,170.2,19,24,44,FALSE,169.8695652,9.3,9.3,107.4521739,52.8526087<br>511,TR000102,3,54.33128675,167,Male,66.8,173,22.3,26,43,TRUE,173.32,9.3,9.3,130.52,54.8504<br>512,TR000105,3,53.37509326,167,Female,44.7,151,19.6,23,49,TRUE,160.6,7.2,7.2,89.61,51.7705<br>513,TR000151,3,41.45996838,179,Male,101.4,161.3,39,25,37,FALSE,165,5.6,5.6,148.22,39.576<br>514,TR000169,3,29.09035093,192,Male,72.4,184.7,21.2,23,41,TRUE,187.6,8.8,8.8,122,50.716<br>515,TR000160,3,42.66049953,178,Male,78.8,170,27.3,25,40,TRUE,198.1428571,7.2,7.2,106.9964286,43.38178571<br>516,TR000194,3,34.01642744,187,Male,73.5,182,22.2,21,34,FALSE,188.9375,11.6,11.6,138.1,56.4584375<br>517,TR000158,3,36.56948466,184,Female,56.1,167.3,20,23,45,FALSE,180.6818182,6.563636364,6.563636364,74.23636364,38.48363636<br>518,TR000193,3,31.49556117,190,Female,52.1,161.5,20,24,50,TRUE,182.5714286,9.8,9.8,104.9,57.3525<br>519,TR000167,3,25.88774581,195,Female,66.2,171,22.6,23,45,TRUE,180.6363636,7.6,7.6,106.4909091,47.18363636<br>520,TR000103 V2,3,29.84120139,191,Female,58.2,161.5,22.3,24,40,FALSE,168,9.5,9.5,114.7777778,51.78777778<br>521,TR000135,3,35.49829908,185,Male,76.6,180,23.6,23,43,FALSE,184,10.6,10.6,123.4444444,47.7<br>522,TR000132,3,39.25462535,181,Female,67.8,171.3,23.1,24,45,FALSE,134.2333333,8.8,8.8,169.91,54.72733333<br>523,TR000159,3,54.97262093,166,Female,92.1,170.4,31.7,21,34,FALSE,170.826087,5,5,109.1347826,34.33826087<br>524,TR000166,3,57.59960163,164,Male,83.4,179.4,25.9,23,33,FALSE,156,8.3,8.3,161.3454545,48.97772727<br>525,TR000192,3,34.63312046,186,Male,71.6,176,23.1,25,48,FALSE,185.4117647,7.7,7.7,119.1235294,50.71470588<br>526,TR000195,3,29.41068605,191,Female,58.6,160,22.9,23,41,FALSE,189,8.196551724,8.196551724,79.70689655,41.75689655<br>527,TR000161,3,50.76180209,170,Female,63.9,164,23.8,23,42,FALSE,183.72,7.2,7.2,97.044,43.9428<br>528,TR000168,3,25.29569396,196,Female,46.6,163,17.5,22,42,TRUE,179.1666667,7.9,7.9,73.81666667,46.02944444<br>529,TR000157,3,33.6242428,187,Female,64,171.5,21.8,21,42,TRUE,187.0769231,8.3,8.3,103.9923077,48.15692308<br>530,TR000150,3,23.92607651,197,Female,67,174.5,22,23,47,TRUE,188.375,7.9,7.9,108.8458333,49.54833333<br>531,TR000210,3,33.91786279,187,Female,63,159,24.9,21,38,FALSE,198.4583333,7,7,74.53333333,38.0625<br>532,TR000221,3,32.49829908,189,Female,53.9,154.6,22.6,21,31,FALSE,180.5,7.9,7.9,89.025,48.4303125<br>533,TR000226,3,33.65435977,187,Female,54.4,172.8,18.2,21,32,TRUE,193.875,8.3,8.3,105.3583333,60.91208333<br>534,TR000219,3,40.09856465,181,Female,68.5,166,24.9,21,32,FALSE,172.6956522,7.7,7.7,107.926087,44.35391304<br>535,TR000227,3,48.9233386,172,Male,72.3,166.5,26.1,21,42,FALSE,176.65625,7.9,7.9,129.00625,50.7846875<br>536,TR000218,3,40.67352512,180,Male,65.2,179.2,20.3,20,31,FALSE,166.7692308,12.2,12.2,147.3615385,59.27884615<br>537,TR000220,3,44.3504521,177,Female,58.6,167.2,21,23,38,FALSE,168.9166667,9.8,9.8,121.9875,56.745<br>538,TR000216,3,61.07392349,159,Female,59.9,166.3,21.7,22,46,TRUE,173.2857143,6.4,6.4,87.34642857,41.29392857<br>539,TR000211,3,56.10677837,165,Male,68.4,174.5,22.5,24,44,TRUE,178.5,8.3,8.3,141.8041667,60.18291667<br>540,TR000245,3,25.05475814,195,Female,63.8,169.3,22.3,21,38,FALSE,197.5357143,7.6,7.6,83.24285714,41.83035714<br>541,TR000242,3,41.9616693,179,Female,61.4,156.2,25.2,21,30,TRUE,171.9615385,6.4,6.4,75.81538462,34.885<br>542,TR000273,3,33.68173884,187,Female,61.4,167.5,21.9,22,42,FALSE,171,7.6,7.6,110.5454545,49.98636364</p>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>数据集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VO2</tag>
      
      <tag>Dataset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VO2max Project 简介</title>
    <link href="/2024/11/12/VO2max-Project-%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/12/VO2max-Project-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>项目通过深度学习的方式对 VO2max 进行预测。</p><p>具体可分为 2 个板块：</p><ol><li>数据集；</li><li>模型训练。</li></ol><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><ol><li><a href="https://wonderhoi.com/2024/11/12/VO2max-%E6%95%B0%E6%8D%AE%E9%9B%86/">VO2max 数据集</a></li></ol><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><ol><li><a href="https://wonderhoi.com/2024/09/24/PyTorch-%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/">PyTorch 回归模型</a></li><li><a href="https://wonderhoi.com/2024/09/24/PyTorch-%E5%B8%B8%E7%94%A8%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/">PyTorch 常用损失函数</a></li><li><a href="https://wonderhoi.com/2024/09/24/sklearn-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/">sklearn 数据预处理</a></li><li><a href="https://wonderhoi.com/2024/09/24/PyTorch-%E6%8F%90%E7%A4%BA-RuntimeError-expected-scalar-type-Long-but-found-Float/">PyTorch 提示 RuntimeError: expected scalar type Long but found Float</a></li><li><a href="https://wonderhoi.com/2024/10/11/Python-%E6%8A%A5%E9%94%99-RuntimeError-Can-t-call-numpy-on-Tensor-that-requires-grad-Use-tensor-detach-numpy-instead/">Python 报错 RuntimeError: Can’t call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead</a></li><li><a href="https://wonderhoi.com/2024/09/06/Python-%E6%9C%89%E5%BA%8F%E6%88%96%E8%80%85%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/">Python 有序或者无序排列组合</a></li><li><a href="https://wonderhoi.com/2024/11/12/VO2max-%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9/">VO2max 特征选择</a></li><li><a href="https://wonderhoi.com/2024/11/13/PyTorch-%E9%A2%84%E6%B5%8B-VO2max/">PyTorch 预测 VO2max</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空间轨迹 Project 简介</title>
    <link href="/2024/11/08/%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9-Project-%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/08/%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9-Project-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>本项目目的是采集 IMU 数据，并对 IMU 的空间轨迹进行复现。</p><p>具体可以分为 2 个板块：</p><ol><li>数据采集；</li><li>轨迹计算。</li></ol><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><h2 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h2><ol><li><a href="https://wonderhoi.com/2024/01/22/iOS-%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87/">iOS 加速度坐标</a></li><li><a href="https://wonderhoi.com/2023/09/13/Swift-%E9%80%9A%E8%BF%87-CMMotionManager-%E8%8E%B7%E5%8F%96-iPhone-%E5%8A%A0%E9%80%9F%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E9%99%80%E8%9E%BA%E4%BB%AA%E7%AD%89%E4%BF%A1%E6%81%AF/">Swift 通过 CMMotionManager 获取 iPhone 加速度传感器、陀螺仪等信息</a></li><li><a href="https://wonderhoi.com/2023/09/13/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B6/">Swift 导出 .csv 文件</a></li></ol><h2 id="WHEELTEC-N100"><a href="#WHEELTEC-N100" class="headerlink" title="WHEELTEC N100"></a>WHEELTEC N100</h2><ol><li><a href="https://wonderhoi.com/2023/07/27/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8/">M1 Mac Parallels Desktop Windows11 安装 CP210x 串口驱动</a></li></ol><h1 id="轨迹计算"><a href="#轨迹计算" class="headerlink" title="轨迹计算"></a>轨迹计算</h1><ol><li><a href="https://wonderhoi.com/2023/08/13/IMU-%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A/">IMU 内参标定</a></li><li><a href="https://wonderhoi.com/2023/08/03/%E9%80%9A%E8%BF%87-IMU-%E7%BB%98%E5%88%B6%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9/">通过 IMU 绘制物体移动的空间轨迹</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>呼吸代谢 Project 简介</title>
    <link href="/2024/11/08/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2-Project-%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/08/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2-Project-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>本项目目的是 DIY 呼吸代谢监测系统来监测人体的呼吸代谢，顺带对人体的 VO2max 进行测量。</p><p>具体可以分为 2 个板块：</p><ol><li>数据采集；</li><li>代谢计算。</li></ol><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><h2 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h2><ol><li><a href="https://wonderhoi.com/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/">传感器的响应时间</a></li><li><a href="https://wonderhoi.com/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/">气体流量传感器 AFM3000&#x2F;SFM3000 驱动</a></li><li><a href="https://wonderhoi.com/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/">CO2 浓度传感器 SEN0220 驱动</a></li><li><a href="https://wonderhoi.com/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/">O2 浓度传感器 SEN0496 驱动</a></li><li><a href="https://wonderhoi.com/2023/08/10/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/">Arduino 输入输出模拟信号</a></li><li><a href="https://wonderhoi.com/2023/08/11/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/">Arduino 输入输出数字信号</a></li><li><a href="https://wonderhoi.com/2024/04/11/%E6%96%87%E4%B8%98%E9%87%8C%E5%96%B7%E5%98%B4%E9%80%9A%E8%BF%87%E5%B7%AE%E5%8E%8B%E6%B5%8B%E9%87%8F%E6%B5%81%E9%87%8F/">文丘里喷嘴通过差压测量流量</a></li></ol><h2 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h2><ol><li><a href="https://wonderhoi.com/2023/07/28/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%95/">Mac 串口查询之 &#x2F;dev&#x2F;cu. 与 &#x2F;dev&#x2F;tty. 记录</a></li><li><a href="https://wonderhoi.com/2023/09/12/Linux-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2/">Linux 串口查询</a></li><li><a href="https://wonderhoi.com/2023/08/03/Python-%E5%AF%BC%E5%87%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%88%B0-csv-%E6%96%87%E4%BB%B6/">Python 导出传感器数据到 .csv 文件</a></li><li><a href="https://wonderhoi.com/2023/08/03/Python-%E7%BB%98%E5%88%B6%E6%95%B0%E6%8D%AE%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3/">Python 绘制数据移动窗口</a></li><li><a href="https://wonderhoi.com/2023/08/11/Python-%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/">Python 读取串口数据</a></li><li><a href="https://wonderhoi.com/2023/08/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/">树莓派开启远程桌面并修改分辨率</a></li><li><a href="https://wonderhoi.com/2023/08/11/SCP-%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE/">SCP 远程拷贝文件到树莓派</a></li><li><a href="https://wonderhoi.com/2023/08/13/pyqtgraph-%E6%97%A0%E6%B3%95%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E5%9B%BE%E8%A1%A8/">pyqtgraph 无法实时刷新图表</a></li><li><a href="https://wonderhoi.com/2023/08/14/PyQt-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/">PyQt 组件之间的层级关系</a></li><li><a href="https://wonderhoi.com/2023/08/29/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%EF%BC%9A%E4%BB%A3%E7%A0%81/">呼吸代谢监测：代码</a></li></ol><h1 id="代谢计算"><a href="#代谢计算" class="headerlink" title="代谢计算"></a>代谢计算</h1><ol><li><p><a href="https://wonderhoi.com/2023/08/15/Python-%E4%BB%A5%E5%8F%8A-pyqt-%E7%BA%BF%E7%A8%8B%E9%94%81%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">Python 以及 pyqt 线程锁简单使用</a></p></li><li><p><a href="https://wonderhoi.com/2023/08/28/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%EF%BC%9A%E5%8E%9F%E7%90%86/">呼吸代谢监测：原理</a></p></li><li><p><a href="https://wonderhoi.com/2024/04/09/DIY-%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/">DIY 呼吸代谢监测系统</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECG Project 简介</title>
    <link href="/2024/11/07/ECG-Project-%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/07/ECG-Project-%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>项目的初衷是想通过 ECG 信号来预测运动状态下的 RPE。</p><p>具体可以分为 3 个板块：</p><ol><li>数据采集；</li><li>数据处理；</li><li>深度学习。</li></ol><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><h2 id="ECG-采集"><a href="#ECG-采集" class="headerlink" title="ECG 采集"></a>ECG 采集</h2><h3 id="Polar-H10"><a href="#Polar-H10" class="headerlink" title="Polar H10"></a>Polar H10</h3><ol><li><p><a href="https://wonderhoi.com/2023/01/09/cocoapods-%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/">cocoapods 更新失败的解决办法</a></p></li><li><p><a href="https://wonderhoi.com/2024/01/10/%E4%BD%BF%E7%94%A8-Cocoapods-%E6%97%B6%E6%8A%A5%E9%94%99-Sandbox-rsync-samba-62830-deny-1/">使用 Cocoapods 时报错 Sandbox: rsync.samba(62830) deny(1)</a></p></li><li><p><a href="https://wonderhoi.com/2024/01/10/Xcode-%E5%B7%A5%E7%A8%8B-Bluetooth-Always-Usage-Description-%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/">Xcode 工程 Bluetooth Always Usage Description 设置问题</a></p></li><li><p><a href="https://wonderhoi.com/2024/01/18/%E5%BC%80%E5%8F%91-Polar-H10-%E5%BF%83%E7%8E%87%E5%B8%A6%E9%81%87%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/">开发 Polar H10 心率带遇到的时间戳问题</a></p></li><li><p><a href="https://wonderhoi.com/2024/01/18/%E6%8A%A5%E9%94%99-async-call-in-a-function-that-does-not-support-concurrency/">报错 ‘async’ call in a function that does not support concurrency</a></p></li></ol><h3 id="DIY"><a href="#DIY" class="headerlink" title="DIY"></a>DIY</h3><ol><li><a href="https://wonderhoi.com/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%93%9D%E7%89%99%EF%BC%88%E7%BB%88%E7%AB%AF%EF%BC%89/">树莓派配置蓝牙（终端）</a></li><li><a href="https://wonderhoi.com/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5-HC05-%E6%8F%90%E7%A4%BA-Failed-to-connect-org-bluez-Error-NotAvailable-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/">树莓派蓝牙连接 HC05 提示 Failed to connect: org.bluez.Error.NotAvailable 解决办法</a></li><li><a href="https://wonderhoi.com/2023/09/11/macOS-%E6%9F%A5%E7%9C%8B%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84-MAC-%E5%9C%B0%E5%9D%80/">macOS 查看蓝牙设备的 MAC 地址</a></li></ol><h2 id="RPE-采集"><a href="#RPE-采集" class="headerlink" title="RPE 采集"></a>RPE 采集</h2><ol><li><a href="https://wonderhoi.com/2024/01/13/SwiftUI-%E4%B8%8B-WatchOS-%E4%B8%8E-iOS-%E9%80%9A%E4%BF%A1/">SwiftUI 下 WatchOS 与 iOS 通信</a></li><li><a href="https://wonderhoi.com/2024/01/19/Xcode-%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-iWatch-%E7%9A%84%E5%9D%91/">Xcode 真机调试 iWatch 的坑</a></li></ol><h2 id="ACC-采集"><a href="#ACC-采集" class="headerlink" title="ACC 采集"></a>ACC 采集</h2><ol><li><a href="https://wonderhoi.com/2024/01/26/Polar-H10-%E7%9A%84%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87%E7%B3%BB/">Polar H10 的加速度坐标系</a></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://wonderhoi.com/2023/11/16/ECG-PPG-%E9%87%8F%E6%B5%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">ECG&#x2F;PPG 量测解决方案</a></li><li><a href="https://wonderhoi.com/2024/04/03/%E4%BD%BF%E7%94%A8-SensorKit-%E8%8E%B7%E5%8F%96-iWatch-%E7%9A%84-PPG-%E4%BF%A1%E5%8F%B7/">使用 SensorKit 获取 iWatch 的 PPG 信号</a></li></ol><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="HeartPy"><a href="#HeartPy" class="headerlink" title="HeartPy"></a>HeartPy</h2><ol><li><p><a href="https://wonderhoi.com/2023/11/06/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit%20I/">「文档翻译」HeartPy - Python Heart Rate Analysis Toolkit I</a></p></li><li><p><a href="https://wonderhoi.com/2023/11/07/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit-II/">「文档翻译」HeartPy - Python Heart Rate Analysis Toolkit II</a></p></li></ol><h2 id="Neurokit"><a href="#Neurokit" class="headerlink" title="Neurokit"></a>Neurokit</h2><ol><li><a href="https://wonderhoi.com/2024/03/02/Neurokit-%E5%88%86%E6%9E%90%E5%BF%83%E7%8E%87%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/">Neurokit 分析心率的简单用法</a></li><li><a href="https://wonderhoi.com/2023/11/17/%E5%A6%82%E4%BD%95%E8%AE%A9-plt-savefig-%E4%B8%BA%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%AA%97%E5%8F%A3%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B0%BA%E5%AF%B8/">如何让 plt.savefig() 为最大化的窗口保存图像，而不是默认的尺寸</a></li><li><a href="https://wonderhoi.com/2023/11/20/Pandas-List-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Series/">Pandas List 转换为 Series</a></li></ol><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ol><li><a href="https://wonderhoi.com/2023/11/28/Python-%E7%BA%B3%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%B6%E9%97%B4/">Python 纳秒时间戳转时间</a></li><li><a href="https://wonderhoi.com/2024/03/04/Pandas-%E6%8A%8A%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%90%8C%E7%9A%84%E4%B8%A4%E7%BB%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/">Pandas 把日期相同的两组数据对齐</a></li><li><a href="https://wonderhoi.com/2024/04/08/matplotlib-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/">matplotlib 组件之间的层级关系</a></li></ol><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><ol><li><a href="https://wonderhoi.com/2023/12/15/%E9%80%9A%E8%BF%87-HRV-%E9%A2%84%E6%B5%8B%E8%BF%90%E5%8A%A8-RPE/">通过 HRV 预测运动 RPE</a></li><li><a href="https://wonderhoi.com/2023/12/29/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B6/">ANN、RNN 与 CNN 在运动信号方面的研究</a></li><li><a href="https://wonderhoi.com/2024/01/04/Python-%E4%BD%BF%E7%94%A8-wfdb-%E5%BA%93%E5%A4%84%E7%90%86-MIT-BIH-%E5%BF%83%E5%BE%8B%E5%A4%B1%E5%B8%B8%E6%95%B0%E6%8D%AE/">Python 使用 wfdb 库处理 MIT-BIH 心律失常数据</a></li><li><a href="https://wonderhoi.com/2024/01/09/%E5%88%A9%E7%94%A8-RNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/">利用 RNN 对 ECG 心电信号进行心拍分类（pytorch）</a></li><li><a href="https://wonderhoi.com/2024/01/09/%E5%88%A9%E7%94%A8-CNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/">利用 CNN 对 ECG 心电信号进行心拍分类（pytorch）</a></li><li><a href="https://wonderhoi.com/2024/03/21/DTC-%E6%A8%A1%E5%9E%8B%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E8%81%9A%E7%B1%BB/">DTC 模型时间序列聚类</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目简介</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正多边形绘制</title>
    <link href="/2024/11/06/%E6%AD%A3%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
    <url>/2024/11/06/%E6%AD%A3%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%BB%98%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/qq_40734247/article/details/124884705">正多边形的数学推导及绘制</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">x 外接圆圆心 x坐标</span><br><span class="hljs-comment">y 外接圆圆心 y坐标</span><br><span class="hljs-comment">r 外接圆半径</span><br><span class="hljs-comment">startAngle 起始旋转角度</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPolygon</span>(<span class="hljs-params">centerX, centerY, radius, sides, startAngle</span>) &#123;<br><span class="hljs-keyword">let</span> angle = startAngle || <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> points = []<br><br><span class="hljs-comment">// 求各个顶点的坐标</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; sides; i++) &#123;<br>x = centerX + radius * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(angle);<br>y = centerY - radius * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(angle);<br>angle += <span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/sides;<br>points.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">x</span>: x, <span class="hljs-attr">y</span>: y&#125;);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(points);<br><span class="hljs-comment">// 顶点坐标连线，先移动到第一个顶点</span><br>context.<span class="hljs-title function_">moveTo</span>(points[<span class="hljs-number">0</span>].<span class="hljs-property">x</span>, points[<span class="hljs-number">0</span>].<span class="hljs-property">y</span>);<br><span class="hljs-comment">// 依次开始连线</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; sides; i++) &#123;<br>context.<span class="hljs-title function_">lineTo</span>(points[i].<span class="hljs-property">x</span>, points[i].<span class="hljs-property">y</span>);<br>&#125;<br><span class="hljs-comment">// 关闭路径，使得最后一点和第一点闭合</span><br>context.<span class="hljs-title function_">closePath</span>();<br>context.<span class="hljs-title function_">stroke</span>();<br>&#125;<br><br><br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">100</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">300</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>, <span class="hljs-number">4</span>, <span class="hljs-number">45</span>/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">500</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>, <span class="hljs-number">5</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">700</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>, <span class="hljs-number">6</span>, <span class="hljs-number">30</span>/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">7</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">8</span>, <span class="hljs-number">22.5</span>/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">500</span>, <span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">9</span>);<br><span class="hljs-title function_">drawPolygon</span>(<span class="hljs-number">700</span>, <span class="hljs-number">400</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">18</span>/<span class="hljs-number">180</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义 Navigation 样式</title>
    <link href="/2024/11/06/%E8%87%AA%E5%AE%9A%E4%B9%89-Navigation-%E6%A0%B7%E5%BC%8F/"/>
    <url>/2024/11/06/%E8%87%AA%E5%AE%9A%E4%B9%89-Navigation-%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// MARK: Custom Navigation</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NavigationBarColor</span>: <span class="hljs-title class_ inherited__">ViewModifier</span> &#123;<br><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">backgroundColor</span>: <span class="hljs-type">UIColor</span>, <span class="hljs-params">tintColor</span>: <span class="hljs-type">UIColor</span>, <span class="hljs-params">backColor</span>: <span class="hljs-type">UIColor</span>) &#123;<br>      <br>        <span class="hljs-keyword">let</span> coloredAppearance <span class="hljs-operator">=</span> <span class="hljs-type">UINavigationBarAppearance</span>()<br>        coloredAppearance.configureWithOpaqueBackground()<br>        coloredAppearance.backgroundColor <span class="hljs-operator">=</span> backgroundColor<br>        <br>        <span class="hljs-comment">// Inline Title 字体</span><br>        <span class="hljs-keyword">let</span> attrs1: [<span class="hljs-type">NSAttributedString</span>.<span class="hljs-type">Key</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [<br>            .foregroundColor: tintColor,<br>            .font: <span class="hljs-type">UIFont</span>.monospacedSystemFont(ofSize: <span class="hljs-number">24</span>, weight: .black)<br>            <span class="hljs-comment">// .font: Font.system(size: 24, weight: .black, design: .monospaced)    // 报错</span><br>        ]<br>        <br>        <span class="hljs-comment">// Large Title 字体</span><br>        <span class="hljs-keyword">let</span> attrs2: [<span class="hljs-type">NSAttributedString</span>.<span class="hljs-type">Key</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [<br>            .foregroundColor: tintColor,<br>            .font: <span class="hljs-type">UIFont</span>.monospacedSystemFont(ofSize: <span class="hljs-number">14</span>, weight: .bold)<br>        ]<br>        <br>        coloredAppearance.largeTitleTextAttributes <span class="hljs-operator">=</span> attrs1<br>        coloredAppearance.titleTextAttributes <span class="hljs-operator">=</span> attrs2<br>        <span class="hljs-comment">//不要下面的线</span><br>        coloredAppearance.shadowColor <span class="hljs-operator">=</span> .clear<br>    <br>        <span class="hljs-comment">// back 图片</span><br>        <span class="hljs-keyword">let</span> config <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>.<span class="hljs-type">SymbolConfiguration</span>(font: .monospacedSystemFont(ofSize: <span class="hljs-number">14</span>, weight: .regular))<br>        <span class="hljs-keyword">let</span> backImage <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>(systemName: <span class="hljs-string">&quot;chevron.backward&quot;</span>, withConfiguration: config)<span class="hljs-operator">?</span>.withTintColor(backColor, renderingMode: .alwaysOriginal)<br>        coloredAppearance.setBackIndicatorImage(backImage, transitionMaskImage: backImage)<br>        <br>        <span class="hljs-comment">// back 字体</span><br>        <span class="hljs-keyword">let</span> fontAttributes: [<span class="hljs-type">NSAttributedString</span>.<span class="hljs-type">Key</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [<br>            .foregroundColor: backColor,<br>            .font: <span class="hljs-type">UIFont</span>.monospacedSystemFont(ofSize: <span class="hljs-number">12</span>, weight: .regular)<br>        ]<br>        <br>        coloredAppearance.buttonAppearance.normal.titleTextAttributes <span class="hljs-operator">=</span> fontAttributes<br>        <br>        <span class="hljs-type">UINavigationBar</span>.appearance().standardAppearance <span class="hljs-operator">=</span> coloredAppearance<br>        <span class="hljs-type">UINavigationBar</span>.appearance().scrollEdgeAppearance <span class="hljs-operator">=</span> coloredAppearance<br>        <span class="hljs-type">UINavigationBar</span>.appearance().compactAppearance <span class="hljs-operator">=</span> coloredAppearance<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">content</span>: <span class="hljs-type">Content</span>) -&gt; <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        content<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//配合上面</span><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">navigationBarColor</span>(<span class="hljs-params">backgroundColor</span>: <span class="hljs-type">UIColor</span>, <span class="hljs-params">tintColor</span>: <span class="hljs-type">UIColor</span>, <span class="hljs-params">backColor</span>: <span class="hljs-type">UIColor</span>) -&gt; <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-keyword">self</span>.modifier(<span class="hljs-type">NavigationBarColor</span>(backgroundColor: backgroundColor, tintColor: tintColor, backColor: backColor))<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">NavigationView</span> &#123;<br>  <span class="hljs-operator">...</span><br>&#125;<br>.navigationBarColor(backgroundColor: <span class="hljs-type">UIColor</span>(.blue), tintColor: <span class="hljs-type">UIColor</span>(<span class="hljs-type">Color</span>(.black), backColor: <span class="hljs-type">UIColor</span>(.pink))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UIKit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UIImage 使用 SF Symbols</title>
    <link href="/2024/11/06/UIImage-%E4%BD%BF%E7%94%A8-SF-Symbols/"/>
    <url>/2024/11/06/UIImage-%E4%BD%BF%E7%94%A8-SF-Symbols/</url>
    
    <content type="html"><![CDATA[<h2 id="设置-SF-Symbols-样式"><a href="#设置-SF-Symbols-样式" class="headerlink" title="设置 SF Symbols 样式"></a>设置 SF Symbols 样式</h2><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/60910712/resizing-uimage-when-using-sf-symbols-uiimagesystemname">Resizing UImage when using SF Symbols - UIImage(systemName:)</a></li><li><a href="https://stackoverflow.com/questions/60641048/change-a-sf-symbol-size-inside-a-uibutton">Change a SF Symbol size inside a UIButton</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> config <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>.<span class="hljs-type">SymbolConfiguration</span>(pointSize: <span class="hljs-number">14</span>, weight: .bold, scale: .large) <br><span class="hljs-comment">// let config = UIImage.SymbolConfiguration(font: .monospacedSystemFont(ofSize: 14, weight: .regular))</span><br><span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>(systemName: <span class="hljs-string">&quot;doc.circle.fill&quot;</span>, withConfiguration: config)<br></code></pre></td></tr></table></figure><h2 id="设置-SF-Symbols-颜色"><a href="#设置-SF-Symbols-颜色" class="headerlink" title="设置 SF Symbols 颜色"></a>设置 SF Symbols 颜色</h2><p>参考：</p><ul><li><a href="https://medium.com/@bhupendra.trivedi14/uiimage-rendering-images-in-different-colors-39968ceb3174">UIImage: Rendering images in different colors</a></li><li><a href="https://sarunw.com/posts/how-to-change-uiimage-color-in-swift/">How to change UIImage color in Swift</a></li><li><a href="https://stackoverflow.com/questions/58256044/how-to-change-sf-symbol-icon-color-in-uikit">How to change SF Symbol icon color in UIKit?</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> image <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>(systemName: <span class="hljs-string">&quot;doc.circle.fill&quot;</span>, withConfiguration: config)<span class="hljs-operator">?</span>.withTintColor(.red, renderingMode: .alwaysOriginal)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UIKit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 在不使用 EditButton 的情况下选择 ListRow</title>
    <link href="/2024/10/31/SwiftUI-%E5%9C%A8%E4%B8%8D%E4%BD%BF%E7%94%A8-EditButton-%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%89%E6%8B%A9-ListRow/"/>
    <url>/2024/10/31/SwiftUI-%E5%9C%A8%E4%B8%8D%E4%BD%BF%E7%94%A8-EditButton-%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%80%89%E6%8B%A9-ListRow/</url>
    
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/57022615/select-multiple-items-in-swiftui-list">Select Multiple Items in SwiftUI List</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MultipleSelectionList</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> items: [<span class="hljs-type">String</span>] <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Oranges&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Pears&quot;</span>, <span class="hljs-string">&quot;Mangos&quot;</span>, <span class="hljs-string">&quot;Grapefruit&quot;</span>]<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> selections: [<span class="hljs-type">String</span>] <span class="hljs-operator">=</span> []<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">ForEach</span>(<span class="hljs-keyword">self</span>.items, id: \.<span class="hljs-keyword">self</span>) &#123; item <span class="hljs-keyword">in</span><br>                <span class="hljs-type">MultipleSelectionRow</span>(title: item, isSelected: <span class="hljs-keyword">self</span>.selections.contains(item)) &#123;<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.selections.contains(item) &#123;<br>                        <span class="hljs-keyword">self</span>.selections.removeAll(where: &#123; <span class="hljs-variable">$0</span> <span class="hljs-operator">==</span> item &#125;)<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">self</span>.selections.append(item)<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MultipleSelectionRow</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> isSelected: <span class="hljs-type">Bool</span><br>    <span class="hljs-keyword">var</span> action: () -&gt; <span class="hljs-type">Void</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(action: <span class="hljs-keyword">self</span>.action) &#123;<br>            <span class="hljs-type">HStack</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-keyword">self</span>.title)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.isSelected &#123;<br>                    <span class="hljs-type">Spacer</span>()<br>                    <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;checkmark&quot;</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftData 中的 relationship</title>
    <link href="/2024/10/31/SwiftData-%E4%B8%AD%E7%9A%84-relationship/"/>
    <url>/2024/10/31/SwiftData-%E4%B8%AD%E7%9A%84-relationship/</url>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7306146705970872358">SwiftData 学习笔记：relationship</a>，其中提到：</p><p>SwiftData 的 relationship 是可以通过你定义的模型结构体自动推断出来的。也可以通过 <code>@Relationship</code> 宏来显式声明。</p><p>一般来说，只有当你不想使用默认配置的时候，才需要显式声明。通常情况下，你是用不到 <code>@Relationship</code> 的。</p><p>更详细的内容在：</p><ol><li><a href="https://fatbobman.com/zh/posts/relationships-in-swiftdata-changes-and-considerations/">SwiftData 中的关系：变化与注意事项</a></li><li><a href="https://ivensliaoblog.com/swiftdata-tutorial-advanced-data-structure-and-relationship-handling/#%E5%88%A0%E9%99%A4-xcode-swiftdata-%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98">SwiftData 教程：通过 Swift 简化数据持久化（二）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UIFontDescriptor.SystemDesign 指定系统字体</title>
    <link href="/2024/10/31/UIFontDescriptor.SystemDesign-%E6%8C%87%E5%AE%9A%E7%B3%BB%E7%BB%9F%E5%AD%97%E4%BD%93/"/>
    <url>/2024/10/31/UIFontDescriptor.SystemDesign-%E6%8C%87%E5%AE%9A%E7%B3%BB%E7%BB%9F%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/ios-app-%E7%9A%84-4-%E7%A8%AE%E7%B3%BB%E7%B5%B1%E5%AD%97%E9%AB%94-da51d4f8e77b">iOS App 的 4 種系統字體</a></p><p>其中，UIKit &amp; system font 有说到：</p><p>以 UIFontDescriptor.SystemDesign 選擇想要的系統字體，跟剛剛 SwiftUI 的例子一樣，選項有 .default，.monospaced，.rounded &amp; .serif 四種。不過它的程式比 SwiftUI 複雜，我們必須先產生 UIFontDescriptor，然後再呼叫它的 function withDesign(_:)，最後在生成 UIFont 時再傳入 UIFontDescriptor。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> fontDescriptor <span class="hljs-operator">=</span> <span class="hljs-type">UIFontDescriptor</span>.preferredFontDescriptor(withTextStyle: .largeTitle).withDesign(.rounded) &#123;<br>    <span class="hljs-keyword">let</span> font <span class="hljs-operator">=</span> <span class="hljs-type">UIFont</span>(descriptor: fontDescriptor, size: <span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的，以 init(descriptor:size:) 生成 UIFont 時，size 傳入 0 生成的字體大小將為 UIFontDescriptor 設定的 text style，size 大於 0 時字體大小則以 size 的數字為準。</p><p>如果想要產生固定大小的 SF Mono，也可以採用以下比較精簡的寫法，呼叫 function monospacedSystemFont(ofSize:weight:) &amp; monospacedDigitSystemFont(ofSize:weight:)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> font1 <span class="hljs-operator">=</span> <span class="hljs-type">UIFont</span>.monospacedSystemFont(ofSize: <span class="hljs-number">20</span>, weight: .bold)<br><span class="hljs-keyword">let</span> font2 <span class="hljs-operator">=</span> <span class="hljs-type">UIFont</span>.monospacedDigitSystemFont(ofSize: <span class="hljs-number">20</span>, weight: .bold)<br></code></pre></td></tr></table></figure><p>上面方法在 <a href="https://darjeelingsteve.com/articles/UIFontDescriptor.SystemDesign.html">UIFontDescriptor.SystemDesign</a> 中也有提到。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UIKit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift Array 合集</title>
    <link href="/2024/10/31/Swift-Array-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/31/Swift-Array-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="数组去交集"><a href="#数组去交集" class="headerlink" title="数组去交集"></a>数组去交集</h2><p><a href="https://www.hackingwithswift.com/example-code/language/how-to-find-the-difference-between-two-arrays">How to find the difference between two arrays</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Array</span> <span class="hljs-keyword">where</span> <span class="hljs-type">Element</span>: <span class="hljs-type">Hashable</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">difference</span>(<span class="hljs-params">from</span> <span class="hljs-params">other</span>: [<span class="hljs-type">Element</span>]) -&gt; [<span class="hljs-type">Element</span>] &#123;<br>        <span class="hljs-keyword">let</span> thisSet <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>(<span class="hljs-keyword">self</span>)<br>        <span class="hljs-keyword">let</span> otherSet <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>(other)<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Array</span>(thisSet.symmetricDifference(otherSet))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> names1 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;Ringo&quot;</span>]<br><span class="hljs-keyword">let</span> names2 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;Ringo&quot;</span>, <span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;George&quot;</span>]<br><span class="hljs-keyword">let</span> difference <span class="hljs-operator">=</span> names1.difference(from: names2)<br></code></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p><a href="https://blog.csdn.net/Forever_wj/article/details/108269453">Swift之数组去重(去除重复元素)</a></p><p>如果数组内只含有基础类型的数据时，可以写两个for循环遍历，用下标取值做对比；当然也可以用集合 Set（Swift），比较方便快捷。</p><p>但是如果需要对 model 数组进行去重，则用不了 Set。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Array</span> &#123;<br>    <br>    <span class="hljs-comment">// 去重</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">filterDuplicates</span>&lt;<span class="hljs-type">E</span>: <span class="hljs-type">Equatable</span>&gt;(<span class="hljs-keyword">_</span> <span class="hljs-params">filter</span>: (<span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">E</span>) -&gt; [<span class="hljs-type">Element</span>] &#123;<br>        <span class="hljs-keyword">var</span> result <span class="hljs-operator">=</span> [<span class="hljs-type">Element</span>]()<br>        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">let</span> key <span class="hljs-operator">=</span> filter(value)<br>            <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>result.map(&#123;filter(<span class="hljs-variable">$0</span>)&#125;).contains(key) &#123;<br>                result.append(value)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 基础类型去重</span><br><span class="hljs-keyword">let</span> arrays <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>]<br><span class="hljs-keyword">let</span> filterArrays <span class="hljs-operator">=</span> arrays.filterDuplicates(&#123;<span class="hljs-variable">$0</span>&#125;)<br><span class="hljs-built_in">print</span>(filterArrays)<br><br><span class="hljs-comment">// model类的去重</span><br><span class="hljs-keyword">let</span> modelArrays <span class="hljs-operator">=</span> [<span class="hljs-type">Model</span>(<span class="hljs-string">&quot;1&quot;</span>), <span class="hljs-type">Model</span>(<span class="hljs-string">&quot;1&quot;</span>), <span class="hljs-type">Model</span>(<span class="hljs-string">&quot;2&quot;</span>), <span class="hljs-type">Model</span>(<span class="hljs-string">&quot;3&quot;</span>)]<br><span class="hljs-keyword">let</span> filterModels <span class="hljs-operator">=</span> modelArrays.filterDuplicates(&#123;<span class="hljs-variable">$0</span>.name&#125;)<br><span class="hljs-built_in">print</span>(filterModels)<br></code></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6844904119082336270">Swift数组去重</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> arr <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;strawberry&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;strawberry&quot;</span>]<br><span class="hljs-keyword">let</span> results <span class="hljs-operator">=</span> arr.enumerated().filter &#123; (index,value) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span><br><span class="hljs-keyword">return</span> arr.firstIndex(of: value) <span class="hljs-operator">==</span> index<br>&#125;.map &#123;<br>    <span class="hljs-variable">$0</span>.element<br>&#125;<br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> arr <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;strawberry&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>, <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-string">&quot;strawberry&quot;</span>]<br>arr.removeDuplicate()<br><span class="hljs-comment">// Array 扩展</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">extension</span> <span class="hljs-title class_">Array</span> <span class="hljs-keyword">where</span> <span class="hljs-type">Element</span>: <span class="hljs-type">Equatable</span> &#123;<br>    <br>    <span class="hljs-comment">/// 去除数组重复元素</span><br>    <span class="hljs-comment">/// - Returns: 去除数组重复元素后的数组</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">removeDuplicate</span>() -&gt; <span class="hljs-type">Array</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.enumerated().filter &#123; (index,value) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.firstIndex(of: value) <span class="hljs-operator">==</span> index<br>        &#125;.map &#123; (<span class="hljs-keyword">_</span>, value) <span class="hljs-keyword">in</span><br>            value<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Set-操作"><a href="#Set-操作" class="headerlink" title="Set 操作"></a>Set 操作</h2><ul><li><a href="https://www.jianshu.com/p/ccb280fff766">Swift5 集合（Set）操作</a></li><li><a href="https://blog.csdn.net/u010130947/article/details/111184041">判断俩数组是否相等[并集、交集、差集]</a></li></ul><h2 id="随机取元素"><a href="#随机取元素" class="headerlink" title="随机取元素"></a>随机取元素</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">originalArray <span class="hljs-operator">=</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-comment">// 打乱，取3个元素</span><br>newArray <span class="hljs-operator">=</span> originalArray.shuffled().suffix(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 数组数据类型提供了randomElement() ，该函数返回一个Element? </span><br><span class="hljs-keyword">let</span> item <span class="hljs-operator">=</span> originalArray.randomElement()<br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>sorted 只返回一个数组的有序版本，不修改原数组；sort 无返回值，只会修改原数组。</p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 降序</span><br><span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>] <br><span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> a.sorted &#123; <br>      (s1, s2) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span> <br>      <span class="hljs-keyword">return</span> s1 <span class="hljs-operator">&gt;</span> s2  <br>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(i)</span>&quot;</span>)<span class="hljs-comment">//打印结果：[&quot;3&quot;,&quot;2&quot;,&quot;1&quot;]</span><br><br><span class="hljs-comment">// 升序</span><br><span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>] <br><span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> a.sorted &#123; <br>    (s1, s2) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span> <br>    <span class="hljs-keyword">return</span> s1 <span class="hljs-operator">&lt;</span> s2<br>&#125; <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(i)</span>&quot;</span>)<span class="hljs-comment">//打印结果：[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</span><br><br><span class="hljs-comment">// 简化</span><br><span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>] <br><span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> a.sorted &#123;<br>    <span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">$1</span><br>&#125; <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(i)</span>&quot;</span>)<span class="hljs-comment">//打印结果：[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</span><br><br><br><span class="hljs-comment">// 最简</span><br><span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>]<br><span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> a.sorted(<span class="hljs-operator">&lt;</span>) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(i)</span>&quot;</span>)<span class="hljs-comment">//打印结果：[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h3><p>自定义升序排序方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">num1</span>: <span class="hljs-type">Int</span>, <span class="hljs-params">num2</span>: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Bool</span> &#123;<br><span class="hljs-keyword">return</span> num1 <span class="hljs-operator">&lt;</span> num2<br>&#125;<br><br>arr.sort(by: sortArray)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift">arr.sort(by: &#123; (num1: <span class="hljs-type">Int</span>, num2: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">return</span> num1 <span class="hljs-operator">&lt;</span> num2 &#125;)<br><br><span class="hljs-comment">// 闭包可以不指定参数类型，编译器会进行判断</span><br>arr.sort(by: &#123;(num1, num2) <span class="hljs-keyword">in</span> <span class="hljs-keyword">return</span> num1 <span class="hljs-operator">&lt;</span> num2&#125;)<br><br><span class="hljs-comment">// 可以省略参数名，直接根据闭包来引用参数</span><br>arr.sort(by: &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">$1</span> &#125;)<br><br><span class="hljs-comment">// 如果闭包只包含一行语句，可以省略 return 关键字</span><br>arr.sort(by: &#123; <span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">$1</span> &#125;)<br>arr.sort()&#123; <span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-variable">$1</span> &#125;<br>arr.sort(by: <span class="hljs-operator">&lt;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正六边形网格相关算法</title>
    <link href="/2024/10/30/%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2%E7%BD%91%E6%A0%BC%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
    <url>/2024/10/30/%E6%AD%A3%E5%85%AD%E8%BE%B9%E5%BD%A2%E7%BD%91%E6%A0%BC%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://blog.csdn.net/qq_33446100/article/details/108622162">【算法记录&#x2F;六边形网格】(一)坐标系统</a></li><li><a href="https://blog.csdn.net/qq_33446100/article/details/108686916">【算法记录&#x2F;六边形网格】(三)邻域</a></li><li><a href="https://www.redblobgames.com/grids/hexagons/">Hexagonal Grids</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>岛屿问题</title>
    <link href="/2024/10/30/%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/"/>
    <url>/2024/10/30/%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://blog.csdn.net/qq_39975984/article/details/132911879">leetcode&amp;lintcode分类刷题：图论（一、连通域&#x2F;岛屿问题）</a></p></li><li><p><a href="https://juejin.cn/post/7096466399203164190">LeetCode 岛屿系列全解析 200. 463. 1905. 1254. 695. 827. 694. 711</a></p></li><li><p><a href="https://leetcode.cn/circle/discuss/YiXPXW/">分享丨【题单】网格图（DFS&#x2F;BFS&#x2F;综合应用）</a></p></li><li><p><a href="https://leetcode.cn/problems/number-of-islands/solutions/328919/swiftshen-du-you-xian-di-gui-by-hu-cheng-he-da-bai/">swift深度优先递归</a></p></li><li><p><a href="https://leetcode.cn/problems/number-of-islands/solutions/403775/200-dao-yu-shu-liang-by-cobbly/">岛屿数量</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Identifiable 协议</title>
    <link href="/2024/10/30/SwiftUI-Identifiable-%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/10/30/SwiftUI-Identifiable-%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>当使用 <code>.sheet(item: $selectedTag)</code> 传入值为 Int 时报错，会提示:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Instance <span class="hljs-keyword">method</span> &#x27;<span class="hljs-title function_">sheet</span><span class="hljs-params">(item:onDismiss:content:)</span>&#x27; <span class="hljs-title function_">requires</span> <span class="hljs-title function_">that</span> &#x27;<span class="hljs-title function_">Int</span>&#x27; <span class="hljs-title function_">conform</span> <span class="hljs-title function_">to</span> &#x27;<span class="hljs-title function_">Identifiable</span>&#x27;<br></code></pre></td></tr></table></figure><p>item 应该遵循 Identifiable 协议，Int 类型不支持。所以可以这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Int</span>: <span class="hljs-title class_ inherited__">Identifiable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">typealias</span> <span class="hljs-type">ID</span> <span class="hljs-operator">=</span> <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> id: <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> hashValue<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>包括 ForEach 的经典报错</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Referencing initializer <span class="hljs-string">&#x27;init (_:content:)&#x27;</span> <span class="hljs-literal">on</span> <span class="hljs-string">&#x27;ForEach&#x27;</span> requires <span class="hljs-literal">that</span> <span class="hljs-string">&#x27;String&#x27;</span> conform <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;Identifiable&#x27;</span><br></code></pre></td></tr></table></figure><p>也可以用同样的方法解决。</p><p>参考：<a href="https://stackoverflow.com/questions/67977092/swiftui-initialzier-requires-string-conform-to-identifiable">SwiftUI Initialzier requires String conform to Identifiable</a></p><p>关于 ForEach 与 Identifiable：</p><ol><li><a href="https://oldbird.run/swift/swiftui/ForEach.html#foreach-%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95">ForEach</a></li><li><a href="https://wonderhoi.com/2024/01/04/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSwiftUI-ForEach-%E4%B8%8E-Identifiable-%E5%8D%8F%E8%AE%AE/">「转载」SwiftUI ForEach 与 Identifiable 协议</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Text 合集</title>
    <link href="/2024/10/28/SwiftUI-Text-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/28/SwiftUI-Text-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="specifier-和-formatter"><a href="#specifier-和-formatter" class="headerlink" title="specifier 和 formatter"></a>specifier 和 formatter</h2><p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-text-%E7%9A%84-string-interpolation-%E5%92%8C%E5%8F%83%E6%95%B8-specifier-formatter-42640ec823af">SwiftUI Text 的 string interpolation 和參數 specifier &amp; formatter</a></p><p>Text 显示浮点数时，可通过 specifier 控制小数点位数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">10.567</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(number, specifier: <span class="hljs-string">&quot;%.2f&quot;</span>)</span>&quot;</span>)<br>            .font(.largeTitle)<br>            .background(<span class="hljs-type">Color</span>.yellow)<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Materials 模糊背景使用</title>
    <link href="/2024/10/28/SwiftUI-Materials-%E6%A8%A1%E7%B3%8A%E8%83%8C%E6%99%AF%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/10/28/SwiftUI-Materials-%E6%A8%A1%E7%B3%8A%E8%83%8C%E6%99%AF%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">.ultraThinMaterial<br>.thinMaterial<br>.regularMaterial<br>.thickMaterial<br>.ultraThickMaterial<br>.bar<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Materials.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Ultra thin material&quot;</span>)<br>   .background(.ultraThinMaterial)<br>   <br><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Ultra thin material&quot;</span>)<br>   .background(<br>      .ultraThinMaterial,<br>      in: <span class="hljs-type">RoundedRectangle</span>(cornerRadius: <span class="hljs-number">8</span>, style: .continuous)<br>   )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Alert 合集</title>
    <link href="/2024/10/28/SwiftUI-Alert-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/28/SwiftUI-Alert-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E8%AA%8D%E8%AD%98-swiftui-%E7%9A%84-alert-83c41ddedca">認識 SwiftUI 的 Alert</a></li><li><a href="https://blog.csdn.net/mydo/article/details/130514831">SwiftUI 新 Alert 弹出窗口圆你文本输入之梦</a></li><li><a href="https://juejin.cn/post/7268112661472198668">SwiftUI基础篇Alert</a></li></ul><h2 id="基础-Alert"><a href="#基础-Alert" class="headerlink" title="基础 Alert"></a>基础 Alert</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Show alert&quot;</span>) &#123;<br>            showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        &#125;<br>        .alert(<span class="hljs-string">&quot;Alert Title&quot;</span>, isPresented: <span class="hljs-variable">$showingAlert</span>) &#123;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;OK&quot;</span>, role: .cancel) &#123; &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="带有-message-的-Alert"><a href="#带有-message-的-Alert" class="headerlink" title="带有 message 的 Alert"></a>带有 message 的 Alert</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Show Alert&quot;</span>) &#123;<br>            showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        &#125;<br>        .alert(isPresented: <span class="hljs-variable">$showingAlert</span>) &#123;<br>            <span class="hljs-type">Alert</span>(title: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Alert Title&quot;</span>), message: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Alert Message&quot;</span>), dismissButton: .default(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;OK&quot;</span>)))<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="多个按钮的-Alert"><a href="#多个按钮的-Alert" class="headerlink" title="多个按钮的 Alert"></a>多个按钮的 Alert</h2><h3 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Show Alert For Buttons&quot;</span>) &#123;<br>            showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        &#125;<br>        .alert(<span class="hljs-string">&quot;Alert Title&quot;</span>, isPresented: <span class="hljs-variable">$showingAlert</span>) &#123;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;First&quot;</span>) &#123; &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Second&quot;</span>, role: .destructive) &#123; &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Third&quot;</span>, role: .destructive) &#123; &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Cancel&quot;</span>, role: .cancel) &#123; &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> shwoingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Show Alert&quot;</span>) &#123;<br>            shwoingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        &#125;<br>        .alert(isPresented: <span class="hljs-variable">$shwoingAlert</span>) &#123;<br>            <span class="hljs-type">Alert</span>(title: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Alert Title&quot;</span>), message: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Alert Message&quot;</span>),<br>                  primaryButton: .destructive(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;First&quot;</span>), action: &#123;&#125;),<br>                  secondaryButton: .cancel(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Cancel&quot;</span>)))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="confirmationDialog"><a href="#confirmationDialog" class="headerlink" title="confirmationDialog"></a>confirmationDialog</h3><p><code>confirmationDialog()</code> 修饰符可创建一个 Sheet，可包含多个按钮。</p><h4 id="基础样式-1"><a href="#基础样式-1" class="headerlink" title="基础样式"></a>基础样式</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertSheetView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showingOptions <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> selection <span class="hljs-operator">=</span> <span class="hljs-string">&quot;None&quot;</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Text</span>(selection)<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Confirm paint color&quot;</span>) &#123;<br>                showingOptions <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            &#125;<br>            .confirmationDialog(<span class="hljs-string">&quot;Select a color&quot;</span>, isPresented: <span class="hljs-variable">$showingOptions</span>, titleVisibility: .visible) &#123;<br>                <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Red&quot;</span>) &#123;<br>                    selection <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Red&quot;</span><br>                &#125;<br>                <br>                <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Green&quot;</span>) &#123;<br>                    selection <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Green&quot;</span><br>                &#125;<br>                <br>                <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Blue&quot;</span>) &#123;<br>                    selection <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Blue&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ForEach-创建"><a href="#ForEach-创建" class="headerlink" title="ForEach 创建"></a>ForEach 创建</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertSheetView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showingOptions <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> selection <span class="hljs-operator">=</span> <span class="hljs-string">&quot;None&quot;</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Text</span>(selection)<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Confirm paint color&quot;</span>) &#123;<br>                showingOptions <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            &#125;<br>            .confirmationDialog(<span class="hljs-string">&quot;Select a color&quot;</span>, isPresented: <span class="hljs-variable">$showingOptions</span>, titleVisibility: .visible) &#123;<br>                <span class="hljs-type">ForEach</span>([<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>], id: \.<span class="hljs-keyword">self</span>) &#123; color <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">Button</span>(color) &#123;<br>                        selection <span class="hljs-operator">=</span> color<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="带有-TextField-的-Alert"><a href="#带有-TextField-的-Alert" class="headerlink" title="带有 TextField 的 Alert"></a>带有 TextField 的 Alert</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AlertView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Enter name&quot;</span>) &#123;<br>            showingAlert.toggle()<br>        &#125;<br>        .alert(<span class="hljs-string">&quot;Enter your name&quot;</span>, isPresented: <span class="hljs-variable">$showingAlert</span>) &#123;<br>            <span class="hljs-type">TextField</span>(<span class="hljs-string">&quot;username&quot;</span>, text: <span class="hljs-variable">$name</span>)<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;OK&quot;</span>, action: submit)<br>        &#125; message: &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Xcode will print whatever you type&quot;</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">submit</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your entered <span class="hljs-subst">\(name)</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Menu 合集</title>
    <link href="/2024/10/28/SwiftUI-Menu-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/28/SwiftUI-Menu-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://swiftwithmajid.com/2020/08/05/menus-in-swiftui/">Menus in SwiftUI</a></li></ul><h2 id="基础-Menu"><a href="#基础-Menu" class="headerlink" title="基础 Menu"></a>基础 Menu</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MenuView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Menu</span>(<span class="hljs-string">&quot;Options&quot;</span>) &#123;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Order Now&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Order Now&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Adjust Order&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Adjust Order&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Cancel&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cancel&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>嵌套</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MenuView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Menu</span>(<span class="hljs-string">&quot;Options&quot;</span>) &#123;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Order Now&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Order Now&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Menu</span>(<span class="hljs-string">&quot;Advanced&quot;</span>) &#123;<br>                <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Rename&quot;</span>) &#123;<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Rename&quot;</span>)<br>                &#125;<br>                <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Delay&quot;</span>) &#123;<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Delay&quot;</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Adjust Order&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Adjust Order&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Cancel&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cancel&quot;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果你想使用一些文本和图标自定义Label</span><br>        <span class="hljs-type">Menu</span> &#123;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Order Now&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Order Now&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Adjust Order&quot;</span>) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Adjust Order&quot;</span>)<br>            &#125;<br>        &#125; label: &#123;<br>            <span class="hljs-type">Label</span>(<span class="hljs-string">&quot;Options&quot;</span>, systemImage: <span class="hljs-string">&quot;paperplane&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="长按弹出-Menu"><a href="#长按弹出-Menu" class="headerlink" title="长按弹出 Menu"></a>长按弹出 Menu</h2><ul><li><a href="https://stackoverflow.com/questions/64277962/how-to-open-menu-only-on-long-press-gesture-swiftui">How to open Menu only on long press gesture SwiftUI</a></li><li><a href="https://blog.csdn.net/flystaring/article/details/115559871">SwiftUI教程之ContextMenu长按弹出菜单</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MenuView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Options&quot;</span>)<br>            .contextMenu &#123;<br>                <span class="hljs-type">Button</span> &#123;<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Change country setting&quot;</span>)<br>                &#125; label: &#123;<br>                    <span class="hljs-type">Label</span>(<span class="hljs-string">&quot;Choose Country&quot;</span>, systemImage: <span class="hljs-string">&quot;globe&quot;</span>)<br>                &#125;<br>                <br>                <span class="hljs-type">Button</span>(action: &#123;<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enable geolocation&quot;</span>)<br>                &#125;, label: &#123;<br>                    <span class="hljs-type">Label</span>(<span class="hljs-string">&quot;Detect Location&quot;</span>, systemImage: <span class="hljs-string">&quot;location.circle&quot;</span>)<br>                &#125;)<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Picker-的-Menu"><a href="#Picker-的-Menu" class="headerlink" title="Picker 的 Menu"></a>Picker 的 Menu</h2><p>SwiftUI 的 Picker 视图有一个名为 <code>.menu</code> 的专用样式，它显示了一个弹出式菜单的选项</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MenuView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> selection <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Red&quot;</span><br>    <span class="hljs-keyword">let</span> colors <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;Red&quot;</span>, <span class="hljs-string">&quot;Green&quot;</span>, <span class="hljs-string">&quot;Blue&quot;</span>, <span class="hljs-string">&quot;Black&quot;</span>, <span class="hljs-string">&quot;Tartan&quot;</span>]<br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Picker</span>(<span class="hljs-string">&quot;Select a paint color&quot;</span>, selection: <span class="hljs-variable">$selection</span>) &#123;<br>                <span class="hljs-type">ForEach</span>(colors, id: \.<span class="hljs-keyword">self</span>) &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-variable">$0</span>)<br>                &#125;<br>            &#125;<br>            .pickerStyle(.menu)<br>            <br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Selected color: <span class="hljs-subst">\(selection)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI List 合集</title>
    <link href="/2024/10/28/SwiftUI-List-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/28/SwiftUI-List-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.6hu.cc/archives/203140.html">SwiftUI基础篇List</a></p></li><li><p><a href="https://www.swiftyplace.com/blog/customise-list-view-appearance-in-swiftui-examples-beyond-the-default-stylings">How to Customise the SwiftUI List Style and Background Color</a></p></li><li><p><a href="https://blog.csdn.net/guoyongming925/article/details/139031763">SwiftUI中List的样式及使用详解（添加、移动、删除、自定义滑动）</a></p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span>&#123;<br>    <span class="hljs-type">ForEach</span>(billDateModel.dataSource)&#123; section <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Section</span>(header: <span class="hljs-type">SectionView</span>(text: section.date)<br>            .listRowInsets(<span class="hljs-type">EdgeInsets</span>())                            <span class="hljs-comment">// Remove section padding</span><br>            .background(<span class="hljs-type">Color</span>.green.opacity(<span class="hljs-number">0.2</span>))                   <span class="hljs-comment">// section 默认透明</span><br>        ) &#123;<br>            <span class="hljs-type">ForEach</span>(section.bills) &#123; row <span class="hljs-keyword">in</span><br>                <span class="hljs-type">RowView</span>(text: row.count)<br>                    .listRowInsets(<span class="hljs-type">EdgeInsets</span>())                    <span class="hljs-comment">// Remove row padding，实际上还存在上下默认间隙</span><br>                    .listRowBackground(<span class="hljs-type">Color</span>.red.opacity(<span class="hljs-number">0.2</span>))      <span class="hljs-comment">// row 自带白色</span><br>                    .listRowSeparator(.hidden)                      <span class="hljs-comment">// 隐藏线条</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>.environment(\.defaultMinListRowHeight, <span class="hljs-number">0</span>)                          <span class="hljs-comment">// 去掉 row 上下的默认间隙</span><br>.environment(\.defaultMinListHeaderHeight, <span class="hljs-number">0</span>)                       <span class="hljs-comment">// 去掉 header 下面的默认间隙</span><br>.listStyle(<span class="hljs-type">PlainListStyle</span>())                                        <span class="hljs-comment">// Remove Group</span><br><br>.background(<span class="hljs-type">Color</span>.blue.opacity(<span class="hljs-number">0.1</span>))                                <span class="hljs-comment">// list 不带颜色，background 不包括 row</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 删除 Untitled 开发证书</title>
    <link href="/2024/10/28/Xcode-%E5%88%A0%E9%99%A4-Untitled-%E5%BC%80%E5%8F%91%E8%AF%81%E4%B9%A6/"/>
    <url>/2024/10/28/Xcode-%E5%88%A0%E9%99%A4-Untitled-%E5%BC%80%E5%8F%91%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<p><a href="https://stackoverflow.com/questions/68007837/how-do-i-delete-untitled-xcode-signing-certificates">How do I delete “Untitled” XCode signing certificates?</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 检测 Dark Model</title>
    <link href="/2024/10/28/Swift-%E6%A3%80%E6%B5%8B-Dark-Model/"/>
    <url>/2024/10/28/Swift-%E6%A3%80%E6%B5%8B-Dark-Model/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@Environment</span>(\.colorScheme) <span class="hljs-keyword">var</span> colorScheme<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Text</span>(colorScheme <span class="hljs-operator">==</span> .dark <span class="hljs-operator">?</span> <span class="hljs-string">&quot;在暗模式下&quot;</span> : <span class="hljs-string">&quot;在亮模式下&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI MapKit 合集</title>
    <link href="/2024/10/23/SwiftUI-MapKit-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/23/SwiftUI-MapKit-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://developer.apple.com/cn/videos/play/wwdc2023/10043/">认识 SwiftUI 版 MapKit</a></p><h2 id="MapCameraPosition-初始化方式"><a href="#MapCameraPosition-初始化方式" class="headerlink" title="MapCameraPosition 初始化方式"></a>MapCameraPosition 初始化方式</h2><h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> cPosition <span class="hljs-operator">=</span> <span class="hljs-type">MapCameraPosition</span>.region(<br>    <span class="hljs-type">MKCoordinateRegion</span>(center: <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">28.209195</span>, longitude: <span class="hljs-number">112.842627</span>), latitudinalMeters: <span class="hljs-number">300</span>, longitudinalMeters: <span class="hljs-number">300</span>)<br>    <span class="hljs-comment">// MKCoordinateRegion(center: CLLocationCoordinate2D(latitude: 28.209195, longitude: 112.842627),</span><br>    <span class="hljs-comment">//                    span: MKCoordinateSpan(latitudeDelta: 0.005, longitudeDelta: 0.005))</span><br>)<br></code></pre></td></tr></table></figure><p>MKCoordinateRegion 定义了一个地图区域，包含中心点 center 和显示范围的跨度 span。latitudeDelta 和 longitudeDelta 确定了地图的缩放级别和显示区域。</p><ul><li><p><a href="https://developer.apple.com/documentation/mapkit/mkcoordinateregion/1452293-span">span</a></p></li><li><p><a href="https://developer.apple.com/documentation/mapkit/mkcoordinateregion/1452245-init">latitudinalMeters &amp; longitudinalMeters</a></p></li></ul><p>如果主要需求是定义一个 静态的 2D 区域，并基于经纬度跨度来控制地图显示范围，这种方法适合使用。MapCameraPosition.region 是以区域为主导，不涉及 3D 视角（如俯仰、距离等）。</p><p>这段代码可以等同于：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> region <span class="hljs-operator">=</span> <span class="hljs-type">MKCoordinateRegion</span>(center: <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">25.7617</span>, longitude: <span class="hljs-number">80.1918</span>),<br>                                               span: <span class="hljs-type">MKCoordinateSpan</span>(latitudeDelta: <span class="hljs-number">10</span>, longitudeDelta: <span class="hljs-number">10</span>))<br><br><span class="hljs-type">Map</span>(coordinateRegion: <span class="hljs-variable">$region</span>)<br></code></pre></td></tr></table></figure><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> cPosition: <span class="hljs-type">MapCameraPosition</span> <span class="hljs-operator">=</span> .userLocation(fallback: .automatic)<br><span class="hljs-comment">/// fallback 为未获取设备位置时使用的坐标</span><br><span class="hljs-comment">/// 使用 .userLocation(fallback: .automatic) 时，一定要在 Map 中添加 UserAnnotation()</span><br><span class="hljs-comment">/// 否则拖动地图后代表用户的蓝色小圈就没有了</span><br><br><span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>    <span class="hljs-comment">// Map(initialPosition: cPosition) &#123;</span><br>    <span class="hljs-type">Map</span>(position: <span class="hljs-variable">$cPosition</span>) &#123;<br>        <span class="hljs-comment">/// initialPosition 与 position 的区别</span><br>        <span class="hljs-comment">/// 使用 position 时，更新 cPosition 会跳转镜头，使用 initialPosition 则不会</span><br>        <span class="hljs-comment">/// 拖动镜头，cPosition 也会更新</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-keyword">var</span> camera <span class="hljs-operator">=</span> <span class="hljs-type">MapCamera</span>(<br>        centerCoordinate: <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">37.7749</span>, longitude: <span class="hljs-operator">-</span><span class="hljs-number">122.4194</span>),<br>        distance: <span class="hljs-number">500</span>,<br>        heading: <span class="hljs-number">180</span>,<br>        pitch: <span class="hljs-number">60</span><br>    )<br>    <br>    <span class="hljs-keyword">var</span> cPosition: <span class="hljs-type">MapCameraPosition</span> &#123;<br>        <span class="hljs-type">MapCameraPosition</span>.camera(camera)<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Map</span>(initialPosition: cPosition)<br>        <span class="hljs-comment">// 这里也会跳转镜头，但这里不是更新了 MapCameraPosition 而是创建了新的 MapCameraPosition</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>centerCoordinate</strong>：定义地图的中心点。</p><p><strong>distance</strong>：控制相机与地图的距离，决定缩放级别。</p><p><strong>heading</strong>：控制地图的旋转角度（方向），以度为单位（0 是正北）。</p><p><strong>pitch</strong>：设置相机的俯仰角，创建 3D 视角。</p><p>MapCameraPosition.camera(camera) 将此相机转换为 MapCameraPosition，用于 SwiftUI 的 Map。</p><h2 id="地理坐标与墨卡托投影坐标转换"><a href="#地理坐标与墨卡托投影坐标转换" class="headerlink" title="地理坐标与墨卡托投影坐标转换"></a>地理坐标与墨卡托投影坐标转换</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 经纬度转投影坐标</span><br><span class="hljs-keyword">let</span> coordinate <span class="hljs-operator">=</span> <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">28.209321</span>, longitude: <span class="hljs-number">112.843033</span>)<br><span class="hljs-keyword">let</span> point: <span class="hljs-type">MKMapPoint</span> <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(<span class="hljs-type">Coordinate</span>)<br><span class="hljs-built_in">print</span>(point.x)<br><span class="hljs-built_in">print</span>(point.y)<br><br><span class="hljs-comment">// 投影坐标转经纬度</span><br><span class="hljs-keyword">let</span> point <span class="hljs-operator">=</span> <span class="hljs-type">MKMapPoint</span>(x: <span class="hljs-number">218359192.2732601</span>, y: <span class="hljs-number">112278796.05034925</span>)<br><span class="hljs-keyword">let</span> coordinate <span class="hljs-operator">=</span> point.coordinate<br></code></pre></td></tr></table></figure><h2 id="将-iOS-系统自带定位坐标转换成高德坐标"><a href="#将-iOS-系统自带定位坐标转换成高德坐标" class="headerlink" title="将 iOS 系统自带定位坐标转换成高德坐标"></a>将 iOS 系统自带定位坐标转换成高德坐标</h2><p><a href="https://github.com/Zws-China/swift-Coordinate">swift Coordinate</a></p><p>系统定位拿到的坐标是 WGS-84 国际标准。</p><p>但是在 Map 显示时，因为 iPhone 使用的是高德地图，所以会有偏移，需要把坐标转换为 GCJ-02 火星坐标。</p><h2 id="MapControls"><a href="#MapControls" class="headerlink" title="MapControls"></a>MapControls</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Map</span>() &#123;<br>    <br>&#125;<br>.mapControls(&#123;<br>    <span class="hljs-type">MapCompass</span>()                    <span class="hljs-comment">// 指南针</span><br>    <br><span class="hljs-keyword">#if</span> os(watchOS)<br>    <span class="hljs-type">MapLocationCompass</span>()            <span class="hljs-comment">// 仅适用于 WatchOS 的指南针</span><br><span class="hljs-keyword">#endif</span><br>    <br><span class="hljs-keyword">#if</span> os(macOS)<br>    <span class="hljs-type">MapPitchSlider</span>()                <span class="hljs-comment">// 控制地图是否显示高度，也就是 2D / 3D</span><br>    <span class="hljs-type">MapZoomStepper</span>()                <span class="hljs-comment">// 允许用户调节缩放比例</span><br><span class="hljs-keyword">#endif</span><br>    <br>    <span class="hljs-type">MapPitchToggle</span>()<br>    <span class="hljs-type">MapScaleView</span>(anchorEdge: .trailing)     <span class="hljs-comment">// 用于显示地图比例尺的一个控件。比例尺可以帮助用户了解地图上显示的距离，与实际世界中的距离的比例关系</span><br>    <span class="hljs-type">MapUserLocationButton</span>()                 <span class="hljs-comment">// 设置关联的地图位置为当前用户的位置： 右上角的箭头</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="MapStyle"><a href="#MapStyle" class="headerlink" title="MapStyle"></a>MapStyle</h2><p><code>MapStyle</code>有预先配置好的地图样式可以选择，如果没有特别要求，基本可以满足。</p><ul><li><code>.standard</code>: 标准样式</li><li><code>.imagery</code>: 基于图像的风格，如使用卫星图像的风格。</li><li><code>.hybrid</code>: 混合风格，例如使用一个地区的卫星图像，并在其上添加道路和路名信息层。</li></ul><p>其次我们可以添加额外配置，控制是否渲染高度（2D, 3D切换）、地图强调风格，显示兴趣点和显示交通情况等。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Map</span>() &#123;<br><br>&#125;<br>.mapStyle(<br>    <span class="hljs-type">MapStyle</span>.standard(<br>        elevation: .flat, <br>        emphasis: .muted, <br>        pointsOfInterest: <span class="hljs-type">PointOfInterestCategories</span>(arrayLiteral: .publicTransport), <br>        showsTraffic: <span class="hljs-literal">true</span>))<br></code></pre></td></tr></table></figure><p>关于 <code>pointsOfInterest</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">.mapStyle(.standard(pointsOfInterest: .excludingAll))<span class="hljs-comment">// 除去所有兴趣点</span><br>.mapStyle(.standard(pointsOfInterest: .including([.cafe])))<br></code></pre></td></tr></table></figure><h2 id="地图交互"><a href="#地图交互" class="headerlink" title="地图交互"></a>地图交互</h2><p><code>Map</code>地图上的交互主要通过配置<code>interactionModes</code>进行设置，有下面几种类型：</p><ul><li><code>.all</code>: 允许所有的交互类型</li><li><code>.pin</code>: 允许用户平移到地图的不同区域</li><li><code>.zoom</code>: 允许用户放大或缩小地图位置</li><li><code>.pitch</code>: 允许用户设置地图的间距，从不同的角度查看地图</li><li><code>.rotate</code>: 允许用户对地图进行旋转操作</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Map</span>(<br>    <span class="hljs-operator">...</span><br>    interactionModes: [.pitch, .pin],<br>    <span class="hljs-operator">...</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="MapReader"><a href="#MapReader" class="headerlink" title="MapReader"></a>MapReader</h2><p>参考：<a href="https://fangjunyu.com/2024/11/23/swiftui%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9B%BE%E4%BF%A1%E6%81%AF%E7%9A%84mapreader%E8%A7%86%E5%9B%BE/">SwiftUI获取地图信息的MapReader视图</a></p><p>MapReader 是 SwiftUI 提供的一个容器，用于与 Map 视图进行更高级的交互。它允许开发者访问一个 MapProxy 对象，该对象可以提供关于地图当前状态的信息，并支持将屏幕坐标转换为地理坐标等操作。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">MapReader</span> &#123; reader <span class="hljs-keyword">in</span><br>    <span class="hljs-type">Map</span>()<br>        .onTapGesture &#123; position <span class="hljs-keyword">in</span><br>            <span class="hljs-comment">// 将点击位置的屏幕坐标转换为地理坐标</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> coordinate <span class="hljs-operator">=</span> reader.convert(position, from: .local) &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Tapped at: <span class="hljs-subst">\(coordinate.latitude)</span>, <span class="hljs-subst">\(coordinate.longitude)</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>onTapGesture 不使用 MapReader 时，输出的定位信息是基于屏幕左上角的位置信息，因此不满足在地图中的获取实际的地理位置。</p><p>使用 proxy.convert 将点击位置从本地视图坐标（CGPoint）转换为地理坐标（CLLocationCoordinate2D）。</p><p>MapReader 需要一个闭包，该闭包接收 reader 对象作为参数，允许开发者通过 reader 访问地图状态或进行相关操作。</p><h3 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h3><p>convert(_:from:): 将视图坐标转换为地理坐标。</p><p>convert(_:to:): 将地理坐标转换为视图坐标。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>位置标记：允许用户点击地图以标记一个特定的地理位置。</p><p>动态状态显示：如显示地图中心点、缩放级别等实时信息。</p><p>交互式地图工具：例如，绘制多边形、测量距离、选择特定区域等。</p><h2 id="一个-MapKit-没有的功能"><a href="#一个-MapKit-没有的功能" class="headerlink" title="一个 MapKit 没有的功能"></a>一个 MapKit 没有的功能</h2><p><a href="https://www.reddit.com/r/SwiftUI/comments/1av4de1/ios_17_swiftui_mapkit_has_anyone_solved_for/">iOS 17, SwiftUI MapKit. Has anyone solved for smooth animation of custom annotations?</a></p><p><a href="https://forums.developer.apple.com/forums/thread/759289">SwiftUI Map Annotation Coordinate Animation</a></p><p>Map 上的控件在移动时，做不到像 <code>UserAnnotation()</code> 那样顺滑，好像是 <code>withAnimation()</code> 不会生效。</p><h2 id="地图中心坐标"><a href="#地图中心坐标" class="headerlink" title="地图中心坐标"></a>地图中心坐标</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> MapKit<br><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> cameraPosition: <span class="hljs-type">MapCameraPosition</span> <span class="hljs-operator">=</span> .region(<span class="hljs-type">MKCoordinateRegion</span>(center: <span class="hljs-type">CLLocationCoordinate2D</span>(latitude: <span class="hljs-number">40</span>, longitude: <span class="hljs-number">40</span>), span: <span class="hljs-type">MKCoordinateSpan</span>(latitudeDelta: <span class="hljs-number">0.25</span>, longitudeDelta: <span class="hljs-number">0.25</span>)))<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Map</span>(position: <span class="hljs-variable">$cameraPosition</span>)<br>            .onMapCameraChange &#123; mapCameraUpdateContext <span class="hljs-keyword">in</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(mapCameraUpdateContext.camera.centerCoordinate)</span>&quot;</span>)<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map</tag>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Sheet&amp;fullScreenCover 合集</title>
    <link href="/2024/10/23/SwiftUI-Sheet-fullScreenCover-%E5%90%88%E9%9B%86/"/>
    <url>/2024/10/23/SwiftUI-Sheet-fullScreenCover-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Custom-Sheet"><a href="#Custom-Sheet" class="headerlink" title="Custom Sheet"></a>Custom Sheet</h2><p>参考：</p><ul><li><a href="https://www.appcoda.com.tw/swiftui-bottom-sheet-background/">Xcode 14.3 新功能：輕鬆客製化 SwiftUI Bottom Sheet 背景及滾動行為</a></li><li><a href="https://www.appcoda.com/bottom-sheet-swiftui/">How to Display a Bottom Sheet Using SwiftUI</a></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift">.presentationBackground(.thinMaterial)<span class="hljs-comment">// 模糊效果</span><br>.presentationBackground(.yellow)<span class="hljs-comment">// 设置颜色</span><br>.presentationCornerRadius(<span class="hljs-number">8</span>)<span class="hljs-comment">// 圆角</span><br><span class="hljs-comment">// When it first appears, the bottom sheet is displayed in medium size. You can expand it to large size by dragging the sheet.</span><br>.presentationDetents([.medium, .large])<br><span class="hljs-comment">// supports 4 different sizes including: around 10% of the screen height；a fixed height of 200 points；the standard Medium and Large sizes</span><br>.presentationDetents([.fraction(<span class="hljs-number">0.1</span>), .height(<span class="hljs-number">200</span>), .medium, .large])<br>.presentationDragIndicator(.hidden) <span class="hljs-comment">// 隐藏指示器</span><br></code></pre></td></tr></table></figure><h2 id="dismiss"><a href="#dismiss" class="headerlink" title="dismiss()"></a>dismiss()</h2><p>在 sheet 和 fullScreenCover 中都可以使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Environment</span>(\.presentationMode) <span class="hljs-keyword">var</span> presentationMode<br><span class="hljs-comment">// Use: presentationMode.wrappedValue.dismiss()</span><br><span class="hljs-comment">// 该方法在 iOS 15.0 后被 dismiss() 替代</span><br><br><span class="hljs-meta">@Environment</span>(\.dismiss) <span class="hljs-keyword">var</span> dismiss<br><span class="hljs-comment">// Use: dismiss()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 报错 RuntimeError: Can&#39;t call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead</title>
    <link href="/2024/10/11/Python-%E6%8A%A5%E9%94%99-RuntimeError-Can-t-call-numpy-on-Tensor-that-requires-grad-Use-tensor-detach-numpy-instead/"/>
    <url>/2024/10/11/Python-%E6%8A%A5%E9%94%99-RuntimeError-Can-t-call-numpy-on-Tensor-that-requires-grad-Use-tensor-detach-numpy-instead/</url>
    
    <content type="html"><![CDATA[<p>在使用 sklearn 计算回归模型的 R2 评分时，出现该报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">predictions = model(test_features)<br>r2 = r2_score(test_labels, predictions)<br></code></pre></td></tr></table></figure><p>出现这个现象的原因是：待转换类型的 PyTorch Tensor 变量带有梯度，直接将其转换为 numpy 数据将破坏计算图，因此 numpy 拒绝进行数据转换，实际上这是对开发者的一种提醒。如果自己在转换数据时不需要保留梯度信息，可以在变量转换之前添加 detach() 调用。</p><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">predictions = model(test_features)<br>r2 = r2_score(test_labels.detach(), predictions.detach())<br><br><span class="hljs-comment"># 直接 predictions.numpy() 也会出现该报错</span><br><span class="hljs-comment"># 需要 predictions.detach().numpy()</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/discoverer100/article/details/103902130">解决Python报错：RuntimeError: Can’t call numpy() on Variable that requires grad. Use var.detach().numpy()</a></p>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>地图坐标问题</title>
    <link href="/2024/10/10/%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/"/>
    <url>/2024/10/10/%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ul><li>高德地图、腾讯地图以及谷歌中国区地图使用的是 GCJ-02 坐标系，也就是国测局坐标系（火星坐标系）；</li><li>百度地图使用的是BD-09坐标系；</li><li>底层接口(HTML5 Geolocation或ios、安卓API)通过GPS设备获取的坐标使用的是WGS-84坐标系。</li></ul><p>参考：<a href="https://www.cnblogs.com/chenggang816/p/10253523.html">高德地图、腾讯地图、谷歌中国区地图与百度地图坐标系</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 取出数组中最大/小的 n 个（重复）元素以及索引</title>
    <link href="/2024/10/10/Python-%E5%8F%96%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7-%E5%B0%8F%E7%9A%84-n-%E4%B8%AA-%E9%87%8D%E5%A4%8D-%E5%85%83%E7%B4%A0%E4%BB%A5%E5%8F%8A%E7%B4%A2%E5%BC%95/"/>
    <url>/2024/10/10/Python-%E5%8F%96%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9C%80%E5%A4%A7-%E5%B0%8F%E7%9A%84-n-%E4%B8%AA-%E9%87%8D%E5%A4%8D-%E5%85%83%E7%B4%A0%E4%BB%A5%E5%8F%8A%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<p>首先参考：</p><ol><li><a href="https://blog.csdn.net/Parzival_/article/details/123411234">Python获取列表中最大&#x2F;最小的n个元素及索引</a></li><li><a href="https://blog.csdn.net/Mark_2018/article/details/102471466">Python获取list中最大或最小的n个数及其索引</a></li></ol><p>但都不是很优雅，<strong>尤其是在有重复元素的情况下</strong>。</p><p>于是有了：<a href="https://stackoverflow.com/questions/22076427/python-lists-indices-of-heapq-nlargest-with-repeating-values-in-list">Python lists: indices of heapq.nlargest with repeating values in list</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> heapq<br><span class="hljs-meta">&gt;&gt;&gt; </span>my_list = [<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>data = heapq.nlargest(<span class="hljs-number">2</span>, <span class="hljs-built_in">enumerate</span>(my_list), key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>indices, vals = <span class="hljs-built_in">zip</span>(*data)<br><span class="hljs-meta">&gt;&gt;&gt; </span>indices<br>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>vals<br>(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sklearn 数据预处理</title>
    <link href="/2024/09/24/sklearn-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <url>/2024/09/24/sklearn-%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> MinMaxScaler, StandardScaler, Normalizer, Binarizer<br><br><span class="hljs-comment"># 区间缩放是将原始数据中的数据缩放到[0,1]范围</span><br>scaler = MinMaxScaler(feature_range=(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<br>features = scaler.fit_transform(features)<br><br><span class="hljs-comment"># 标准化是将数据的分布调整成正态分布，也叫高斯分布，也就是使得数据的均值为0，方差为1</span><br>scaler = StandardScaler()<br>features = scaler.fit_transform(features)<br><br><span class="hljs-comment"># 正则化/归一化是将样本在向量空间模型上的一个转换，经常被使用在分类与聚类中。其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准。</span><br>scaler = Normalizer()<br>features = scaler.fit_transform(features)<br><br><span class="hljs-comment"># 特征二值化是将特征值转换为0或1。</span><br><span class="hljs-comment"># 例如，在房价预测问题中对于“是否为学区房”这一特征，取值为1表示该房是学区房，反之则为0。 </span><br><span class="hljs-comment"># 在sklearn中可以设置一个阈值，大于阈值的赋值为1，小于等于阈值的赋值为0。</span><br>scaler = Binarizer(threshold=<span class="hljs-number">3</span>)<br>features = scaler.fit_transform(features)<br><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>X_train, X_test, y_train, y_test = train_test_split(features, labels, train_size=<span class="hljs-number">0.8</span>, random_state=<span class="hljs-number">0</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">参数说明：</span><br><span class="hljs-string">- arrays：样本数组，包含特征向量和标签</span><br><span class="hljs-string">- test_size：float-获得多大比重的测试样本, int - 获得多少个测试样本</span><br><span class="hljs-string">- train_size: 同test_size</span><br><span class="hljs-string">- random_state:int - 随机种子（种子固定，实验可复现）</span><br><span class="hljs-string">- shuffle - 是否在分割之前对数据进行洗牌</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 常用损失函数</title>
    <link href="/2024/09/24/PyTorch-%E5%B8%B8%E7%94%A8%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <url>/2024/09/24/PyTorch-%E5%B8%B8%E7%94%A8%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><ol><li><a href="https://blog.csdn.net/weixin_39263657/article/details/121780642">pytorch模型构建（四）——常用的回归损失函数</a></li><li><a href="https://blog.csdn.net/l13022736018/article/details/116452727">几种常见的计算机视觉中的损失函数原理理解&amp;分析</a></li><li><a href="https://blog.csdn.net/irober/article/details/113779250">PyTorch中的损失函数大致使用场景</a></li></ol><h2 id="分类损失函数"><a href="#分类损失函数" class="headerlink" title="分类损失函数"></a><strong>分类损失函数</strong></h2><p>一般有 <code>CrossEntropy Loss</code>、<code>NLL Loss</code>、<code>KLDiv Loss</code>、<code>BCE Loss</code>、<code>BCE With Logits Loss</code>、<code>Margin Ranking Loss</code>、<code>Hinge Embedding Loss</code>、<code>Huber Loss</code> 等。</p><h3 id="CrossEntropy-Loss"><a href="#CrossEntropy-Loss" class="headerlink" title="CrossEntropy Loss"></a>CrossEntropy Loss</h3><p>交叉熵损失 CrossEntropyLoss</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.nn.CrossEntropyLoss(weight=<span class="hljs-literal">None</span>,ignore_index=-<span class="hljs-number">100</span>, reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br></code></pre></td></tr></table></figure><p>当训练有多个类别的分类问题时很有效。<br>在多分类任务中，经常采用 softmax 激活函数+交叉熵损失函数，因为交叉熵描述了两个概率分布的差异，然而神经网络输出的是<strong>向量</strong>，并不是概率分布的形式。所以需要 softmax 激活函数将一个向量进行“归一化”成概率分布的形式，再采用交叉熵损失函数计算 loss。</p><h2 id="回归损失函数"><a href="#回归损失函数" class="headerlink" title="回归损失函数"></a><strong>回归损失函数</strong></h2><p>一般有 <code>L1 Loss</code>、<code>L2 Loss</code>、<code>Smooth L1 Loss</code> 等。</p><h3 id="L1-Loss"><a href="#L1-Loss" class="headerlink" title="L1 Loss"></a>L1 Loss</h3><p>L1 Loss 即平均绝对误差（Mean Absolute Error， MAE）</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.nn.L1Loss(size_average=<span class="hljs-literal">None</span>, reduce=<span class="hljs-literal">None</span>, reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>什么时候使用？</strong></p><ol><li>简单的模型</li><li>由于神经网络通常是解决复杂问题，所以很少使用。</li></ol><h3 id="L2-Loss"><a href="#L2-Loss" class="headerlink" title="L2 Loss"></a>L2 Loss</h3><p>L2 Loss 即均方差（Mean Squred Error， MSE）</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.nn.MSELoss(size_average=<span class="hljs-literal">None</span>, reduce=<span class="hljs-literal">None</span>, reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>什么时候使用？</strong></p><ol><li>数值特征不大</li><li>问题维度不高</li></ol><p>两者区别</p><ol><li>L1 Loss。0 处导数不连续，收敛速度慢。 对异常值不敏感，因为是求平均，会忽略掉异常值的作用，一般可用于有少许数据错误的值，这样就可以忽略掉这些错误的离群值；</li><li>L2 Loss。收敛速度快，对异常值敏感，如果是需要进行异常检测，就不能忽略掉离群值。</li></ol><p>假如数据集多数为 1000，少数为 10，那么 L1 会偏向 1000（因为更偏向于平均），L2 则会偏向于 10，因为对离群值更敏感，所以实际中这两种都不太可取，所以 Smooth L1 Loss 可以同时利用两者的优点。</p><h3 id="Smooth-L1-Loss"><a href="#Smooth-L1-Loss" class="headerlink" title="Smooth L1 Loss"></a>Smooth L1 Loss</h3><p>平滑的 L1 损失（Smooth L1 Loss， SLL）</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.nn.SmoothL1Loss(size_average=<span class="hljs-literal">None</span>, reduce=<span class="hljs-literal">None</span>, reduction=<span class="hljs-string">&#x27;mean&#x27;</span>, beta=<span class="hljs-number">1.0</span>)<br></code></pre></td></tr></table></figure><p>Smooth L1 Loss 的优点：</p><ol><li>结合了 L1 Loss 对离群点、异常值不敏感的优点;</li><li>结合了 L2 Loss 在 0 处可导数，收敛速度快、训练不容易跑飞的优点。</li></ol>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 回归模型</title>
    <link href="/2024/09/24/PyTorch-%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/09/24/PyTorch-%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>线性回归</p><ul><li><a href="https://www.cnblogs.com/maycap/p/17766022.html">PyTorch之线性回归模型</a></li><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch/blob/master/docs/chapter03_DL-basics/3.3_linear-regression-pytorch.md">3.3 线性回归的简洁实现</a></li></ul><p>非线性回归</p><ul><li><a href="https://blog.csdn.net/weixin_46919419/article/details/122544512">pytorch学习线性回归与非线性回归，以及理解nn.linear()和ReLU激活函数</a></li></ul><p>回归模型评价指标</p><ul><li><a href="https://blog.csdn.net/weixin_35757704/article/details/122659500">sklearn 回归模型评价指标及代码示例</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 提示 RuntimeError: expected scalar type Long but found Float</title>
    <link href="/2024/09/24/PyTorch-%E6%8F%90%E7%A4%BA-RuntimeError-expected-scalar-type-Long-but-found-Float/"/>
    <url>/2024/09/24/PyTorch-%E6%8F%90%E7%A4%BA-RuntimeError-expected-scalar-type-Long-but-found-Float/</url>
    
    <content type="html"><![CDATA[<p>对于多分类一般采用的交叉熵损失函数 <code>torch.nn.CrossEntropyLoss()</code>，此时 label 的取值为 LongTensor 没有问题。</p><p>但在回归时，label 的取值为 FloatTensor，此时再使用 <code>torch.nn.CrossEntropyLoss()</code> 就会提示标题错误。</p><p>参考：</p><ol><li><a href="https://stackoverflow.com/questions/60440292/runtimeerror-expected-scalar-type-long-but-found-float">RuntimeError: expected scalar type Long but found Float</a></li><li><a href="https://stackoverflow.com/questions/70279287/runtimeerror-expected-scalar-type-long-but-found-float-pytorch">RuntimeError: expected scalar type Long but found Float (Pytorch)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 右侧显示代码缩略图</title>
    <link href="/2024/09/24/PyCharm-%E5%8F%B3%E4%BE%A7%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <url>/2024/09/24/PyCharm-%E5%8F%B3%E4%BE%A7%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>找到插件下载 <code>CodeGlance</code></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米 MESH 无法自定义切换路由节点的信号阈值</title>
    <link href="/2024/09/10/%E5%B0%8F%E7%B1%B3-MESH-%E6%97%A0%E6%B3%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%87%E6%8D%A2%E8%B7%AF%E7%94%B1%E8%8A%82%E7%82%B9%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%98%88%E5%80%BC/"/>
    <url>/2024/09/10/%E5%B0%8F%E7%B1%B3-MESH-%E6%97%A0%E6%B3%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%87%E6%8D%A2%E8%B7%AF%E7%94%B1%E8%8A%82%E7%82%B9%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%98%88%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://fast.v2ex.com/t/1041802">小米 MESH 如何修改弱信号切换阈值？</a></p><blockquote><p>首先，这个问题不仅需要路由器支持相应的协议，需要手机端也要支持。就算双方都支持，也不是说能达到很灵敏的切换到最优信号。</p><p>切换到最优信号，一种是客户端主动切换，这个支持最好的应该是苹果，官网也有信号低到多少阈值会执行切换的文档，具体数字应该是-70dbm. 相应的 wifi 协议是 11k ，路由器与客户端需要都支持，可以减少切换需要的时间。<br>但是这个的问题在于，-70 是定死的，但每家每户的节点信号强度是不一样的。有的家里两个节点间距离较远，可能切换效果好一点。有的家庭两个节点比较近，即使你站在 B 节点的附近，此时 A 节点的信号强度还是比-70 好，所以还是不会切到 B 节点。</p><p>另外一种是 router 端主动把客户端踢到指定的节点。这个是 11v 协议的内容，这个目前市面上的高端的设备，只能说是支持，但是目前没有听说哪家体验很好。</p><p>一楼所说的将无线发射功率调低一点，也算一个解决办法。效果相当与上面说的把 A 和 B 两个节点距离拉远一点。可能会有一些帮助，但是不要期望太多。</p><p>还有人提到 Linksys 针对这个做的优化，大概说的是他家的 client steering 功能，效果有，但是也不要期望太高。</p><p>因为目前市面上设备针对这个功能进行优化的，还是太少了，需要芯片厂商从底层无线 driver 层面实现对上述协议的良好支持。另外信号强度这个东西太难以捉摸，同一个设备不同时间，强度也会波动，不同频段频道信噪比不一样，所以也不一定是信号强度最好的就速度一定最快。</p><p>罗嗦的讲了一通，我觉得不要纠结与客户端是否是连在最好的节点上，而应该更加关注连在非最优节点时候的客户端是否有网络卡顿，掉线等问题。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 找到数组中指定元素的 index</title>
    <link href="/2024/09/10/Swift-%E6%89%BE%E5%88%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E7%9A%84-index/"/>
    <url>/2024/09/10/Swift-%E6%89%BE%E5%88%B0%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E7%9A%84-index/</url>
    
    <content type="html"><![CDATA[<ul><li><p><code>firstIndex(where:)</code>&#x2F; <code>first(where:)</code>，如果有多个元素，返回第一个元素索引</p></li><li><p><code>lastIndex(where:)</code>，如果有多个元素，返回最后一个元素索引</p></li></ul><p><strong>使用方法</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> dataSource.firstIndex(where: &#123; <span class="hljs-variable">$0</span>.id <span class="hljs-operator">==</span> item.id &#125;) &#123;<br>  dataSource.remove(at: index)<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E5%BE%9E%E9%9B%86%E5%90%88%E6%89%BE%E5%B0%8B%E6%88%90%E5%93%A1%E7%9A%84-firstindex-where-firstindex-of-swift-4-2-c5841aa56ac8">從集合找尋成員編號的<strong>firstIndex(where:) &amp; firstIndex(of:)</strong> — Swift 4.2</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 打包 macOS 应用</title>
    <link href="/2024/09/10/Xcode-%E6%89%93%E5%8C%85-macOS-%E5%BA%94%E7%94%A8/"/>
    <url>/2024/09/10/Xcode-%E6%89%93%E5%8C%85-macOS-%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><code>Product - Archive - Distribute App - Custom - Copy App</code></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 设置 macOS 窗口默认尺寸</title>
    <link href="/2024/09/10/SwiftUI-%E8%AE%BE%E7%BD%AE-macOS-%E7%AA%97%E5%8F%A3%E9%BB%98%E8%AE%A4%E5%B0%BA%E5%AF%B8/"/>
    <url>/2024/09/10/SwiftUI-%E8%AE%BE%E7%BD%AE-macOS-%E7%AA%97%E5%8F%A3%E9%BB%98%E8%AE%A4%E5%B0%BA%E5%AF%B8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">@main</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DotsApp</span>: <span class="hljs-title class_ inherited__">App</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">Scene</span> &#123;<br>        <span class="hljs-type">WindowGroup</span> &#123;<br>            <span class="hljs-type">ContentView</span>()<br>        &#125;<br>        .defaultSize(width: <span class="hljs-number">1920</span>, height: <span class="hljs-number">1080</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>三角形 Project</category>
      
      <category>三角形绘制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sketch 组件库默认存放路径</title>
    <link href="/2024/09/06/Sketch-%E7%BB%84%E4%BB%B6%E5%BA%93%E9%BB%98%E8%AE%A4%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84/"/>
    <url>/2024/09/06/Sketch-%E7%BB%84%E4%BB%B6%E5%BA%93%E9%BB%98%E8%AE%A4%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p><code>User/UserName/Library/Application Support/com.bohemiancoding.sketch3/Libraries</code></p><p>其中，Libraries 文件夹是隐藏的，需要 <code>Shift+Command+.</code> 显示出来。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面积并</title>
    <link href="/2024/09/06/%E9%9D%A2%E7%A7%AF%E5%B9%B6/"/>
    <url>/2024/09/06/%E9%9D%A2%E7%A7%AF%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<ol><li>bzoj 1845 Cqoi2005<ol><li><a href="https://darkbzoj.cc/problem/1845">[Cqoi2005] 三角形面积并</a></li><li><a href="https://www.cnblogs.com/mhy12345/p/4375049.html">bzoj 1845: [Cqoi2005] 三角形面积并 扫描线</a></li><li><a href="https://blog.csdn.net/jiangyuze831/article/details/42582663">BZOJ 1845 CQOI 2005 三角形面积并 扫描线</a></li><li><a href="https://www.cnblogs.com/candy99/p/6360495.html">BZOJ 1845: [Cqoi2005] 三角形面积并 [计算几何 扫描线] </a></li><li><a href="https://yhx-12243.github.io/OI-transit/records/lydsy1845%3Blg4406.html">[lydsy1845][lg4406][CQOI2005]三角形面积并</a></li></ol></li><li>AcWing 2801<ol><li><a href="https://www.acwing.com/solution/content/45569/">AcWing 2801. 三角形面积并</a></li><li><a href="https://blog.csdn.net/qq_43685900/article/details/113798599">AcWing 2801. 三角形面积并 [CQOI2005] 扫描线</a></li></ol></li><li>圆形并<ol><li><a href="https://yhx-12243.github.io/OI-transit/records/lydsy2178%3BspojCIRU.html">[lydsy2178][spoj CIRU]圆的面积并</a></li></ol></li><li>合集<ol><li><a href="https://blog.csdn.net/weixin_42638946/article/details/121358732">【算法专题】平面图形的面积并问题</a></li></ol></li><li>LeetCode 850<ol><li><a href="https://www.cnblogs.com/AngleLin/p/16918221.html">LeetCode | 850. 矩形面积 II</a></li><li><a href="https://acoier.com/2022/09/16/850.%20%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF%20II%EF%BC%88%E5%9B%B0%E9%9A%BE%EF%BC%89/">LC 850. 矩形面积 II </a></li><li><a href="https://leetcode.cn/problems/rectangle-area-ii/description/"><a href="https://leetcode.cn/problems/rectangle-area-ii/">850. 矩形面积 II</a></a></li></ol></li></ol><p>我在项目中使用的是 <a href="https://www.cnblogs.com/candy99/p/6360495.html">BZOJ 1845: [Cqoi2005] 三角形面积并 [计算几何 扫描线] </a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">//  main.cpp</span><br><span class="hljs-comment">//  bzoj1845</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//  Created by Candy on 2017/2/1.</span><br><span class="hljs-comment">//  Copyright © 2017年 Candy. All rights reserved.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> INF=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1005</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">sgn</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(x)&lt;eps) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> x&lt;<span class="hljs-number">0</span>?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vector</span>&#123;<br>    <span class="hljs-type">double</span> x,y;<br>    <span class="hljs-built_in">Vector</span>(<span class="hljs-type">double</span> a=<span class="hljs-number">0</span>,<span class="hljs-type">double</span> b=<span class="hljs-number">0</span>):<span class="hljs-built_in">x</span>(a),<span class="hljs-built_in">y</span>(b)&#123;&#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> Vector &amp;a)<span class="hljs-type">const</span>&#123;<br>        <span class="hljs-comment">//return x&lt;a.x||(x==a.x&amp;&amp;y&lt;a.y);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sgn</span>(x-a.x)&lt;<span class="hljs-number">0</span>||(<span class="hljs-built_in">sgn</span>(x-a.x)==<span class="hljs-number">0</span>&amp;&amp;<span class="hljs-built_in">sgn</span>(y-a.y)&lt;<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf %lf\n&quot;</span>,x,y);&#125;<br>&#125;;<br><span class="hljs-keyword">typedef</span> Vector Point;<br>Vector <span class="hljs-keyword">operator</span> +(Vector a,Vector b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector</span>(a.x+b.x,a.y+b.y);&#125;<br>Vector <span class="hljs-keyword">operator</span> -(Vector a,Vector b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector</span>(a.x-b.x,a.y-b.y);&#125;<br>Vector <span class="hljs-keyword">operator</span> *(Vector a,<span class="hljs-type">double</span> b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector</span>(a.x*b,a.y*b);&#125;<br>Vector <span class="hljs-keyword">operator</span> /(Vector a,<span class="hljs-type">double</span> b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector</span>(a.x/b,a.y/b);&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> ==(Vector a,Vector b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">sgn</span>(a.x-b.x)==<span class="hljs-number">0</span>&amp;&amp;<span class="hljs-built_in">sgn</span>(a.y-b.y)==<span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Dot</span><span class="hljs-params">(Vector a,Vector b)</span></span>&#123;<span class="hljs-keyword">return</span> a.x*b.x+a.y*b.y;&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Cross</span><span class="hljs-params">(Vector a,Vector b)</span></span>&#123;<span class="hljs-keyword">return</span> a.x*b.y-a.y*b.x;&#125;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span>&#123;<br>    Point s,t;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-built_in">Line</span>()&#123;&#125;<br>    <span class="hljs-built_in">Line</span>(Point s,Point t,<span class="hljs-type">int</span> i):<span class="hljs-built_in">s</span>(s),<span class="hljs-built_in">t</span>(t),<span class="hljs-built_in">id</span>(i)&#123;&#125;<br>    <span class="hljs-built_in">Line</span>(Point s,Point t):<span class="hljs-built_in">s</span>(s),<span class="hljs-built_in">t</span>(t)&#123;&#125;<br>&#125;L[N];<br><span class="hljs-type">int</span> nl;<br><span class="hljs-function">Point <span class="hljs-title">LI</span><span class="hljs-params">(Line a,Line b)</span></span>&#123;<br>    Vector v=a.s-b.s,v1=a.t-a.s,v2=b.t-b.s;<br>    <span class="hljs-type">double</span> t=<span class="hljs-built_in">Cross</span>(v2,v)/<span class="hljs-built_in">Cross</span>(v1,v2);<br>    <span class="hljs-keyword">return</span> a.s+v1*t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLSI</span><span class="hljs-params">(Line l1,Line l2)</span></span>&#123;<br>    Vector v=l<span class="hljs-number">1.</span>t-l<span class="hljs-number">1.</span>s,u=l<span class="hljs-number">2.</span>s-l<span class="hljs-number">1.</span>s,w=l<span class="hljs-number">2.</span>t-l<span class="hljs-number">1.</span>s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sgn</span>(<span class="hljs-built_in">Cross</span>(v,u))!=<span class="hljs-built_in">sgn</span>(<span class="hljs-built_in">Cross</span>(v,w));<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Triangle</span>&#123;<br>    Point a,b,c;<br>    <span class="hljs-built_in">Triangle</span>()&#123;&#125;<br>    <span class="hljs-built_in">Triangle</span>(Point a,Point b,Point c):<span class="hljs-built_in">a</span>(a),<span class="hljs-built_in">b</span>(b),<span class="hljs-built_in">c</span>(c)&#123;&#125;<br>&#125;t[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">double</span> mp[<span class="hljs-number">100000</span>];<span class="hljs-type">int</span> m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">iniMP</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">sort</span>(mp<span class="hljs-number">+1</span>,mp<span class="hljs-number">+1</span>+m);<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    mp[++p]=mp[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=m;i++) <span class="hljs-keyword">if</span>(mp[i]!=mp[i<span class="hljs-number">-1</span>]) mp[++p]=mp[i];<br>    m=p;<br>&#125;<br>Point a,b,c;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Interval</span>&#123;<br>    <span class="hljs-type">double</span> l,r;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> Interval &amp;a) <span class="hljs-type">const</span>&#123;<br>        <span class="hljs-keyword">return</span> l==a.l?r&lt;a.r:l&lt;a.l;<br>    &#125;<br>    <span class="hljs-built_in">Interval</span>(<span class="hljs-type">double</span> a=<span class="hljs-number">0</span>,<span class="hljs-type">double</span> b=<span class="hljs-number">0</span>):<span class="hljs-built_in">l</span>(a),<span class="hljs-built_in">r</span>(b)&#123;&#125;<br>&#125;in[N];<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        a=t[i].a,b=t[i].b,c=t[i].c;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sgn</span>(x-<span class="hljs-built_in">min</span>(a.x,<span class="hljs-built_in">min</span>(b.x,c.x)))&lt;<span class="hljs-number">0</span>||<span class="hljs-built_in">sgn</span>(x-<span class="hljs-built_in">max</span>(a.x,<span class="hljs-built_in">max</span>(b.x,c.x)))&gt;<span class="hljs-number">0</span> ) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-function">Line <span class="hljs-title">l1</span><span class="hljs-params">(a,b)</span>,<span class="hljs-title">l2</span><span class="hljs-params">(a,c)</span>,<span class="hljs-title">l3</span><span class="hljs-params">(b,c)</span>,<span class="hljs-title">l</span><span class="hljs-params">(Point(x,<span class="hljs-number">0</span>),Point(x,<span class="hljs-number">1</span>))</span></span>;<br>        Point p[<span class="hljs-number">3</span>];<span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLSI</span>(l,l1)) p[++cnt]=<span class="hljs-built_in">LI</span>(l,l1);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLSI</span>(l,l2)) p[++cnt]=<span class="hljs-built_in">LI</span>(l,l2);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLSI</span>(l,l3)&amp;&amp;cnt!=<span class="hljs-number">2</span>) p[++cnt]=<span class="hljs-built_in">LI</span>(l,l3);<br>        in[++m]=<span class="hljs-built_in">Interval</span>(<span class="hljs-built_in">min</span>(p[<span class="hljs-number">1</span>].y,p[<span class="hljs-number">2</span>].y),<span class="hljs-built_in">max</span>(p[<span class="hljs-number">1</span>].y,p[<span class="hljs-number">2</span>].y));<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(in<span class="hljs-number">+1</span>,in<span class="hljs-number">+1</span>+m);<br>    <span class="hljs-type">double</span> last=-INF,re=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i].l&gt;last) re+=in[i].r-in[i].l,last=in[i].r;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in[i].r&gt;last) re+=in[i].r-last,last=in[i].r;<br>    &#125;<br>    <span class="hljs-keyword">return</span> re;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf%lf%lf%lf%lf&quot;</span>,&amp;a.x,&amp;a.y,&amp;b.x,&amp;b.y,&amp;c.x,&amp;c.y);<br>        t[i]=<span class="hljs-built_in">Triangle</span>(a,b,c);<br>        mp[++m]=a.x;mp[++m]=b.x;mp[++m]=c.x;<br>        L[++nl]=<span class="hljs-built_in">Line</span>(a,b,i);L[++nl]=<span class="hljs-built_in">Line</span>(a,c,i);L[++nl]=<span class="hljs-built_in">Line</span>(b,c,i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">3</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=n*<span class="hljs-number">3</span>;j++)<br>            <span class="hljs-keyword">if</span>(L[i].id!=L[j].id&amp;&amp;<span class="hljs-built_in">sgn</span>(<span class="hljs-built_in">Cross</span>(L[i].t-L[i].s,L[j].t-L[j].s))!=<span class="hljs-number">0</span>)<br>                mp[++m]=<span class="hljs-built_in">LI</span>(L[i],L[j]).x;<br>    <span class="hljs-built_in">iniMP</span>();<br>    <span class="hljs-type">double</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sgn</span>(mp[i<span class="hljs-number">+1</span>]-mp[i])&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">double</span> x=(mp[i]+mp[i<span class="hljs-number">+1</span>])/<span class="hljs-number">2</span>;<br>            ans+=<span class="hljs-built_in">solve</span>(x)*(mp[i<span class="hljs-number">+1</span>]-mp[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>,ans-eps);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>三角形 Project</category>
      
      <category>面积计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断一个平面内的两个三角形是否相交</title>
    <link href="/2024/09/06/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%B9%B3%E9%9D%A2%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/"/>
    <url>/2024/09/06/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%B9%B3%E9%9D%A2%E5%86%85%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://blog.csdn.net/weixin_44120025/article/details/123830197">用向量叉乘快速判断点在三角形内外原理与代码</a></li><li><a href="https://juejin.cn/post/7197608584690532411">判断一个点是否在三角形内(向量&amp;向量叉乘)</a></li><li><a href="https://blog.51cto.com/u_16175522/6741721">python判断两条线段是否相交</a></li><li><a href="https://blog.csdn.net/weixin_44671418/article/details/125130971">C++检测平面内两个三角形是否相交（逻辑清晰，手撕精简版）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>三角形 Project</category>
      
      <category>三角形绘制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 用 zIndex 调整视图显示顺序</title>
    <link href="/2024/09/06/SwiftUI-%E7%94%A8-zIndex-%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E6%98%BE%E7%A4%BA%E9%A1%BA%E5%BA%8F/"/>
    <url>/2024/09/06/SwiftUI-%E7%94%A8-zIndex-%E8%B0%83%E6%95%B4%E8%A7%86%E5%9B%BE%E6%98%BE%E7%A4%BA%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>在 SwiftUI 中，开发者使用 zIndex 修饰符来控制重叠视图间的显示顺序，具有较大 zIndex 值的视图将显示在具有较小 zIndex 值的视图之上。在没有指定 zIndex 值的时候，SwiftUI 默认会给视图一个为 0 的 zIndex 值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">ZStack</span> &#123;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello&quot;</span>) <span class="hljs-comment">// 默认 zIndex 值为 0 ，显示在最后面</span><br>    <br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;World&quot;</span>)<br>        .zIndex(<span class="hljs-number">3.5</span>)  <span class="hljs-comment">// 显示在最前面</span><br>    <br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hi&quot;</span>)<br>        .zIndex(<span class="hljs-number">3.0</span>)  <br>    <br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Fat&quot;</span>)<br>        .zIndex(<span class="hljs-number">3.0</span>) <span class="hljs-comment">// 显示在 Hi 之前， 相同 zIndex 值，按布局顺序显示</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://cloud.tencent.com/developer/article/2059875">在 SwiftUI 中用 zIndex 调整视图显示顺序</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 无序排列组合</title>
    <link href="/2024/09/06/Swift-%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <url>/2024/09/06/Swift-%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://github.com/apple/swift-algorithms/blob/main/Guides/Combinations.md">Combinations</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//===----------------------------------------------------------------------===//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This source file is part of the Swift Algorithms open source project</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Copyright (c) 2020-2021 Apple Inc. and the Swift project authors</span><br><span class="hljs-comment">// Licensed under Apache License v2.0 with Runtime Library Exception</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// See https://swift.org/LICENSE.txt for license information</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//===----------------------------------------------------------------------===//</span><br><br><span class="hljs-comment">/// A collection wrapper that generates combinations of a base collection.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">CombinationsSequence</span>&lt;<span class="hljs-type">Base</span>: <span class="hljs-type">Collection</span>&gt; &#123;<br>  <span class="hljs-comment">/// The collection to iterate over for combinations.</span><br>  <span class="hljs-keyword">@usableFromInline</span><br>  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">let</span> base: <span class="hljs-type">Base</span><br>  <br>  <span class="hljs-keyword">@usableFromInline</span><br>  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">let</span> baseCount: <span class="hljs-type">Int</span><br>  <br>  <span class="hljs-comment">/// The range of accepted sizes of combinations.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Note: This may be `nil` if the attempted range entirely exceeds the</span><br>  <span class="hljs-comment">/// upper bounds of the size of the `base` collection.</span><br>  <span class="hljs-keyword">@usableFromInline</span><br>  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">let</span> kRange: <span class="hljs-type">Range</span>&lt;<span class="hljs-type">Int</span>&gt;?<br>  <br>  <span class="hljs-comment">/// Initializes a `CombinationsSequence` for all combinations of `base` of</span><br>  <span class="hljs-comment">/// size `k`.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Parameters:</span><br>  <span class="hljs-comment">///   - base: The collection to iterate over for combinations.</span><br>  <span class="hljs-comment">///   - k: The expected size of each combination.</span><br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">base</span>: <span class="hljs-type">Base</span>, <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>) &#123;<br>    <span class="hljs-keyword">self</span>.<span class="hljs-keyword">init</span>(base, kRange: k<span class="hljs-operator">...</span>k)<br>  &#125;<br>  <br>  <span class="hljs-comment">/// Initializes a `CombinationsSequence` for all combinations of `base` of</span><br>  <span class="hljs-comment">/// sizes within a given range.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Parameters:</span><br>  <span class="hljs-comment">///   - base: The collection to iterate over for combinations.</span><br>  <span class="hljs-comment">///   - kRange: The range of accepted sizes of combinations.</span><br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">internal</span> <span class="hljs-keyword">init</span>&lt;<span class="hljs-type">R</span>: <span class="hljs-type">RangeExpression</span>&gt;(<br>    <span class="hljs-keyword">_</span> <span class="hljs-params">base</span>: <span class="hljs-type">Base</span>, <span class="hljs-params">kRange</span>: <span class="hljs-type">R</span><br>  ) <span class="hljs-keyword">where</span> <span class="hljs-type">R</span>.<span class="hljs-type">Bound</span> <span class="hljs-operator">==</span> <span class="hljs-type">Int</span> &#123;<br>    <span class="hljs-keyword">let</span> range <span class="hljs-operator">=</span> kRange.relative(to: <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> .max)<br>    <span class="hljs-keyword">self</span>.base <span class="hljs-operator">=</span> base<br>    <span class="hljs-keyword">let</span> baseCount <span class="hljs-operator">=</span> base.count<br>    <span class="hljs-keyword">self</span>.baseCount <span class="hljs-operator">=</span> baseCount<br>    <span class="hljs-keyword">let</span> upperBound <span class="hljs-operator">=</span> baseCount <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">self</span>.kRange <span class="hljs-operator">=</span> range.lowerBound <span class="hljs-operator">&lt;</span> upperBound<br>      <span class="hljs-operator">?</span> range.clamped(to: <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> upperBound)<br>      : <span class="hljs-literal">nil</span><br>  &#125;<br>  <br>  <span class="hljs-comment">/// The total number of combinations.</span><br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> count: <span class="hljs-type">Int</span> &#123;<br>    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> k <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.kRange <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> &#125;<br>    <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> baseCount<br>    <span class="hljs-keyword">if</span> k <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> (n <span class="hljs-operator">+</span> <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;&lt;</span> n<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">binomial</span>(<span class="hljs-params">n</span>: <span class="hljs-type">Int</span>, <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> &#123;<br>      <span class="hljs-keyword">switch</span> k &#123;<br>      <span class="hljs-keyword">case</span> n, <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>      <span class="hljs-keyword">case</span> n<span class="hljs-operator">...</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>      <span class="hljs-keyword">case</span> (n <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<span class="hljs-operator">...</span>: <span class="hljs-keyword">return</span> binomial(n: n, k: n <span class="hljs-operator">-</span> k)<br>      <span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> n <span class="hljs-operator">*</span> binomial(n: n <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, k: k <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-operator">/</span> k<br>      &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> k.map &#123;<br>      binomial(n: n, k: <span class="hljs-variable">$0</span>)<br>    &#125;.reduce(<span class="hljs-number">0</span>, <span class="hljs-operator">+</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/// The total number of combinations.</span><br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> underestimatedCount: <span class="hljs-type">Int</span> &#123; count &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">CombinationsSequence</span>: <span class="hljs-title class_ inherited__">Sequence</span> &#123;<br>  <span class="hljs-comment">/// The iterator for a `CombinationsSequence` instance.</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Iterator</span>: <span class="hljs-title class_ inherited__">IteratorProtocol</span> &#123;<br>    <span class="hljs-keyword">@usableFromInline</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">let</span> base: <span class="hljs-type">Base</span><br>    <br>    <span class="hljs-comment">/// The current range of accepted sizes of combinations.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// - Note: The range is contracted until empty while iterating over</span><br>    <span class="hljs-comment">/// combinations of different sizes. When the range is empty, iteration is</span><br>    <span class="hljs-comment">/// finished.</span><br>    <span class="hljs-keyword">@usableFromInline</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">var</span> kRange: <span class="hljs-type">Range</span>&lt;<span class="hljs-type">Int</span>&gt;<br>    <br>    <span class="hljs-comment">/// Whether or not iteration is finished (`kRange` is empty)</span><br>    <span class="hljs-keyword">@inlinable</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">var</span> isFinished: <span class="hljs-type">Bool</span> &#123;<br>      <span class="hljs-keyword">return</span> kRange.isEmpty<br>    &#125;<br>    <br>    <span class="hljs-keyword">@usableFromInline</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">var</span> indexes: [<span class="hljs-type">Base</span>.<span class="hljs-type">Index</span>]<br>    <br>    <span class="hljs-keyword">@inlinable</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">combinations</span>: <span class="hljs-type">CombinationsSequence</span>) &#123;<br>      <span class="hljs-keyword">self</span>.base <span class="hljs-operator">=</span> combinations.base<br>      <span class="hljs-keyword">self</span>.kRange <span class="hljs-operator">=</span> combinations.kRange <span class="hljs-operator">??</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">0</span><br>      <span class="hljs-keyword">self</span>.indexes <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(combinations.base.indices.prefix(kRange.lowerBound))<br>    &#125;<br>    <br>    <span class="hljs-comment">/// Advances the current indices to the next set of combinations. If</span><br>    <span class="hljs-comment">/// `indexes.count == 3` and `base.count == 5`, the indices advance like</span><br>    <span class="hljs-comment">/// this:</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">///     [0, 1, 2]</span><br>    <span class="hljs-comment">///     [0, 1, 3]</span><br>    <span class="hljs-comment">///     [0, 1, 4] *</span><br>    <span class="hljs-comment">///     // * `base.endIndex` reached in `indexes.last`</span><br>    <span class="hljs-comment">///     // Advance penultimate index and propagate that change</span><br>    <span class="hljs-comment">///     [0, 2, 3]</span><br>    <span class="hljs-comment">///     [0, 2, 4] *</span><br>    <span class="hljs-comment">///     [0, 3, 4] *</span><br>    <span class="hljs-comment">///     [1, 2, 3]</span><br>    <span class="hljs-comment">///     [1, 2, 4] *</span><br>    <span class="hljs-comment">///     [1, 3, 4] *</span><br>    <span class="hljs-comment">///     [2, 3, 4] *</span><br>    <span class="hljs-comment">///     // Can&#x27;t advance without needing to go past `base.endIndex`,</span><br>    <span class="hljs-comment">///     // so the iteration is finished.</span><br>    <span class="hljs-keyword">@inlinable</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">mutating</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">advance</span>() &#123;<br>      <span class="hljs-comment">/// Advances `kRange` by incrementing its `lowerBound` until the range is</span><br>      <span class="hljs-comment">/// empty, when iteration is finished.</span><br>      <span class="hljs-keyword">func</span> <span class="hljs-title function_">advanceKRange</span>() &#123;<br>        <span class="hljs-keyword">if</span> kRange.lowerBound <span class="hljs-operator">&lt;</span> kRange.upperBound &#123;<br>          <span class="hljs-keyword">let</span> advancedLowerBound <span class="hljs-operator">=</span> kRange.lowerBound <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>          kRange <span class="hljs-operator">=</span> advancedLowerBound <span class="hljs-operator">..&lt;</span> kRange.upperBound<br>          indexes.removeAll(keepingCapacity: <span class="hljs-literal">true</span>)<br>          indexes.append(contentsOf: base.indices.prefix(kRange.lowerBound))<br>        &#125;<br>      &#125;<br>      <br>      <span class="hljs-keyword">guard</span> <span class="hljs-operator">!</span>indexes.isEmpty <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Initial state for combinations of 0 elements is an empty array with</span><br>        <span class="hljs-comment">// `finished == false`. Even though no indexes are involved, advancing</span><br>        <span class="hljs-comment">// from that state means we are finished with iterating.</span><br>        advanceKRange()<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <br>      <span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> indexes.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>      base.formIndex(after: <span class="hljs-operator">&amp;</span>indexes[i])<br>      <span class="hljs-keyword">if</span> indexes[i] <span class="hljs-operator">!=</span> base.endIndex &#123; <span class="hljs-keyword">return</span> &#125;<br>      <br>      <span class="hljs-keyword">var</span> j <span class="hljs-operator">=</span> i<br>      <span class="hljs-keyword">while</span> indexes[i] <span class="hljs-operator">==</span> base.endIndex &#123;<br>        j <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">guard</span> j <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// Finished iterating over combinations of this size.</span><br>          advanceKRange()<br>          <span class="hljs-keyword">return</span><br>        &#125;<br>        <br>        base.formIndex(after: <span class="hljs-operator">&amp;</span>indexes[j])<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> indexes.indices[(j <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<span class="hljs-operator">...</span>] &#123;<br>          indexes[k] <span class="hljs-operator">=</span> base.index(after: indexes[k <span class="hljs-operator">-</span> <span class="hljs-number">1</span>])<br>          <span class="hljs-keyword">if</span> indexes[k] <span class="hljs-operator">==</span> base.endIndex &#123;<br>            <span class="hljs-keyword">break</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">@inlinable</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">mutating</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">next</span>() -&gt; [<span class="hljs-type">Base</span>.<span class="hljs-type">Element</span>]<span class="hljs-operator">?</span> &#123;<br>      <span class="hljs-keyword">guard</span> <span class="hljs-operator">!</span>isFinished <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span> &#125;<br>      <span class="hljs-keyword">defer</span> &#123; advance() &#125;<br>      <span class="hljs-keyword">return</span> indexes.map &#123; i <span class="hljs-keyword">in</span> base[i] &#125;<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">makeIterator</span>() -&gt; <span class="hljs-type">Iterator</span> &#123;<br>    <span class="hljs-type">Iterator</span>(<span class="hljs-keyword">self</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">CombinationsSequence</span>: <span class="hljs-title class_ inherited__">LazySequenceProtocol</span><br>  <span class="hljs-keyword">where</span> <span class="hljs-title class_ inherited__">Base</span>: <span class="hljs-title class_ inherited__">LazySequenceProtocol</span> &#123;&#125;<br><br><span class="hljs-comment">//===----------------------------------------------------------------------===//</span><br><span class="hljs-comment">// combinations(ofCount:)</span><br><span class="hljs-comment">//===----------------------------------------------------------------------===//</span><br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Collection</span> &#123;<br>  <span class="hljs-comment">/// Returns a collection of combinations of this collection&#x27;s elements, with</span><br>  <span class="hljs-comment">/// each combination having the specified number of elements.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// This example prints the different combinations of 1 and 2 from an array of</span><br>  <span class="hljs-comment">/// four colors:</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">///     let colors = [&quot;fuchsia&quot;, &quot;cyan&quot;, &quot;mauve&quot;, &quot;magenta&quot;]</span><br>  <span class="hljs-comment">///     for combo in colors.combinations(ofCount: 1...2) &#123;</span><br>  <span class="hljs-comment">///         print(combo.joined(separator: &quot;, &quot;))</span><br>  <span class="hljs-comment">///     &#125;</span><br>  <span class="hljs-comment">///     // fuchsia</span><br>  <span class="hljs-comment">///     // cyan</span><br>  <span class="hljs-comment">///     // mauve</span><br>  <span class="hljs-comment">///     // magenta</span><br>  <span class="hljs-comment">///     // fuchsia, cyan</span><br>  <span class="hljs-comment">///     // fuchsia, mauve</span><br>  <span class="hljs-comment">///     // fuchsia, magenta</span><br>  <span class="hljs-comment">///     // cyan, mauve</span><br>  <span class="hljs-comment">///     // cyan, magenta</span><br>  <span class="hljs-comment">///     // mauve, magenta</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// The returned collection presents combinations in a consistent order, where</span><br>  <span class="hljs-comment">/// the indices in each combination are in ascending lexicographical order.</span><br>  <span class="hljs-comment">/// That is, in the example above, the combinations in order are the elements</span><br>  <span class="hljs-comment">/// at `[0]`, `[1]`, `[2]`, `[3]`, `[0, 1]`, `[0, 2]`, `[0, 3]`, `[1, 2]`,</span><br>  <span class="hljs-comment">/// `[1, 3]`, and finally `[2, 3]`.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// This example prints _all_ the combinations (including an empty array and</span><br>  <span class="hljs-comment">/// the original collection) from an array of numbers:</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">///     let numbers = [10, 20, 30, 40]</span><br>  <span class="hljs-comment">///     for combo in numbers.combinations(ofCount: 0...) &#123;</span><br>  <span class="hljs-comment">///         print(combo)</span><br>  <span class="hljs-comment">///     &#125;</span><br>  <span class="hljs-comment">///     // []</span><br>  <span class="hljs-comment">///     // [10]</span><br>  <span class="hljs-comment">///     // [20]</span><br>  <span class="hljs-comment">///     // [30]</span><br>  <span class="hljs-comment">///     // [40]</span><br>  <span class="hljs-comment">///     // [10, 20]</span><br>  <span class="hljs-comment">///     // [10, 30]</span><br>  <span class="hljs-comment">///     // [10, 40]</span><br>  <span class="hljs-comment">///     // [20, 30]</span><br>  <span class="hljs-comment">///     // [20, 40]</span><br>  <span class="hljs-comment">///     // [30, 40]</span><br>  <span class="hljs-comment">///     // [10, 20, 30]</span><br>  <span class="hljs-comment">///     // [10, 20, 40]</span><br>  <span class="hljs-comment">///     // [10, 30, 40]</span><br>  <span class="hljs-comment">///     // [20, 30, 40]</span><br>  <span class="hljs-comment">///     // [10, 20, 30, 40]</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// If `kRange` is `0...0`, the resulting sequence has exactly one element, an</span><br>  <span class="hljs-comment">/// empty array. The given range is limited to `0...base.count`. If the</span><br>  <span class="hljs-comment">/// limited range is empty, the resulting sequence has no elements.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Parameter kRange: The range of numbers of elements to include in each</span><br>  <span class="hljs-comment">///   combination.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Complexity: O(1) for random-access base collections. O(*n*) where *n*</span><br>  <span class="hljs-comment">///   is the number of elements in the base collection, since</span><br>  <span class="hljs-comment">///   `CombinationsSequence` accesses the `count` of the base collection.</span><br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">combinations</span>&lt;<span class="hljs-type">R</span>: <span class="hljs-type">RangeExpression</span>&gt;(<br>    <span class="hljs-params">ofCount</span> <span class="hljs-params">kRange</span>: <span class="hljs-type">R</span><br>  ) -&gt; <span class="hljs-type">CombinationsSequence</span>&lt;<span class="hljs-keyword">Self</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-type">R</span>.<span class="hljs-type">Bound</span> <span class="hljs-operator">==</span> <span class="hljs-type">Int</span> &#123;<br>    <span class="hljs-type">CombinationsSequence</span>(<span class="hljs-keyword">self</span>, kRange: kRange)<br>  &#125;<br>  <br>  <span class="hljs-comment">/// Returns a collection of combinations of this collection&#x27;s elements, with</span><br>  <span class="hljs-comment">/// each combination having the specified number of elements.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// This example prints the different combinations of three from an array of</span><br>  <span class="hljs-comment">/// four colors:</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">///     let colors = [&quot;fuchsia&quot;, &quot;cyan&quot;, &quot;mauve&quot;, &quot;magenta&quot;]</span><br>  <span class="hljs-comment">///     for combo in colors.combinations(ofCount: 3) &#123;</span><br>  <span class="hljs-comment">///         print(combo.joined(separator: &quot;, &quot;))</span><br>  <span class="hljs-comment">///     &#125;</span><br>  <span class="hljs-comment">///     // fuchsia, cyan, mauve</span><br>  <span class="hljs-comment">///     // fuchsia, cyan, magenta</span><br>  <span class="hljs-comment">///     // fuchsia, mauve, magenta</span><br>  <span class="hljs-comment">///     // cyan, mauve, magenta</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// The returned collection presents combinations in a consistent order, where</span><br>  <span class="hljs-comment">/// the indices in each combination are in ascending lexicographical order.</span><br>  <span class="hljs-comment">/// That is, in the example above, the combinations in order are the elements</span><br>  <span class="hljs-comment">/// at `[0, 1, 2]`, `[0, 1, 3]`, `[0, 2, 3]`, and finally `[1, 2, 3]`.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// If `k` is zero, the resulting sequence has exactly one element, an empty</span><br>  <span class="hljs-comment">/// array. If `k` is greater than the number of elements in this sequence,</span><br>  <span class="hljs-comment">/// the resulting sequence has no elements.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Parameter k: The number of elements to include in each combination.</span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// - Complexity: O(1) for random-access base collections. O(*n*) where *n*</span><br>  <span class="hljs-comment">///   is the number of elements in the base collection, since</span><br>  <span class="hljs-comment">///   `CombinationsSequence` accesses the `count` of the base collection.</span><br>  <span class="hljs-keyword">@inlinable</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">combinations</span>(<span class="hljs-params">ofCount</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">CombinationsSequence</span>&lt;<span class="hljs-keyword">Self</span>&gt; &#123;<br>    <span class="hljs-built_in">precondition</span>(k <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Can&#x27;t have combinations with a negative number of elements.&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">CombinationsSequence</span>(<span class="hljs-keyword">self</span>, k: k)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> numbers <span class="hljs-operator">=</span> [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-keyword">for</span> combo <span class="hljs-keyword">in</span> numbers.combinations(ofCount: <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-built_in">print</span>(combo)<br>&#125;<br><span class="hljs-comment">// [10, 20]</span><br><span class="hljs-comment">// [10, 30]</span><br><span class="hljs-comment">// [10, 40]</span><br><span class="hljs-comment">// [20, 30]</span><br><span class="hljs-comment">// [20, 40]</span><br><span class="hljs-comment">// [30, 40]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>三角形 Project</category>
      
      <category>三角形绘制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 有序或者无序排列组合</title>
    <link href="/2024/09/06/Python-%E6%9C%89%E5%BA%8F%E6%88%96%E8%80%85%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <url>/2024/09/06/Python-%E6%9C%89%E5%BA%8F%E6%88%96%E8%80%85%E6%97%A0%E5%BA%8F%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">无序排列</span><br><span class="hljs-string">combinations(M个数的集合,选取N个数为一组)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>c = <span class="hljs-built_in">list</span>(itertools.combinations([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">有序排列</span><br><span class="hljs-string">permutations(M个数的集合,选取N个数为一组)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p = <span class="hljs-built_in">list</span>(itertools.permutations([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(p)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">测试结果：</span><br><span class="hljs-string">[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]</span><br><span class="hljs-string">[(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4), (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VO2max Project</category>
      
      <category>模型训练</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Path 合集</title>
    <link href="/2024/09/06/SwiftUI-Path-%E5%90%88%E9%9B%86/"/>
    <url>/2024/09/06/SwiftUI-Path-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 绘制一个矩形</span><br><span class="hljs-type">Path</span>() &#123; path <span class="hljs-keyword">in</span><br>        path.move(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>))<br>        path.addLine(to: <span class="hljs-type">CGPoint</span>(x:<span class="hljs-number">0</span>, y: <span class="hljs-number">200</span>))<br>        path.addLine(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">300</span>, y: <span class="hljs-number">200</span>))<br>        path.addLine(to: <span class="hljs-type">CGPoint</span>(x: <span class="hljs-number">300</span>, y: <span class="hljs-number">0</span>))<br>        <span class="hljs-comment">// path.closeSubpath() </span><br>&#125;<br>.fill(<span class="hljs-type">Color</span>.blue)<br><span class="hljs-comment">// .stroke(Color.blue,lineWidth: 10)</span><br></code></pre></td></tr></table></figure><p>需要注意的一点是，可以在 ForEach 中使用 Path。</p><p>关于 Path 更多操作：<a href="https://qiita.com/yamakentoc/items/a58a2c44f9480bc0e236#path%E3%81%AE%E6%93%8D%E4%BD%9C">【SwiftUI】Pathまとめ</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 彻底删除 VSCode</title>
    <link href="/2024/09/06/Mac-%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4-VSCode/"/>
    <url>/2024/09/06/Mac-%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4-VSCode/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://jimkang.medium.com/complete-uninstall-remove-vscode-mac-5e48bef3bdec">Complete uninstall &#x2F; remove vscode (Mac)</a></p><p>想要彻底卸载mac上的vscode大概要经过以下几步：</p><ul><li>1、退出vscode</li><li>2、删除配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$HOME</span>/Library/Application\ Support/Code<br>// <span class="hljs-keyword">if</span> you<span class="hljs-string">&#x27;re using insider*</span><br><span class="hljs-string">sudo rm -rf $HOME/Library/Application\ Support/Code\ -\ Insiders/</span><br></code></pre></td></tr></table></figure><ul><li>3、删除扩展插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$HOME</span>/.vscode<br>// <span class="hljs-keyword">if</span> you<span class="hljs-string">&#x27;re using insider*</span><br><span class="hljs-string">sudo rm -rf $HOME/.vscode-insiders/</span><br></code></pre></td></tr></table></figure><ul><li>4、从应用中删除vscode（如果存在的话，如果直接解压后使用似乎不用做）</li><li>5、卸载所有vscode系统配置</li><li>6、重新下载vscode安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$HOME</span>/.vscode<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 创建 C++ 工程</title>
    <link href="/2024/09/05/Xcode-%E5%88%9B%E5%BB%BA-C-%E5%B7%A5%E7%A8%8B/"/>
    <url>/2024/09/05/Xcode-%E5%88%9B%E5%BB%BA-C-%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<ol><li>选择 macOS 中的 Command line tool；</li><li>选择语言 C++。</li></ol>]]></content>
    
    
    <categories>
      
      <category>三角形 Project</category>
      
      <category>面积计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 设置中文</title>
    <link href="/2024/09/05/VSCode-%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/"/>
    <url>/2024/09/05/VSCode-%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/</url>
    
    <content type="html"><![CDATA[<ol><li>打开 <code>显示（View）</code> 菜单，选择 <code>命令面板（Command Palette）</code> 菜单项或 <code>Ctrl+Shift+P</code> 快捷键 打开命令面板；</li><li>在命令面板中，输入<code>Configure Display Language</code>，选择<code>Configure Display Language</code>命令。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「Game Feel，制造游戏感」</title>
    <link href="/2024/08/26/%E3%80%8CGame-Feel%EF%BC%8C%E5%88%B6%E9%80%A0%E6%B8%B8%E6%88%8F%E6%84%9F%E3%80%8D/"/>
    <url>/2024/08/26/%E3%80%8CGame-Feel%EF%BC%8C%E5%88%B6%E9%80%A0%E6%B8%B8%E6%88%8F%E6%84%9F%E3%80%8D/</url>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.gcores.com/articles/137125">游戏论文分享：Game Feel 设计纵览</a></p></li><li><p><a href="https://www.douban.com/note/802646785/?_i=4143223hxGRY4Q">Game Feel设计纵览：一篇有213个参考文献的论文</a></p></li><li><p><a href="https://www.gcores.com/articles/147708">译介丨游戏论文《制造游戏感》</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alfred 搜索不到书签的解决办法</title>
    <link href="/2024/08/26/Alfred-%E6%90%9C%E7%B4%A2%E4%B8%8D%E5%88%B0%E4%B9%A6%E7%AD%BE%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2024/08/26/Alfred-%E6%90%9C%E7%B4%A2%E4%B8%8D%E5%88%B0%E4%B9%A6%E7%AD%BE%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>去 Mac 设置里的 <code>隐私与安全性</code> 中打开 Alfred 的 <code>完全磁盘访问权限</code> 即可。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm 查看安装了那些包</title>
    <link href="/2024/08/20/npm-%E6%9F%A5%E7%9C%8B%E5%AE%89%E8%A3%85%E4%BA%86%E9%82%A3%E4%BA%9B%E5%8C%85/"/>
    <url>/2024/08/20/npm-%E6%9F%A5%E7%9C%8B%E5%AE%89%E8%A3%85%E4%BA%86%E9%82%A3%E4%BA%9B%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<ol><li><code>npm list --depth=0</code>。指令用来查看单个项目中安装的模块（指定文件夹），其中 depth 表示深度，我们使用的模块会有依赖，深度为 0 时，不会显示依赖模块；</li><li><code>npm list --depth=0 --global</code>。指令用来查看全局安装了哪些模块。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm 关闭 fund 赞助提示</title>
    <link href="/2024/08/20/npm-%E5%85%B3%E9%97%AD-fund-%E8%B5%9E%E5%8A%A9%E6%8F%90%E7%A4%BA/"/>
    <url>/2024/08/20/npm-%E5%85%B3%E9%97%AD-fund-%E8%B5%9E%E5%8A%A9%E6%8F%90%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>通过 <code>npm install</code> 时会出现这样的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">testuser@localhost ~ $ npm install xxx<br>up to <span class="hljs-built_in">date</span>, audited 117 packages <span class="hljs-keyword">in</span> 1s<br>5 packages are looking <span class="hljs-keyword">for</span> funding<br><br>  run `npm fund` <span class="hljs-keyword">for</span> details<br>  <br>found 0 vulnerabilities<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> fund <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>可以把 <code>run npm fund for details</code> 永久关闭掉。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PC上屏蔽知乎视频</title>
    <link href="/2024/06/18/PC%E4%B8%8A%E5%B1%8F%E8%94%BD%E7%9F%A5%E4%B9%8E%E8%A7%86%E9%A2%91/"/>
    <url>/2024/06/18/PC%E4%B8%8A%E5%B1%8F%E8%94%BD%E7%9F%A5%E4%B9%8E%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>用油猴脚本 <a href="https://greasyfork.org/zh-CN/scripts/419081-%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA">知乎增强</a> 即可。AdBlock 什么的都不靠谱。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」如何磨练关卡设计师的“手艺”？从这个方向着手试试</title>
    <link href="/2024/06/17/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E5%A6%82%E4%BD%95%E7%A3%A8%E7%BB%83%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%9A%84%E2%80%9C%E6%89%8B%E8%89%BA%E2%80%9D%EF%BC%9F%E4%BB%8E%E8%BF%99%E4%B8%AA%E6%96%B9%E5%90%91%E7%9D%80%E6%89%8B%E8%AF%95%E8%AF%95/"/>
    <url>/2024/06/17/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E5%A6%82%E4%BD%95%E7%A3%A8%E7%BB%83%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E5%B8%88%E7%9A%84%E2%80%9C%E6%89%8B%E8%89%BA%E2%80%9D%EF%BC%9F%E4%BB%8E%E8%BF%99%E4%B8%AA%E6%96%B9%E5%90%91%E7%9D%80%E6%89%8B%E8%AF%95%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>原文<a href="https://mp.weixin.qq.com/s/fovOPunIXIkqRo2xBq-zSQ">如何磨练关卡设计师的“手艺”？从这个方向着手试试</a></p><blockquote><p>如果把游戏设计类⽐成做菜，那么关卡设计师就像是⼀个在原材料已经确定下的厨⼦。为什么说原材料已经确定了呢？因为游戏主要的机制（Gameplay）是已经确定的，例如：怪物的⾏为与种类、⾓⾊的3C与技能等。⽽关卡设计师需要为这些游戏机制提供⼀个载体，把它们拼凑在⼀起，就像⽤⼤⽕将⾷材与调料混合，同样的⾷材通过不同的搭配与烹调⽅式却能呈现出不同⻛味。</p></blockquote><p>想要打造⼀顿好饭，每⼀道菜之间需要有差异化，不能烤完⽜排烤⽺排；⽽是要像法式⼤餐⼀样有前菜、主菜与甜品，菜品的⼴度能让我们吃得不乏味。与此同时，菜品的深度也很重要：同样的法式⼤餐，有的每⼀道都很平庸；有的却每⼀道菜都令⼈回味⽆穷，⼝感、⾊泽、⾹味每⼀种感官体验都极具层次感！</p><p>好的关卡设计师就和⽶其林⼤厨⼀样，都需要不断地磨练⼿艺才能把⾃⼰的作品打造成艺术。深度决定了⼀个关卡玩法的天花板，这往往⽐较抽象与困难；但⼴度更侧重要素的运⽤与组合，这是⽐较容易实现与学习的，因此我们先聊聊⼴度与多样性。</p><h1 id="关卡广度"><a href="#关卡广度" class="headerlink" title="关卡广度"></a>关卡广度</h1><p>关卡⼴度其实就是说关卡设计师通过对关卡不同要素的拼配，在⼀个有限的关卡内给玩家带来丰富的体验。所以我们⾸先需要探讨⼀个关卡到底有哪些要素，然后再考虑如何对这些要素进⾏组合装配来达成创造多种体验的⽬的。</p><h1 id="关卡要素"><a href="#关卡要素" class="headerlink" title="关卡要素"></a>关卡要素</h1><p>找⼀个⻢⾥奥的关卡来举例，我们可以发现其中有：</p><ul><li><strong>⾓⾊类</strong></li></ul><p>（玩家可控制的）主⾓，其具有基本操作-移动、跳跃、下蹲等。</p><p>敌⼈-不同种类具有不同的⾏为与攻击⽅式。</p><p>NPC-例如酷霸王与公主。</p><ul><li><strong>地形与Layout</strong></li></ul><p>⻢⾥奥的基本地形为横板</p><p>但是把这些板⼦按⾼低不同排列起来，其就变成了Layout且会考验玩家技巧。</p><ul><li><strong>采集物</strong></li></ul><p>Gameplay相关-吃了变⼤或者能打枪的蘑菇。</p><p>系统相关（不会对局内游戏玩法机制造成影响，⽤于局外养成或计分）-⾦币</p><ul><li><strong>交互物</strong></li></ul><p>⽤于移动的机关-管道，可以下去发现新地⽅。</p><ul><li><strong>陷阱</strong></li></ul><p>胜利条件-单局最后升起旗帜。</p><h1 id="要素与广度"><a href="#要素与广度" class="headerlink" title="要素与广度"></a>要素与广度</h1><p>关卡的⼴度并不是⽆限地要素堆砌，⽽是在既定的体验⽬标与节奏路径下，合理搭配各类关卡要素使整个关卡流程具有差异化体验与⼀致性。</p><p>如下图所⽰，要素的多样性需要服从两个⼤框架的束缚：体验⽬标（这个关卡要给玩家什么样的感受）与关卡节奏（循序渐进）。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/F03VdOKPlCmC56MYSKF0G6DgnBc6L1KUeaE0NKBFKgQhiaiaLuVic3TTk1OPnoUCicu9c3IicJhhzERlmkAII2vviaibA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>⽽要素的数量也符合边际效益递减原则：要素过少意味着⼀个关卡内玩家需要进⾏重复的操作，那到关卡后期就会有疲惫与乏味感，很难推动情绪进⼊⾼潮；如果要素过多超过了玩家可以承受的范围，⼤家会觉得很沮丧因为⼈脑的内存是有限的，⼿忙脚乱且难以记忆只会让玩家觉得乱七⼋糟。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/F03VdOKPlCmC56MYSKF0G6DgnBc6L1KUWZlicKweBNqbNrGKvSfYWM2BlUVxQ9hDcpKLDvia9IibL2SicX1Ku5nvfg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><strong>举个例⼦</strong></p><p>假设我们要做⼀个⻢⾥奥关卡，其体验⽬标是：惊险刺激。</p><p>如果只通过不断增加敌⼈的数量，来达成这个⽬标，那⽆疑是⼀个缺乏⼴度的关卡。</p><h1 id="非游戏机制性要素"><a href="#非游戏机制性要素" class="headerlink" title="非游戏机制性要素"></a>非游戏机制性要素</h1><p>从艺术表现的⾓度出发，为了达成这个体验⽬标，我们的美术设定可以是昏暗的、如果再增加⼀些闪烁的灯光就更好了；⽽⾳乐则需要动感与快节奏的。</p><p>从叙事的⾓度出发，我们可以在关卡之前增加⼀些主题的铺垫，如公主被抓⾛或者酷霸王的挑衅来激起玩家⼼中的愤怒。</p><p>⽽在关卡结束后，可以⼀下变得舒缓，画⾯突然明亮形成鲜明对⽐，给到玩家⼀种守得云开⻅⽉明的感受。</p><h1 id="游戏机制性要素"><a href="#游戏机制性要素" class="headerlink" title="游戏机制性要素"></a>游戏机制性要素</h1><p>针对最上层的体验⽬标，我们可以把它拆解成具体的玩家挑战；⽽不同的挑战可以再进⾏更细节的⼦⽬标拆解，最终我们要⽤已有的要素来构建出这些玩家挑战。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/F03VdOKPlCmC56MYSKF0G6DgnBc6L1KU10hib6DTI8knHOOGt2X4VkE0T8RTSISDSLcQl6ANrPPXicJibMekQu4Eg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>我们选取“操作时机的正确性”作为⽰范，来看怎么⽤已有要素多样地构建这个挑战。</p><ul><li><strong>敌⼈是最简单的⽅式</strong></li></ul><p>部署具有较快攻击⾏为的敌⼈，使玩家需要及时躲避。</p><p>放置具有抗性的敌⼈，只有在某些时间窗⼝攻击才可造成伤害（打地⿏，但打地⿏不能造成压迫感，所以这种敌⼈还需要给玩家造成威胁才⾏）。</p><p>⽽不同类型敌⼈的组合，可以增加难度，让玩家在正确时机内需要完成特定的操作组合才能过关。</p><ul><li><strong>地形与layout</strong></li></ul><p>构建需要正确时机完成操作才可通过的地形，如⼆段跳。</p><p>类糖⾖⼈快速移动的平台，逼迫玩家做出正确躲闪操作。</p><ul><li><strong>交互物</strong></li></ul><p>⾷⼈花或陷阱，⼤家都⽿熟能祥。</p><p>咋⼀看这些直接的⼿段都很清晰明了，⼤家应该都想得到。但是，重点在于要素之间的配合。</p><ul><li><strong>地形+敌⼈</strong></li></ul><p>玩家在上坡的路上需要克服重⼒来躲避敌⼈。</p><p>玩家在敌⼈⼤潮来临前需要跳到平台上。</p><p>在这⾥，敌⼈其实是作为⼲扰项来制造紧张感，其实质威胁并不⼤。</p><ul><li><strong>地形+收集物</strong></li></ul><p>本来通过特殊地形的操作⽐较简单，但是为了获得蘑菇或⾦币，你需要做出⼀些骚操作才可以，⽽失败的代价就是坠⼊深渊。深渊也可以替换成敌⼈或者陷阱，使压迫感更强。</p><p>在这⾥，收集物是作为⼀种诱饵；在关卡流程上也可以做⼀些⽂章：刚开始让玩家承担较⼩⻛险即可获得收集物，尝到⼀些甜头，在后续更难的挑战中就容易形成思维定式来主动冒险⽆意识之间陷⼊紧张刺激的陷阱中。</p><p>与上述例⼦类似，“交互物+敌⼈”、“收集物+敌⼈”等都能形成相似的组合，⽽随着关卡进⼊后期可以进⾏更多要素种类的组合。</p><h1 id="关卡节奏与要素组合数量"><a href="#关卡节奏与要素组合数量" class="headerlink" title="关卡节奏与要素组合数量"></a>关卡节奏与要素组合数量</h1><p>众所周知，⼀个良好的关卡难度曲线去随着进程起伏上升的，只有这样才能循序渐进地把玩家情绪推动到最⾼点。对于要素组合来说，也需要遵循这个框架。</p><p>在关卡初始阶段，尽量只有单个要素威胁来制造挑战。此时主要⽬的是让玩家熟悉关卡的挑战与基本操作，热个⾝。</p><p>在玩家上⼿之后，则可以利⽤⼀些要素组合，建议是“⼲扰项+威胁项”的组合，⼲扰项要素只造成⼼理上的威胁，避免难度曲线上升过于陡峭。</p><p>⾼潮，在最终时刻需要集合多种要素来验证玩家在关卡中学到的技巧，因此可以是把之前的要素都组合起来。如果屏幕中组件过多，我们也可以把⼀些要素的设计合并到⼀个物体上，其实Boss的设计就是如此。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/F03VdOKPlCmC56MYSKF0G6DgnBc6L1KUIrn1MKKGnD9kFyp6ljgNtCk71H1n33GYBP70KWCjBbKcMUZdYUftbw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」關卡設計的五大心法－第一篇：選擇。體驗不只是YES &amp; NO，而是想要更多！</title>
    <link href="/2024/06/17/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E9%97%9C%E5%8D%A1%E8%A8%AD%E8%A8%88%E7%9A%84%E4%BA%94%E5%A4%A7%E5%BF%83%E6%B3%95%EF%BC%8D%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E9%81%B8%E6%93%87%E3%80%82%E9%AB%94%E9%A9%97%E4%B8%8D%E5%8F%AA%E6%98%AFYES-NO%EF%BC%8C%E8%80%8C%E6%98%AF%E6%83%B3%E8%A6%81%E6%9B%B4%E5%A4%9A%EF%BC%81/"/>
    <url>/2024/06/17/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E9%97%9C%E5%8D%A1%E8%A8%AD%E8%A8%88%E7%9A%84%E4%BA%94%E5%A4%A7%E5%BF%83%E6%B3%95%EF%BC%8D%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E9%81%B8%E6%93%87%E3%80%82%E9%AB%94%E9%A9%97%E4%B8%8D%E5%8F%AA%E6%98%AFYES-NO%EF%BC%8C%E8%80%8C%E6%98%AF%E6%83%B3%E8%A6%81%E6%9B%B4%E5%A4%9A%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://lucigamedesign543.medium.com/top-5-level-design-principles-72ebcabe5739">[技術宅] 關卡設計的五大心法－第一篇：選擇。體驗不只是YES &amp; NO，而是想要更多！</a></p><h1 id="Choices-選擇－探索非線性互動媒體的獨特魅力"><a href="#Choices-選擇－探索非線性互動媒體的獨特魅力" class="headerlink" title="Choices 選擇－探索非線性互動媒體的獨特魅力"></a>Choices 選擇－探索非線性互動媒體的獨特魅力</h1><p>「一個遊戲是由一系列的有趣決定所構成。」 — 《<em>文明帝國</em>》的創始者席德·梅爾（Sid Meier）所說的。這句話深刻地揭示了遊戲作為一種獨特媒介的核心特質，那就是透過玩家與遊戲的互動，帶來多樣且豐富的體驗。「選擇」成為了遊戲與其他媒介區別開來的關鍵要素，賦予玩家成為故事主導的能力。</p><p>這背後的深意是通過讓玩家主動作出選擇，他們不僅是在遊戲中活動的參與者，更是推動故事發展的重要力量。在遊戲設計領域，這種玩家的主導權被稱為「Agency」。在深入探討「選擇」這一概念時，我們可以將其細分為以下三點。</p><h2 id="1-機會與選項-—-Opportunity-Options"><a href="#1-機會與選項-—-Opportunity-Options" class="headerlink" title="1. 機會與選項 — Opportunity &amp; Options"></a>1. 機會與選項 — Opportunity &amp; Options</h2><p>「選項」可能很直接，就如同問玩家“你想採取哪一個行動？”例如，在《<em>Candy Crush</em>》遊戲中，可動的糖果數量就代表了玩家的選項，他們可以選擇將藍色糖果向下滑動形成特殊糖果，或者將綠色糖果向左滑動進行消除等等。</p><p>「Opportunity 機會」則需要玩家透過遊戲機制和深思熟慮來進行行動。以圖中的關卡為例，玩家需要破壞瓶子糖果並填滿橘色汽水，讓Bubble Bear能夠上升到糖果線的右上方。在這個關卡中，糖果魚是關鍵的元素，所以如果玩家選擇了上述的藍色match 4，他們將獲得一個藍色垂直射線特殊糖果，從而有機會擊中下方的黃色糖果魚。</p><p>當然，你可能會想，“這種完美的配合不可能每次都發生，有時候沒有糖果魚或特殊糖果可用！”這就是開發者透過設計來創造的「機會」。這個開放式的關卡設計，加上特定顏色的汽水和其他元素，使得創造特殊糖果的機會較高，從而提高了隱性選擇的可行性。</p><p>幾乎所有的遊戲都能提供「機會」與「選項」的概念，不論是劇情為重的《<em>Detroit: Become Human</em>》讓玩家選擇對話回應或是動作；或是開放世界的《G<em>host of Tsushima</em>》中，可以讓玩家選擇走平面入侵蒙古軍，或是登高上屋簷潛行刺殺；又或是節奏快速的roguelike《<em>Hades</em>》，提供玩家開場武器跟，或是清場後的技能等等都是選擇。讀者也可以思考你最近玩的遊戲中，哪一些是所謂的「機會與選擇」</p><p>那麼，當遊戲提供了眾多選擇時，玩家如何判斷哪些是“好”的選擇？又該如何在众多選項中做出最佳決定？這引出了我們的下一個討論點：“<strong>具意義的選擇 — Meaningful Choice</strong>”。</p><h2 id="2-具意義的選擇-—-Meaningful-Choice"><a href="#2-具意義的選擇-—-Meaningful-Choice" class="headerlink" title="2. 具意義的選擇 — Meaningful Choice"></a>2. 具意義的選擇 — Meaningful Choice</h2><p>在探索遊戲世界的過程中，「具意義的選擇」究竟是什麼？作為一種充滿互動性的非線性媒介，遊戲由一系列精彩的決定構成，而這些「選擇」即是玩家的「決定」。不過，並非所有決定都需帶有深遠的意義。有些選擇雖然有趣，但影響有限。作為開發者，我們追求的是創造那些能引發玩家情感共鳴，並對遊戲進程產生重要影響的「有意義」瞬間。那麼，如何設計出讓玩家感受到重要性並需深思熟慮的選擇呢？</p><h3 id="引導玩家「優先化選擇」"><a href="#引導玩家「優先化選擇」" class="headerlink" title="引導玩家「優先化選擇」"></a><strong>引導玩家「優先化選擇」</strong></h3><p>所謂的「優先化選擇」是指讓玩家對眼前的選項進行排序，決定哪些需優先考慮。在這一過程中，玩家會思考哪些選擇更為重要，從而決定行動的先後順序。創造一個能夠引發玩家這種思維的環境需要對遊戲玩法機制進行細緻的整合，並設計各種情境來激發玩家的判斷力。如老闆在《淺談Level Design — 關卡設計》中所提到：</p><blockquote><p><em>Level Design是一種設計讓玩家透過遊戲中階段性的環境，空間或遊玩的互動，來發揮出game mechanic（遊戲機制）的最大效益，而讓遊戲有更強的帶入感，更吸引玩家，或是使其更有趣，玩家可從中得到喜悅與樂趣。</em></p></blockquote><p>例如，在三消遊戲中，將blocker（障礙方塊）視為敵人，設計師會利用各種blocker（障礙方塊）創造預期的關卡難度和情境。每個blocker（障礙方塊）的行為模式和位置都不同，這迫使玩家思考如何有效地移除這些障礙，哪些blocker應優先處理，以及從哪個位置開始攻略關卡。</p><p>在非三消的遊戲中，開發者需理解「敵人單位的差異化（Orthogonal Unit Differentiation）」，創造出讓玩家需要進行「優先化選擇」的情境。知名的《<em>Doom</em>》便是一個例子，遊戲中不同類型的敵人具有不同的攻擊模式，玩家需在快速的遊戲節奏中判斷哪個敵人應先被攻擊。這樣的設計理念在許多遊戲中都有體現，如《<em>Uncharted</em>》系列、《<em>God of War</em>》、《<em>Hades</em>》、《<em>Diablo</em>》等。</p><h3 id="情境與機會驅動的選擇"><a href="#情境與機會驅動的選擇" class="headerlink" title="情境與機會驅動的選擇"></a><strong>情境與機會驅動的選擇</strong></h3><p>在「優先化選擇」的基礎上，玩家會根據當前的情境和潛在機會作出有意義的優先選擇。例如，在一個關卡中可能有多條路線通往終點，玩家會根據自身的利益和當前情境決定走哪條路，這可能基於對某種玩法的偏好、獲勝的概率或額外獎勵等因素。《Super Mario Bro》中的水管提供了一個選擇，玩家可以潛入其中獲取更多金幣或道具，使得這一選擇成為有意義的行為。</p><p>發者透過關卡設計提供的選擇，不僅體現在如《<em>Metal Gear</em>》和《<em>Assassin’s Creed</em>》等遊戲中帶起的潛行玩法，而且也適用於休閒遊戲。在《<em>Candy Crush</em>》系列中，選擇何時使用Color bomb 或Sprinkleshell 等道具，往往取決於當前情境和機會。例如，Sprinkleshell 的功能是在收集到足夠的青色糖果後，玩家可以點擊啟動消除關卡中指定顏色的糖果。在設計以此功能為核心的關卡時，玩家需要判斷在適當的情境下何時使用，每次選擇的時機都至關重要。</p><p>以特定關卡為例，玩家的目標是收集所有的Honey Bear。當關卡進入第二個畫面時，玩家需要擊破深藍色的糖果以破壞Honey Bear，但這些糖果的位置通常不易觸及。設計師巧妙地希望玩家利用Sprinkleshell來一次性擊破深藍色糖果，從而完成目標。因此，每一次玩家選擇使用Sprinkleshell的時機都受到情境和機會的驅動，這種選擇的重要性不言而喻。</p><h2 id="3-技巧與機運的交織-—-Skill-or-Luck-or-Both"><a href="#3-技巧與機運的交織-—-Skill-or-Luck-or-Both" class="headerlink" title="3. 技巧與機運的交織 — Skill or Luck or Both?"></a>3. 技巧與機運的交織 — Skill or Luck or Both?</h2><p>當我們談論「技巧」與「機運」時，你可能會好奇它們與選擇有何關聯。提及「機運」，我們常聯想到隨機性和運氣，這些元素與技巧形成了一種微妙的平衡。技巧是玩家可以透過練習掌握的元素，而隨機性則是無法預測的，它為遊戲增添了挑戰、驚喜和不確定性。然而，技巧在很多情況下成為了玩家戰勝關卡的關鍵，尤其對於那些技巧嫻熟的玩家來說，他們能夠利用自己的技巧來抵消不幸的影響。相反地，對於新手或技巧尚未成熟的玩家，我們也不希望他們因為不幸的隨機事件而沮喪至放棄遊戲。於是，選擇成為了克服隨機性和提升技巧的重要工具之一。</p><p>「Fielding」是開發者希望帶給玩家的一種經驗。玩家需要透過自身技巧，分析隨機事件對關卡所帶來的變化，從而作出最佳選擇。並且，從每次正面或負面的回饋中學習，理解為何某個選擇是好的或壞的，並在未來的選擇中進行調整。</p><p>在遊戲的每一個情境下，都存在「已知」與「未知」的元素。「隨機、機運、機率」這些因素增加了未知元素的比重，從而打破了玩家對遊戲一成不變的認知，帶來驚奇、挑戰和新鮮感。</p><p>在開發三消遊戲時，開發者可以透過控制關卡中的物件（例如blocker、candies、specials）的釋放機率、顏色、數量等，來為玩家創造一定的機運。目標是找到那個甜蜜點，讓不可控因素不會超過玩家對遊戲的控制。在進行關卡review時，如果發現某個關卡特別容易產生大量特殊糖果或觸發連鎖反應，我們會特別留意並進行多次測試，確保它符合預期的體驗和難度，並確保玩家仍在控制中。會議中常說的一句話是：“Don’t let the level play by itself,” 即使關卡符合我們的預期難度和體驗。</p><p>《Baldur’s Gate 3》中每個招式的施放都有一定的成功機率，Roguelite遊戲也同樣融入了隨機元素，玩家需要根據當前的關卡選擇有利於自己的技能和武器。另一個“運氣與技能”典型的例子是《Mario Kart》的問號箱，它看似隨機，但實際上會根據玩家的排名影響道具的機率，考驗玩家使用道具的技巧。</p><h2 id="結語：三者的和諧共鳴"><a href="#結語：三者的和諧共鳴" class="headerlink" title="結語：三者的和諧共鳴"></a>結語：三者的和諧共鳴</h2><p>在這篇探討中，我們發現「機會與選擇」、「具意義的選擇」以及「技巧與機運」這三點彼此之間有著深刻的相互影響。如果開發者僅提供機會與選擇，遊戲可能會顯得單調乏味，難以吸引玩家深入體驗。相對地，若只強調具意義的選擇，則可能使遊戲過於壓力山大，讓玩家對每個可能的後果感到躊躇。至於技巧與機運，若不當平衡則可能造成遊戲的不確定因素過高或技術門檻太大，阻礙玩家進入那個狀態的心流。</p><p>這三者之間存在著一種相輔相成的關係。至少根據老闆在開發三消遊戲和先前經驗中的體會，透過這三個要素的結合可以創造出引人入勝的關卡設計。這些原則或許在開發其他類型的產品時也能發揮作用，雖然其中某些可能不盡適用。如果讀者們有任何特別的想法或見解，非常歡迎在留言區進行分享與討論。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>求生之路的导演系统</title>
    <link href="/2024/05/07/%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF%E7%9A%84%E5%AF%BC%E6%BC%94%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/05/07/%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF%E7%9A%84%E5%AF%BC%E6%BC%94%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/read/cv24222038/">一文带你彻底搞懂求生之路2导演系统</a></p><p><a href="https://www.bilibili.com/read/cv22431778/?spm_id_from=333.976.0.0">《求生之路2》绝境导演系统个人理解</a></p><p>像《无主之地》、《求生之路》这类游戏，怪物的 AI 是怎么做的？ - 界外魔阿历克斯的回答 - 知乎<br><a href="https://www.zhihu.com/question/34952657/answer/61143671">https://www.zhihu.com/question/34952657/answer/61143671</a></p><p><a href="https://blog.csdn.net/wangjianxin97/article/details/98108118">[翻译] 求生之路AI系统讲稿</a></p><p><a href="https://cowlevel.net/question/1901140/answer/2145386"><a href="https://cowlevel.net/question/1901140">如何设计游戏内自动调节难度的系统？</a></a></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于回合制与即时战略游戏的思考</title>
    <link href="/2024/05/07/%E5%85%B3%E4%BA%8E%E5%9B%9E%E5%90%88%E5%88%B6%E4%B8%8E%E5%8D%B3%E6%97%B6%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2024/05/07/%E5%85%B3%E4%BA%8E%E5%9B%9E%E5%90%88%E5%88%B6%E4%B8%8E%E5%8D%B3%E6%97%B6%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>你为什么喜欢即时战略游戏而非回合制战略游戏？ - 知乎用户DZCtRJ的回答 - 知乎<br><a href="https://www.zhihu.com/question/397995469/answer/1287141890">https://www.zhihu.com/question/397995469/answer/1287141890</a></p><p>回合制玩法明明是历史产物，为什么仍然有人会认为回合制玩法的游戏没过时？ - dumplingpro的回答 - 知乎<br><a href="https://www.zhihu.com/question/584885624/answer/2900602981">https://www.zhihu.com/question/584885624/answer/2900602981</a></p><p>RTS游戏与回合制游戏的区别主要体现在哪里？ - 安吉拉齐格勒的回答 - 知乎<br><a href="https://www.zhihu.com/question/554197271/answer/2680436410">https://www.zhihu.com/question/554197271/answer/2680436410</a></p><p><a href="http://kaede1130zero.blog.fc2.com/blog-entry-73.html">回合制 vs 即時制（上）：過去至今的變化</a></p><p><a href="http://kaede1130zero.blog.fc2.com/blog-entry-74.html">回合制 vs 即時制（下）：經驗值的去向</a></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派安装 VSCode</title>
    <link href="/2024/04/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85-VSCode/"/>
    <url>/2024/04/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85-VSCode/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update   <span class="hljs-comment">#检查更新</span><br><span class="hljs-built_in">sudo</span> apt upgrade  <span class="hljs-comment">#进行更新</span><br><span class="hljs-built_in">sudo</span> apt install code -y  <span class="hljs-comment">#安装VSCode</span><br></code></pre></td></tr></table></figure><p>之后在 Programming 中可以找到 VSCode</p><p>参考：<a href="https://blog.csdn.net/weixin_43409012/article/details/128130642">树莓派安装VScode最简单方法</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>清华大学 PyPI 镜像</title>
    <link href="/2024/04/16/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-PyPI-%E9%95%9C%E5%83%8F/"/>
    <url>/2024/04/16/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-PyPI-%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 里如何退出 nano 编辑器</title>
    <link href="/2024/04/15/Linux-%E9%87%8C%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA-nano-%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2024/04/15/Linux-%E9%87%8C%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA-nano-%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<ol><li><p>如果你要保存所做的修改，按下 Ctrl+O</p></li><li><p>想要退出，按下 Ctrl+X</p><ol><li>如果你退出前没有保存所做的修改，它会提示你是否要保存；如果不要，请按N，反之，则按Y；然后它会让你确认要保存的文件名，确认或修改后按 Enter 即可</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派安装 Conda</title>
    <link href="/2024/04/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85-Conda/"/>
    <url>/2024/04/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85-Conda/</url>
    
    <content type="html"><![CDATA[<h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p>安装 Conda 的流程按照 <a href="https://blog.csdn.net/qq_45266796/article/details/115128171">树莓派学习（二） 安装anaconda</a> 进行即可。</p><h3 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h3><p>在安装完成输入指令 <code>conda list</code> 提示</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">bash:</span> conda: command not found<br></code></pre></td></tr></table></figure><p>解决方案参考 <a href="https://blog.csdn.net/weixin_39589455/article/details/128620393">树莓派上如何安装anaconda&#x2F;miniconda环境配置</a> 中提到的添加 <code>.bashrc</code> 配置。</p><p>里面用到的是 vim，但是我参考了这篇文章 <a href="https://blog.csdn.net/aizsa111/article/details/134225047">树莓派3b | Raspberry Pi OS系统 | 安装conda环境、pytorch及opencv</a>，而这里面用到的是 nano 编辑器。</p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano ~/.bashrc<br></code></pre></td></tr></table></figure><p>然后在末尾加入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/home/pi/miniconda3/bin:<span class="hljs-variable">$PATH</span>&quot;</span>我写入的是这个<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/home/pi/miniconda3/bin:&quot;</span><span class="hljs-variable">$PATH</span>但也有说这个的<br></code></pre></td></tr></table></figure><p>保存，然后更新配置即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>在创建环境时，报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">AttributeError:<span class="hljs-string">&#x27;SSLError&#x27;</span> <span class="hljs-keyword">object</span> has <span class="hljs-keyword">no</span> <span class="hljs-keyword">attribute</span> <span class="hljs-string">&#x27;message&#x27;</span><br></code></pre></td></tr></table></figure><p>解决办法，关闭 SSL 验证：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">conda<span class="hljs-built_in"> config </span>--<span class="hljs-built_in">set</span> ssl_verify <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://blog.csdn.net/weixin_39589455/article/details/128620393">树莓派上如何安装anaconda&#x2F;miniconda环境配置</a></li><li><a href="https://github.com/conda/conda/issues/11739">AttributeError: ‘SSLError’ object has no attribute ‘message’</a></li></ol><p>此后会继续报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>No packages found in current linux-armv7l channels matching: python ==3.9<br></code></pre></td></tr></table></figure><p>根据 <a href="https://blog.csdn.net/weixin_39589455/article/details/128620393">树莓派上如何安装anaconda&#x2F;miniconda环境配置</a> 中提到的，输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">conda<span class="hljs-built_in"> config </span>--<span class="hljs-built_in">add</span> channels rpi<br></code></pre></td></tr></table></figure><p>但是无效。</p><p>从 <a href="https://blog.csdn.net/weixin_44596902/article/details/122512641">树莓派miniconda 升级 python 版本</a> 得知，miniconda 只支持 3.6 版本的 python。</p><p>自此所有问题已经得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Anaconda</tag>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文丘里喷嘴通过差压测量流量</title>
    <link href="/2024/04/11/%E6%96%87%E4%B8%98%E9%87%8C%E5%96%B7%E5%98%B4%E9%80%9A%E8%BF%87%E5%B7%AE%E5%8E%8B%E6%B5%8B%E9%87%8F%E6%B5%81%E9%87%8F/"/>
    <url>/2024/04/11/%E6%96%87%E4%B8%98%E9%87%8C%E5%96%B7%E5%98%B4%E9%80%9A%E8%BF%87%E5%B7%AE%E5%8E%8B%E6%B5%8B%E9%87%8F%E6%B5%81%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>通过差压传感器测量气体流量时，需要用到文丘里管的结构。</p><p>工作原理如下：</p><p><a href="https://www.bilibili.com/video/BV1JV411m7gx/?spm_id_from=333.337.search-card.all.click&vd_source=e6f379136d38211008ce7d13802d4571">差压流量测量原理（孔板-喷嘴-文丘里管）</a></p><p>原视频：</p><p><a href="https://www.youtube.com/watch?v=oUd4WxjoHKY">The Differential Pressure Flow Measuring Principle (Orifice-Nozzle-Venturi)</a></p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sensor</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DIY 呼吸代谢监测系统</title>
    <link href="/2024/04/09/DIY-%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/04/09/DIY-%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>我自己 DIY 的呼吸代谢检测系统属于混合气室法（mixing chamber），网上也有进行了 DIY，不过他们采用的是逐步呼吸法（breath by breath）。</p><ul><li><a href="https://www.instructables.com/Accurate-VO2-Max-for-Zwift-and-Strava/">Accurate VO2 Max for Zwift and Strava</a></li><li><a href="https://www.instructables.com/Real-VO2Max-Measure-Your-Athletic-Potential/">Real VO2Max–Measure Your Athletic Potential</a></li><li><a href="https://www.instructables.com/3D-Printed-Snorkel/">3D Printed Snorkel</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>代谢计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>Sensor</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib 组件之间的层级关系</title>
    <link href="/2024/04/08/matplotlib-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/"/>
    <url>/2024/04/08/matplotlib-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3><p>可参考 <a href="https://www.zhihu.com/tardis/zm/art/139052035?source_id=1003">matplotlib.pyplot的使用总结大全</a></p><p>两种示例用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_ACC</span>(<span class="hljs-params">path</span>):<br>    df = pd.read_csv(path)<br>    <span class="hljs-built_in">print</span>(df)<br>    fig, axes = plt.subplots(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>))<br><br>    axes[<span class="hljs-number">0</span>].scatter(df[<span class="hljs-string">&#x27;Timestamp&#x27;</span>], df[<span class="hljs-string">&#x27;X&#x27;</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;X Acc&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].set_ylabel(<span class="hljs-string">&#x27;g or mg&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].legend(loc=<span class="hljs-number">2</span>)<br><br>    axes[<span class="hljs-number">1</span>].scatter(df[<span class="hljs-string">&#x27;Timestamp&#x27;</span>], df[<span class="hljs-string">&#x27;Y&#x27;</span>], c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;2&#x27;</span>, label=<span class="hljs-string">&#x27;Y Acc&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].set_ylabel(<span class="hljs-string">&#x27;g or mg&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].legend(loc=<span class="hljs-number">2</span>)<br><br>    axes[<span class="hljs-number">2</span>].scatter(df[<span class="hljs-string">&#x27;Timestamp&#x27;</span>], df[<span class="hljs-string">&#x27;Z&#x27;</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;3&#x27;</span>, label=<span class="hljs-string">&#x27;Z Acc&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].set_ylabel(<span class="hljs-string">&#x27;g or mg&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_ECG</span>(<span class="hljs-params">path</span>):<br>    df = pd.read_csv(path)<br>    <span class="hljs-built_in">print</span>(df)<br>    fig = plt.figure(figsize=(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>))<br>    ax = fig.add_subplot()<br>    ax.scatter(df[<span class="hljs-string">&#x27;Timestamp&#x27;</span>], df[<span class="hljs-string">&#x27;ECG&#x27;</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;ECG&#x27;</span>)<br>    ax.set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">&#x27;mV&#x27;</span>)<br>    ax.legend(loc=<span class="hljs-number">2</span>)<br><br><br>iPhone_path = <span class="hljs-string">&#x27;20240128/CSV/iPhone_ACC_date.csv_CUT/9.csv&#x27;</span><br>Polar_ACC_path = <span class="hljs-string">&#x27;20240128/CSV/Polar_ACC_date.csv_CUT/9.csv&#x27;</span><br>Polar_ECG_path = <span class="hljs-string">&#x27;20240128/CSV/Polar_ECG_date.csv_CUT/9.csv&#x27;</span><br><br>plot_ECG(Polar_ECG_path)<br>plot_ACC(iPhone_path)<br>plot_ACC(Polar_ACC_path)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>关于 <a href="https://blog.csdn.net/weixin_43412878/article/details/109561021">legend()中loc的用法</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel">legend 主要用来设置图例相关的内容，其中 loc 用来表示图例的具体位置，他的可选的参数可以是字符，也可以是数字，默认情况下是 <span class="hljs-number">0</span>（即 best），参数及意思如下：<br><span class="hljs-symbol">0:</span> ‘best’ （自动寻找最好的位置）<br><span class="hljs-symbol">1:</span> ‘<span class="hljs-built_in">upper</span> <span class="hljs-built_in">right</span>’ （右上角）<br><span class="hljs-symbol">2:</span> ‘<span class="hljs-built_in">upper</span> <span class="hljs-built_in">left</span>’ （左上角）<br><span class="hljs-symbol">3:</span> ‘<span class="hljs-built_in">lower</span> <span class="hljs-built_in">left</span>’ （左下角）<br><span class="hljs-symbol">4:</span> ‘<span class="hljs-built_in">lower</span> <span class="hljs-built_in">right</span>’ （右下角）<br><span class="hljs-symbol">5:</span> ‘<span class="hljs-built_in">right</span>’ （右边中间）<br><span class="hljs-symbol">6:</span> ‘center <span class="hljs-built_in">left</span>’ （左边中间）<br><span class="hljs-symbol">7:</span> ‘center <span class="hljs-built_in">right</span>’ （右边中间）<br><span class="hljs-symbol">8:</span> ‘<span class="hljs-built_in">lower</span> center’ （中间最下面）<br><span class="hljs-symbol">9:</span> ‘<span class="hljs-built_in">upper</span> center’ （中间最上面）<br><span class="hljs-symbol">10:</span> ‘center’ （正中心）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 SensorKit 获取 iWatch 的 PPG 信号</title>
    <link href="/2024/04/03/%E4%BD%BF%E7%94%A8-SensorKit-%E8%8E%B7%E5%8F%96-iWatch-%E7%9A%84-PPG-%E4%BF%A1%E5%8F%B7/"/>
    <url>/2024/04/03/%E4%BD%BF%E7%94%A8-SensorKit-%E8%8E%B7%E5%8F%96-iWatch-%E7%9A%84-PPG-%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://developer.apple.com/documentation/sensorkit/configuring_your_project_for_sensor_reading">Configuring your project for sensor reading</a></p><h3 id="第一步，配置描述文件"><a href="#第一步，配置描述文件" class="headerlink" title="第一步，配置描述文件"></a>第一步，配置描述文件</h3><p><a href="https://developer.apple.com/documentation/sensorkit/configuring_your_project_for_sensor_reading#3680788">Create a manual provisioning profile</a></p><h4 id="注册-App-ID"><a href="#注册-App-ID" class="headerlink" title="注册 App ID"></a>注册 App ID</h4><p><a href="https://developer.apple.com/cn/help/account/manage-identifiers/register-an-app-id">注册 App ID</a></p><h4 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h4><p><a href="https://developer.apple.com/cn/help/account/create-certificates/create-a-certificate-signing-request/">创建证书签名请求</a></p><h4 id="注册设备"><a href="#注册设备" class="headerlink" title="注册设备"></a>注册设备</h4><p><a href="https://developer.apple.com/cn/help/account/register-devices/register-a-single-device">注册一台设备</a></p><p><a href="https://developer.apple.com/documentation/xcode/distributing-your-app-to-registered-devices">获取设备UDID</a>，在 Xcode 中获取就好。</p><h4 id="创建并下载描述文件"><a href="#创建并下载描述文件" class="headerlink" title="创建并下载描述文件"></a>创建并下载描述文件</h4><p><a href="https://developer.apple.com/cn/help/account/manage-profiles/create-a-development-provisioning-profile/">创建开发预置描述文件</a></p><h3 id="第二步，配置-plist"><a href="#第二步，配置-plist" class="headerlink" title="第二步，配置 plist"></a>第二步，配置 plist</h3><p><a href="https://developer.apple.com/documentation/sensorkit/configuring_your_project_for_sensor_reading#3680789">Configure Xcode for signing</a></p><p>创建 <code>.entitlements</code> 文件：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">在 <span class="hljs-variable">Xcode</span> <span class="hljs-number">12</span> 中创建 <span class="hljs-variable">entitlements</span> 文件可以按照以下步骤进行：<br><br><span class="hljs-number">1.</span>打开 <span class="hljs-variable">Xcode</span> <span class="hljs-number">12</span> 并打开您的项目。<br><span class="hljs-number">2.</span>从左侧导航栏中选择您的项目文件，然后在 <span class="hljs-variable">Targets</span> 下选择您的应用程序目标。<br><span class="hljs-number">3.</span>选择 <span class="hljs-variable">Signing</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">Capabilities</span> 标签页。<br><span class="hljs-number">4.</span>单击 <span class="hljs-operator">+</span><span class="hljs-variable">Capability</span> 按钮以添加新功能。<br><span class="hljs-number">5.</span>搜索 <span class="hljs-variable">App</span> <span class="hljs-variable">Sandbox</span> 并选择它。<br><span class="hljs-number">6.</span>启用 <span class="hljs-variable">App</span> <span class="hljs-variable">Sandbox</span> 功能后，您将看到一个名为 <span class="hljs-variable">App</span> <span class="hljs-variable">Sandbox</span> 的菜单。单击它以展开菜单。<br><span class="hljs-number">7.</span>您将看到一个名为 <span class="hljs-variable">Entitlements</span> 的选项。启用此选项后，将自动创建一个名为 <span class="hljs-variable">YourApp</span><span class="hljs-operator">.</span><span class="hljs-variable">entitlements</span> 的文件。<br><br>这个<span class="hljs-variable">entitlements</span>文件是自动创建的，但如果您需要自己创建<span class="hljs-variable">entitlements</span>文件，可以按照以下步骤进行：<br><br>在<span class="hljs-variable">Xcode</span>中选择您的项目文件。<br><span class="hljs-number">1.</span>单击 <span class="hljs-built_in">File</span> <span class="hljs-operator">&gt;</span> <span class="hljs-variable">New</span> <span class="hljs-operator">&gt;</span> <span class="hljs-built_in">File</span>…<br><span class="hljs-number">2.</span>选择 <span class="hljs-variable">iOS</span> <span class="hljs-operator">&gt;</span> <span class="hljs-variable">Resource</span> <span class="hljs-operator">&gt;</span> <span class="hljs-built_in">Property</span> <span class="hljs-built_in">List</span><br><span class="hljs-number">3.</span>单击 <span class="hljs-built_in">Next</span>。<br><span class="hljs-number">4.</span>输入文件名并选择要保存的位置。<br><span class="hljs-number">5.</span>单击 <span class="hljs-variable">Create</span> 以创建 <span class="hljs-variable">entitlements</span> 文件。<br><br>创建了 <span class="hljs-variable">entitlements</span> 文件后，您可以在 <span class="hljs-variable">Signing</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">Capabilities</span> 标签页中将其添加到您的应用程序目标中。记得确保 <span class="hljs-variable">entitlements</span> 文件中包含所需的权限和功能，否则您的应用程序可能无法正常工作。<br></code></pre></td></tr></table></figure><p>按照教程中说的进行配置后，报错。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;/Users/bakako/Library/Mobile Documents/com~apple~CloudDocs/Developer/RunningDataRecording/RunningDataRecording.entitlements&quot;</span> could <span class="hljs-keyword">not</span> be opened.<br><br>Verify <span class="hljs-keyword">the</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> CODE_SIGN_ENTITLEMENTS build setting <span class="hljs-keyword">for</span> target <span class="hljs-string">&quot;RunningDataRecording&quot;</span> is correct <span class="hljs-keyword">and</span> that <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> exists <span class="hljs-keyword">on</span> <span class="hljs-title">disk</span>.<br></code></pre></td></tr></table></figure><p>发现是在注册 App ID 选择 Capabilities 时没有勾选 SensorKit。</p><p>但找了半天也没有发现 SensorKit，然后在 <a href="https://www.researchandcare.org/resources/accessing-sensorkit-data/">Accessing SensorKit Data</a> 中知道，必须向苹果申请，且苹果通过后才会给你开通 SensorKit。</p><p>项目夭折！！！</p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sensor</tag>
      
      <tag>PPG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自编码 Autoencoder</title>
    <link href="/2024/03/28/%E8%87%AA%E7%BC%96%E7%A0%81-Autoencoder/"/>
    <url>/2024/03/28/%E8%87%AA%E7%BC%96%E7%A0%81-Autoencoder/</url>
    
    <content type="html"><![CDATA[<p>可参考：</p><ol><li><a href="https://yulizi123.github.io/tutorials/machine-learning/torch/4-04-autoencoder/">AutoEncoder (自编码&#x2F;非监督学习)</a></li><li><a href="https://yulizi123.github.io/tutorials/machine-learning/ML-intro/2-5-autoencoder/">自编码 (Autoencoder)</a></li></ol><p>其中，有提到：</p><blockquote><p>到了真正使用自编码的时候，通常只会用到自编码前半部分。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间序列数据集</title>
    <link href="/2024/03/28/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2024/03/28/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><a href="http://www.timeseriesclassification.com/dataset.php">Time Series Classification</a></p><p><a href="https://www.cs.ucr.edu/~eamonn/time_series_data_2018/">UCR Time Series Classification Archive</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dataset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 统计数组不重复值的个数</title>
    <link href="/2024/03/28/Python-%E7%BB%9F%E8%AE%A1%E6%95%B0%E7%BB%84%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%80%BC%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/03/28/Python-%E7%BB%9F%E8%AE%A1%E6%95%B0%E7%BB%84%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%80%BC%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>unique_count = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(my_list))<br><span class="hljs-built_in">print</span>(unique_count)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DTC 模型时间序列聚类</title>
    <link href="/2024/03/21/DTC-%E6%A8%A1%E5%9E%8B%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E8%81%9A%E7%B1%BB/"/>
    <url>/2024/03/21/DTC-%E6%A8%A1%E5%9E%8B%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E8%81%9A%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="DeepTemporalClustering"><a href="#DeepTemporalClustering" class="headerlink" title="DeepTemporalClustering"></a>DeepTemporalClustering</h2><p>项目地址：<a href="https://github.com/FlorentF9/DeepTemporalClustering">DeepTemporalClustering</a></p><h3 id="默认运行"><a href="#默认运行" class="headerlink" title="默认运行"></a>默认运行</h3><h4 id="报错-1"><a href="#报错-1" class="headerlink" title="报错 1"></a>报错 1</h4><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sml"><span class="hljs-symbol">&#x27;kullback</span> leibler divergence&#x27; from <span class="hljs-symbol">&#x27;keras</span>.losses&#x27; <br></code></pre></td></tr></table></figure><p>求 KL 散度，解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> keras.losses <span class="hljs-keyword">import</span> kullback_leibler_divergence<br><span class="hljs-comment"># 改为</span><br><span class="hljs-keyword">from</span> keras.losses <span class="hljs-keyword">import</span> kl_divergence<br></code></pre></td></tr></table></figure><h4 id="报错-2"><a href="#报错-2" class="headerlink" title="报错 2"></a>报错 2</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">No <span class="hljs-keyword">module</span> named <span class="hljs-string">&#x27;keras.engine&#x27;</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> keras.engine.topology <span class="hljs-keyword">import</span> Layer, InputSpec<br><span class="hljs-comment"># 改为</span><br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> Layer<br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> InputSpec<br></code></pre></td></tr></table></figure><h4 id="报错-3"><a href="#报错-3" class="headerlink" title="报错 3"></a>报错 3</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cannot <span class="hljs-keyword">import</span> <span class="hljs-type">name</span> <span class="hljs-string">&#x27;CuDNNLSTM&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;keras.layers&#x27;</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> CuDNNLSTM<br><span class="hljs-comment"># 改为</span><br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> LSTM<br><span class="hljs-comment"># 上面是需要 CUDA 环境</span><br></code></pre></td></tr></table></figure><p>而且参考：<a href="https://github.com/FlorentF9/DeepTemporalClustering/issues/15">CuDNNLSTM not found</a></p><h4 id="报错-4"><a href="#报错-4" class="headerlink" title="报错 4"></a>报错 4</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">The filename must end in `.weights.h5`.<br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># self.model.save_weights(save_dir + &#x27;/DTC_model_&#x27; + str(epoch) + &#x27;.h5&#x27;)</span><br><span class="hljs-variable language_">self</span>.model.save_weights(save_dir + <span class="hljs-string">&#x27;/DTC_model_&#x27;</span> + <span class="hljs-built_in">str</span>(epoch) + <span class="hljs-string">&#x27;.weights.h5&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="报错-5"><a href="#报错-5" class="headerlink" title="报错 5"></a>报错 5</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">module</span> <span class="hljs-string">&#x27;keras.backend&#x27;</span> has <span class="hljs-literal">no</span> attribute <span class="hljs-string">&#x27;sum&#x27;</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> keras.backend <span class="hljs-keyword">as</span> K <br><span class="hljs-comment"># or from keras import backend as K</span><br><span class="hljs-comment"># 改为</span><br><span class="hljs-keyword">import</span> keras.src.legacy.backend <span class="hljs-keyword">as</span> K<br></code></pre></td></tr></table></figure><p>后端函数的路径修改了</p><h4 id="报错-6"><a href="#报错-6" class="headerlink" title="报错 6"></a>报错 6</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">TypeError: <span class="hljs-string">&#x27;float&#x27;</span> <span class="hljs-keyword">object</span> <span class="hljs-keyword">is</span> not subscriptable<br></code></pre></td></tr></table></figure><p>如果你在一个不可索引的浮动变量上使用方括号符号进行索引或切片，Python 会引发 <code>TypeError: &#39;float&#39; object is not subscriptable</code> </p><p>问题的原因在于 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.heatmap:<br>loss = <span class="hljs-variable language_">self</span>.model.evaluate(X_train, [X_train, p, p], batch_size=batch_size, verbose=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">else</span>:<br>loss = <span class="hljs-variable language_">self</span>.model.evaluate(X_train, [X_train, p], batch_size=batch_size, verbose=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p><code>evaluate</code> 返回的应该是一个数组。只有这样在才能取到值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">logdict[<span class="hljs-string">&#x27;L&#x27;</span>] = loss[<span class="hljs-number">0</span>]<br>logdict[<span class="hljs-string">&#x27;Lr&#x27;</span>] = loss[<span class="hljs-number">1</span>]<br>logdict[<span class="hljs-string">&#x27;Lc&#x27;</span>] = loss[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>通过 <code>metrics_names</code> 查看也能知道只返回了一个值，参考</p><ol><li><a href="https://www.jianshu.com/p/5da582d23391">Keras中的model.evaluate()返回了什么值</a></li><li><a href="https://www.volcengine.com/theme/8358706-D-7-1">当尝试从Keras神经网络的mode.evaluate中返回多个指标的值时出现错误。</a></li><li><a href="https://geek-docs.com/python/python-ask-answer/195_python_what_values_are_returned_from_modelevaluate_in_keras.html">Python Keras中model.evaluate()返回了哪些值</a></li><li><a href="https://keras-zh.readthedocs.io/models/sequential/">Sequential 模型 API</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.model.metrics_names)<br><br><span class="hljs-comment"># &gt;&gt; [&#x27;loss&#x27;]</span><br></code></pre></td></tr></table></figure><p>目前已知：</p><ol><li><code>print(self.model.metrics_names)</code> 可以打印 loss 的标签；</li><li><code>model.evaluate</code> 具体返回多少个值是不确定的，如果在 complie 的时候没有指定 metrics 的话，默认只有 loss 一个返回值。</li></ol><p>现在看 model 的 complie 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.model.<span class="hljs-built_in">compile</span>(loss=[<span class="hljs-string">&#x27;mse&#x27;</span>, <span class="hljs-string">&#x27;kld&#x27;</span>],<span class="hljs-comment"># kld：KL散度， mse：MSE 均方误差</span><br>                   loss_weights=[<span class="hljs-number">1.0</span>, gamma],<br>                   optimizer=optimizer)<br></code></pre></td></tr></table></figure><p>这里没有指定 metrics 但是指定了两个 loss。</p><p>从 <a href="https://www.rvmcu.com/column-topic-id-1677.html">keras常用的损失函数Losses与评价函数Metrics</a> 中可以知道：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mse</span> 为 MSE 均方误差<br>kld 为 KL 散度<br></code></pre></td></tr></table></figure><p>另外 loss 也是支持 [loss1, loss2, loss3] 的这种格式，参考：</p><ol><li><a href="https://juejin.cn/s/keras%E5%A4%9A%E4%B8%AAloss%E5%90%8C%E6%97%B6%E4%BC%98%E5%8C%96">keras多个loss同时优化</a></li><li><a href="https://mikito.mythsman.com/post/5da44e775ed28235d7573581/">tf.keras多输出和自定义loss</a></li><li><a href="https://blog.csdn.net/Fwuyi/article/details/125166195">keras自定义loss</a></li></ol><p>但还是不知道为何只返回了一个值……</p><p>临时解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.model.<span class="hljs-built_in">compile</span>(loss=[<span class="hljs-string">&#x27;mse&#x27;</span>, <span class="hljs-string">&#x27;kld&#x27;</span>],<span class="hljs-comment"># kld：KL散度， mse：MSE 均方误差</span><br>                   metrics=[<span class="hljs-string">&#x27;mse&#x27;</span>],<br>                   loss_weights=[<span class="hljs-number">1.0</span>, gamma],<br>                   optimizer=optimizer)<br></code></pre></td></tr></table></figure><p>这样的话，就不会报错了……</p><h4 id="报错-7"><a href="#报错-7" class="headerlink" title="报错 7"></a>报错 7</h4><p>更换数据集后报错：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">assert</span><span class="hljs-params">(timesteps % pool_size == <span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><p>解决办法：</p><p>调整 <code>pool_size</code> 保证时间戳可以整除池化</p><h4 id="报错-8"><a href="#报错-8" class="headerlink" title="报错 8"></a>报错 8</h4><p>开启 <code>heatmap</code> 报错：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ValueError: The <span class="hljs-type">name</span> &quot;reshape&quot; <span class="hljs-keyword">is</span> used <span class="hljs-number">2</span> times <span class="hljs-keyword">in</span> the model. <span class="hljs-keyword">All</span> operation names should be <span class="hljs-keyword">unique</span>.<br></code></pre></td></tr></table></figure><h3 id="使用-heatmap-运行"><a href="#使用-heatmap-运行" class="headerlink" title="使用 heatmap 运行"></a>使用 heatmap 运行</h3><h4 id="报错-9"><a href="#报错-9" class="headerlink" title="报错 9"></a>报错 9</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ValueError: The <span class="hljs-type">name</span> &quot;reshape&quot; <span class="hljs-keyword">is</span> used <span class="hljs-number">2</span> times <span class="hljs-keyword">in</span> the model. <span class="hljs-keyword">All</span> layer names should be <span class="hljs-keyword">unique</span>.<br></code></pre></td></tr></table></figure><p>找到这块代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.heatmap:<br>    n_heatmap_filters = <span class="hljs-variable language_">self</span>.n_clusters  <span class="hljs-comment"># one heatmap (class activation map) per cluster</span><br>    encoded = <span class="hljs-variable language_">self</span>.encoder.output<br><br><span class="hljs-comment"># heatmap_layer = Reshape((-1, 1, self.n_units[1]))(encoded)</span><br><span class="hljs-comment"># 取个名字即可</span><br>    heatmap_layer = Reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.n_units[<span class="hljs-number">1</span>]), name=<span class="hljs-string">&#x27;1&#x27;</span>)(encoded)<br>    heatmap_layer = UpSampling2D((<span class="hljs-variable language_">self</span>.pool_size, <span class="hljs-number">1</span>))(heatmap_layer)<br>    heatmap_layer = Conv2DTranspose(n_heatmap_filters, (<span class="hljs-variable language_">self</span>.kernel_size, <span class="hljs-number">1</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)(heatmap_layer)<br>    <span class="hljs-comment"># The next one is the heatmap layer we will visualize</span><br><br>    heatmap_layer = Reshape((-<span class="hljs-number">1</span>, n_heatmap_filters), name=<span class="hljs-string">&#x27;Heatmap&#x27;</span>)(heatmap_layer)<br>    heatmap_output_layer = GlobalAveragePooling1D()(heatmap_layer)<br>    <span class="hljs-comment"># A dense layer must be added only if `n_heatmap_filters` is different from `n_clusters`</span><br>    <span class="hljs-comment"># heatmap_output_layer = Dense(self.n_clusters, activation=&#x27;relu&#x27;)(heatmap_output_layer)</span><br>    heatmap_output_layer = Softmax()(heatmap_output_layer)  <span class="hljs-comment"># normalize activations with softmax</span><br></code></pre></td></tr></table></figure><h4 id="报错-10"><a href="#报错-10" class="headerlink" title="报错 10"></a>报错 10</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">AttributeError: <span class="hljs-keyword">module</span> <span class="hljs-string">&#x27;keras.backend&#x27;</span> <span class="hljs-keyword">has</span> no attribute <span class="hljs-string">&#x27;variable&#x27;</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.heatmap_loss_weight = K.variable(<span class="hljs-variable language_">self</span>.initial_heatmap_loss_weight)<br><span class="hljs-comment"># 改为</span><br><span class="hljs-variable language_">self</span>.heatmap_loss_weight = keras.src.legacy.backend.variable(<span class="hljs-variable language_">self</span>.initial_heatmap_loss_weight)<br></code></pre></td></tr></table></figure><p>参考报错 5</p><h4 id="报错-11"><a href="#报错-11" class="headerlink" title="报错 11"></a>报错 11</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">AttributeError: <span class="hljs-keyword">module</span> <span class="hljs-string">&#x27;keras.backend&#x27;</span> <span class="hljs-keyword">has</span> no attribute <span class="hljs-string">&#x27;set_value&#x27;</span><br></code></pre></td></tr></table></figure><p>同理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">K.set_value(<span class="hljs-variable language_">self</span>.heatmap_loss_weight, <span class="hljs-variable language_">self</span>.final_heatmap_loss_weight)<br><span class="hljs-comment"># 改为</span><br>keras.src.legacy.backend.set_value(<span class="hljs-variable language_">self</span>.heatmap_loss_weight, <span class="hljs-variable language_">self</span>.final_heatmap_loss_weight)<br></code></pre></td></tr></table></figure><h2 id="Deep-temporal-clustering"><a href="#Deep-temporal-clustering" class="headerlink" title="Deep-temporal-clustering"></a>Deep-temporal-clustering</h2><p>项目地址：<a href="https://github.com/HamzaG737/Deep-temporal-clustering">Deep-temporal-clustering</a></p><h3 id="默认运行-1"><a href="#默认运行-1" class="headerlink" title="默认运行"></a>默认运行</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 train<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--similarity</span> <span class="hljs-string">&#x27;CID&#x27;</span> <span class="hljs-attr">--pool</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>可以获得结果</p><h3 id="使用-CBF-数据集"><a href="#使用-CBF-数据集" class="headerlink" title="使用 CBF 数据集"></a>使用 CBF 数据集</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 train<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--dataset_name</span> <span class="hljs-string">&#x27;CBF&#x27;</span> <span class="hljs-attr">--similarity</span> <span class="hljs-string">&#x27;CID&#x27;</span> <span class="hljs-attr">--pool</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h4 id="报错-1-1"><a href="#报错-1-1" class="headerlink" title="报错 1"></a>报错 1</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">ValueError: multi_<span class="hljs-keyword">class</span> <span class="hljs-title class_">must</span> be <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;ovo&#x27;</span>, <span class="hljs-string">&#x27;ovr&#x27;</span>)<br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">roc_auc = roc_auc_score(y_test, preds)<br><span class="hljs-comment"># 改为</span><br>roc_auc = roc_auc_score(y_test, preds, multi_class=<span class="hljs-string">&#x27;ovr&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 的整型不会溢出</title>
    <link href="/2024/03/13/Python-%E7%9A%84%E6%95%B4%E5%9E%8B%E4%B8%8D%E4%BC%9A%E6%BA%A2%E5%87%BA/"/>
    <url>/2024/03/13/Python-%E7%9A%84%E6%95%B4%E5%9E%8B%E4%B8%8D%E4%BC%9A%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>在 Python 中，整数的大小是动态的，即 Python 可以自动调整整数的大小以适应其值。这种处理整数的方式被称为“任意精度算术”，它使得 Python 的整数可以存储任意大小的值，因此不会出现溢出的情况。任意精度算术的实现方式是使用大数运算库，这种库可以动态地分配和释放内存以存储整数的值，从而避免了 C++ 中整数类型大小的限制。</p><p>另外，Python 还提供了一种叫做“长整数”的整数类型，它可以存储更大的整数值，甚至超过了计算机硬件的限制。当 Python 中的整数超过了其原始大小限制时，它会自动转换为长整数类型，从而继续进行计算，而不会溢出。</p><p>简单来说，Python 中的 int 类型不像 C&#x2F;C++ 中的 int（32位，__int64：64位），Python int 支持任意精度（arbitrary precision）。</p><p>对于一个足够大的数，想要让 C&#x2F;C++ 显示结果，是比较麻烦的，对 __int64 类型变量而言，必然发生类型的截断。但是在 Python 中却不会发生。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 读取文件夹下的文件</title>
    <link href="/2024/03/12/Python-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <url>/2024/03/12/Python-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">path = <span class="hljs-string">&#x27;&#x27;</span><br>files = os.listdir(path)    <span class="hljs-comment"># 读取文件夹下的文件名称</span><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> files:<br>  <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file_name, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>      <span class="hljs-comment"># 相关操作</span><br>      data = json.load(file)<span class="hljs-comment"># json</span><br>      data = file.readlines()<span class="hljs-comment"># txt</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在恒定功率运动下关于通气阈、乳酸阈等的详细说明</title>
    <link href="/2024/03/07/%E5%9C%A8%E6%81%92%E5%AE%9A%E5%8A%9F%E7%8E%87%E8%BF%90%E5%8A%A8%E4%B8%8B%E5%85%B3%E4%BA%8E%E9%80%9A%E6%B0%94%E9%98%88%E3%80%81%E4%B9%B3%E9%85%B8%E9%98%88%E7%AD%89%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/"/>
    <url>/2024/03/07/%E5%9C%A8%E6%81%92%E5%AE%9A%E5%8A%9F%E7%8E%87%E8%BF%90%E5%8A%A8%E4%B8%8B%E5%85%B3%E4%BA%8E%E9%80%9A%E6%B0%94%E9%98%88%E3%80%81%E4%B9%B3%E9%85%B8%E9%98%88%E7%AD%89%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>从原理方面进行解释：<strong>当个体以「较低」恒定功率进行运动时，最终身体会从有氧运动状态进入到无氧运动状态。</strong></p><p>首先在不讨论内能、电能等能量消耗和损失的情况下，可以建立起一个简单的运动模型：<br>$$<br>\frac{运动的机械能 + 稳定姿态消耗能量+稳定内环境消耗能量}{有氧呼吸供能+无氧呼吸供能}&#x3D;1<br>$$</p><h3 id="VO2-slow-component"><a href="#VO2-slow-component" class="headerlink" title="VO2 slow component"></a>VO2 slow component</h3><p>恒定功率运动随着时间的增加，会出现所谓的「心率漂移」或者「VO2 slow component」，也就是人体摄氧量上升的现象。</p><p>即在「公式 1」中，运动的机械能没有产生变化，有氧呼吸与无氧呼吸的供能却在提升。由于「公式 1」中的比值始终为 1，所以可以认为多出来的能量消耗在了别的地方。</p><p>调整一下「公式1」，有：<br>$$<br>k &#x3D; \frac{运动的机械能}{有氧呼吸供能+无氧呼吸供能}<br>$$<br>也就是说，个体进行恒定功率运动，在 VO2 slow component 的影响下，供能持续增加，k 持续衰减。</p><p>其中一个解释是：</p><p>肌肉经济性的下降（需要募集更多肌纤维来维持恒定输出，或单个肌纤维代谢需求上升），这种经济性下降以及摄氧量上升和疲劳关系密切。</p><p>疲劳与肌肉经济性下降都和下面的现象相关：</p><ol><li>ATP 水解的吉布斯自由能下降；</li><li>PCr 和肌糖原浓度下降；</li><li>[H+]、[ADP]、[Pi]、[NH3] 等代谢物质累积。</li></ol><p>VO2 slow component 与 PCr slow component，即与产生力的 PCr 消耗<strong>增加</strong>有关，这可以解释收缩效率<strong>降低</strong>的原因。因此，VO2 slow component 可能与收缩机制效率的<strong>降低</strong>（ ATP&#x2F;功率值的<strong>增加</strong>，产生相同功率需要更多ATP）有关，而不是由于 ATP 生产系统的效率的<strong>降低</strong>（VO2&#x2F;ATP 比值的<strong>增加</strong>）。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/674838646">VO2 slow component相关的摄氧量动力学</a></p><h3 id="有氧呼吸底物的转变"><a href="#有氧呼吸底物的转变" class="headerlink" title="有氧呼吸底物的转变"></a>有氧呼吸底物的转变</h3><p>由上面可以知道 VO2 slow component 的出现意味着人体有氧呼吸供能增加。此时有氧呼吸的底物由脂类向糖原转变，这点可以通过呼吸商进行监控：</p><p>$$<br>RQ &#x3D; \frac{V_{CO_2}}{V_{O_2}}<br>$$</p><p>当 RQ 约等于 0.7 时，可以认为有氧呼吸的底物全是脂类，而当 RQ 约等于 1 时，可以认为有氧呼吸的底物全是糖类。</p><p>RQ 约为 0.85 时，有氧呼吸底物糖类与脂类各占 50%。另外 RQ&#x3D;0.85 也被定义为第一通气阈，VT1。</p><h3 id="糖酵解、三羧酸循环以及乳酸的产生"><a href="#糖酵解、三羧酸循环以及乳酸的产生" class="headerlink" title="糖酵解、三羧酸循环以及乳酸的产生"></a>糖酵解、三羧酸循环以及乳酸的产生</h3><p>糖类作为有氧呼吸底物的第一个步骤就是糖酵解，也就是无氧呼吸（可以说有氧呼吸一定伴随着无氧呼吸）。葡萄糖在细胞质中被分解成丙酮酸，并释放出部分 ATP。这部分 ATP 就是无氧呼吸提供的能量。</p><p>丙酮酸进入线粒体后被转化为乙酰辅酶 A，乙酰辅酶 A 作为有氧呼吸的底物被「三羧酸循环」完全氧化后生成大量的 ATP。这部分 ATP 就是有氧呼吸提供的能量。</p><p>有关丙酮酸的相关反应：<br>$$<br>乳酸 \xleftarrow[还原]{乳酸脱氢酶} 丙酮酸 \xrightarrow[氧化]{丙酮酸脱氢酶} 乙酰辅酶A \xrightarrow[氧化]{} ATP<br>$$<br>丙酮酸还原成乳酸的意义在于重建糖酵解所需要的烟酰腺嘌呤二核苷酸（NAD+）来保持 ATP 的生成。<br>$$<br>丙酮酸 + NADH + H^+ \rightarrow 乳酸 + NAD^+<br>$$<br>如果 NAD+ 没有得到释放，就无法参与到之后的糖酵解过程中。缺少了 NAD+ 糖酵解过程就会被抑制，也就是说 ATP 的生产会被抑制。</p><p>比如说在下面这些情况下：</p><ol><li>运输氧气能力有限（细胞获得氧气不足）；</li><li>处理氧气能力有限（线粒体数量，丙酮酸运输受体数量，酶活性等）。</li></ol><p>这时候丙酮酸脱氢酶无法及时将丙酮酸氧化为乙酰辅酶 A，丙酮酸开始堆积。在这种情况下假如乳酸脱氢酶不将丙酮酸还原为乳酸的话，后续的糖酵解就无法进行下去。</p><h3 id="乳酸"><a href="#乳酸" class="headerlink" title="乳酸"></a>乳酸</h3><p>由于 VO2 slow component 继续作用，有氧呼吸供能加无氧呼吸供能持续提高。</p><p>从上面可以知道，无论是有氧呼吸还是无氧呼吸，都是必须通过糖酵解生成丙酮酸。而内环境为了避免丙酮酸堆积影响 ATP 的生产，会将无法氧化的丙酮酸还原成乳酸，最终体现在血乳酸浓度的增加上。</p><ul><li><p>当血液中的乳酸达到 2mmol&#x2F;L 时，一般认为到达第一乳酸阈，LT1。此时血乳酸浓度会持续增加，但仍然会稳定在一个区间内。</p></li><li><p>当血液中的乳酸达到 4mmol&#x2F;L 时，一般认为到达第一乳酸阈，LT2。此时血乳酸浓度会急速增加。</p></li></ul><p>另外，虽然第二通气阈，也就是 VT2 与 LT2 不完全一致，但两者具有高度相关性。</p><ul><li>临界功率 CP 其实也是在这个拐点出现，而且最好是将临界功率与身体功率挂钩（「公式2」中的分母），而不是运动功率（「公式2」中分子）。</li></ul><p>VT2 出现意味着 RQ 开始大于 1（当身体达到 VO2max 时，RQ 接近 1.15），也就是人体呼出 CO2 的速度要大于吸入 O2 的速度，这个时候身体呼吸加快的目的更多时排出 CO2。</p><p>此时可以认为，身体已经由有氧运动状态进入到了无氧运动状态。</p><p>（关于乳酸的去处，当氧气充足时，乳酸可以在肌肉细胞中被重新氧化为丙酮酸，然后进入三羧酸循环。或者在肝脏内糖异生的过程中通过科里循环转化为葡萄糖）</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 把日期相同的两组数据对齐</title>
    <link href="/2024/03/04/Pandas-%E6%8A%8A%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%90%8C%E7%9A%84%E4%B8%A4%E7%BB%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/"/>
    <url>/2024/03/04/Pandas-%E6%8A%8A%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%90%8C%E7%9A%84%E4%B8%A4%E7%BB%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<p>手上 3 个数据流的开始时间不一致，所以需要对齐数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><br>filepath1 = <span class="hljs-string">&#x27;&#x27;</span><br>filepath2 = <span class="hljs-string">&#x27;&#x27;</span><br> <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> date d1</span><br><span class="hljs-string">2022/5/242350</span><br><span class="hljs-string">2022/5/252340</span><br><span class="hljs-string">2022/5/262340</span><br><span class="hljs-string">2022/5/272325</span><br><span class="hljs-string"></span><br><span class="hljs-string"> date d2</span><br><span class="hljs-string">2022/5/262590</span><br><span class="hljs-string">2022/5/272590</span><br><span class="hljs-string">2022/5/302590</span><br><span class="hljs-string">2022/5/312580</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>df1 = pd.read_csv(filepath1)<br>df2 = pd.read_csv(filepath2)<br>data = pd.merge(df1, df2, on=<span class="hljs-string">&#x27;date&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)  <span class="hljs-comment">#用&quot;outer&quot;属性代表是两组数据的并集，避免丢失数据</span><br><span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">date      d1      d2</span><br><span class="hljs-string">0 2022-05-24  2350.0     NaN</span><br><span class="hljs-string">1 2022-05-25  2340.0     NaN</span><br><span class="hljs-string">2 2022-05-26  2340.0  2590.0</span><br><span class="hljs-string">3 2022-05-27  2325.0  2590.0</span><br><span class="hljs-string">4 2022-05-30     NaN  2590.0</span><br><span class="hljs-string">5 2022-05-31     NaN  2580.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中 os.mkdir() 与 os.makedirs() 的区别及用法</title>
    <link href="/2024/03/03/Python-%E4%B8%AD-os-mkdir-%E4%B8%8E-os-makedirs-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%94%A8%E6%B3%95/"/>
    <url>/2024/03/03/Python-%E4%B8%AD-os-mkdir-%E4%B8%8E-os-makedirs-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>os.mkdir(path)，他的功能是一级一级的创建目录，前提是前面的目录已存在，如果不存在会报异常，比较麻烦，但是存在即有他的道理，当你的目录是根据文件名动态创建的时候，你会发现他虽然繁琐但是很有保障，不会因为你的一时手抖，创建而创建了双层或者多层错误路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br> <br>os.mkdir(<span class="hljs-string">&#x27;d:\hello&#x27;</span>)    <span class="hljs-comment">#  正常</span><br>os.mkdir(<span class="hljs-string">&#x27;d:\hello\hi&#x27;</span>) <span class="hljs-comment">#  正常</span><br> <br><span class="hljs-comment">#  如果d:\hello目录不存在</span><br><span class="hljs-comment">#  则os.mkdir(&#x27;d:\hello\hi&#x27;)执行失败</span><br></code></pre></td></tr></table></figure><p>os.makedirs(path)，单从写法上就能猜出他的区别，他可以一次创建多级目录，哪怕中间目录不存在也能正常的（替你）创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br> <br>os.makedirs(<span class="hljs-string">&#x27;d:\hello&#x27;</span>)    <span class="hljs-comment">#  正常</span><br>os.makedirs(<span class="hljs-string">&#x27;d:\hello\hi&#x27;</span>) <span class="hljs-comment">#  正常</span><br> <br><span class="hljs-comment">#  如果d:\hello目录不存在</span><br><span class="hljs-comment">#  则os.makedirs(&#x27;d:\hello\hi&#x27;)  #  仍然正常</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neurokit 分析心率的简单用法</title>
    <link href="/2024/03/02/Neurokit-%E5%88%86%E6%9E%90%E5%BF%83%E7%8E%87%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    <url>/2024/03/02/Neurokit-%E5%88%86%E6%9E%90%E5%BF%83%E7%8E%87%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/neuropsychology/NeuroKit">NeuroKit</a></p><h3 id="显示-ECG-数据"><a href="#显示-ECG-数据" class="headerlink" title="显示 ECG 数据"></a>显示 ECG 数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> neurokit2 <span class="hljs-keyword">as</span> nk<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;Polar_ECG.csv&#x27;</span>)<br>ecg = df[<span class="hljs-string">&#x27;ECG&#x27;</span>]<br><span class="hljs-comment"># ecg = df.ECG</span><br>signals, info = nk.ecg_process(ecg, sampling_rate=<span class="hljs-number">130</span>)<span class="hljs-comment"># 传感器采样率</span><br>nk.ecg_plot(signals, info)<br><br>figure = plt.gcf()<br>figure.set_size_inches(<span class="hljs-number">32</span> / <span class="hljs-number">1.5</span>, <span class="hljs-number">18</span> / <span class="hljs-number">1.5</span>)  <span class="hljs-comment"># 拉伸图片</span><br>plt.savefig(<span class="hljs-string">&#x27;ECG.png&#x27;</span>, bbox_inches=<span class="hljs-string">&#x27;tight&#x27;</span>, dpi=<span class="hljs-number">120</span>)<br><span class="hljs-comment"># plt.show()</span><br></code></pre></td></tr></table></figure><h3 id="分析HRV"><a href="#分析HRV" class="headerlink" title="分析HRV"></a>分析HRV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># This is not an error but just a warning that some indices will not be calculated due to the short recordings</span><br><span class="hljs-comment"># 时间太短的话，hrv分析不出来</span><br><br><span class="hljs-keyword">import</span> neurokit2 <span class="hljs-keyword">as</span> nk<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;Polar_ECG.csv&#x27;</span>)<br><span class="hljs-comment"># ecg = df[&#x27;ECG&#x27;]</span><br>ecg = df.ECG<br><br><span class="hljs-comment"># data = nk.data(&quot;bio_resting_8min_100hz&quot;)</span><br><span class="hljs-comment"># print(data[&#x27;ECG&#x27;])</span><br><span class="hljs-comment"># print(type(data[&#x27;ECG&#x27;]))</span><br><span class="hljs-comment"># 这里可以看到官方给的数据</span><br><br><span class="hljs-comment"># ecg = pd.Series(ecg, name=&#x27;ECG&#x27;)</span><br><span class="hljs-comment"># 如果 ecg 是 list 的话，要把 list 转换成 series</span><br><br>peaks, info = nk.ecg_peaks(ecg, sampling_rate=<span class="hljs-number">130</span>)<br><span class="hljs-comment"># Compute HRV indices</span><br>hrv = nk.hrv(peaks, sampling_rate=<span class="hljs-number">130</span>, show=<span class="hljs-literal">True</span>)<br><br>hrv.to_csv(<span class="hljs-string">&#x27;HRV.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, header=<span class="hljs-literal">True</span>)<br><br>figure = plt.gcf()<br>figure.set_size_inches(<span class="hljs-number">32</span> / <span class="hljs-number">1.5</span>, <span class="hljs-number">18</span> / <span class="hljs-number">1.5</span>)<br>plt.savefig(<span class="hljs-string">&#x27;HRV.png&#x27;</span>, bbox_inches=<span class="hljs-string">&#x27;tight&#x27;</span>, dpi=<span class="hljs-number">120</span>)<br><span class="hljs-comment"># plt.show()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>Neurokit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中的元素选取</title>
    <link href="/2024/02/29/Python-%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%E9%80%89%E5%8F%96/"/>
    <url>/2024/02/29/Python-%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%E9%80%89%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">string[start:end:step]<br><span class="hljs-built_in">list</span>[start:end:step]<br></code></pre></td></tr></table></figure><ul><li><code>start</code>：起始索引。这个索引的元素会被包含在其中。如果没有 <code>start</code>，则假定它等于 0；</li><li><code>end</code>：终止索引。这个索引的元素不包括在其中。如果没有 <code>end</code>，或者指定的值超出长度，则默认为等于整体长度；</li><li><code>step</code>：在当前字符之后的每一个 “step” 字符都要包括在内。默认值是 1。如果没有 <code>step</code>，则假定它等于1。</li></ul><p><code>start</code>与<code>end</code>相当于左闭右开：</p><ul><li><code>[start:end]</code>：获取从 <code>start</code> 到 <code>end</code> - 1 的所有元素；</li><li><code>[:end]</code>：获取从开头到 <code>end</code> - 1 的所有元素；</li><li><code>[start:]</code>：获取从 <code>start</code> 到末尾的所有元素。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;12345678&#x27;</span><span class="hljs-comment"># python 字符串截取</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>])<span class="hljs-comment"># 获取索引为5的元素(6)之前的数，[1, 2, 3, 4, 5]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>])<span class="hljs-comment"># [3, 4]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[-<span class="hljs-number">1</span>])<span class="hljs-comment"># [8]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[-<span class="hljs-number">2</span>])<span class="hljs-comment"># [7]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[-<span class="hljs-number">5</span>:])<span class="hljs-comment"># [4, 5, 6, 7, 8]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>])<span class="hljs-comment"># [2, 3, 4]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[:<span class="hljs-number">2</span>])<span class="hljs-comment"># [1, 2]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:])<span class="hljs-comment"># [3, 4, 5, 6, 7, 8]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 git 提交本地代码到 gitee</title>
    <link href="/2024/02/28/%E4%BD%BF%E7%94%A8-git-%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0-gitee/"/>
    <url>/2024/02/28/%E4%BD%BF%E7%94%A8-git-%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0-gitee/</url>
    
    <content type="html"><![CDATA[<p>在 gitee 上创建一个仓库，得到仓库地址。cd 到代码根目录：</p><p>初始化项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>配置好 <code>git config</code> 后提交项目代码到暂存区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><p>填写备注：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>将远程仓库与本地代码进行关联:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://gitee.com/你的仓库地址/xxx.git<br></code></pre></td></tr></table></figure><p>push 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin master<br></code></pre></td></tr></table></figure><p>如果 push 时提示：更新被拒绝，因为远程仓库包含您本地尚不存在的提交。</p><p>那就可以采用强制使用 push：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin +master<br></code></pre></td></tr></table></figure><p>参考</p><ol><li><p><a href="https://blog.csdn.net/weixin_39644462/article/details/117751612">mac上使用git提交本地代码到gitee仓库</a>；</p></li><li><p><a href="https://blog.csdn.net/qq_39852676/article/details/113530542">更新被拒绝，因为远程仓库包含您本地尚不存在的提交</a>。</p></li><li><p><a href="https://blog.csdn.net/qq_54039576/article/details/136428313">解决git第一次提交gitee新仓库失败问题,修改main-＞master分支,链接远程仓库</a></p></li></ol><p>实际上是远程仓库和本地内容不一致导致的，原因是新建远程仓库的时候新建了 <code>LICENSE</code> 文件和 <code>.gitignore</code>，这是本地没有的。</p><p>所以正确操作是下拉代码后，再 push 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master<br></code></pre></td></tr></table></figure><p>需要注意的是，<code>git pull</code> 命令会自动合并代码，如果出现冲突需要手动解决。如果不想自动合并代码，可以使用 <code>git fetch</code> 命令先将远程仓库的代码拉取到本地，再使用 <code>git merge</code> 命令进行合并。</p><p>再次推送更新，执行下面即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;&quot;</span><br>git push origin -u master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 按空格分割字符串</title>
    <link href="/2024/02/28/Python-%E6%8C%89%E7%A9%BA%E6%A0%BC%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/02/28/Python-%E6%8C%89%E7%A9%BA%E6%A0%BC%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_filter</span>():<br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;aa   bbbbb         ccc  d&quot;</span><br>    str_list = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-built_in">print</span> (str_list)<br>    <br> <span class="hljs-comment"># [&#x27;aa&#x27;, &#x27;bbbbb&#x27;, &#x27;ccc&#x27;, &#x27;d&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI @StateObject, @ObservedObject, @Observable 三者的区别</title>
    <link href="/2024/02/18/SwiftUI-StateObject-ObservedObject-Observable-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/02/18/SwiftUI-StateObject-ObservedObject-Observable-%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="StateObject-与-ObservedObject-的区别"><a href="#StateObject-与-ObservedObject-的区别" class="headerlink" title="@StateObject 与 @ObservedObject 的区别"></a><code>@StateObject</code> 与 <code>@ObservedObject</code> 的区别</h2><p><code>@StateObject</code> 与 <code>@ObservedObject</code> 基础作用，这里不再解释，可看：</p><p><a href="https://fatbobman.com/zh/posts/exploring-key-property-wrappers-in-swiftui/">探讨 SwiftUI 中的关键属性包装器：@State、@Binding、@StateObject、@ObservedObject、@EnvironmentObject 和 @Environment</a></p><p>之前我遇到过在使用 <code>@ObservedObject</code>声明 Model 后，随着 View 的刷新，Model 的数组会被清空。</p><p>具体来说可以这样表述：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>: <span class="hljs-title class_ inherited__">ObservableObject</span> &#123;<br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> age <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ObservedView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@ObservedObject</span> <span class="hljs-keyword">var</span> people <span class="hljs-operator">=</span> <span class="hljs-type">People</span>()<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>&#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(people.age)</span>&quot;</span>)<br>            <span class="hljs-type">Button</span>(action: &#123;people.age <span class="hljs-operator">=</span> people.age <span class="hljs-operator">+</span> <span class="hljs-number">1</span>&#125;) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;update (@ObservedObject)&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StateView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@StateObject</span> <span class="hljs-keyword">var</span> people <span class="hljs-operator">=</span> <span class="hljs-type">People</span>()<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>&#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(people.age)</span>&quot;</span>)<br>            <span class="hljs-type">Button</span>(action: &#123;people.age <span class="hljs-operator">=</span> people.age <span class="hljs-operator">+</span> <span class="hljs-number">1</span>&#125;) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;update (@StateObject)&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>(spacing: <span class="hljs-number">50</span>)&#123;<br>            <span class="hljs-type">VStack</span>&#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(count)</span>&quot;</span>)   <br>                <span class="hljs-type">Button</span>(action: &#123;count <span class="hljs-operator">=</span> count <span class="hljs-operator">+</span> <span class="hljs-number">1</span>&#125; ) &#123;<br>                    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;update&quot;</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">ObservedView</span>()<br>            <span class="hljs-type">StateView</span>()   <br>        &#125;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/10-observedobject%E7%9A%84%E4%BD%BF%E7%94%A8-187eb99d86bb">#10 @ObservedObject的使用</a></p><p>在点击 ContentView 的 Button 后，ObservedView 的计数会重置，而 StateView 的计数并不会重置。等于是当更新 ContentView 的时候，原本在 ObservedView 的 people 对象又被重新生成了一次。</p><p>简单说，<code>@ObservedObject</code> 不管存储，会随着 <code>View</code> 的创建被多次创建。而 <code>@StateObject</code> 保证对象只会被创建一次。因此，如果是在 <code>View</code> 里自行创建的 <code>ObservableObject</code> model 对象，大概率来说使用 <code>@StateObject</code>会是更正确的选择。<code>@StateObject</code> 基本上来说就是一个针对 class 的 <code>@State</code> 升级版。</p><p>对于 <code>View</code> 自己创建的 <code>ObservableObject</code> 状态对象来说，极大概率你可能需要使用新的 <code>@StateObject</code> 来让它的存储和生命周期更合理：</p><p>具体可参考：<a href="https://onevcat.com/2020/06/stateobject/">@StateObject 和 @ObservedObject 的区别和使用</a></p><h2 id="Observable"><a href="#Observable" class="headerlink" title="@Observable"></a><code>@Observable</code></h2><p>参考：</p><ol><li><a href="https://blog.csdn.net/mydo/article/details/136146131#:~:text=go%EF%BC%81%EF%BC%81%EF%BC%81%F0%9F%98%89-,1.%20%E4%BB%80%E4%B9%88%E6%98%AFObservable%20%E5%AF%B9%E8%B1%A1%EF%BC%9F,%E5%92%8C%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%82">Swift 5.9 新 @Observable 对象在 SwiftUI 使用中的陷阱与解决</a></li><li><a href="https://juejin.cn/post/7252175375105818661">SwiftUI5 新增加的Observable宏的基本用法。</a></li><li><a href="https://juejin.cn/post/7317141855518015488">SwiftUI 属性包装器系列 — @Observable @Bindable</a></li><li><a href="https://onevcat.com/2023/08/observation-framework/">深入理解 Observation - 原理，back porting 和性能</a></li><li><a href="https://fatbobman.com/zh/posts/mastering-observation/">深度解读 Observation —— SwiftUI 性能提升的新途径</a></li><li><a href="https://fatbobman.com/zh/posts/new-frameworks-new-mindset/">新框架、新思维：解析 Observation 和 SwiftData 框架</a></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Item</span>: <span class="hljs-title class_ inherited__">Identifiable</span> &#123;<br>    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span><br>    <span class="hljs-keyword">var</span> value: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UUID</span>, <span class="hljs-params">value</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id<br>        <span class="hljs-keyword">self</span>.value <span class="hljs-operator">=</span> value<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> items: [<span class="hljs-type">Item</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">Item</span>(id: <span class="hljs-type">UUID</span>(), value: <span class="hljs-number">1</span>),<br>        <span class="hljs-type">Item</span>(id: <span class="hljs-type">UUID</span>(), value: <span class="hljs-number">2</span>)<br>    ]<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> selectItem: <span class="hljs-type">Item</span>?<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">ForEach</span>(items) &#123; item <span class="hljs-keyword">in</span><br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(item.value)</span>&quot;</span>)<br>                    .onTapGesture &#123;<br>                        selectItem <span class="hljs-operator">=</span> item<br>                    &#125;<br>            &#125; <br>        &#125;<br>        .sheet(item: <span class="hljs-variable">$selectItem</span>) &#123; item <span class="hljs-keyword">in</span><br>            <span class="hljs-type">ItemDetailView</span>(item: item)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ItemDetailView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> item: <span class="hljs-type">Item</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(item.value)</span>&quot;</span>)<br>            <span class="hljs-type">Button</span>(action: &#123;<br>                item.value <span class="hljs-operator">=</span> <span class="hljs-number">999</span><br>            &#125;, label: &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Change Value&quot;</span>)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码这种情况下，无论是 ItemDetailView 还是 ContentView，其 item 的 value 都不会改变。</p><p>使用 <code>@Observable</code> 和 <code>@Bindable</code> 后可以解决问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Observable</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>: <span class="hljs-title class_ inherited__">Identifiable</span> &#123;<br>    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span><br>    <span class="hljs-keyword">var</span> value: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UUID</span>, <span class="hljs-params">value</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id<br>        <span class="hljs-keyword">self</span>.value <span class="hljs-operator">=</span> value<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> items: [<span class="hljs-type">Item</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">Item</span>(id: <span class="hljs-type">UUID</span>(), value: <span class="hljs-number">1</span>),<br>        <span class="hljs-type">Item</span>(id: <span class="hljs-type">UUID</span>(), value: <span class="hljs-number">2</span>)<br>    ]<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> selectItem: <span class="hljs-type">Item</span>?<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">ForEach</span>(items) &#123; item <span class="hljs-keyword">in</span><br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(item.value)</span>&quot;</span>)<br>                    .onTapGesture &#123;<br>                        selectItem <span class="hljs-operator">=</span> item<br>                        <span class="hljs-built_in">print</span>(item.value)<br>                    &#125;<br>            &#125;<br>        &#125;<br>        .sheet(item: <span class="hljs-variable">$selectItem</span>) &#123; item <span class="hljs-keyword">in</span><br>            <span class="hljs-type">ItemDetailView</span>(item: item)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ItemDetailView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@Bindable</span> <span class="hljs-keyword">var</span> item: <span class="hljs-type">Item</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(item.value)</span>&quot;</span>)<br>            <span class="hljs-type">Button</span>(action: &#123;<br>                item.value <span class="hljs-operator">=</span> <span class="hljs-number">999</span><br>            &#125;, label: &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Change Value&quot;</span>)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请注意：您永远不会在 <code>@Binding</code> 和 <code>@Bindable</code> 之间进行选择。<code>@Binding</code> 属性包装器表明视图上的某些状态由父视图拥有，并且您对基础数据具有读写访问权限。<code>@Bindable</code> 表示用于创建与符合 Observable 协议的数据模型对象的可变属性的绑定；</p><p>另外，使用 SwiftData 时 <code>@Model</code> 与 <code>@Bindable</code> 配合也能实现相同的效果。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Model</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>: <span class="hljs-title class_ inherited__">Identifiable</span> &#123;<br>    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span><br>    <span class="hljs-keyword">var</span> value: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UUID</span>, <span class="hljs-params">value</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id<br>        <span class="hljs-keyword">self</span>.value <span class="hljs-operator">=</span> value<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@Query</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> items: [<span class="hljs-type">Item</span>]<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> selectItem: <span class="hljs-type">Item</span>?<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">ForEach</span>(items) &#123; item <span class="hljs-keyword">in</span><br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(item.value)</span>&quot;</span>)<br>                    .onTapGesture &#123;<br>                        selectItem <span class="hljs-operator">=</span> item<br>                        <span class="hljs-built_in">print</span>(item.value)<br>                    &#125;<br>            &#125;<br>        &#125;<br>        .sheet(item: <span class="hljs-variable">$selectItem</span>) &#123; item <span class="hljs-keyword">in</span><br>            <span class="hljs-type">ItemDetailView</span>(item: item)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ItemDetailView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@Bindable</span> <span class="hljs-keyword">var</span> item: <span class="hljs-type">Item</span><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span>() &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(item.value)</span>&quot;</span>)<br>            <span class="hljs-type">Button</span>(action: &#123;<br>                item.value <span class="hljs-operator">=</span> <span class="hljs-number">999</span><br>            &#125;, label: &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Change Value&quot;</span>)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝牙键盘唤醒吞字问题</title>
    <link href="/2024/01/29/%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%94%A4%E9%86%92%E5%90%9E%E5%AD%97%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/29/%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%94%A4%E9%86%92%E5%90%9E%E5%AD%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>IQUNIX F96 双模在休眠唤醒后，会出现吞字现象（或者延迟）。</p><p>但是 ROG 的魔导士 RX LP 三模则不会。</p><p>参考：</p><ul><li><p><a href="https://bbs.tgfcer.com/thread-8379606-1-1.html">为啥国产机械无线键盘休眠唤醒的延时都很高？</a></p></li><li><p><a href="https://www.chiphell.com/thread-2494850-1-1.html">无线键盘都是休眠后敲第一个键打不出字符吗？</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Polar H10 的加速度坐标系</title>
    <link href="/2024/01/26/Polar-H10-%E7%9A%84%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
    <url>/2024/01/26/Polar-H10-%E7%9A%84%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Polar-H10-%E7%9A%84%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87%E7%B3%BB.jpg"></p><p>参考：</p><p><a href="https://github.com/polarofficial/polar-ble-sdk/issues/223">Accelerometer raw data format question</a></p><p><a href="https://github.com/polarofficial/polar-ble-sdk/issues/317">Verity Sense inconsistent ACC Streaming</a></p><p><a href="https://github.com/polarofficial/polar-ble-sdk/issues/167">Acceleration data with gravity eliminated?</a></p><p>另外加速度的单位是 mG，参考下面</p><blockquote><p>Accelerometer data with sample rates of 25Hz, 50Hz, 100Hz and 200Hz and range of 2G, 4G and 8G. Axis specific acceleration data in mG.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ACC 采集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
      <tag>Sensor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 在 watchOS 上使用 List 和 ForEach 的奇葩问题</title>
    <link href="/2024/01/23/SwiftUI-%E5%9C%A8-watchOS-%E4%B8%8A%E4%BD%BF%E7%94%A8-List-%E5%92%8C-ForEach-%E7%9A%84%E5%A5%87%E8%91%A9%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/23/SwiftUI-%E5%9C%A8-watchOS-%E4%B8%8A%E4%BD%BF%E7%94%A8-List-%E5%92%8C-ForEach-%E7%9A%84%E5%A5%87%E8%91%A9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在手表上创建可以点击的按钮。</p><h3 id="1-List-ForEach-Button"><a href="#1-List-ForEach-Button" class="headerlink" title="1.List + ForEach + Button"></a>1.List + ForEach + Button</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">ForEach</span>(data) &#123; item <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Button</span>&#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Clicked&quot;</span>)<br>        &#125; label: &#123;<br>            <span class="hljs-type">Text</span>(item.name)<br>                <span class="hljs-comment">// .padding()</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个按钮可以点击，且有点击动画。不过加 <code>.padding()</code> 不会改变按钮大小。</p><h3 id="2-List-ForEach-HStack-Text"><a href="#2-List-ForEach-HStack-Text" class="headerlink" title="2.List + ForEach + HStack(Text)"></a>2.List + ForEach + HStack(Text)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">ForEach</span>(data) &#123; item <span class="hljs-keyword">in</span><br>        <span class="hljs-type">HStack</span> &#123;<br>            <span class="hljs-type">Text</span>(item.name)<br>            <span class="hljs-type">Spacer</span>()<br>        &#125;.onTapGesture &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Clicked&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>只有 Text 文字部分可以点击，且没有点击动画。</strong></p><p>不用 HStack 而是直接用 Text 效果是一样的。</p><h3 id="3-List-Button"><a href="#3-List-Button" class="headerlink" title="3.List + Button"></a>3.List + Button</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span>(data) &#123; item <span class="hljs-keyword">in</span><br>    <span class="hljs-type">Button</span>&#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Clicked&quot;</span>)<br>    &#125; label: &#123;<br>        <span class="hljs-type">Text</span>(item.name)<br><span class="hljs-comment">// .padding()</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个按钮可以点击，且有点击动画。加 <code>.padding()</code> 同样不会改变按钮大小。</p><h3 id="4-List-HStack-Text"><a href="#4-List-HStack-Text" class="headerlink" title="4.List + HStack(Text)"></a>4.List + HStack(Text)</h3><p>效果与「List + ForEach + HStack(Text)」相同。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI List 与 ForEach 的区别</title>
    <link href="/2024/01/23/SwiftUI-List-%E4%B8%8E-ForEach-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/01/23/SwiftUI-List-%E4%B8%8E-ForEach-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://fatbobman.com/zh/posts/swiftui-list-foreach/">聊一下 SwiftUI 中的 List 和 ForEach</a></p><p>首先，下面两种方法都可以：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">100</span>) &#123; i <span class="hljs-keyword">in</span><br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;id:<span class="hljs-subst">\(id)</span>&quot;</span>)<br>&#125;<br><br><br><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">100</span>)&#123; i <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;id:<span class="hljs-subst">\(id)</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用 ForEach 可以在同一 List 中，添加多个动态源，且可添加静态内容</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">ForEach</span>(items,id:\.<span class="hljs-keyword">self</span>)&#123; item <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Text</span>(item)<br>    &#125;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)<br>    <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">10</span>)&#123; i <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;id:<span class="hljs-subst">\(i)</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用 ForEach 对于动态内容可以控制版式</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">List</span> &#123;<br>    <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">10</span>)&#123; i <span class="hljs-keyword">in</span><br>        <span class="hljs-type">Rectangle</span>()<br>            .listRowInsets(<span class="hljs-type">EdgeInsets</span>()) <span class="hljs-comment">//可以控制边界 insets</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">List</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">10</span>) &#123; i <span class="hljs-keyword">in</span><br>    <span class="hljs-type">Rectangle</span>()<br>        .listRowInsets(<span class="hljs-type">EdgeInsets</span>())<br>        <span class="hljs-comment">// 不可以控制边界 insets.   .listRowInsets(EdgeInsets()) 在 List 中只对静态内容有效</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 加速度坐标</title>
    <link href="/2024/01/22/iOS-%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87/"/>
    <url>/2024/01/22/iOS-%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/iOS-%E5%8A%A0%E9%80%9F%E5%BA%A6%E5%9D%90%E6%A0%871.png" alt="坐标"></p><p>X、Y、Z 是相对手机的</p><p>所有传感器的原始数据都是一个以手机作为参考系的三维向量：</p><ul><li>X轴</li></ul><p>手机正放时，屏幕右侧方向为 X 轴正方向，左侧方向为 X 轴负方向；</p><ul><li>Y轴</li></ul><p>手机屏幕顶部向上方向记为 Y 轴正方向，屏幕底部向下方向为 Y 轴负方向；</p><ul><li>Z轴</li></ul><p>手机正放时，垂直屏幕向上方向为 Z 轴正方向，向下为 Z 轴负方向。</p><h3 id="加速度"><a href="#加速度" class="headerlink" title="加速度"></a>加速度</h3><p>一共可以获取到 2 种加速度。</p><h4 id="gravity"><a href="#gravity" class="headerlink" title="gravity"></a>gravity</h4><p>重力在 xyz 方向上的分量</p><h4 id="userAcceleration"><a href="#userAcceleration" class="headerlink" title="userAcceleration"></a>userAcceleration</h4><p><a href="https://developer.apple.com/documentation/coremotion/cmdevicemotion/1616149-useracceleration">userAcceleration</a>，设备在 xyz 方向上的总加速度。</p><p>总加速度等于重力加上用户施加到设备的加速度。</p><h3 id="关于姿态解算"><a href="#关于姿态解算" class="headerlink" title="关于姿态解算"></a>关于姿态解算</h3><p>CoreMotion 并没有根据设备加速度以及角速度进行「<strong>空间绝对坐标系</strong>」的解算。只解算了姿态与重力加速度，目的是为了能抵消重力加速度在 xyz 轴上分量对整体加速度的影响。</p><p>这意味着 CoreMotion 只有<strong>设备</strong>上下前后左右的概念，没有<strong>质点</strong>上下东南西北的概念。也意味着设备需要「<strong>固定</strong>」一个摆放位置和摆放方向，否者多次测得的数据是没有参考意义的。</p>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
      <category>数据采集</category>
      
      <category>iPhone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
      <tag>Sensor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 真机调试 iWatch 的坑</title>
    <link href="/2024/01/19/Xcode-%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-iWatch-%E7%9A%84%E5%9D%91/"/>
    <url>/2024/01/19/Xcode-%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-iWatch-%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>总之而言，不要在 Xcode 上直接选择真机来运行 Watch App 工程。</p><p>由于 Watch App 不能从电脑直接安装，Xcode 需要首先把 swift 的运行时和一系列安装脚本先传到手机上，再由手机完成安装过程。之后 Xcode 还需要通过手机来和 Watch 建立连接才能调试。</p><p>这样的结果就是 Xcode 不停地提示正在连接手表以及正在重新连接手表。</p><p>最好的办法是，选择 iOS App，直接在 iPhone 上运行。</p><p>因为 iOS App 在安装的时候会把 Watch App 同样编译安装，之后只要手动在「手表」应用中重新安装 Watch App 即可。</p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>RPE 采集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 的声音和振动</title>
    <link href="/2024/01/19/Swift-%E7%9A%84%E5%A3%B0%E9%9F%B3%E5%92%8C%E6%8C%AF%E5%8A%A8/"/>
    <url>/2024/01/19/Swift-%E7%9A%84%E5%A3%B0%E9%9F%B3%E5%92%8C%E6%8C%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> AVFoundation<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SoundPlayer</span> &#123;<br>    <span class="hljs-keyword">var</span> soundIdIndex <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">playSound</span>() &#123;<br>        <span class="hljs-keyword">let</span> soundID <span class="hljs-operator">=</span> <span class="hljs-type">SystemSoundID</span>(soundIdIndex)<br>        <span class="hljs-type">AudioServicesPlaySystemSound</span>(soundID)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法为</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> player <span class="hljs-operator">=</span> <span class="hljs-type">SoundPlayer</span>()<br>player.playSound()<br></code></pre></td></tr></table></figure><p>声音 id 可参考 <a href="https://github.com/TUNER88/iOSSystemSoundsLibrary">iOSSystemSoundsLibrary</a></p><h3 id="振动"><a href="#振动" class="headerlink" title="振动"></a>振动</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> AVFoundation<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Vibration</span> &#123;<br>    <br>    <span class="hljs-keyword">case</span> error<br>    <span class="hljs-keyword">case</span> success<br>    <span class="hljs-keyword">case</span> warning<br>    <span class="hljs-keyword">case</span> light<br>    <span class="hljs-keyword">case</span> medium<br>    <span class="hljs-keyword">case</span> heavy<br>    <span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)<br>    <span class="hljs-keyword">case</span> soft<br>    <span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)<br>    <span class="hljs-keyword">case</span> rigid<br>    <span class="hljs-keyword">case</span> selection<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">vibrate</span>() &#123;<br>        <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>        <span class="hljs-keyword">case</span> .error:<br>            <span class="hljs-type">UINotificationFeedbackGenerator</span>().notificationOccurred(.error)<br>        <span class="hljs-keyword">case</span> .success:<br>            <span class="hljs-type">UINotificationFeedbackGenerator</span>().notificationOccurred(.success)<br>        <span class="hljs-keyword">case</span> .warning:<br>            <span class="hljs-type">UINotificationFeedbackGenerator</span>().notificationOccurred(.warning)<br>        <span class="hljs-keyword">case</span> .light:<br>            <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .light).impactOccurred()<br>        <span class="hljs-keyword">case</span> .medium:<br>            <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .medium).impactOccurred()<br>        <span class="hljs-keyword">case</span> .heavy:<br>            <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .heavy).impactOccurred()<br>        <span class="hljs-keyword">case</span> .soft:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">#available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>) &#123;<br>                <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .soft).impactOccurred()<br>            &#125;<br>        <span class="hljs-keyword">case</span> .rigid:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">#available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>) &#123;<br>                <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .rigid).impactOccurred()<br>            &#125;<br>        <span class="hljs-keyword">case</span> .selection:<br>            <span class="hljs-type">UISelectionFeedbackGenerator</span>().selectionChanged()<br>        <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Vibration</span>.rigid.vibrate()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift String 合集</title>
    <link href="/2024/01/19/Swift-String-%E5%90%88%E9%9B%86/"/>
    <url>/2024/01/19/Swift-String-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text.replacingOccurrences(of: <span class="hljs-string">&quot;World&quot;</span>, with: <span class="hljs-string">&quot;Swift&quot;</span>)) <span class="hljs-comment">// &quot;Hello, Swift!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="去首尾空格"><a href="#去首尾空格" class="headerlink" title="去首尾空格"></a>去首尾空格</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;  Swift  &quot;</span><br><span class="hljs-built_in">print</span>(text.trimmingCharacters(in: .whitespaces)) <span class="hljs-comment">// &quot;Swift&quot;</span><br></code></pre></td></tr></table></figure><h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 按分隔符拆分字符串</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift,UI,Code&quot;</span><br><span class="hljs-built_in">print</span>(text.components(separatedBy: <span class="hljs-string">&quot;,&quot;</span>)) <span class="hljs-comment">// [&quot;Swift&quot;, &quot;UI&quot;, &quot;Code&quot;]</span><br><br><span class="hljs-comment">// 按字符拆分字符串</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift UI Code&quot;</span><br><span class="hljs-built_in">print</span>(text.split(separator: <span class="hljs-string">&quot; &quot;</span>)) <span class="hljs-comment">// [&quot;Swift&quot;, &quot;UI&quot;, &quot;Code&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> array <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;Swift&quot;</span>, <span class="hljs-string">&quot;UI&quot;</span>, <span class="hljs-string">&quot;Code&quot;</span>]<br><span class="hljs-built_in">print</span>(array.joined(separator: <span class="hljs-string">&quot; &quot;</span>)) <span class="hljs-comment">// &quot;Swift UI Code&quot;</span><br></code></pre></td></tr></table></figure><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift&quot;</span><br><span class="hljs-built_in">print</span>(text.lowercased()) <span class="hljs-comment">// &quot;swift&quot;</span><br><span class="hljs-built_in">print</span>(text.uppercased()) <span class="hljs-comment">// &quot;SWIFT&quot;</span><br></code></pre></td></tr></table></figure><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// startIndex 和 endIndex: 获取字符串的起始和结束索引</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift&quot;</span><br><span class="hljs-built_in">print</span>(text[text.startIndex]) <span class="hljs-comment">// &quot;S&quot;</span><br><span class="hljs-built_in">print</span>(text[text.index(before: text.endIndex)]) <span class="hljs-comment">// &quot;t&quot;</span><br><br><span class="hljs-comment">// index(_:offsetBy:): 根据偏移量获取索引</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift&quot;</span><br><span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> text.index(text.startIndex, offsetBy: <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(text[index]) <span class="hljs-comment">// &quot;i&quot;</span><br></code></pre></td></tr></table></figure><h2 id="contain"><a href="#contain" class="headerlink" title="contain"></a>contain</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 精准匹配</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text.contains(<span class="hljs-string">&quot;World&quot;</span>)) <span class="hljs-comment">// true</span><br><br><br><span class="hljs-comment">/// 忽略大小写匹配</span><br><span class="hljs-comment">/// 需要简单的本地化字符串匹配，但不涉及排序规则等复杂逻辑</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, SwiftUI!&quot;</span><br><span class="hljs-keyword">let</span> searchQuery <span class="hljs-operator">=</span> <span class="hljs-string">&quot;swift&quot;</span><br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> text.localizedCaseInsensitiveContains(searchQuery)<br><span class="hljs-built_in">print</span>(result) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">/// 文本匹配</span><br><span class="hljs-comment">/// 对大小写不敏感（Hello, SwiftUI! 中的 Swift 与 swift 能匹配）</span><br><span class="hljs-comment">/// 能正确处理用户语言环境下的特定字符匹配，比localizedCaseInsensitiveContains高级</span><br><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, SwiftUI!&quot;</span><br><span class="hljs-keyword">let</span> searchQuery <span class="hljs-operator">=</span> <span class="hljs-string">&quot;swift&quot;</span><br><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> text.localizedStandardContains(searchQuery)<br><span class="hljs-built_in">print</span>(result) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="检查开头或结尾是否为指定字符串"><a href="#检查开头或结尾是否为指定字符串" class="headerlink" title="检查开头或结尾是否为指定字符串"></a>检查开头或结尾是否为指定字符串</h2><h3 id="hasPrefix-检查字符串是否以指定前缀开头"><a href="#hasPrefix-检查字符串是否以指定前缀开头" class="headerlink" title="hasPrefix(_:): 检查字符串是否以指定前缀开头"></a><strong>hasPrefix(_:)</strong>: 检查字符串是否以指定前缀开头</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text.hasPrefix(<span class="hljs-string">&quot;Hello&quot;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="hasSuffix-检查字符串是否以指定后缀结尾"><a href="#hasSuffix-检查字符串是否以指定后缀结尾" class="headerlink" title="hasSuffix(_:): 检查字符串是否以指定后缀结尾"></a><strong>hasSuffix(_:)</strong>: 检查字符串是否以指定后缀结尾</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(text.hasSuffix(<span class="hljs-string">&quot;!&quot;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="使用-Substring-分割字符串"><a href="#使用-Substring-分割字符串" class="headerlink" title="使用 Substring 分割字符串"></a>使用 <code>Substring</code> 分割字符串</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aaa/bbb/ccc/dddd&quot;</span><br><span class="hljs-keyword">let</span> arraySubstrings: [<span class="hljs-type">Substring</span>] <span class="hljs-operator">=</span> string.split(separator: <span class="hljs-string">&quot;/&quot;</span>)<br><br><span class="hljs-keyword">var</span> arrayStrings: [<span class="hljs-type">String</span>] <span class="hljs-operator">=</span> []<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> arraySubstrings &#123;           <br>    arrayStrings.append(<span class="hljs-string">&quot;<span class="hljs-subst">\(item)</span>&quot;</span>)<br>    <span class="hljs-comment">//arrayStrings.append(String(item))</span><br>&#125;<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">let</span> arrayStrings: [<span class="hljs-type">String</span>] <span class="hljs-operator">=</span> arraySubstrings.compactMap &#123; <span class="hljs-string">&quot;<span class="hljs-subst">\(<span class="hljs-variable">$0</span>)</span>&quot;</span> &#125;<br><br><span class="hljs-comment">// 写法等同于</span><br><span class="hljs-keyword">let</span> arrayStrings: [<span class="hljs-type">String</span>] <span class="hljs-operator">=</span> arraySubstring.compactMap &#123; (item) -&gt; <span class="hljs-type">String</span> <span class="hljs-keyword">in</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(item)</span>&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello! World&quot;</span><br></code></pre></td></tr></table></figure><p><strong>这里需要注意的是，以下除非特别说明，不然截取字符串之后获得的都是 <code>Substring</code>。如果需要转变成字符串使用，那么用 <code>String()</code> 扩起来就行了。</strong></p><h3 id="单方向截取"><a href="#单方向截取" class="headerlink" title="单方向截取"></a>单方向截取</h3><p>这种方式只能从两端中的某一端开始截取，细分的话可以分为<strong>从特定下标开始截取</strong>和<strong>从特定字符开始截取</strong>：<br><strong>“从特定下标开始截取”适合处理格式固定但内容不固定</strong>的字符串，方法如下（注释为输出的结果）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 从字符串开头数6个字符，截取这6个字符——截取前六个字符</span><br>str.prefix(<span class="hljs-number">6</span>)<br><span class="hljs-comment">// &quot;Hello!&quot;</span><br><br><span class="hljs-comment">// 从字符串末尾数5个字符，然后截取这5个字符——截取最后五个字符</span><br>str.suffix(<span class="hljs-number">5</span>)<br><span class="hljs-comment">// &quot;World&quot;</span><br><br><span class="hljs-comment">// 偏移量超过字符串中字符数量，就显示所有的字符</span><br>str.suffix(<span class="hljs-number">50</span>)<br><span class="hljs-comment">// &quot;Hello! World&quot;</span><br><br><span class="hljs-comment">// index表明定位到从开始(startIndex)偏移五个字符(offsetBy: 5)之后的一个字符——这里是感叹号</span><br><span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> str.index(str.startIndex, offsetBy: <span class="hljs-number">5</span>)<br><span class="hljs-comment">// 从index定位到的字符开始截取</span><br>str.suffix(from: index)<br> <span class="hljs-comment">// &quot;! World&quot;</span><br></code></pre></td></tr></table></figure><p><strong>“从特定字符开始截取”适合截取内容有特定字符或格式不固定但是有特定内容</strong>的字符串，方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 从特定字符串开始截取</span><br><span class="hljs-comment">// 从开始端（左端）的第一个o开始截取</span><br><span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> str.firstIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br>str.prefix(through: index！) <br><span class="hljs-comment">// &quot;Hello&quot;</span><br><br><span class="hljs-comment">// 从末端（右端）的第一个o开始截取</span><br><span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> str.lastIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br>str.suffix(from: index！) <br><span class="hljs-comment">// &quot;orld&quot;</span><br></code></pre></td></tr></table></figure><p>这段代码还可以这么写：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 还可以这样写</span><br><span class="hljs-comment">// 从开始端（左端）的第一个o开始截取</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> str.firstIndex(of: <span class="hljs-string">&quot;o&quot;</span>) &#123;<br>    str.prefix(through: index)<br>&#125;<br><span class="hljs-comment">// &quot;Hello&quot;</span><br><br><span class="hljs-comment">// 从末端（右端）的第一个o开始截取</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> str.lastIndex(of: <span class="hljs-string">&quot;o&quot;</span>) &#123;<br>    str.suffix(from: index) <br>&#125;<br><span class="hljs-comment">// &quot;orld&quot;</span><br></code></pre></td></tr></table></figure><h3 id="截取中间一段"><a href="#截取中间一段" class="headerlink" title="截取中间一段"></a>截取中间一段</h3><p>这种方式会截取字符串中间的一段，同样有两种<strong>使用下标截取中间一段字符</strong>和<strong>特定字符截取</strong>两种办法。<br><strong>使用下标截取中间一段字符</strong>的方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 截取第二个到第九个字符之间的字符</span><br>str.dropFirst(<span class="hljs-number">3</span>).prefix(<span class="hljs-number">9</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">Substring</span><br><span class="hljs-comment">// &quot;lo! Worl&quot;</span><br><br><span class="hljs-comment">// 截取第二个到倒数第二个字符之间的字符</span><br>str.dropFirst(<span class="hljs-number">3</span>).dropLast(<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">Substring</span><br><span class="hljs-comment">// &quot;lo! Wo&quot;</span><br></code></pre></td></tr></table></figure><p>这里注意需要加上最后的</p><p><strong>截取两个特定字符中间的一段字符串</strong>并没有这么简单的办法，实现方法会有些复杂。这里慢慢说。<br>例如我们需要截取两个“o”之间（含两端的“o”）的字符串：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> index1 <span class="hljs-operator">=</span> str.firstIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br><span class="hljs-keyword">let</span> str2: <span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(str.suffix(from: index1<span class="hljs-operator">!</span>)) <span class="hljs-comment">//&quot;o! World&quot;</span><br><span class="hljs-keyword">let</span> index2 <span class="hljs-operator">=</span> str2.lastIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br><span class="hljs-keyword">let</span> str3 <span class="hljs-operator">=</span> str2.prefix(through: index2<span class="hljs-operator">!</span>) <span class="hljs-comment">//&quot;o! Wo&quot;</span><br></code></pre></td></tr></table></figure><p>这里首先是使用单向（从右端）截取了一段，然后将这段使用 <code>String</code> 转变成字符串格式并且定义为一个新的字符串，然后对其实行反向（从坐左端）截取了一段。这样是包含两端的“o”的。<br>那么如果我们不想要右端的“o”呢？使用以下方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> index1 <span class="hljs-operator">=</span> str.firstIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br><span class="hljs-keyword">let</span> str2: <span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(str.suffix(from: index1<span class="hljs-operator">!</span>)) <span class="hljs-comment">//&quot;o! World&quot;</span><br><span class="hljs-keyword">let</span> index2 <span class="hljs-operator">=</span> str2.lastIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br><span class="hljs-keyword">let</span> str3 <span class="hljs-operator">=</span> str2.prefix(upTo: index2<span class="hljs-operator">!</span>) <span class="hljs-comment">//&quot;o! W&quot;</span><br></code></pre></td></tr></table></figure><p>只用将最后一行代码的 <code>through</code> 变成 <code>upTo</code> 就可以了。<br>那么如果我们两端都需要去掉“o”呢？使用以下方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> index <span class="hljs-operator">=</span> str.lastIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br><span class="hljs-keyword">let</span> str2 <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(str.prefix(through: str.index(before: index<span class="hljs-operator">!</span>))) <span class="hljs-comment">//&quot;Hello! W&quot;</span><br><span class="hljs-keyword">let</span> index2 <span class="hljs-operator">=</span> str2.lastIndex(of: <span class="hljs-string">&quot;o&quot;</span>)<br>str2.suffix(from: str2.index(after: index2<span class="hljs-operator">!</span>)) <span class="hljs-comment">//&quot;! W&quot;</span><br></code></pre></td></tr></table></figure><h2 id="format-使用"><a href="#format-使用" class="headerlink" title="format 使用"></a>format 使用</h2><h3 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h3><p>字符串中包裹着 <code>\()</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> age <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx&quot;</span><br><br><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%@ Age Is %d&quot;</span>, name, age)<br><br><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(name)</span> Age Is <span class="hljs-subst">\(age)</span>&quot;</span>)<br><span class="hljs-type">Text</span>(name <span class="hljs-operator">+</span> <span class="hljs-string">&quot;Age Is&quot;</span> <span class="hljs-operator">+</span> <span class="hljs-type">String</span>(age))<br><span class="hljs-type">Text</span>(string)<br></code></pre></td></tr></table></figure><h3 id="整数与小数"><a href="#整数与小数" class="headerlink" title="整数与小数"></a>整数与小数</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">123892674027</span>)<br><span class="hljs-type">Text</span>(string)<br><span class="hljs-comment">// 结果却是：&quot;-661377557&quot;</span><br><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%ld&quot;</span>, <span class="hljs-number">123892674027</span>)<br></code></pre></td></tr></table></figure><p>如果数据大，可能大于 2147483647（10 位），使用 <code>&quot;%ld&quot;</code>，否则使用 <code>&quot;%d&quot;</code> 即可。</p><p>长度修饰符</p><ul><li>h，代表 shor t或者 unsigned short</li><li>l，代表 long 或者 unsiged long  (ll 表示 long long 或者 unsigned long long) Int</li><li>L，代表 Long double</li></ul><h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1.1111</span><br><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%f&quot;</span>, i)<span class="hljs-comment">// 1.1111，默认保留 6 位小数</span><br><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%.2f&quot;</span>, i)<span class="hljs-comment">// 1.11，输入几保留几位小数</span><br></code></pre></td></tr></table></figure><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> minutes: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span><br><span class="hljs-keyword">let</span> seconds: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span><br><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%02d:%02d&quot;</span>, minutes, seconds) <span class="hljs-comment">//08:09</span><br><br><br><span class="hljs-keyword">let</span> i: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">36</span><br><span class="hljs-keyword">let</span> i2: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">350087</span><br><span class="hljs-comment">// 固定四位显示</span><br><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%4d&quot;</span>, i) <span class="hljs-comment">// &quot;  36&quot; （注意有两个空格）</span><br><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%4d&quot;</span>, i2) <span class="hljs-comment">// &quot;350087&quot; (位数大于，则全部显示)</span><br> <br><span class="hljs-comment">// 固定四位显示，不足补0</span><br><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%04d&quot;</span>, i) <span class="hljs-comment">// &quot;0036&quot;</span><br><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%04d&quot;</span>, i2) <span class="hljs-comment">// &quot;350087&quot; (位数大于，则全部显示)</span><br></code></pre></td></tr></table></figure><p>参考</p><ol><li><a href="https://blog.csdn.net/qq_14920635/article/details/96479691">Swift 数字字符串格式化</a></li><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/swift-%E9%80%8F%E9%81%8E-string-%E8%AE%93%E6%95%B8%E5%80%BC%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%91%88%E7%8F%BE-%E6%95%B4%E6%95%B8%E8%A3%9C%E9%9B%B6-%E5%B0%8F%E6%95%B8%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5%E8%87%B3%E7%AC%AC%E5%B9%BE%E4%BD%8D%E6%95%B8-eefb15b998b6">透過 String 讓數值格式化呈現(整數補零、小數四捨五入至第幾位數)</a></li></ol><h2 id="formatter"><a href="#formatter" class="headerlink" title="formatter"></a>formatter</h2><p><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-text-%E7%9A%84-string-interpolation-%E5%92%8C%E5%8F%83%E6%95%B8-specifier-formatter-42640ec823af">SwiftUI Text 的 string interpolation 和參數 specifier &amp; formatter</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>报错 &#39;async&#39; call in a function that does not support concurrency</title>
    <link href="/2024/01/18/%E6%8A%A5%E9%94%99-async-call-in-a-function-that-does-not-support-concurrency/"/>
    <url>/2024/01/18/%E6%8A%A5%E9%94%99-async-call-in-a-function-that-does-not-support-concurrency/</url>
    
    <content type="html"><![CDATA[<p>给 Polar 设置时间时，因为是异步函数，不能直接调用。</p><p>异步函数的调用方式是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Button</span>&#123;aciton: &#123;<br><span class="hljs-type">Task</span> &#123;<span class="hljs-comment">// Add Here</span><br>      <span class="hljs-keyword">await</span> bleSdkManager.setTime()<br>    &#125;<br>&#125;, label: &#123;<br><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Calibration Time&quot;</span>)<br>.font(.system(size: <span class="hljs-number">14.0</span>, weight: .black, design: .monospaced))<br>  .foregroundColor(.blue)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>Polar H10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发 Polar H10 心率带遇到的时间戳问题</title>
    <link href="/2024/01/18/%E5%BC%80%E5%8F%91-Polar-H10-%E5%BF%83%E7%8E%87%E5%B8%A6%E9%81%87%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/18/%E5%BC%80%E5%8F%91-Polar-H10-%E5%BF%83%E7%8E%87%E5%B8%A6%E9%81%87%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>可参考的内容包括：</p><ol><li><a href="https://github.com/polarofficial/polar-ble-sdk/issues/192">How to check currently-set epoch for timestamp</a></li><li><a href="https://github.com/polarofficial/polar-ble-sdk/issues/165">setLocalTime sets incorrect time and date</a></li><li><a href="https://github.com/polarofficial/polar-ble-sdk/issues/221">What is the zero date for the H10 timestamp?</a></li></ol><h3 id="时间戳的基准问题"><a href="#时间戳的基准问题" class="headerlink" title="时间戳的基准问题"></a>时间戳的基准问题</h3><p>首先需要明确的一点是，Polar H10 的基准时间并不是 1970-01-01 00:00:00（GMT）。而是 2000-01-01 00:00:00（GMT）。</p><p>这意味着 Polar H10 产生的时间戳，要比标准时间戳少了 946684800000 毫秒。</p><blockquote><p>you may use the epoch time to human readable time converters in your code, which are usually based on the unix epoch of Jan 01 1970 00:00:00. Then you shall add the offset between Jan 01 1970 00:00:00 and Jan 01 2000 00:00:00 to timestamp before passing the timestamp to converter. Offset in nanoseconds is 946684800000000000</p></blockquote><p>也就是说，处理后续时间戳时，需要加上 1970-01-01 到 2000-01-01 这 30 年的 946684800000 毫秒。</p><h3 id="传感器重启问题"><a href="#传感器重启问题" class="headerlink" title="传感器重启问题"></a>传感器重启问题</h3><p>Polar H10 在非佩戴时间会自动关机，也就是断电。等到重启后，传感器的时间芯片会默认从 2019-01-01 00:00:00 (GMT) 开始计时。</p><p><em>纳秒为 599616000000000000 ns</em></p><blockquote><p>the time of the sensor is set to default value when sensor resets or battery runs out. For the Polar H10 (v.3.1.1) the default time is Jan 01 2019 00:00:00 (GMT), which in nanosecond format is 599616000000000000</p></blockquote><p>所以可以看到 <em>599616067917010444</em> 这样的时间戳。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">举个例子<br>我在 2024<span class="hljs-string">-01</span><span class="hljs-string">-18</span> 11:29:15 启动传感器并打印时间，得到的时间为 2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00<br></code></pre></td></tr></table></figure><p>这样显然是不可以使用的，所以需要设置传感器的时间与现在同步。即：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Task</span> &#123;<br><span class="hljs-keyword">await</span> bleSdkManager.setTime()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设置传感器时间问题"><a href="#设置传感器时间问题" class="headerlink" title="设置传感器时间问题"></a>设置传感器时间问题</h3><p>SDK 自带的 setTime() API 存在一个问题——</p><p><strong>它会将本地时间设置成 GMT 时间</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">按理说，如果本地（北京 UTC<span class="hljs-string">+8</span>）时间为 15:00，那么 GMT 的时间应该为 07:00。<br>当设置好传感器时间后，传感器打印出来的时间戳对应的 GMT 时间也应该是 07:00 才对。<br></code></pre></td></tr></table></figure><p>但现在的问题是</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">我在 15:00（北京 UTC<span class="hljs-string">+8</span>）设置传感器的时间并打印时间戳。<br>传感器打印出来的时间戳对应的时间是 15:00（GMT）或者说 23:00（北京 UTC<span class="hljs-string">+8</span>）。<br>而不是 07:00（GMT）或者说 15:00（北京 UTC<span class="hljs-string">+8</span>）。<br>也就是说，在 setTime() 后传感器的时间要快了 8 小时。<br></code></pre></td></tr></table></figure><h3 id="传感器时间戳处理的具体流程"><a href="#传感器时间戳处理的具体流程" class="headerlink" title="传感器时间戳处理的具体流程"></a>传感器时间戳处理的具体流程</h3><ol><li>每次佩戴 Polar H10 后，需要通过 setTime() 初始化传感器时间，让传感器不再以 2019-01-01 00:00:00 (GMT) 起始开始计时；</li><li>在获得时间戳后，需要先加上 <em>946684800000000000 ns</em>，以补充 1970-01-01 00:00:00（GMT）到 2000-01-01 00:00:00（GMT）这段时间；</li><li>之后，再<strong>减去</strong> <em>28800000000000 ns</em> 以修正 setTime() 函数将本地时间设置成 GMT 时间所造成的误差。具体数值视 UTC 时区而定，这里用的是北京东八区，也就是 UTC+8，所以是减去 <em>8x60x60 s</em>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>Polar H10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>Sensor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 时间相关的方法</title>
    <link href="/2024/01/13/Swift-%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/01/13/Swift-%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a><strong>时间格式</strong></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">getDate</span>() -&gt; <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-comment">//系统时间</span><br>    <span class="hljs-keyword">let</span> now <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>()<br>    <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()<br>    dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;M月d日&quot;</span><br>    <span class="hljs-keyword">return</span> dateFormatter.string(from: now)<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">stringToDate</span>(<span class="hljs-params">string</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Date</span> &#123;<br>    <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()<br>    dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span><br>    <span class="hljs-keyword">let</span> date <span class="hljs-operator">=</span> dateFormatter.date(from: string)<span class="hljs-operator">!</span><br>    <span class="hljs-keyword">return</span> date<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取当前小时、星期几等"><a href="#获取当前小时、星期几等" class="headerlink" title="获取当前小时、星期几等"></a>获取当前小时、星期几等</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 获取当前小时</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">getCurrentHour</span>() -&gt; <span class="hljs-type">Int</span> &#123;<br>    <span class="hljs-keyword">let</span> calendar <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.current<br>    <span class="hljs-keyword">let</span> dateComponets <span class="hljs-operator">=</span> calendar.dateComponents([<span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.year, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.month, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.day, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.hour, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.weekday], from: <span class="hljs-type">Date</span>())<br>    <span class="hljs-keyword">return</span> (dateComponets.hour<span class="hljs-operator">!</span>)<br>&#125;<br><br><span class="hljs-comment">//获取星期几</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">getCurrentWeekday</span>() -&gt; <span class="hljs-type">Int</span> &#123;<br>    <span class="hljs-keyword">let</span> calendar <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.current<br>    <span class="hljs-keyword">let</span> dateComponets <span class="hljs-operator">=</span> calendar.dateComponents([<span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.year, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.month, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.day, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.hour, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.weekday], from: <span class="hljs-type">Date</span>())<br>    <span class="hljs-keyword">return</span> (dateComponets.weekday<span class="hljs-operator">!</span> <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">dateInterval</span>(<span class="hljs-params">startTime</span>: <span class="hljs-type">String</span>, <span class="hljs-params">endTime</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Int</span>&#123;<br>    <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()<br>    dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span><br>    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> date1 <span class="hljs-operator">=</span> dateFormatter.date(from: startTime),<br>          <span class="hljs-keyword">let</span> date2 <span class="hljs-operator">=</span> dateFormatter.date(from: endTime) <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> components <span class="hljs-operator">=</span> <span class="hljs-type">NSCalendar</span>.current.dateComponents([.minute], from: date1, to: date2)<br>    <span class="hljs-comment">//如果需要返回月份间隔，分钟间隔等等，只需要在dateComponents第一个参数后面加上相应的参数即可，示例如下：</span><br>    <span class="hljs-comment">//let components = NSCalendar.current.dateComponents([.month,.day,.hour,.minute], from: date1, to: date2)</span><br>    <span class="hljs-keyword">return</span> components.minute<span class="hljs-operator">!</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果是 <code>date</code> 格式则可以直接使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> components <span class="hljs-operator">=</span> <span class="hljs-type">NSCalendar</span>.current.dateComponents([.minute, .second], from: tic, to: toc)<br>dateInterval <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(components.minute<span class="hljs-operator">!</span>)</span>:<span class="hljs-subst">\(components.second<span class="hljs-operator">!</span>)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="星期几显示成中文"><a href="#星期几显示成中文" class="headerlink" title="星期几显示成中文"></a>星期几显示成中文</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">String</span> &#123;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">featureWeekday</span>() -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()<br>        dateFormatter.locale <span class="hljs-operator">=</span> <span class="hljs-type">Locale</span>.current<br>        dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span><br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> formatDate <span class="hljs-operator">=</span> dateFormatter.date(from: <span class="hljs-keyword">self</span>) <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> &#125;<br>        <span class="hljs-keyword">let</span> calendar <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.current<br>        <span class="hljs-keyword">let</span> weekDay <span class="hljs-operator">=</span> calendar.component(.weekday, from: formatDate)<br>        <span class="hljs-keyword">switch</span> weekDay &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期日&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期一&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期二&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期三&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期四&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期五&quot;</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期六&quot;</span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Date</span> &#123;<br><br>    <span class="hljs-comment">/// 获取当前 秒级 时间戳 - 10位</span><br>    <span class="hljs-keyword">var</span> timeStamp : <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970<br>        <span class="hljs-keyword">let</span> timeStamp <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(timeInterval)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(timeStamp)</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">/// 获取当前 毫秒级 时间戳 - 13位</span><br>    <span class="hljs-keyword">var</span> milliStamp : <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970<br>        <span class="hljs-keyword">let</span> millisecond <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>(round(timeInterval<span class="hljs-operator">*</span><span class="hljs-number">1000</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(millisecond)</span>&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> currentDate <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>()<br><span class="hljs-keyword">let</span> timeInterval <span class="hljs-operator">=</span> currentDate.timeIntervalSince1970<br><span class="hljs-keyword">let</span> milliseconds <span class="hljs-operator">=</span> timeInterval <span class="hljs-operator">*</span> <span class="hljs-number">1000</span><br><span class="hljs-keyword">let</span> timeStamp <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>(milliseconds)<br></code></pre></td></tr></table></figure><h3 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">timeStampToString</span>(<span class="hljs-params">timeStamp</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">String</span>&#123;<br>    <span class="hljs-keyword">let</span> interval:<span class="hljs-type">TimeInterval</span><span class="hljs-operator">=</span><span class="hljs-type">TimeInterval</span>.<span class="hljs-keyword">init</span>(timeStamp)<span class="hljs-operator">!</span><br>    <span class="hljs-keyword">let</span> date <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>(timeIntervalSince1970: interval)<br>    <span class="hljs-keyword">let</span> dateformatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()<br>    dateformatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br>    <span class="hljs-keyword">return</span> dateformatter.string(from: date)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 获取工程版本号以及构建版本号自动递增</title>
    <link href="/2024/01/13/Swift-%E8%8E%B7%E5%8F%96%E5%B7%A5%E7%A8%8B%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <url>/2024/01/13/Swift-%E8%8E%B7%E5%8F%96%E5%B7%A5%E7%A8%8B%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="版本号获取"><a href="#版本号获取" class="headerlink" title="版本号获取"></a>版本号获取</h2><p>这里取的是 <code>Verson</code> 而不是 <code>Build</code>，参考 <a href="https://stackoverflow.com/questions/25965239/how-do-i-get-the-app-version-and-build-number-using-swift">How do I get the App version and build number using Swift?</a> 中的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> appVersion <span class="hljs-operator">=</span> <span class="hljs-type">Bundle</span>.main.infoDictionary<span class="hljs-operator">?</span>[<span class="hljs-string">&quot;CFBundleShortVersionString&quot;</span>] <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span><br></code></pre></td></tr></table></figure><h2 id="构建版本号递增"><a href="#构建版本号递增" class="headerlink" title="构建版本号递增"></a>构建版本号递增</h2><p>可看 <a href="https://kangzubin.com/xcode-buildversion-increase/">Xcode 工程设置构建版本号自动递增</a></p><p>首先，在 Build Settings-Versioning 配置项中，设置 <code>Current Project Version</code> 为选定的值，例如 <code>100</code>（可以为整数或浮点数，新工程一般设为 <code>1</code>），<code>agvtool</code> 命令会根据这个值来递增 “Build” 号。另外需要再选择 <code>Versioning System</code>的值为 <code>Apple Generic</code></p><p>然后，在 Build Phases 中，点击 “+” 号，选择 “New Run Script Phase” 添加一个执行脚本，并设置以下脚本代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">xcrun agvtool next-version -all<br></code></pre></td></tr></table></figure><p>以上，我们在每次编译工程时，“Build” 号就会自动递增加 1 了。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 下 WatchOS 与 iOS 通信</title>
    <link href="/2024/01/13/SwiftUI-%E4%B8%8B-WatchOS-%E4%B8%8E-iOS-%E9%80%9A%E4%BF%A1/"/>
    <url>/2024/01/13/SwiftUI-%E4%B8%8B-WatchOS-%E4%B8%8E-iOS-%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p>目的是通过 iWatch 记录当前的 RPE。</p><ul><li><p>关于 WatchOS 的工程文件创建，可参考 <a href="https://developer.apple.com/tutorials/swiftui/creating-a-watchos-app#Share-files-between-targets">Creating a watchOS app</a></p></li><li><p>关于具体的代码，可参考 <a href="https://github.com/MilanistaDev/WatchConnectivitySampleForSwiftUI/tree/main">WatchConnectivitySampleForSwiftUI</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>RPE 采集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 工程 Bluetooth Always Usage Description 设置问题</title>
    <link href="/2024/01/10/Xcode-%E5%B7%A5%E7%A8%8B-Bluetooth-Always-Usage-Description-%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/10/Xcode-%E5%B7%A5%E7%A8%8B-Bluetooth-Always-Usage-Description-%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在进行蓝牙开发时，如果没有设置 Bluetooth Always Usage Description，则会提示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app&#x27;s Info.plist must contain an NSBluetoothAlwaysUsageDescription key with a string value explaining to the user how the app uses this data.<br></code></pre></td></tr></table></figure><p><strong>类似于请求网络、请求定位一样。</strong></p><p>但是在 Xcode 13 后，传统的 info.plist 文件已经消失了。</p><p>苹果在<a href="https://link.juejin.cn/?target=https://developer.apple.com/documentation/xcode-release-notes/xcode-13-release-notes">《Xcode13 Release Notes》</a>中写道：</p><blockquote><p>“Projects created from several templates no longer require configuration files such as entitlements and <strong>Info.plist</strong> files. Configure common fields in the <strong>target’s Info tab, and build settings</strong> in the project editor. These files are added to the project when additional fields are used. (68254857)”</p></blockquote><p><strong>意思是说，从 Xcode13 开始，新建的工程不再要求使用配置文件（Info.plist、entitlements）。如果需要修改 Xcode 的配置，请直接在 Xcode 面板「target - Info - Custom iOS Target Properties 和 build settings」中设置</strong>。</p><p>其实，早在 Xcode13 之前，Custom iOS Target Properties 这个面板就有了，只是 Xcode 会自动同步 Cusutom iOS Target Properties 和 Info.plist 文件。而现在，Xcode13 默认删除了 Info.plist 文件中的大部分属性，保留在 Cusutom iOS Target Properties 中。</p><p>具体的做法：</p><p>找到 TARGETS，选中 Build Settings，「All」与「Combined」，找到 info.plist Values，其中有一个选项是 <strong>Privacy - Bluetooth Always Usage Description</strong>，找到并填写内容，例如「需要打开的蓝牙」。</p><p>设置完成后，在第一次运行 App 时，程序会向用户请求蓝牙使用权限，请求操作显示的内容便是「需要打开的蓝牙」。</p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>Polar H10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Cocoapods 时报错 Sandbox: rsync.samba(62830) deny(1)</title>
    <link href="/2024/01/10/%E4%BD%BF%E7%94%A8-Cocoapods-%E6%97%B6%E6%8A%A5%E9%94%99-Sandbox-rsync-samba-62830-deny-1/"/>
    <url>/2024/01/10/%E4%BD%BF%E7%94%A8-Cocoapods-%E6%97%B6%E6%8A%A5%E9%94%99-Sandbox-rsync-samba-62830-deny-1/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在 Xcode 新建项目并 pod install 后，run 的时候，遇到了如下的问题：</p><p>沙盒报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Sandbox: rsync.samba(62830) deny(1)<br></code></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在 TARGETS 的 Build Settings 中选择「All」与「Combined」之后搜索：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">User Script Sandboxing<br></code></pre></td></tr></table></figure><p>将其改为 NO 即可解决。</p><p>参考 <a href="https://blog.csdn.net/lyz0925/article/details/133944802">iOS Xcode 15 Sandbox: rsync(xxxx) deny(1) file-write-create</a></p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>Polar H10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CocoaPods</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 CNN 对 ECG 心电信号进行心拍分类（pytorch）</title>
    <link href="/2024/01/09/%E5%88%A9%E7%94%A8-CNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/"/>
    <url>/2024/01/09/%E5%88%A9%E7%94%A8-CNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> torch.utils.data<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> torch.utils.data<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn, optim<br><span class="hljs-keyword">from</span> torch.utils.data.dataset <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">import</span> wfdb<br><span class="hljs-keyword">import</span> pywt<br><span class="hljs-keyword">import</span> seaborn<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br><br>torch.set_default_tensor_type(torch.DoubleTensor)<br><br><span class="hljs-comment"># 是否用</span><br>is_cuda = <span class="hljs-literal">False</span><br>num_epochs = <span class="hljs-number">100</span><br>batch_size = <span class="hljs-number">10</span><br>torch.manual_seed(<span class="hljs-number">123</span>)<br>in_channels_ = <span class="hljs-number">1</span><br>num_classes = <span class="hljs-number">12</span><br>allow_label_leakage = <span class="hljs-literal">True</span><br><br>device = torch.device(<span class="hljs-string">&quot;cuda:2&quot;</span> <span class="hljs-keyword">if</span> is_cuda <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><br>list_target = []<br><br><span class="hljs-comment"># 测试集在数据集中所占的比例</span><br>RATIO = <span class="hljs-number">0.3</span><br><br>data_path = <span class="hljs-string">&quot;data/mit-bih-arrhythmia-database-1.0.0&quot;</span><br><br>ecg_all_class_set = []<br>count_number_of_class = &#123;<span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;~&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;|&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-number">0</span>&#125;<br><br><br><span class="hljs-comment"># 读取心电数据和对应标签,并对数据进行小波去噪</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDataSet</span>(<span class="hljs-params">number, X_data, Y_data</span>):<br>    ecgClassSet = [<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>]<br><br>    <span class="hljs-comment"># 读取心电数据记录</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在读取 &quot;</span> + number + <span class="hljs-string">&quot; 号心电数据...&quot;</span>)<br>    record = wfdb.rdrecord(<span class="hljs-string">&#x27;data/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, channel_names=[<span class="hljs-string">&#x27;MLII&#x27;</span>])<br>    data = record.p_signal.flatten()<br>    rdata = denoise(data=data)<br><br>    <span class="hljs-comment"># 获取心电数据记录中R波的位置和对应的标签</span><br>    annotation = wfdb.rdann(<span class="hljs-string">&#x27;data/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, <span class="hljs-string">&#x27;atr&#x27;</span>)<br>    Rlocation = annotation.sample<br>    Rclass = annotation.symbol<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> Rclass:<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ecg_all_class_set:<br>            ecg_all_class_set.append(c)<br>    <span class="hljs-comment"># 去掉前后的不稳定数据</span><br>    start = <span class="hljs-number">10</span><br>    end = <span class="hljs-number">5</span><br>    i = start<br>    j = <span class="hljs-built_in">len</span>(annotation.symbol) - end<br><br>    <span class="hljs-comment"># 因为只选择NAVLR五种心电类型,所以要选出该条记录中所需要的那些带有特定标签的数据,舍弃其余标签的点</span><br>    <span class="hljs-comment"># X_data在R波前后截取长度为300的数据点</span><br>    <span class="hljs-comment"># Y_data将NAVLR按顺序转换为01234</span><br>    <span class="hljs-keyword">while</span> i &lt; j:<br>        <span class="hljs-keyword">try</span>:<br>            lable = ecgClassSet.index(Rclass[i])<br>            <span class="hljs-keyword">if</span> Rlocation[i] - <span class="hljs-number">1199</span> &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> Rlocation[i] + <span class="hljs-number">2401</span> &gt; Rlocation[<span class="hljs-built_in">len</span>(Rlocation) - <span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> Rclass[<br>                i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ecgClassSet:<br>                i += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            x_train = rdata[Rlocation[i] - <span class="hljs-number">1199</span>:Rlocation[i] + <span class="hljs-number">2401</span>]<br>            X_data.append(x_train)<br>            Y_data.append(lable)<br>            temp_class = Rclass[i]<br>            <span class="hljs-built_in">print</span>(count_number_of_class[temp_class])<br>            count_number_of_class[temp_class] = count_number_of_class[temp_class] + <span class="hljs-number">1</span><br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-comment"># 小波去噪预处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">denoise</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 小波变换</span><br>    coeffs = pywt.wavedec(data=data, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>, level=<span class="hljs-number">9</span>)<br>    cA9, cD9, cD8, cD7, cD6, cD5, cD4, cD3, cD2, cD1 = coeffs<br><br>    <span class="hljs-comment"># 阈值去噪</span><br>    threshold = (np.median(np.<span class="hljs-built_in">abs</span>(cD1)) / <span class="hljs-number">0.6745</span>) * (np.sqrt(<span class="hljs-number">2</span> * np.log(<span class="hljs-built_in">len</span>(cD1))))<br>    cD1.fill(<span class="hljs-number">0</span>)<br>    cD2.fill(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(coeffs) - <span class="hljs-number">2</span>):<br>        coeffs[i] = pywt.threshold(coeffs[i], threshold)<br><br>    <span class="hljs-comment"># 小波反变换,获取去噪后的信号</span><br>    rdata = pywt.waverec(coeffs=coeffs, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>)<br>    <span class="hljs-keyword">return</span> rdata<br><br><br><span class="hljs-comment"># 加载数据集并进行预处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadData</span>():<br>    numberSet = [<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;101&#x27;</span>]<br>    dataSet = []<br>    lableSet = []<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numberSet:<br>        getDataSet(n, dataSet, lableSet)<br><br>    <span class="hljs-comment"># 转numpy数组,打乱顺序</span><br>    dataSet = np.array(dataSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">3600</span>)<br>    lableSet = np.array(lableSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(dataSet.shape)<br>    <span class="hljs-built_in">print</span>(lableSet.shape)<br>    train_ds = np.hstack((dataSet, lableSet))<br>    np.random.shuffle(train_ds)<br><br>    <span class="hljs-comment"># 数据集及其标签集</span><br>    X = train_ds[:, :<span class="hljs-number">3600</span>].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3600</span>)<br>    Y = train_ds[:, <span class="hljs-number">3600</span>]<br><br>    <span class="hljs-comment"># 测试集及其标签集</span><br>    shuffle_index = np.random.permutation(<span class="hljs-built_in">len</span>(X))<br>    test_length = <span class="hljs-built_in">int</span>(RATIO * <span class="hljs-built_in">len</span>(shuffle_index))<br>    test_index = shuffle_index[:test_length]<br>    train_index = shuffle_index[test_length:]<br>    X_test, Y_test = X[test_index], Y[test_index]<br>    X_train, Y_train = X[train_index], Y[train_index]<br>    <span class="hljs-keyword">return</span> X_train, Y_train, X_test, Y_test<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">basic_layer</span>(<span class="hljs-params">in_channels, out_channels, kernel_size, batch_norm=<span class="hljs-literal">False</span>, max_pool=<span class="hljs-literal">True</span>, conv_stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span></span><br><span class="hljs-params">                , pool_stride=<span class="hljs-number">2</span>, pool_size=<span class="hljs-number">2</span></span>):<br>    layer = nn.Sequential(<br>        nn.Conv1d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=conv_stride,<br>                  padding=padding),<br>        nn.ReLU()<br>    )<br>    <span class="hljs-keyword">if</span> batch_norm:<br>        layer = nn.Sequential(<br>            layer,<br>            nn.BatchNorm1d(num_features=out_channels)<br>        )<br>    <span class="hljs-keyword">if</span> max_pool:<br>        layer = nn.Sequential(<br>            layer,<br>            nn.MaxPool1d(kernel_size=pool_size, stride=pool_stride)<br>        )<br>    <span class="hljs-keyword">return</span> layer<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mit_bih_classifier</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels=in_channels_</span>):<br>        <span class="hljs-built_in">super</span>(mit_bih_classifier, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.cnn = nn.Sequential(<br>            basic_layer(in_channels=in_channels, out_channels=<span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">50</span>, batch_norm=<span class="hljs-literal">True</span>,<br>                        max_pool=<span class="hljs-literal">True</span>, conv_stride=<span class="hljs-number">3</span>, pool_stride=<span class="hljs-number">3</span>, pool_size=<span class="hljs-number">2</span>),<br>            basic_layer(in_channels=<span class="hljs-number">128</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">7</span>, batch_norm=<span class="hljs-literal">True</span>,<br>                        max_pool=<span class="hljs-literal">True</span>, conv_stride=<span class="hljs-number">1</span>, pool_stride=<span class="hljs-number">2</span>, pool_size=<span class="hljs-number">2</span>),<br>            basic_layer(in_channels=<span class="hljs-number">32</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">10</span>, batch_norm=<span class="hljs-literal">False</span>,<br>                        max_pool=<span class="hljs-literal">False</span>, conv_stride=<span class="hljs-number">1</span>),<br>            basic_layer(in_channels=<span class="hljs-number">32</span>, out_channels=<span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">5</span>, conv_stride=<span class="hljs-number">2</span>, pool_stride=<span class="hljs-number">2</span>,<br>                        max_pool=<span class="hljs-literal">True</span>, batch_norm=<span class="hljs-literal">False</span>),<br>            basic_layer(in_channels=<span class="hljs-number">128</span>, out_channels=<span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">15</span>, conv_stride=<span class="hljs-number">1</span>, pool_size=<span class="hljs-number">2</span>,<br>                        max_pool=<span class="hljs-literal">True</span>, batch_norm=<span class="hljs-literal">False</span>),<br>            basic_layer(in_channels=<span class="hljs-number">256</span>, out_channels=<span class="hljs-number">512</span>, kernel_size=<span class="hljs-number">5</span>, conv_stride=<span class="hljs-number">1</span>,<br>                        max_pool=<span class="hljs-literal">False</span>, batch_norm=<span class="hljs-literal">False</span>),<br>            basic_layer(in_channels=<span class="hljs-number">512</span>, out_channels=<span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">3</span>, conv_stride=<span class="hljs-number">1</span>,<br>                        max_pool=<span class="hljs-literal">False</span>, batch_norm=<span class="hljs-literal">False</span>),<br>            nn.Flatten(),<br>            nn.Linear(in_features=<span class="hljs-number">128</span> * <span class="hljs-number">3</span> * <span class="hljs-number">3</span>, out_features=<span class="hljs-number">512</span>),<br>            nn.ReLU(),<br>            nn.Dropout(p=<span class="hljs-number">.1</span>),<br>            nn.Linear(<span class="hljs-number">512</span>, out_features=num_classes),<br>            nn.Softmax(dim=<span class="hljs-number">1</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cnn(x)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">get_pytorch_dataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data, target, transforms_=<span class="hljs-literal">None</span>, </span>):<br>        <span class="hljs-variable language_">self</span>.data = data<br>        <span class="hljs-variable language_">self</span>.target = target<br>        <span class="hljs-variable language_">self</span>.transforms = transforms_<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.data[item], <span class="hljs-variable language_">self</span>.target[item]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.data.shape[<span class="hljs-number">0</span>]<br><br><br>device = torch.device(<span class="hljs-string">&quot;cuda:2&quot;</span> <span class="hljs-keyword">if</span> is_cuda <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>model = mit_bih_classifier().to(device).double()<br>lr = <span class="hljs-number">0.0003</span><br><br>optimizer = optim.Adam(model.parameters(), lr=lr, weight_decay=<span class="hljs-number">1e-3</span>)<br>loss_fn = nn.CrossEntropyLoss()<br><br>X_train, Y_train, X_test, Y_test = loadData()<br>train_dataset = get_pytorch_dataset(X_train, Y_train)<br>test_dataset = get_pytorch_dataset(X_train, Y_train)<br>train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># test_dataset = CustomDatasetFromCSV(&#x27;./data/Arrhythmia_dataset.pkl&#x27;)</span><br>test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">epoch</span>):<br>    model.train()<br>    train_loss = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> batch_idx, (data, target) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):<br>        data, target = data.to(device), target.to(device)<br>        output = model(data)<br>        loss = loss_fn(output.double(), target.long())<br><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        train_loss += loss.item()<br>        <span class="hljs-keyword">if</span> batch_idx % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练回合: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\t损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>                epoch, batch_idx * <span class="hljs-built_in">len</span>(data), <span class="hljs-built_in">len</span>(train_loader.dataset),<br>                       <span class="hljs-number">100</span> * batch_idx / <span class="hljs-built_in">len</span>(train_loader),<br>                loss.item()))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;====&gt; 训练回合: &#123;&#125; 平均损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        epoch, train_loss / <span class="hljs-built_in">len</span>(train_loader.dataset)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">epoch</span>):<br>    model.<span class="hljs-built_in">eval</span>()<br>    test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0.00000</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> batch_idx, (data, target) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_loader):<br>            data, target = data.to(device), target.to(device)<br>            output = model(data)<br>            loss = loss_fn(output, target.long())<br>            test_loss += loss.item()<br>            <span class="hljs-comment"># 准确率</span><br>            prediction = torch.argmax(output, dim=<span class="hljs-number">1</span>)<br>            accuracy = (prediction == target).<span class="hljs-built_in">sum</span>().<span class="hljs-built_in">float</span>()<br>            total_accuracy = total_accuracy + accuracy<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;========&gt;predicted:&quot;</span>, prediction)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;========&gt;target:&quot;</span>, target)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;整体测试集上的损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(test_loss))<br>    test_loss /= <span class="hljs-built_in">len</span>(test_loader.dataset)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;整体测试集上的平均损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;:.10f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / <span class="hljs-built_in">len</span>(test_dataset)))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(count_number_of_class)<br>    <span class="hljs-built_in">print</span>(ecg_all_class_set)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num_epochs + <span class="hljs-number">1</span>):<br>        train(epoch)<br>        test(epoch)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list_target))<br></code></pre></td></tr></table></figure><p><a href="https://github.com/Yggkk2021/mit_bih_ecg_cnn/blob/master/mit_bit_cnn_impl.py">Code</a></p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 RNN 对 ECG 心电信号进行心拍分类（pytorch）</title>
    <link href="/2024/01/09/%E5%88%A9%E7%94%A8-RNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/"/>
    <url>/2024/01/09/%E5%88%A9%E7%94%A8-RNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">导入相关包</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> wfdb<br><span class="hljs-keyword">import</span> pywt<br><span class="hljs-keyword">import</span> seaborn<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">加载数据集</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 测试集在数据集中所占的比例</span><br>RATIO = <span class="hljs-number">0.2</span><br><br><span class="hljs-comment"># 小波去噪预处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">denoise</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 小波变换</span><br>    coeffs = pywt.wavedec(data=data, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>, level=<span class="hljs-number">9</span>)<br>    cA9, cD9, cD8, cD7, cD6, cD5, cD4, cD3, cD2, cD1 = coeffs<br>    <span class="hljs-comment"># 阈值去噪</span><br>    threshold = (np.median(np.<span class="hljs-built_in">abs</span>(cD1)) / <span class="hljs-number">0.6745</span>) * (np.sqrt(<span class="hljs-number">2</span> * np.log(<span class="hljs-built_in">len</span>(cD1))))<br>    cD1.fill(<span class="hljs-number">0</span>)<br>    cD2.fill(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(coeffs) - <span class="hljs-number">2</span>):<br>        coeffs[i] = pywt.threshold(coeffs[i], threshold)<br>    <span class="hljs-comment"># 小波反变换,获取去噪后的信号</span><br>    rdata = pywt.waverec(coeffs=coeffs, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>)<br>    <span class="hljs-keyword">return</span> rdata<br><br><span class="hljs-comment"># 读取心电数据和对应标签,并对数据进行小波去噪</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDataSet</span>(<span class="hljs-params">number, X_data, Y_data</span>):<br>    ecgClassSet = [<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>]<br>    <span class="hljs-comment"># 读取心电数据记录</span><br>    <span class="hljs-comment"># print(&quot;正在读取 &quot; + number + &quot; 号心电数据...&quot;)</span><br>    <span class="hljs-comment"># 读取MLII导联的数据</span><br>    record = wfdb.rdrecord(<span class="hljs-string">&#x27;C:/mycode/dataset_make/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, channel_names=[<span class="hljs-string">&#x27;MLII&#x27;</span>])<br>    data = record.p_signal.flatten()<br>    rdata = denoise(data=data)<br>    <span class="hljs-comment"># 获取心电数据记录中R波的位置和对应的标签</span><br>    annotation = wfdb.rdann(<span class="hljs-string">&#x27;C:/mycode/dataset_make/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, <span class="hljs-string">&#x27;atr&#x27;</span>)<br>    Rlocation = annotation.sample<br>    Rclass = annotation.symbol<br>    <span class="hljs-comment"># 去掉前后的不稳定数据</span><br>    start = <span class="hljs-number">10</span><br>    end = <span class="hljs-number">5</span><br>    i = start<br>    j = <span class="hljs-built_in">len</span>(annotation.symbol) - end<br>    <span class="hljs-comment"># 因为只选择NAVLR五种心电类型,所以要选出该条记录中所需要的那些带有特定标签的数据,舍弃其余标签的点</span><br>    <span class="hljs-comment"># X_data在R波前后截取长度为300的数据点</span><br>    <span class="hljs-comment"># Y_data将NAVLR按顺序转换为01234</span><br>    <span class="hljs-keyword">while</span> i &lt; j:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Rclass[i] 是标签</span><br>            lable = ecgClassSet.index(Rclass[i])  <span class="hljs-comment"># 这一步就是相当于抛弃了不在ecgClassSet的索引</span><br>            <span class="hljs-comment"># 基于经验值，基于R峰向前取100个点，向后取200个点</span><br>            x_train = rdata[Rlocation[i] - <span class="hljs-number">100</span>:Rlocation[i] + <span class="hljs-number">200</span>]<br>            X_data.append(x_train)<br>            Y_data.append(lable)<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-comment"># 加载数据集并进行预处理</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadData</span>():<br>    numberSet = [<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;103&#x27;</span>, <span class="hljs-string">&#x27;105&#x27;</span>, <span class="hljs-string">&#x27;106&#x27;</span>, <span class="hljs-string">&#x27;107&#x27;</span>, <span class="hljs-string">&#x27;108&#x27;</span>, <span class="hljs-string">&#x27;109&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>, <span class="hljs-string">&#x27;113&#x27;</span>, <span class="hljs-string">&#x27;114&#x27;</span>, <span class="hljs-string">&#x27;115&#x27;</span>,<br>                 <span class="hljs-string">&#x27;116&#x27;</span>, <span class="hljs-string">&#x27;117&#x27;</span>, <span class="hljs-string">&#x27;119&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>, <span class="hljs-string">&#x27;122&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;124&#x27;</span>, <span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;201&#x27;</span>, <span class="hljs-string">&#x27;202&#x27;</span>, <span class="hljs-string">&#x27;203&#x27;</span>, <span class="hljs-string">&#x27;205&#x27;</span>, <span class="hljs-string">&#x27;208&#x27;</span>,<br>                 <span class="hljs-string">&#x27;210&#x27;</span>, <span class="hljs-string">&#x27;212&#x27;</span>, <span class="hljs-string">&#x27;213&#x27;</span>, <span class="hljs-string">&#x27;214&#x27;</span>, <span class="hljs-string">&#x27;215&#x27;</span>, <span class="hljs-string">&#x27;217&#x27;</span>, <span class="hljs-string">&#x27;219&#x27;</span>, <span class="hljs-string">&#x27;220&#x27;</span>, <span class="hljs-string">&#x27;221&#x27;</span>, <span class="hljs-string">&#x27;222&#x27;</span>, <span class="hljs-string">&#x27;223&#x27;</span>, <span class="hljs-string">&#x27;228&#x27;</span>, <span class="hljs-string">&#x27;230&#x27;</span>,<br>                 <span class="hljs-string">&#x27;231&#x27;</span>, <span class="hljs-string">&#x27;232&#x27;</span>, <span class="hljs-string">&#x27;233&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>]<br>    dataSet = []<br>    lableSet = []<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numberSet:<br>        getDataSet(n, dataSet, lableSet)<br>    <span class="hljs-comment"># 转numpy数组,打乱顺序</span><br>    dataSet = np.array(dataSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">300</span>)  <span class="hljs-comment"># 转化为二维，一行有 300 个，行数需要计算</span><br>    lableSet = np.array(lableSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 转化为二维，一行有   1 个，行数需要计算</span><br>    train_ds = np.hstack((dataSet, lableSet))  <span class="hljs-comment"># 将数据集和标签集水平堆叠在一起,(92192, 300) (92192, 1) (92192, 301)</span><br>    <span class="hljs-comment"># print(dataSet.shape, lableSet.shape, train_ds.shape)  # (92192, 300) (92192, 1) (92192, 301)</span><br>    np.random.shuffle(train_ds)<br>    <span class="hljs-comment"># 数据集及其标签集</span><br>    X = train_ds[:, :<span class="hljs-number">300</span>].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">300</span>)  <span class="hljs-comment"># (92192, 1, 300)</span><br>    Y = train_ds[:, <span class="hljs-number">300</span>]  <span class="hljs-comment"># (92192)</span><br><br>    <span class="hljs-comment"># 测试集及其标签集</span><br>    shuffle_index = np.random.permutation(<span class="hljs-built_in">len</span>(X))  <span class="hljs-comment"># 生成0-(X-1)的随机索引数组</span><br><br>    <span class="hljs-comment"># 设定测试集的大小 RATIO是测试集在数据集中所占的比例</span><br>    test_length = <span class="hljs-built_in">int</span>(RATIO * <span class="hljs-built_in">len</span>(shuffle_index))<br>    <span class="hljs-comment"># 测试集的长度</span><br>    test_index = shuffle_index[:test_length]<br>    <span class="hljs-comment"># 训练集的长度</span><br>    train_index = shuffle_index[test_length:]<br>    X_test, Y_test = X[test_index], Y[test_index]<br>    X_train, Y_train = X[train_index], Y[train_index]<br>    <span class="hljs-keyword">return</span> X_train, Y_train, X_test, Y_test<br><br>X_train, Y_train, X_test, Y_test = loadData()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">数据处理</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>train_Data = Data.TensorDataset(torch.Tensor(X_train), torch.Tensor(Y_train)) <span class="hljs-comment"># 返回结果为一个个元组，每一个元组存放数据和标签</span><br>train_loader = Data.DataLoader(dataset=train_Data, batch_size=<span class="hljs-number">128</span>)<br>test_Data = Data.TensorDataset(torch.Tensor(X_test), torch.Tensor(Y_test)) <span class="hljs-comment"># 返回结果为一个个元组，每一个元组存放数据和标签</span><br>test_loader = Data.DataLoader(dataset=test_Data, batch_size=<span class="hljs-number">128</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">模型搭建</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RnnModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(RnnModel, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        参数解释：(输入维度，隐藏层维度，网络层数)</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-variable language_">self</span>.rnn = nn.RNN(<span class="hljs-number">300</span>, <span class="hljs-number">50</span>, <span class="hljs-number">3</span>, nonlinearity=<span class="hljs-string">&#x27;tanh&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.linear = nn.Linear(<span class="hljs-number">50</span>, <span class="hljs-number">5</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        r_out, h_state = <span class="hljs-variable language_">self</span>.rnn(x)<br>        output = <span class="hljs-variable language_">self</span>.linear(r_out[:,-<span class="hljs-number">1</span>,:])  <span class="hljs-comment"># 将 RNN 层的输出 r_out 在最后一个时间步上的输出（隐藏状态）传递给线性层</span><br>        <span class="hljs-keyword">return</span> output<br><br>model = RnnModel()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">设置损失函数和参数优化方法</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>criterion = torch.nn.CrossEntropyLoss()<br>optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">模型训练</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>EPOCHS = <span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCHS):<br>    running_loss = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):<br>        inputs, label = data<br>        y_predict = model(inputs)<br>        loss = criterion(y_predict, label.long())<br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br>        running_loss += loss.item()<br><br>    <span class="hljs-comment"># 预测</span><br>    correct = <span class="hljs-number">0</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>            inputs, label = data<br>            y_pred = model(inputs)<br>            _, predicted = torch.<span class="hljs-built_in">max</span>(y_pred.data, dim=<span class="hljs-number">1</span>)<br>            total += label.size(<span class="hljs-number">0</span>)<br>            correct += (predicted == label).<span class="hljs-built_in">sum</span>().item()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Epoch: <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, ACC on test: <span class="hljs-subst">&#123;correct / total&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/LQ_001/article/details/132339515">Code</a></p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 使用 wfdb 库处理 MIT-BIH 心律失常数据</title>
    <link href="/2024/01/04/Python-%E4%BD%BF%E7%94%A8-wfdb-%E5%BA%93%E5%A4%84%E7%90%86-MIT-BIH-%E5%BF%83%E5%BE%8B%E5%A4%B1%E5%B8%B8%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/01/04/Python-%E4%BD%BF%E7%94%A8-wfdb-%E5%BA%93%E5%A4%84%E7%90%86-MIT-BIH-%E5%BF%83%E5%BE%8B%E5%A4%B1%E5%B8%B8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>数据源</p><ul><li><p>原始网页 <a href="https://www.physionet.org/content/mitdb/1.0.0/#files-panel">MIT-BIH Arrhythmia Database</a></p></li><li><p>kaggle <a href="https://www.kaggle.com/datasets/mondejar/mitbih-database/data?select=101.csv">MIT-BIH Arrhythmia Database</a></p></li></ul><h3 id="数据解读"><a href="#数据解读" class="headerlink" title="数据解读"></a>数据解读</h3><p>主要内容来自<a href="https://blog.csdn.net/Mrm_cong/article/details/104668271">MIT-BIH心律失常数据库详解</a></p><p>心律失常数据库每一个数据记录都包含三个文件，“.hea”、“.dat”和“.atr”<br><strong>.hea</strong> 为头文件，记录文件名、导联数、采样率、数据点数<br><strong>.dat</strong> 为数据文件，采用212格式进行存储。<br><strong>.atr</strong> 为注释文件，记录了心电专家对相应的心电信号的诊断信息。</p><p>在大多数记录中，第一条信号是MLII型（通过将电极置于胸部而获得），第二条信号通常是V1（偶尔是V2或V5，在一个实例中是V4）。现将各记录中导联类型统计如下：</p><ol><li>MLII、V1 : 101、105、106、107、108、109、111、112、113、115、116、118、119、121、122、200、201、202、214、215、217、219、220、221、222、223、228、230、231、232、233、234</li><li>MLII、V2 ： 103、117</li><li>MLII、V4 ： 124</li><li>MLII、V5 ： 100、123</li><li>V5、MLII ： 114</li><li>V5、V2 ：102、104</li></ol><p>具体可看 <a href="https://www.physionet.org/physiobank/database/html/mitdbdir/tables.htm">Tables of beats and rhythms</a></p><h3 id="wfdb"><a href="#wfdb" class="headerlink" title="wfdb"></a>wfdb</h3><p>主要内容来自 <a href="https://blog.csdn.net/m0_55245520/article/details/130115513">基于窦性心律的阵发性房颤预测算法研究</a></p><p>原生 python 波形数据库（wfdb）包。用于读取、写入和处理 WFDB 信号和注释的工具库。</p><p>此包的核心组件基于原始 wfdb 规范。此包不包含与原始 wfdb 包完全相同的功能。它的目标是用用户友好的 api 实现尽可能多的核心功能。随着时间的推移，还增加了其他有用的生理信号处理工具。</p><h4 id="读取-hea-文件"><a href="#读取-hea-文件" class="headerlink" title="读取 .hea 文件"></a>读取 .hea 文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wfdb<br>record = wfdb.rdheader(<span class="hljs-string">&#x27;../data/abnormal/04015&#x27;</span>)<br>display(record.__dict__)<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#x27;record_name&#x27;: &#x27;04015&#x27;, </span><br><span class="hljs-string">&#x27;n_sig&#x27;: 2, </span><br><span class="hljs-string">&#x27;fs&#x27;: 250,</span><br><span class="hljs-string">&#x27;counter_freq&#x27;: None, </span><br><span class="hljs-string">&#x27;base_counter&#x27;: None, </span><br><span class="hljs-string">&#x27;sig_len&#x27;: 9205760, </span><br><span class="hljs-string">&#x27;base_time&#x27;: datetime.time(9, 0), </span><br><span class="hljs-string">&#x27;base_date&#x27;: None, </span><br><span class="hljs-string">&#x27;comments&#x27;: [], </span><br><span class="hljs-string">&#x27;sig_name&#x27;: [&#x27;ECG1&#x27;, &#x27;ECG2&#x27;], </span><br><span class="hljs-string">&#x27;p_signal&#x27;: None, </span><br><span class="hljs-string">&#x27;d_signal&#x27;: None, </span><br><span class="hljs-string">&#x27;e_p_signal&#x27;: None, </span><br><span class="hljs-string">&#x27;e_d_signal&#x27;: None, </span><br><span class="hljs-string">&#x27;file_name&#x27;: [&#x27;04015.dat&#x27;, &#x27;04015.dat&#x27;], </span><br><span class="hljs-string">&#x27;fmt&#x27;: [&#x27;212&#x27;, &#x27;212&#x27;], </span><br><span class="hljs-string">&#x27;samps_per_frame&#x27;: [1, 1], </span><br><span class="hljs-string">&#x27;skew&#x27;: [None, None], </span><br><span class="hljs-string">&#x27;byte_offset&#x27;: [None, None], </span><br><span class="hljs-string">&#x27;adc_gain&#x27;: [200.0, 200.0], </span><br><span class="hljs-string">&#x27;baseline&#x27;: [0, 0], </span><br><span class="hljs-string">&#x27;units&#x27;: [&#x27;mV&#x27;, &#x27;mV&#x27;], </span><br><span class="hljs-string">&#x27;adc_res&#x27;: [12, 12], </span><br><span class="hljs-string">&#x27;adc_zero&#x27;: [0, 0], </span><br><span class="hljs-string">&#x27;init_value&#x27;: [-55, -42], </span><br><span class="hljs-string">&#x27;checksum&#x27;: [-27172, -28460], </span><br><span class="hljs-string">&#x27;block_size&#x27;: [0, 0]&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>比较有用的部分：</p><ul><li>fs：采样频率；</li><li>n_sig：信号通道数；</li><li>sig_len：信号长度；</li><li>p_signal：模拟信号值，储存形式为ndarray或者是list；</li><li>d_signal：数字信号值，储存形式为ndarray或者是list。</li></ul><h4 id="读取标注-atr-qrs-qrsc"><a href="#读取标注-atr-qrs-qrsc" class="headerlink" title="读取标注 .atr&#x2F;.qrs&#x2F;.qrsc"></a>读取标注 .atr&#x2F;.qrs&#x2F;.qrsc</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">record=wfdb.rdann(<span class="hljs-string">&#x27;../data/abnormal/04015&#x27;</span>, <span class="hljs-string">&#x27;atr&#x27;</span> ) <br><span class="hljs-built_in">print</span>(record.__dict__)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&#x27;record_name&#x27;: &#x27;04015&#x27;, </span><br><span class="hljs-string">&#x27;extension&#x27;: &#x27;atr&#x27;, </span><br><span class="hljs-string">&#x27;sample&#x27;: array([30, 102584, 119604, 121773, 122194, 133348, 166857, 1096245, 1098054, 1135296, 1139595, 1422436, 1423548, 1459277, 1460416], dtype=int64), </span><br><span class="hljs-string">&#x27;symbol&#x27;: [&#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;], </span><br><span class="hljs-string">&#x27;subtype&#x27;: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), </span><br><span class="hljs-string">&#x27;chan&#x27;: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), &#x27;num&#x27;: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), </span><br><span class="hljs-string">&#x27;aux_note&#x27;: [&#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;], </span><br><span class="hljs-string">&#x27;fs&#x27;: 250, </span><br><span class="hljs-string">&#x27;label_store&#x27;: None, </span><br><span class="hljs-string">&#x27;description&#x27;: None, </span><br><span class="hljs-string">&#x27;custom_labels&#x27;: None,</span><br><span class="hljs-string">&#x27;contained_labels&#x27;: None, </span><br><span class="hljs-string">&#x27;ann_len&#x27;: 15&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>常用到的部分:</p><ul><li>sample：专家标注的信号发生变化的位置</li><li>symbol：信号发生变化的原因</li></ul><h3 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> wfdb<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_db</span>(<span class="hljs-params">n, x, y</span>):<br>    record = wfdb.rdrecord(<span class="hljs-string">&#x27;/Users/bakako/Downloads/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + n, channel_names=[<span class="hljs-string">&#x27;MLII&#x27;</span>])<br>    <span class="hljs-comment"># print(record.__dict__)</span><br>    data = record.p_signal   <span class="hljs-comment"># p_signal 为模拟信号，d_signal 为数字信号</span><br>    data = data.flatten()    <span class="hljs-comment"># 降维</span><br><br>    annotation = wfdb.rdann(<span class="hljs-string">&#x27;/Users/bakako/Downloads/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + n, extension=<span class="hljs-string">&#x27;atr&#x27;</span>)<br>    R_location = annotation.sample  <span class="hljs-comment"># R 波所在的采样点, 专家标注的信号发生变化的位置</span><br>    R_type = annotation.symbol      <span class="hljs-comment"># R 波的 type, 信号发生变化的原因</span><br>    <span class="hljs-comment"># print(R_location)</span><br>    <span class="hljs-comment"># print(R_type)</span><br><br>    <span class="hljs-comment"># 抛掉一些心拍，保证构建数据集时不会超出数组边界</span><br>    i = <span class="hljs-number">5</span><br>    j = <span class="hljs-built_in">len</span>(R_type) - <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">while</span> i &lt; j:<br>        <span class="hljs-keyword">try</span>:<br>            label = R_type[i]<br>            <span class="hljs-comment"># 基于经验值，基于 R 峰向前取 100 个点，向后取 200 个点</span><br>            <span class="hljs-comment"># 如果不抛掉前 5 和后 5 心拍，取 feature 时可能会超出数组边界</span><br>            feature = data[R_location[i] - <span class="hljs-number">100</span>:R_location[i] + <span class="hljs-number">200</span>]<br>            x.append(feature)<br>            y.append(label)<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> ValueError:<br>            i += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(n + <span class="hljs-string">&#x27;over&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_dataset</span>():<br>    number = [<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;103&#x27;</span>, <span class="hljs-string">&#x27;105&#x27;</span>, <span class="hljs-string">&#x27;106&#x27;</span>, <span class="hljs-string">&#x27;107&#x27;</span>, <span class="hljs-string">&#x27;108&#x27;</span>, <span class="hljs-string">&#x27;109&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>, <span class="hljs-string">&#x27;113&#x27;</span>, <span class="hljs-string">&#x27;114&#x27;</span>, <span class="hljs-string">&#x27;115&#x27;</span>,<br>              <span class="hljs-string">&#x27;116&#x27;</span>, <span class="hljs-string">&#x27;117&#x27;</span>, <span class="hljs-string">&#x27;119&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>, <span class="hljs-string">&#x27;122&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;124&#x27;</span>, <span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;201&#x27;</span>, <span class="hljs-string">&#x27;202&#x27;</span>, <span class="hljs-string">&#x27;203&#x27;</span>, <span class="hljs-string">&#x27;205&#x27;</span>, <span class="hljs-string">&#x27;208&#x27;</span>,<br>              <span class="hljs-string">&#x27;210&#x27;</span>, <span class="hljs-string">&#x27;212&#x27;</span>, <span class="hljs-string">&#x27;213&#x27;</span>, <span class="hljs-string">&#x27;214&#x27;</span>, <span class="hljs-string">&#x27;215&#x27;</span>, <span class="hljs-string">&#x27;217&#x27;</span>, <span class="hljs-string">&#x27;219&#x27;</span>, <span class="hljs-string">&#x27;220&#x27;</span>, <span class="hljs-string">&#x27;221&#x27;</span>, <span class="hljs-string">&#x27;222&#x27;</span>, <span class="hljs-string">&#x27;223&#x27;</span>, <span class="hljs-string">&#x27;228&#x27;</span>, <span class="hljs-string">&#x27;230&#x27;</span>,<br>              <span class="hljs-string">&#x27;231&#x27;</span>, <span class="hljs-string">&#x27;232&#x27;</span>, <span class="hljs-string">&#x27;233&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>]<br><br>    features = []<br>    labels = []<br><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> number:<br>        read_db(n, features, labels)<br><br>    <span class="hljs-comment"># row 行</span><br>    <span class="hljs-comment"># column 列</span><br>    row = <span class="hljs-built_in">len</span>(features)<br>    <span class="hljs-built_in">print</span>(row)<br><br>    features = np.array(features)<br>    features = features.reshape(row, <span class="hljs-number">300</span>)<br>    <span class="hljs-built_in">print</span>(features.shape)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(labels))<br>    <span class="hljs-comment"># features 是二维 numpy 数组，labels 是 list</span><br><br>load_dataset()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>Python</tag>
      
      <tag>Dataset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」SwiftUI ForEach 与 Identifiable 协议</title>
    <link href="/2024/01/04/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSwiftUI-ForEach-%E4%B8%8E-Identifiable-%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/01/04/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSwiftUI-ForEach-%E4%B8%8E-Identifiable-%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://oldbird.run/swift/swiftui/ForEach.html#todoitem-%E4%B8%BA%E5%95%A5%E8%A6%81%E5%AE%9E%E7%8E%B0-identifiable">原文地址</a></p><h3 id="ForEach-的初始化方法"><a href="#ForEach-的初始化方法" class="headerlink" title="ForEach 的初始化方法"></a>ForEach 的初始化方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ForEach</span>&lt;<span class="hljs-type">Data</span>, <span class="hljs-type">ID</span>, <span class="hljs-type">Content</span>&gt; <span class="hljs-keyword">where</span> <span class="hljs-type">Data</span> : <span class="hljs-type">RandomAccessCollection</span>, <span class="hljs-type">ID</span> : <span class="hljs-type">Hashable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> data: <span class="hljs-type">Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> content: (<span class="hljs-type">Data</span>.<span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">Content</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在待办清单案例中，我们有用到<code>ForEach</code>这个视图。ForEach 将集合的东西生成一个个 View，然后再组合成一个 View。大大简化了相似代码，同时也解决了<code>ViewBuilder</code>参数个数限制问题。它在<code>SwiftUI</code>开发中非常常见，所以今天一起深入挖掘下 <code>ForEach</code> 相关知识。</p><p>待办清单案例中涉及<code>ForEach</code>使用的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// 需要实现 Identifiable 协议</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span>: <span class="hljs-title class_ inherited__">Identifiable</span> &#123;<br>    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span> <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()<br>    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)<br>        ]<br>    <br>    <span class="hljs-type">NavigationView</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;<br>                <span class="hljs-type">ForEach</span>(listData) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">HStack</span>&#123;<br>                        <span class="hljs-type">Image</span>(systemName: item.imgName)<br>                        <span class="hljs-type">Text</span>(item.task)<br>                    &#125;<br>                &#125;<br>                .onDelete(perform: deleteItem)<br>                .onMove(perform: moveItem)<br>            &#125;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>            &#125;<br>        &#125;<br>        .listStyle(<span class="hljs-type">GroupedListStyle</span>())<br>        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们将围绕下面两个问题，进行对 <code>ForEach</code> 的深入了解：</p><ol><li><code>ForEach</code> 有哪些初始化方法？</li><li><code>TodoItem</code> 为什么要实现<code>Identifiable</code> 协议？</li></ol><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>这个初始化器是 <code>ForEach</code> 中最简单的。它类似于常见的<code>for</code>循环：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br><br>    <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,<br>                <span class="hljs-string">&quot;看WWDC视频&quot;</span>,<br>                <span class="hljs-string">&quot;订外卖&quot;</span>,<br>                <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,<br>                <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>data.count) &#123; index <span class="hljs-keyword">in</span><br>                <span class="hljs-type">Text</span>(data[index])<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是请注意，此视图仅呈现一次。因此，如果<code>data.count</code>更改，视图将不会更新。例如，单击以下代码中的<code>添加待办事项</code>会返回错误：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,<br>                       <span class="hljs-string">&quot;看WWDC视频&quot;</span>,<br>                       <span class="hljs-string">&quot;订外卖&quot;</span>,<br>                       <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,<br>                       <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">List</span> &#123;<br>                <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>data.count) &#123; index <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">Text</span>(data[index])<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;<br>                addTodo()<br>            &#125;.padding()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;<br>        data.append(<span class="hljs-string">&quot;Hello SwiftUI&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击按钮，列表没有反应。我们然后将代码运行到模拟器，点击按钮，在控制台输出如下错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ForEach&lt;Range&lt;Int&gt;, Int, Text&gt; count (6) != its initial count (5). `ForEach(_:content:)` should only be used <span class="hljs-keyword">for</span> *constant* data. Instead conform data to `Identifiable` or use `ForEach(_:<span class="hljs-built_in">id</span>:content:)` and provide an explicit `<span class="hljs-built_in">id</span>`!<br></code></pre></td></tr></table></figure><p>从报错中，我们知道**<code>ForEach(_:content:)</code>只能使用常量数据**。</p><h4 id="Identifiable"><a href="#Identifiable" class="headerlink" title="Identifiable"></a>Identifiable</h4><p>在待办清单案例中，我们直接传递数组 listData 就可以了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/// 需要实现 Identifiable 协议</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span>: <span class="hljs-title class_ inherited__">Identifiable</span> &#123;<br>    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span> <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()<br>    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)<br>        ]<br>    <br>    <span class="hljs-type">NavigationView</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;<br>                <span class="hljs-type">ForEach</span>(listData) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">HStack</span>&#123;<br>                        <span class="hljs-type">Image</span>(systemName: item.imgName)<br>                        <span class="hljs-type">Text</span>(item.task)<br>                    &#125;<br>                &#125;<br>                .onDelete(perform: deleteItem)<br>                .onMove(perform: moveItem)<br>            &#125;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>            &#125;<br>        &#125;<br>        .listStyle(<span class="hljs-type">GroupedListStyle</span>())<br>        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们将<code>TodoItem</code>不实现<code>Identifiable</code>，看看会发生什么？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span><span class="hljs-comment">/*: Identifiable*/</span> &#123;<br>    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span> <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()<br>    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)<br>        ]<br>    <br>    <span class="hljs-type">NavigationView</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;<br>                <span class="hljs-type">ForEach</span>(listData) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">HStack</span>&#123;<br>                        <span class="hljs-type">Image</span>(systemName: item.imgName)<br>                        <span class="hljs-type">Text</span>(item.task)<br>                    &#125;<br>                &#125;<br>                .onDelete(perform: deleteItem)<br>                .onMove(perform: moveItem)<br>            &#125;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>            &#125;<br>        &#125;<br>        .listStyle(<span class="hljs-type">GroupedListStyle</span>())<br>        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Referencing initializer <span class="hljs-string">&#x27;init (_:content:)&#x27;</span> on <span class="hljs-string">&#x27;ForEach&#x27;</span> requires that <span class="hljs-string">&#x27;TodoItem&#x27;</span> conform to <span class="hljs-string">&#x27;Identifiable&#x27;</span><br></code></pre></td></tr></table></figure><p>从报错信息可知，我们必须要将数组的元素实现<code>Identifiable</code>协议。</p><p>数组的元素如果是普通类型，比如<code>String</code>也会报错：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,<br>                       <span class="hljs-string">&quot;看WWDC视频&quot;</span>,<br>                       <span class="hljs-string">&quot;订外卖&quot;</span>,<br>                       <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,<br>                       <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">List</span> &#123;<br>                <span class="hljs-type">ForEach</span>(data) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">Text</span>(item)<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;<br>                addTodo()<br>            &#125;.padding()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;<br>        data.append(<span class="hljs-string">&quot;Hello SwiftUI&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Referencing initializer <span class="hljs-string">&#x27;init (_:content:)&#x27;</span> on <span class="hljs-string">&#x27;ForEach&#x27;</span> requires that <span class="hljs-string">&#x27;String&#x27;</span> conform to <span class="hljs-string">&#x27;Identifiable&#x27;</span><br></code></pre></td></tr></table></figure><p>需要通过指定<code>id: \.self</code>即可，因为它们本身可以作为可识别的对象。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,<br>                       <span class="hljs-string">&quot;看WWDC视频&quot;</span>,<br>                       <span class="hljs-string">&quot;订外卖&quot;</span>,<br>                       <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,<br>                       <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">List</span> &#123;<br>                <span class="hljs-type">ForEach</span>(data, id: \.<span class="hljs-keyword">self</span>) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">Text</span>(item)<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;<br>                addTodo()<br>            &#125;.padding()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;<br>        data.append(<span class="hljs-string">&quot;Hello SwiftUI&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="id-Hashable"><a href="#id-Hashable" class="headerlink" title="id&amp;Hashable"></a>id&amp;Hashable</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">data</span>: <span class="hljs-type">Data</span>, <span class="hljs-params">id</span>: <span class="hljs-type">KeyPath</span>&lt;<span class="hljs-type">Data</span>.<span class="hljs-type">Element</span>, <span class="hljs-type">ID</span>&gt;, <span class="hljs-meta">@ViewBuilder</span> <span class="hljs-params">content</span>: <span class="hljs-keyword">@escaping</span> (<span class="hljs-type">Data</span>.<span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">Content</span>)<br></code></pre></td></tr></table></figure><p>id 要求我们传入的是一个 <code>KeyPath</code>，且<code>ID</code>必须实现<code>Hashable</code>。而我们常见的数据类型 <code>Int/String/...</code>都默认实现<code>Hashable</code>。</p><p>通过指定 <code>id</code> 的初始化方式适用于元素没有实现 <code>Identifiable</code> 的场景。</p><p>如果<code>TodoItem</code>没有实现<code>Identifiable</code>，我们也可以这样做：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span><span class="hljs-comment">/*: Identifiable*/</span> &#123;<br>    <span class="hljs-comment">// var id: UUID = UUID()</span><br>    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)<br>        ]<br>    <br>    <span class="hljs-type">NavigationView</span> &#123;<br>        <span class="hljs-type">List</span> &#123;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;<br>                <span class="hljs-type">ForEach</span>(listData, id: \.task) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">HStack</span>&#123;<br>                        <span class="hljs-type">Image</span>(systemName: item.imgName)<br>                        <span class="hljs-type">Text</span>(item.task)<br>                    &#125;<br>                &#125;<br>                .onDelete(perform: deleteItem)<br>                .onMove(perform: moveItem)<br>            &#125;<br>            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>            &#125;<br>        &#125;<br>        .listStyle(<span class="hljs-type">GroupedListStyle</span>())<br>        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们得确保 task 的唯一性，为什么呢？</p><h3 id="TodoItem-为啥要实现-Identifiable"><a href="#TodoItem-为啥要实现-Identifiable" class="headerlink" title="TodoItem 为啥要实现 Identifiable?"></a><code>TodoItem</code> 为啥要实现 Identifiable?</h3><p>实现<code>Identifiable</code>的目的是为了要区分数组的成员，这样可以更有效率地管理 List 里的视图。</p><p>我们简单通过样例来说明下其中的原理：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span> &#123;<br>    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span><br>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),<br>        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>),<br>    ]<br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">List</span> &#123;<br>                <span class="hljs-type">ForEach</span>(listData, id: \.task) &#123; item <span class="hljs-keyword">in</span><br>                    <span class="hljs-type">HStack</span>&#123;<br>                        <span class="hljs-type">Image</span>(systemName: item.imgName)<br>                        <span class="hljs-type">Text</span>(item.task)<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;<br>                addTodo()<br>            &#125;.padding()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;<br>        listData.append(<span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们让<code>TodoItem</code>不实现<code>Identifiable</code>, 用<code>\.task</code>传递给 id。我们希望点击添加按钮的时候，列表会同步刷新，且新增的图标是个<code>月亮</code>。</p><p>但是事情并没有顺从你的心意，会发现，新增的视图的 icon 并不是月亮。</p><p>而是用了第一个<code>TodoItem(task: &quot;写一篇SwiftUI文章&quot;, imgName: &quot;pencil.circle&quot;)</code>的 <code>pencil.circle</code>，其实不仅仅是图标，整个显示都跟第一个视图一样的。</p><p>因为无法区分这两个 TodoItem，所以就以最开始出现的视图重复，发生了错乱。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ForEach 的使用还是比较简单的，有三种初始化方式，通过 range 迭代的时候，记得保证集合是个常量。第二种通过 Identifiable 保证元素唯一，通常做法用 UUID 作为 id。第三种，通过指定 KeyPath，需要保证实现了 Hashable，且最好做到唯一，不然显示会错乱。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ANN、RNN 与 CNN 在运动信号方面的研究</title>
    <link href="/2023/12/29/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/12/29/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="ANN（MLP）"><a href="#ANN（MLP）" class="headerlink" title="ANN（MLP）"></a>ANN（MLP）</h3><p>这里将 SVM 和 Random Forest 也包含在内。</p><h4 id="1-《Influence-mechanism-of-running-sportswear-fatigue-based-on-BP-neural-network》"><a href="#1-《Influence-mechanism-of-running-sportswear-fatigue-based-on-BP-neural-network》" class="headerlink" title="1.《Influence mechanism of running sportswear fatigue based on BP neural network》"></a>1.《Influence mechanism of running sportswear fatigue based on BP neural network》</h4><p>ANN，手动提取 EMG 信号特征预测疲劳。</p><h4 id="2-《A-Novel-Method-for-Classification-of-Running-Fatigue-Using-Change-Point-Segmentation》"><a href="#2-《A-Novel-Method-for-Classification-of-Running-Fatigue-Using-Change-Point-Segmentation》" class="headerlink" title="2.《A Novel Method for Classification of Running Fatigue Using Change-Point Segmentation》"></a>2.《A Novel Method for Classification of Running Fatigue Using Change-Point Segmentation》</h4><p>Random Forest，手动提取 EMG 信号特征预测疲劳。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B612.png"></p><h4 id="3-《Sport-induced-fatigue-detection-in-gait-parameters-using-inertial-sensors-and-support-vector-machines》"><a href="#3-《Sport-induced-fatigue-detection-in-gait-parameters-using-inertial-sensors-and-support-vector-machines》" class="headerlink" title="3.《Sport-induced fatigue detection in gait parameters using inertial sensors and support vector machines》"></a>3.《Sport-induced fatigue detection in gait parameters using inertial sensors and support vector machines》</h4><p>SVM，手动提取 IMU 信号特征预测疲劳。</p><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h3><h4 id="1-《Sports-fatigue-detection-based-on-deep-learning》"><a href="#1-《Sports-fatigue-detection-based-on-deep-learning》" class="headerlink" title="1.《Sports fatigue detection based on deep learning》"></a>1.《Sports fatigue detection based on deep learning》</h4><p>BiLSTM，手动提取 ECG 信号特征预测 RPE。</p><p>该文献不是直接采用原始 ECG 信号进行模型训练，而是先手动提取了 ECG 信号特征（HRV）。</p><p>可以看到原始信号和提取特征后的准确率：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B69.png"></p><p>文献还对比了 Random Forest、SVM 与 ANN 下面为准确率：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B610.png"></p><h4 id="2-《Heart-Rate-Variability-Based-Subjective-Physical-Fatigue-Assessment》"><a href="#2-《Heart-Rate-Variability-Based-Subjective-Physical-Fatigue-Assessment》" class="headerlink" title="2.《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》"></a>2.《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》</h4><p>LightGBM，手动提取 ECG 信号特征预测 RPE。</p><p>这篇文献是采用 LightGBM 处理时间序列，所以放在了 RNN 这里。本篇文献除了采用 LightGBM 外，还对比了 DT、KNN 与 SVM 的准确率：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B611.png"></p><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><h4 id="1-《Real-Time-Detection-of-Acute-Cognitive-Stress-Using-a-Convolutional-Neural-Network-From-Electrocardiographic-Signal》"><a href="#1-《Real-Time-Detection-of-Acute-Cognitive-Stress-Using-a-Convolutional-Neural-Network-From-Electrocardiographic-Signal》" class="headerlink" title="1.《Real-Time Detection of Acute Cognitive Stress Using a Convolutional Neural Network From Electrocardiographic Signal》"></a>1.《Real-Time Detection of Acute Cognitive Stress Using a Convolutional Neural Network From Electrocardiographic Signal》</h4><p>CNN，通过 CNN 提取 ECG 信号特征预测急性认知压力。</p><p>文献使用了十层的简单 CNN 结构。</p><ul><li>第一层是图像输入层。其大小为799×1×1，等于输入频带的大小；</li><li>第二层是卷积层，由六个 4×1×1 的滤波器组成，步幅为 1×1；</li><li>接下来是批量归一化层、ReLU 层和概率为 0.5 的 dropout 层；</li><li>接下来的三层是两个全连接层和它们之间的批量归一化层。两个全连接层的单元数量分别为十个和两个；</li><li>最后两层是 softmax 层和分类输出层，它们都有两个单元。</li></ul><h4 id="2-《Cardiologist-Level-Arrhythmia-Detection-with-Convolutional-Neural-Networks》"><a href="#2-《Cardiologist-Level-Arrhythmia-Detection-with-Convolutional-Neural-Networks》" class="headerlink" title="2.《Cardiologist-Level Arrhythmia Detection with Convolutional Neural Networks》"></a>2.《Cardiologist-Level Arrhythmia Detection with Convolutional Neural Networks》</h4><p>CNN，通过 CNN 提取 ECG 信号特征预测心律失常。</p><p>CNN 网络大致的结构都可以用下面图片展示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B68.png"></p><h4 id="3-《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》"><a href="#3-《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》" class="headerlink" title="3.《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》"></a>3.《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》</h4><p>CNN，通过 CNN 提取 EMG 信号特征预测手势。</p><h3 id="组合模型"><a href="#组合模型" class="headerlink" title="组合模型"></a>组合模型</h3><h4 id="1-《A-Deep-Learning-Approach-for-Fatigue-Prediction-in-Sports-Using-GPS-Data-and-Rate-of-Perceived-Exertion》"><a href="#1-《A-Deep-Learning-Approach-for-Fatigue-Prediction-in-Sports-Using-GPS-Data-and-Rate-of-Perceived-Exertion》" class="headerlink" title="1.《A Deep Learning Approach for Fatigue Prediction in Sports Using GPS Data and Rate of Perceived Exertion》"></a>1.《A Deep Learning Approach for Fatigue Prediction in Sports Using GPS Data and Rate of Perceived Exertion》</h4><p>CNN-GRU，通过 CNN 提取 IMU 信号特征，然后通过 GRU 训练预测 RPE。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B67.png"></p><h4 id="2-《基于卷积长短时记忆网络的心律失常分类方法》"><a href="#2-《基于卷积长短时记忆网络的心律失常分类方法》" class="headerlink" title="2.《基于卷积长短时记忆网络的心律失常分类方法》"></a>2.《基于卷积长短时记忆网络的心律失常分类方法》</h4><p>CNN-LSTM，该文献通过 CNN 提取 ECG 特征后，并不是直接交给 FC 层进行分类，而是再经过 LSTM 后再交给 FC 层进行 Softmax 分类。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B61.png"></p><h4 id="3-《Dynamic-gesture-recognition-based-on-LSTM-CNN》"><a href="#3-《Dynamic-gesture-recognition-based-on-LSTM-CNN》" class="headerlink" title="3.《Dynamic gesture recognition based on LSTM-CNN》"></a>3.《Dynamic gesture recognition based on LSTM-CNN》</h4><p>与上面文献恰好相反，该文献的组合为 LSTM-CNN 识别 EMG 信号对应的手势。</p><p>模型由 2 个 LSTM 层、2 个一维卷积层和 1 个输出层组成。首先，通过 LSTM 层传递输入信号来提取时间信息。使用 2 个 LSTM 层，每个 LSTM 层有 52 个单元，每个单元有 64 个隐藏层。LSTM层的输出信号被输入到擅长特征提取的CNN层。具体来说，使用 2 个卷积层，第一层使用 65 个 3·1 卷积核，第二层卷积层使用 30 个 3·1 滤波器。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B66.png"></p><h4 id="4-《基于深度学习并行网络模型的心律失常分类方法》"><a href="#4-《基于深度学习并行网络模型的心律失常分类方法》" class="headerlink" title="4.《基于深度学习并行网络模型的心律失常分类方法》"></a>4.《基于深度学习并行网络模型的心律失常分类方法》</h4><p>这篇文献的网络比较复杂。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B62.png"></p><p>一共采用了 3 种网络 DenseNet+BiLSTM+ECANet，最后采用 Softmax 对 ECG 信号进行分类。</p><h5 id="DenseNet（CNN）"><a href="#DenseNet（CNN）" class="headerlink" title="DenseNet（CNN）"></a>DenseNet（CNN）</h5><p>密集连接卷积神经网络，Densely connected convolutional network</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B63.png"></p><h5 id="BiLSTM（RNN）"><a href="#BiLSTM（RNN）" class="headerlink" title="BiLSTM（RNN）"></a>BiLSTM（RNN）</h5><p>双向长短时记忆网络，Bidirectional long short-term memory network</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B64.png"></p><h5 id="ECANet"><a href="#ECANet" class="headerlink" title="ECANet"></a>ECANet</h5><p>高效通道注意力网络，Efficient channel attention network</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B65.png"></p><h4 id="5-《融合-CNN-和-BiLSTM-的心律失常心拍分类模型》"><a href="#5-《融合-CNN-和-BiLSTM-的心律失常心拍分类模型》" class="headerlink" title="5.《融合 CNN 和 BiLSTM 的心律失常心拍分类模型》"></a>5.《融合 CNN 和 BiLSTM 的心律失常心拍分类模型》</h4><p>本文献融合了 CNN 和 BiLSTM 的神经网络。将经过正则化的大尺度心拍输入 Muti-BiLSTM 网络中，提取一维时序数据的全局特征；将经过正则化的小尺度心拍输入 CNN 网络提取心拍的局部特征。将大尺度特征和局部特征经过拼接后的向量输入到 3 层全连接网络中。全连接层的激活函数都是指数线性单元(exponential linear units, ELU)，最后通过 softmax 的激活函数实现心拍的分类。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B615.png"></p><p>这篇文献倒是没有上篇文献那么复杂。虽然同样是分成了 2 个网络：</p><h5 id="CNN-1"><a href="#CNN-1" class="headerlink" title="CNN"></a>CNN</h5><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B613.png"></p><h5 id="BiLSTM"><a href="#BiLSTM" class="headerlink" title="BiLSTM"></a>BiLSTM</h5><p>利用多层的 BiLSTM（Multi-BiLSTM）网络构成一个全局特征提取器。其中每一层都包括一个前向的 LSTM 和后向的 LSTM 层，最后一个双边 LSTM 紧跟着一个全连接层。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B614.png"></p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>运动科学</tag>
      
      <tag>ECG</tag>
      
      <tag>IMU</tag>
      
      <tag>EMG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RNN 与 LSTM 网络</title>
    <link href="/2023/12/29/RNN-%E4%B8%8E-LSTM-%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/12/29/RNN-%E4%B8%8E-LSTM-%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<ol><li><p><a href="https://www.cnblogs.com/wuliytTaotao/p/9512963.html">循环神经网络（Recurrent Neural Network，RNN）</a></p></li><li><p><a href="https://www.jiqizhixin.com/articles/2018-12-14-4">RNN 结构详解</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/139617364">LSTM模型结构的可视化</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多层感知器 MLP，全连接网络，DNN 三者的关系</title>
    <link href="/2023/12/29/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8-MLP%EF%BC%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%EF%BC%8CDNN-%E4%B8%89%E8%80%85%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2023/12/29/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8-MLP%EF%BC%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%EF%BC%8CDNN-%E4%B8%89%E8%80%85%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>不确定全连接网络对应的英文，先做这个解释: </p><p>FullyConnected(FC) Layer &#x3D; 一层 layer</p><p>MLP &#x3D; 多层 FC layer 构成的 NN</p><p>DNN &#x3D; MLP 和 CNN 的集合相并，通常包括多个卷积 layer 和 FC layer</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸢尾花的非监督学习</title>
    <link href="/2023/12/22/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E7%9A%84%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/22/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E7%9A%84%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, adjusted_rand_score<br><br>csv_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/archive/Iris.csv&#x27;</span><br>df = pd.read_csv(csv_path)<br><br><span class="hljs-comment"># 将 dataframe 转为 numpy</span><br>dataset = df.values<br><br><span class="hljs-comment"># delete index</span><br>dataset = np.delete(dataset, <span class="hljs-number">0</span>, axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># delete label</span><br>features = np.delete(dataset, -<span class="hljs-number">1</span>, axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment"># delete feature</span><br>labels = np.delete(dataset, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 分割训练集和测试集</span><br>train_features, \<br>        test_features, \<br>        train_labels, \<br>        test_labels = train_test_split(features, labels, test_size=<span class="hljs-number">0.2</span>)<br><br>X = train_features<br><br>model = KMeans(n_clusters=<span class="hljs-number">3</span>)<br>model.fit(X)<br><br>label_predict = model.labels_<br><br>x0 = X[label_predict == <span class="hljs-number">0</span>]<br>x1 = X[label_predict == <span class="hljs-number">1</span>]<br>x2 = X[label_predict == <span class="hljs-number">2</span>]<br><br>fig, axes = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, figsize=(<span class="hljs-number">32</span>, <span class="hljs-number">6</span>))<br><span class="hljs-comment"># 按花萼长度查看分布情况</span><br>axes[<span class="hljs-number">0</span>].scatter(X[:, <span class="hljs-number">0</span>], X[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;see&#x27;</span>)<br>axes[<span class="hljs-number">0</span>].set_xlabel(<span class="hljs-string">&#x27;sepal length&#x27;</span>)<br>axes[<span class="hljs-number">0</span>].set_ylabel(<span class="hljs-string">&#x27;sepal width&#x27;</span>)<br>axes[<span class="hljs-number">0</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 按花瓣长度查看分布情况</span><br>axes[<span class="hljs-number">1</span>].scatter(X[:, <span class="hljs-number">2</span>], X[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;see&#x27;</span>)<br>axes[<span class="hljs-number">1</span>].set_xlabel(<span class="hljs-string">&#x27;petal length&#x27;</span>)<br>axes[<span class="hljs-number">1</span>].set_ylabel(<span class="hljs-string">&#x27;petal width&#x27;</span>)<br>axes[<span class="hljs-number">1</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 按花萼进行聚类</span><br>axes[<span class="hljs-number">2</span>].scatter(x0[:, <span class="hljs-number">0</span>], x0[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;label0&#x27;</span>)<br>axes[<span class="hljs-number">2</span>].scatter(x1[:, <span class="hljs-number">0</span>], x1[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;*&#x27;</span>, label=<span class="hljs-string">&#x27;label1&#x27;</span>)<br>axes[<span class="hljs-number">2</span>].scatter(x2[:, <span class="hljs-number">0</span>], x2[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;+&#x27;</span>, label=<span class="hljs-string">&#x27;label2&#x27;</span>)<br>axes[<span class="hljs-number">2</span>].set_xlabel(<span class="hljs-string">&#x27;sepal length&#x27;</span>)<br>axes[<span class="hljs-number">2</span>].set_ylabel(<span class="hljs-string">&#x27;sepal width&#x27;</span>)<br>axes[<span class="hljs-number">2</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 按花瓣进行聚类</span><br>axes[<span class="hljs-number">3</span>].scatter(x0[:, <span class="hljs-number">2</span>], x0[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;label0&#x27;</span>)<br>axes[<span class="hljs-number">3</span>].scatter(x1[:, <span class="hljs-number">2</span>], x1[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;*&#x27;</span>, label=<span class="hljs-string">&#x27;label1&#x27;</span>)<br>axes[<span class="hljs-number">3</span>].scatter(x2[:, <span class="hljs-number">2</span>], x2[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;+&#x27;</span>, label=<span class="hljs-string">&#x27;label2&#x27;</span>)<br>axes[<span class="hljs-number">3</span>].set_xlabel(<span class="hljs-string">&#x27;petal length&#x27;</span>)<br>axes[<span class="hljs-number">3</span>].set_ylabel(<span class="hljs-string">&#x27;petal width&#x27;</span>)<br>axes[<span class="hljs-number">3</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># plt.show()</span><br><br>prediction = model.predict(test_features)<br><br>test_labels_num = []<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> test_labels:<br>    <span class="hljs-keyword">if</span> item == <span class="hljs-string">&#x27;Iris-setosa&#x27;</span>:<br>        test_labels_num.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&#x27;Iris-versicolor&#x27;</span>:<br>        test_labels_num.append(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&#x27;Iris-virginica&#x27;</span>:<br>        test_labels_num.append(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(accuracy_score(test_labels_num, prediction))<br><span class="hljs-built_in">print</span>(adjusted_rand_score(test_labels_num, prediction))<br></code></pre></td></tr></table></figure><p>其中，在 <a href="https://www.flyai.com/article/516">机器学习（二）之无监督学习：数据变换、聚类分析</a> 中有提到：</p><blockquote><p>用这种方式评估聚类时，一个常见的错误是使用 <code>accuracy_score</code> 而不是  <code>adjusted_rand_score</code>、<code>normalized_mutual_info_score</code> 或其他聚类指标。使用精度的问题在于，它要求分配的簇标签与真实值完全匹配。但簇标签本身毫无意义——唯一重要的是哪些点位于同一个簇中。</p></blockquote><p>简单说，聚类后 x0、x1、x2 三类花会对应 012，021，102，120，201，210 的任意组合。所以你不知道 0 对应的是真实标签中的 Iris-setosa、Iris-virginica 还是 Iris-versicolor。有 5&#x2F;6 的概率是得不到正确值的。</p><p>比如说下面这种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(prediction)           <br><span class="hljs-comment"># [1 1 2 2 1 0 2 1 2 0 0 1 0 2 1 1 1 1 0 2 0 0 2 2 0 2 2 0 1 1]</span><br><span class="hljs-built_in">print</span>(test_labels_num)      <br><span class="hljs-comment"># [0 0 1 1 0 2 1 0 1 2 2 0 2 1 0 0 0 0 2 1 2 2 1 1 2 1 1 2 0 0]</span><br></code></pre></td></tr></table></figure><p>聚类后预测的关系是 0 对应 Iris-virginica，1 对应 Iris-setosa，2 对应 Iris-versicolor。</p><p>这与我们手动标签的 0 对应 Iris-setosa，1 对应 Iris-versicolor，2 对应 Iris-virginica 对不上。</p><p>此时使用  <code>accuracy_score</code>  会存在问题。应该使用  <code>adjusted_rand_score(labels_true, labels_pred)</code>，输出越接近 1 说明模型越好。</p><p>另外，在 <a href="https://cloud.tencent.com/developer/article/1020155">【Scikit-Learn 中文文档】聚类 - 无监督学习</a> 中有提到：</p><blockquote><p> <code>adjusted_rand_score</code>  是  <strong>symmetric（对称的）</strong>——交换参数不会改变 score （得分）。它可以作为 <strong>consensus measure（共识度量）</strong>。</p></blockquote><p>也就是说，我随意改变手动标签 012 的值，或者干脆直接用 Iris-setosa、Iris-versicolor、Iris-virginica 也是不影响结果的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">test_labels = test_labels.flatten()<br><span class="hljs-comment"># adjusted_rand_score 函数用的一维数组，所以要将 test_labels 从（30，1）降维成（30，）</span><br><span class="hljs-comment"># prediction 已经是（30，）</span><br><br><span class="hljs-built_in">print</span>(adjusted_rand_score(test_labels, prediction))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>sklearn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy 的 1 维数组相关操作</title>
    <link href="/2023/12/20/Numpy-%E7%9A%84-1-%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/12/20/Numpy-%E7%9A%84-1-%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>np.array([1,2,3])，既不是行向量，也不是列向量，称为秩 rank 为 1 的 array，如果对其转置，则会得到其本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>b = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])  <span class="hljs-comment"># shape=（3，）</span><br>b2 = b.reshape((<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))  <span class="hljs-comment"># shape=（3，1）</span><br></code></pre></td></tr></table></figure><p>当然也可以进行降维操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">b3 = b2.reshape(<span class="hljs-number">3</span>, )  <span class="hljs-comment"># b2.flatten() 都是降维 shape=（3，）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 HRV 预测运动 RPE</title>
    <link href="/2023/12/15/%E9%80%9A%E8%BF%87-HRV-%E9%A2%84%E6%B5%8B%E8%BF%90%E5%8A%A8-RPE/"/>
    <url>/2023/12/15/%E9%80%9A%E8%BF%87-HRV-%E9%A2%84%E6%B5%8B%E8%BF%90%E5%8A%A8-RPE/</url>
    
    <content type="html"><![CDATA[<p>通过 HRV 预测 REP 核心文献为 2 篇。</p><ol><li>《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》</li><li>《Sports fatigue detection based on deep learning》</li></ol><h3 id="1-HRV-的相关指标"><a href="#1-HRV-的相关指标" class="headerlink" title="1.HRV 的相关指标"></a>1.HRV 的相关指标</h3><h4 id="1-1-时域分析"><a href="#1-1-时域分析" class="headerlink" title="1.1.时域分析"></a>1.1.时域分析</h4><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>meanNN</td><td>ms</td><td>平均相邻正常心跳时间间隔</td></tr><tr><td>meanHR</td><td>1&#x2F;min</td><td>平均心率</td></tr><tr><td>SDNN</td><td>ms</td><td>全部正常窦性心搏间期（NN）的标准差</td></tr><tr><td>RMSSD</td><td>ms</td><td>全程相邻NN间期之差的均方根值</td></tr><tr><td>SDANN</td><td>ms</td><td>分段先计算心跳间期的平均值，再计算平均间期的标准差</td></tr><tr><td>SDNNi</td><td>ms</td><td>上述标准差的平均值</td></tr><tr><td>NN50</td><td>count</td><td>每对相邻正常心跳时间间隔，差距超过50毫秒的数目</td></tr><tr><td>pNN50</td><td>%</td><td>间隔差距超过50毫秒的占比</td></tr><tr><td>HRVTi</td><td>-</td><td>相邻正常心跳间隔的总个数除以相邻正常心跳间隔直方图的高度</td></tr><tr><td>TINN</td><td>ms</td><td>使用最小方差法，求出全部NN间期的直方图近似三角形底边的宽度</td></tr></tbody></table><p>目前已知：</p><ol><li>HRVTi 减小，交感神经活动增强，副交感神经活动下降；</li></ol><h4 id="1-2-频域分析"><a href="#1-2-频域分析" class="headerlink" title="1.2.频域分析"></a>1.2.频域分析</h4><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>VLF</td><td>ms^2</td><td>极低频功率</td></tr><tr><td>LF</td><td>ms^2</td><td>低频功率</td></tr><tr><td>HF</td><td>ms^2</td><td>高频功率</td></tr><tr><td>LF&#x2F;HF</td><td>-</td><td>比值</td></tr><tr><td>peakVLF</td><td>Hz</td><td></td></tr><tr><td>peakLF</td><td>Hz</td><td></td></tr><tr><td>peakHF</td><td>Hz</td><td></td></tr></tbody></table><p>目前已知：</p><ol><li>LF&#x2F;HF 减小，反应了交感神经和副交感神经系统活动的均衡状态发生变化；</li></ol><h4 id="1-3-非线性分析"><a href="#1-3-非线性分析" class="headerlink" title="1.3.非线性分析"></a>1.3.非线性分析</h4><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>sampen</td><td>-</td><td>两个序列在下一点保持相似的条件概率的负自然对数</td></tr><tr><td>SD1</td><td>ms</td><td>庞加莱图短轴</td></tr><tr><td>SD2</td><td>ms</td><td>庞加莱图长轴</td></tr><tr><td>SD1&#x2F;SD2</td><td>-</td><td></td></tr><tr><td>Alpha</td><td>-</td><td>去波动趋势分析</td></tr><tr><td>Alpha1</td><td>-</td><td>短时程参数</td></tr><tr><td>Alpha2</td><td>-</td><td>长时程参数</td></tr></tbody></table><p>目前已知：</p><ol><li>SD1 反应的是短期、瞬时 RR（两个 R 波） 变化；</li><li>SD2 则是为长期的；</li><li>SD1&#x2F;SD2 可代表交感神经与副交感神经的活性；</li><li>运动强度越大 Alpha1 越低。</li></ol><h3 id="2-具体文献"><a href="#2-具体文献" class="headerlink" title="2.具体文献"></a>2.具体文献</h3><p>两篇文献均是通过机器学习的方法，实现 HRV 数据预测运动期间的 REP。</p><p>前者，也就是《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》，通过 Bruce 测试，具体内容见下：</p><table><thead><tr><th>Stage</th><th>Duration（min）</th><th>Speed</th><th>Incline（%）</th></tr></thead><tbody><tr><td>rest</td><td>5</td><td>0</td><td>0</td></tr><tr><td>1</td><td>5</td><td>3</td><td>5</td></tr><tr><td>2</td><td>5</td><td>5</td><td>5</td></tr><tr><td>3</td><td>5</td><td>6.4</td><td>5</td></tr><tr><td>4</td><td>5</td><td>7.8</td><td>5</td></tr><tr><td>5</td><td>5</td><td>10.2</td><td>5</td></tr><tr><td>6</td><td>直到力竭</td><td>11.6</td><td>5</td></tr></tbody></table><p>收集测试期间的心跳数据（ECG），并且在每隔阶段结束时，要求汇报 RPE。</p><p>这里的 RPE 采用的是 6-20 量表。</p><p>但最后会被划分为：</p><ol><li>6-10 为轻松；</li><li>11-16 为有点累；</li><li>17-20 为累。</li></ol><p>最终呈现的数据格式为:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">stage:</span><br><span class="hljs-symbol">duration:</span><br><span class="hljs-symbol">speed:</span><br><span class="hljs-symbol">incline:</span><br><span class="hljs-symbol">heart:</span> []<br><span class="hljs-symbol">rpe:</span><br></code></pre></td></tr></table></figure><p>后者《Sports fatigue detection based on deep learning》同为 Bruce 测试。</p><p>但每个阶段的具体运动速度&#x2F;坡度&#x2F;时间有调整，针对男女具体运动内容不同。</p><p>每个阶段改为 3 分钟，且<strong>每</strong>分钟都收集一次 RPE。同样采用 6-20 量表，但划分方式有点区别：</p><ol><li>6-11 为轻松；</li><li>12-16 为有点累；</li><li>17-20 为累。</li></ol><p>前者在 31 个特征中筛选出 14 个特征，并最终选用 LightGBM 算法。</p><p>后者直接确认了 27 个特征，使用 Bi-LSTM 神经网络。</p><h3 id="3-其它"><a href="#3-其它" class="headerlink" title="3.其它"></a>3.其它</h3><p>除了使用 HRV 特征量外，还可以通过卷积（CNN）的方式来提取特征。参考：</p><ol><li>《Real-Time Detection of Acute Cognitive Stress Using a Convolutional Neural Network From Electrocardiographic Signal》</li><li>《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》</li></ol>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>运动科学</tag>
      
      <tag>ECG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 遍历 dataframe 中的 item</title>
    <link href="/2023/11/28/Pandas-%E9%81%8D%E5%8E%86-dataframe-%E4%B8%AD%E7%9A%84-item/"/>
    <url>/2023/11/28/Pandas-%E9%81%8D%E5%8E%86-dataframe-%E4%B8%AD%E7%9A%84-item/</url>
    
    <content type="html"><![CDATA[<p>数据格式为</p><table><thead><tr><th>time</th><th>ecg</th><th>rep</th></tr></thead><tbody><tr><td>1700624658822114462</td><td>-0.157</td><td>6</td></tr></tbody></table><h3 id="采用-df-iterrows"><a href="#采用-df-iterrows" class="headerlink" title="采用 df.iterrows()"></a>采用 df.iterrows()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df1.iterrows():<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>输出内容为</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">(<span class="hljs-number">14017</span>, time    <span class="hljs-number">1700624658822114462</span><br><span class="hljs-title">ecg</span>     <span class="hljs-number">-0.157</span><br><span class="hljs-title">rep</span>     <span class="hljs-number">6</span><br><span class="hljs-type">Name</span>: <span class="hljs-number">14017</span>, d<span class="hljs-keyword">type</span>: float64)<br></code></pre></td></tr></table></figure><p>若 <code>print(item[0])</code> 则显示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">14017<br></code></pre></td></tr></table></figure><p>若 <code>print(item[0])</code> 则显示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">time</span>    <span class="hljs-number">1700624658822114462</span><br><span class="hljs-attribute">ecg</span>    -<span class="hljs-number">0</span>.<span class="hljs-number">157</span><br><span class="hljs-attribute">rep</span>     <span class="hljs-number">6</span><br><span class="hljs-attribute">Name</span>: <span class="hljs-number">14216</span>, dtype: float64<br></code></pre></td></tr></table></figure><h3 id="采用-df-itertuples"><a href="#采用-df-itertuples" class="headerlink" title="采用 df.itertuples()"></a>采用 df.itertuples()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df1.itertuples():<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>输出内容为</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Pandas(Index=<span class="hljs-number">14216</span>, time=<span class="hljs-number">1700624658822114462</span>, ecg=-<span class="hljs-number">0.157</span>, rep=<span class="hljs-number">6</span>)<br><br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">0</span>])</span> -&gt;</span> <span class="hljs-number">14216</span><br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">1</span>])</span> -&gt;</span> <span class="hljs-number">1700624658822114462</span><br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">2</span>])</span> -&gt;</span> -<span class="hljs-number">0.157</span><br><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">3</span>])</span> -&gt;</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="采用-df1-items"><a href="#采用-df1-items" class="headerlink" title="采用 df1.items()"></a>采用 df1.items()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df1.items():<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>输出内容为（按列输出）</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-number">0</span>        <span class="hljs-number">1700624538840442752</span><br><span class="hljs-number">1</span>        <span class="hljs-number">1700624538943768244</span><br><span class="hljs-number">2</span>        <span class="hljs-number">1700624539047093736</span><br><span class="hljs-number">3</span>        <span class="hljs-number">1700624539150419228</span><br><span class="hljs-number">4</span>        <span class="hljs-number">1700624539253744720</span><br>                ...         <br><span class="hljs-number">14212</span>    <span class="hljs-number">1700624658791314974</span><br><span class="hljs-number">14213</span>    <span class="hljs-number">1700624658799014846</span><br><span class="hljs-number">14214</span>    <span class="hljs-number">1700624658806714718</span><br><span class="hljs-number">14215</span>    <span class="hljs-number">1700624658814414590</span><br><span class="hljs-number">14216</span>    <span class="hljs-number">1700624658822114462</span><br>Name: time, Length: <span class="hljs-number">14217</span>, dtype: int64)<br><br>(<span class="hljs-symbol">&#x27;ecg</span>&#x27;, <span class="hljs-number">0</span>       <span class="hljs-number">-0.004</span><br><span class="hljs-number">1</span>        <span class="hljs-number">0.044</span><br><span class="hljs-number">2</span>        <span class="hljs-number">0.059</span><br><span class="hljs-number">3</span>        <span class="hljs-number">0.007</span><br><span class="hljs-number">4</span>       <span class="hljs-number">-0.086</span><br>         ...  <br><span class="hljs-number">14212</span>   <span class="hljs-number">-0.376</span><br><span class="hljs-number">14213</span>   <span class="hljs-number">-0.310</span><br><span class="hljs-number">14214</span>   <span class="hljs-number">-0.236</span><br><span class="hljs-number">14215</span>   <span class="hljs-number">-0.189</span><br><span class="hljs-number">14216</span>   <span class="hljs-number">-0.157</span><br>Name: ecg, Length: <span class="hljs-number">14217</span>, dtype: float64)<br><br>(<span class="hljs-symbol">&#x27;rep</span>&#x27;, <span class="hljs-number">0</span>        <span class="hljs-number">4</span><br><span class="hljs-number">1</span>        <span class="hljs-number">4</span><br><span class="hljs-number">2</span>        <span class="hljs-number">4</span><br><span class="hljs-number">3</span>        <span class="hljs-number">4</span><br><span class="hljs-number">4</span>        <span class="hljs-number">4</span><br>        ..<br><span class="hljs-number">14212</span>    <span class="hljs-number">6</span><br><span class="hljs-number">14213</span>    <span class="hljs-number">6</span><br><span class="hljs-number">14214</span>    <span class="hljs-number">6</span><br><span class="hljs-number">14215</span>    <span class="hljs-number">6</span><br><span class="hljs-number">14216</span>    <span class="hljs-number">6</span><br>Name: rep, Length: <span class="hljs-number">14217</span>, dtype: int64)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 创建并插入数据</title>
    <link href="/2023/11/28/Pandas-%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/11/28/Pandas-%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">ecgs = [<span class="hljs-number">10</span>]<br>times = [<span class="hljs-number">10</span>]<br>reps = [<span class="hljs-number">10</span>]<br>hrs = [<span class="hljs-number">10</span>]<br><br><span class="hljs-comment"># 创建df</span><br>dataframe = pd.DataFrame(&#123;<span class="hljs-string">&#x27;time&#x27;</span>: times, <span class="hljs-string">&#x27;ecg&#x27;</span>: ecgs, <span class="hljs-string">&#x27;rep&#x27;</span>: reps&#125;)<br><br><span class="hljs-comment"># 插入</span><br>new_df = dataframe.copy()<br>new_df[<span class="hljs-string">&#x27;hr&#x27;</span>] = hrs<br>new_df.to_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 已知元素，获取其索引</title>
    <link href="/2023/11/28/Pandas-%E5%B7%B2%E7%9F%A5%E5%85%83%E7%B4%A0%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%85%B6%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/11/28/Pandas-%E5%B7%B2%E7%9F%A5%E5%85%83%E7%B4%A0%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%85%B6%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<p>例如，知道其时间戳，找到 index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(df[df[<span class="hljs-string">&#x27;time&#x27;</span>].isin([timestamp])])<br><span class="hljs-built_in">print</span>(df[df[<span class="hljs-string">&#x27;time&#x27;</span>].isin([timestamp])].index)<br><span class="hljs-built_in">print</span>(df[df[<span class="hljs-string">&#x27;time&#x27;</span>].isin([timestamp])].index[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>第一个 print 为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache">                     <span class="hljs-attribute">time</span>    ecg<br><span class="hljs-attribute">1444</span>  <span class="hljs-number">1700624323518685002</span> -<span class="hljs-number">0</span>.<span class="hljs-number">356</span><br></code></pre></td></tr></table></figure><p>第二个 print 为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Index</span><span class="hljs-params">([<span class="hljs-number">1444</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>第三个 print 为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1444</span><br></code></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df.itertuples():<br>  <span class="hljs-built_in">print</span>(item)<br><span class="hljs-built_in">print</span>(item[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(item[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">if</span> timestamp == item[<span class="hljs-number">1</span>]:<br>      <span class="hljs-keyword">return</span> item[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>第一个 print 为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Pandas(<span class="hljs-attribute">Index</span>=1444, <span class="hljs-attribute">time</span>=1700624323518685002, <span class="hljs-attribute">ecg</span>=-0.356)<br></code></pre></td></tr></table></figure><p>第二个 print 为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1444</span><br></code></pre></td></tr></table></figure><p>第三个 print 为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1700624323518685002<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 数据截取</title>
    <link href="/2023/11/28/Pandas-%E6%95%B0%E6%8D%AE%E6%88%AA%E5%8F%96/"/>
    <url>/2023/11/28/Pandas-%E6%95%B0%E6%8D%AE%E6%88%AA%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<p>知道 index 的情况下，完全可以采用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df_copy = df.copy()<br>df_cut = df_copy[top:bottom]<br></code></pre></td></tr></table></figure><p>进行截取操作。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 纳秒时间戳转时间</title>
    <link href="/2023/11/28/Python-%E7%BA%B3%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%B6%E9%97%B4/"/>
    <url>/2023/11/28/Python-%E7%BA%B3%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>关于数量级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs \">1 秒<br>1, 000 毫秒<br>1, 000, 000 微秒<br>1, 000, 000, 000 纳秒<br><br>对于一个纳秒时间戳：<br>1700621512995758338. 纳秒<br>1700621512995758.338 微秒<br>1700621512995.758338 毫秒<br>1700621512.995758338 秒<br></code></pre></td></tr></table></figure><p>转换代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-comment">#假设纳秒时间戳为 1635678377992198863</span><br>nano_second_timestamp = <span class="hljs-number">1635678377992198863</span><br><br><span class="hljs-comment"># 将纳秒时间戳除以一亿得到秒级时间戳</span><br>second_timestamp = nano_second_timestamp / <span class="hljs-number">1000000000</span><br><br><span class="hljs-comment"># 将秒级时间戳转换为datetime对象</span><br>d = datetime.fromtimestamp(second_timestamp)<br><br><span class="hljs-comment"># 将datetime对象转换为指定格式的时间字符串</span><br>formatted_time = d.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(formatted_time) <span class="hljs-comment"># 输出：&#x27;2021-10-31 15:06:17.992199&#x27;</span><br></code></pre></td></tr></table></figure><p>在上述代码中，最后的时间字符串格式为  <code>&#39;%Y-%m-%d %H:%M:%S.%f&#39;</code></p><p>其中 %Y 代表年份，%m 代表月份，%d 代表日期，%H 代表小时，%M 代表分钟，%S 代表秒，%f 代表微秒</p><p><strong>注意，</strong>datetime 的时间格式化只能精确到微秒级别。范围在 0~999999 之间，所以需要对纳秒时间戳进行转换后，取后六位代表微秒。</p><p>反过来的话，会出现下面这种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>time = <span class="hljs-string">&#x27;2022-07-14T12:01:25.225089+08:00&#x27;</span><br>date = datetime.fromisoformat(time)  <span class="hljs-comment"># good</span><br><br>time = <span class="hljs-string">&#x27;2022-07-14T12:01:25.225089838+08:00&#x27;</span><br>date = datetime.fromisoformat(time)  <span class="hljs-comment"># error</span><br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://stackoverflow.com/questions/72976033/convert-an-rfc-3339-nano-time-to-python-datetime">Convert an RFC 3339 nano time to Python datetime</a></p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 通过 datetime 计算时间差</title>
    <link href="/2023/11/28/Python-%E9%80%9A%E8%BF%87-datetime-%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
    <url>/2023/11/28/Python-%E9%80%9A%E8%BF%87-datetime-%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = datetime.datetime.fromtimestamp(df[<span class="hljs-string">&#x27;time&#x27;</span>][start_index] / <span class="hljs-number">1000000000</span>)<br>d2 = datetime.datetime.fromtimestamp(df[<span class="hljs-string">&#x27;time&#x27;</span>][end_index] / <span class="hljs-number">1000000000</span>)<br>diff_d = d2-d1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;时间差为 &#x27;</span>, diff_d)<br><br><span class="hljs-comment"># 时间差为  0:12:13.942854</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 数组中每个元素+1</title>
    <link href="/2023/11/28/Python-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0-1/"/>
    <url>/2023/11/28/Python-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0-1/</url>
    
    <content type="html"><![CDATA[<p>方法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>a = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x+<span class="hljs-number">1</span>,a)<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>a = [item+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> a]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 SettingWithCopyWarning Try using .loc[row_indexer,col_indexer] = value instead</title>
    <link href="/2023/11/28/%E8%A7%A3%E5%86%B3-SettingWithCopyWarning-Try-using-loc-row-indexer-col-indexer-value-instead/"/>
    <url>/2023/11/28/%E8%A7%A3%E5%86%B3-SettingWithCopyWarning-Try-using-loc-row-indexer-col-indexer-value-instead/</url>
    
    <content type="html"><![CDATA[<p>利用 Pandas 向 DataFrame 中插入一列数据时，出现警告：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">SettingWithCopyWarning:<br>A value <span class="hljs-keyword">is</span> trying <span class="hljs-keyword">to</span> be <span class="hljs-keyword">set</span> <span class="hljs-keyword">on</span> a <span class="hljs-keyword">copy</span> <span class="hljs-keyword">of</span> a slice <span class="hljs-keyword">from</span> a DataFrame.<br><span class="hljs-keyword">Try</span> <span class="hljs-keyword">using</span> .loc[row_indexer,col_indexer] = value instead<br></code></pre></td></tr></table></figure><p>解决办法：</p><p>先 copy 一份数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = a.copy()<br>a[<span class="hljs-string">&#x27;column&#x27;</span>] = Your <span class="hljs-type">List</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas List 转换为 Series</title>
    <link href="/2023/11/20/Pandas-List-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Series/"/>
    <url>/2023/11/20/Pandas-List-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Series/</url>
    
    <content type="html"><![CDATA[<p>手上有组 ecg 信号，为 List。需要转换成下面的格式用于 Neurokit 分析。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0</span>        <span class="hljs-number">0.000763</span><br><span class="hljs-number">1</span>       -<span class="hljs-number">0.000610</span><br><span class="hljs-number">2</span>        <span class="hljs-number">0.000763</span><br><span class="hljs-number">3</span>        <span class="hljs-number">0.002289</span><br><span class="hljs-number">4</span>        <span class="hljs-number">0.005341</span><br>           ...   <br><span class="hljs-number">50677</span>    <span class="hljs-number">0.005798</span><br><span class="hljs-number">50678</span>    <span class="hljs-number">0.003357</span><br><span class="hljs-number">50679</span>    <span class="hljs-number">0.008392</span><br><span class="hljs-number">50680</span>    <span class="hljs-number">0.010681</span><br><span class="hljs-number">50681</span>    <span class="hljs-number">0.008240</span><br>Name: ECG, Length: <span class="hljs-number">50682</span>, dtype: float64<br></code></pre></td></tr></table></figure><p>从 Neurokit load 下来的数据格式为：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pandas.core.series.Series&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>于是可以使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ecg = pd.Series(ecg, name=<span class="hljs-string">&#x27;ECG&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这样就将 List 转换成了 Series</p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>Neurokit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」光学心率测量原理</title>
    <link href="/2023/11/20/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E5%85%89%E5%AD%A6%E5%BF%83%E7%8E%87%E6%B5%8B%E9%87%8F%E5%8E%9F%E7%90%86/"/>
    <url>/2023/11/20/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E5%85%89%E5%AD%A6%E5%BF%83%E7%8E%87%E6%B5%8B%E9%87%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/richard_liujh/article/details/49615395">原文地址</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在这个什么都要和“智能”串联的年代，除了我们司空见款的手机外也就是一些智能手表和手环之类的穿戴设备了。这些智能穿戴设备集成了很多的传感器，由于脉搏或者心率是生命体征的重要参数之一，所以心率率测量可算是高端入门产品必备的一个技能，正好最近有机会好好研究心率测量的技术，所以趁热打铁总结一下光学测量心率的相关知识。</p><p>在网上搜集了很多资料，目前心率测量有以下几种传感器技术（仅供参考）</p><ol><li><p>心电ECG</p></li><li><p>光电容积脉搏波描记法PPG </p></li><li><p>生物阻抗 bioimpedance</p></li><li><p>摄像头Camera RGB 、wifi等技术</p></li></ol><p>在上述的几种方法中，最被人们熟悉的应该就是心电图。在医疗领域，通常使用心电图（ECG）测量生理电信号来实现心率和心脏活动的检测。但是由于测量ECG信号，常常要在身体多个部位连接传感器电极，在胸部和四肢之间最多可以连接10个电极。ECG信号虽然精准并且信息丰富，但是考虑到穿戴设备的便携性和功能简单所以并没有在穿戴设备上广泛采用ECG技术。目前情况ECG还是在一些专业领域里面使用例如医院、体育等方面的研究。</p><p>第二种光电容积脉搏波描记法，这个名字读起来实在是高端，其实说简单点就是利用光测量脉搏的一种技术。这种技术目前被广泛应用，本文也是主要介绍这种技术。</p><p>目前市场上能看到采用这种技术的穿戴设备就有：AppleWatch、三星 Galaxy Gear S2、Moto 360、Microsoft Band 等….（其他厂家就省略了）。</p><p>第三种生物阻抗传感器测量方法，目前市场上看到的好像只有Jawbone 的UP3了， 对于此技术网上的资料特别的少。不过通过亲身体验试戴JawboneUP3，感觉这种技术应该比光学测心率的技术难度大但是应该更精准更可靠。最后的Camera RGB和wifi都是是MIT研究出来的新技术，看起来都非常高端，MIT威武啊。其中一个是通过我们手机的摄像头就能检测出人体的体征变化，这个技术非常有意思并且也很高端。另一个则是通过我们家里的wifi信号就能测，也甚是高端。当然这两种还没有看到上市的产品所以就不多说了。</p><h3 id="光电容积脉搏波描记法PPG"><a href="#光电容积脉搏波描记法PPG" class="headerlink" title="光电容积脉搏波描记法PPG"></a>光电容积脉搏波描记法PPG</h3><p>光学心率传感器，如果带过上述那些智能手表或者智能手环的朋友来说也不算稀奇的事情。就拿AppleWatch来说，测量心率时底部的表盘会发出绿色的灯光，并且测量的时候手腕最好保持不动否侧会影响测量结果。接下来将详细介绍光学心率测量的原理。</p><p>如下两张图是光学心率传感器。图a是LED没有发光的时候中间是一个光敏二极管，图b是传感器的LED发光的时候。</p><p><img src="https://img-blog.csdn.net/20151103164718565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图a"><img src="https://img-blog.csdn.net/20151103164454214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图b"></p><p>那么为什么通过LED灯发光就能测量心率呢？</p><p>当LED光射向皮肤，透过皮肤组织反射回的光被光敏传感器接受并转换成电信号再经过AD转换成数字信号，简化过程：光–&gt; 电 –&gt; 数字信号</p><p><img src="https://img-blog.csdn.net/20151103170649448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>为什么大多数传感器都是采用的绿光呢？</p><p>我们先看看光谱的特点，从紫外线到红外线的波长是越来越长的。</p><p><img src="https://img-blog.csdn.net/20151103171211057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>之所以选择绿光作为光源是考虑到一下几个特点：</p><ol><li><p>皮肤的黑色素会吸收大量波长较短的波</p></li><li><p>皮肤上的水份也会吸收大量的UV和IR部分的光</p></li><li><p>进入皮肤组织的绿光(500nm)– 黄光(600nm)大部分会被红细胞吸收</p></li><li><p>红光和接近IR的光相比其他波长的光更容易穿过皮肤组织</p></li><li><p>血液要比其他组织吸收更多的光</p></li><li><p>相比红光，绿（绿-黄）光能被氧合血红蛋白和脱氧血红蛋白吸收</p></li></ol><p>总体来说，绿光– 红光能作为测量光源。早起多数采用红光为光源，随着进一步的研究和对比，绿光作为光源得到的信号更好，信噪比也比其他光源好些，所以现在大部分穿戴设备采用绿光为光源。但是考虑到皮肤情况的不用（肤色、汗水），高端产品会根据情况自动使用换绿光、红光和IR多种光源。</p><p>虽然知道了上面的几个特点，但是还不足以弄清楚为什么通过光照就能测出心率、血氧等参数呢？</p><p>下图就解释了核心原理</p><p><img src="https://img-blog.csdn.net/20151103173511542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>当光照透过皮肤组织然后再反射到光敏传感器时光照有一定的衰减的。像肌肉、骨骼、静脉和其他连接组织等等对光的吸收是基本不变的（前提是测量部位没有大幅度的运动），但是血液不同，由于动脉里有血液的流动，那么对光的吸收自然也有所变化。当我们把光转换成电信号时，正是由于动脉对光的吸收有变化而其他组织对光的吸收基本不变，得到的信号就可以分为直流DC信号和交流AC信号。提取其中的AC信号，就能反应出血液流动的特点。我们把这种技术叫做光电容积脉搏波描记法PPG。</p><p>下图是PPG信号和ECG信号的对比</p><p><img src="https://img-blog.csdn.net/20151103174757856?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>实际测量手指的PPG信号如下：</p><p><img src="https://img-blog.csdn.net/20151103174942948?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>所以，只要测得到的PPG信号比较理想算出心率也不算什么难事。但是事实总是残酷的，由于测量部位的移动、自然光、日光灯等等其他的干扰，最终测到的信号可能是下面的这种，所以要通过很多方法进行滤波处理</p><p><img src="https://img-blog.csdn.net/20151103175823717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>对于PPG信号的处理，目前我知道的有两种方法。一种是时域分析，即算出一定时间内PPG信号的波峰个数，另一种是通过对PPG信号进行FFT变换得到频域的特点。</p><h4 id="时域分析"><a href="#时域分析" class="headerlink" title="时域分析"></a>时域分析</h4><p>假设连续采样5秒的时间，在5s内的波峰个数为N，那么心率就是N*12，呼吸频率为心率&#x2F;2</p><h4 id="频域分析"><a href="#频域分析" class="headerlink" title="频域分析"></a>频域分析</h4><p>上面分析过，我们把血液流动对光吸收转变成了AC信号，如果对于进行FFT变换，那么就能看到频域的特点。如下图就是对PPG信号的FFT转变</p><p><img src="https://img-blog.csdn.net/20151103180955822?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>上图中的频域图，0Hz的信号很强，这部分是骨骼、肌肉等组织的DC信号，在1Hz附近有个相对比较突出的信号就是血液流动转变的AC信号。假设测得到的频率f &#x3D; 1.2Hz</p><p>那么心率HeartRate  HR &#x3D; f x60 &#x3D; 1.2 x 60 &#x3D; 72</p><p>最后再简单提一下血氧的测量，相比心率血氧测量难度较大而且精度不算太高。测量血氧的原理图下图所示</p><p><img src="https://img-blog.csdn.net/20151103182057629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>由于血液中含有的氧合血红蛋白HbO2和血红蛋白Hb存在一定的比例，简单说也就是含氧量吧。上面的图表示了氧合血红蛋白HbO2和血红蛋白Hb对波长600<del>1000nm的光吸收特性，从图中可以看出上600</del>800nm间Hb的吸收系数更高，800<del>1000之间HbO2的吸收系数更高。所以可以利用红光（600</del>800nm）和接近IR（800~1000nm）的光分别检测HbO2和Hb的PPG信号，然后通过程序处理算出相应的比值，这样就得到了血氧值。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>Sensor</tag>
      
      <tag>PPG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何让 plt.savefig() 为最大化的窗口保存图像，而不是默认的尺寸</title>
    <link href="/2023/11/17/%E5%A6%82%E4%BD%95%E8%AE%A9-plt-savefig-%E4%B8%BA%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%AA%97%E5%8F%A3%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B0%BA%E5%AF%B8/"/>
    <url>/2023/11/17/%E5%A6%82%E4%BD%95%E8%AE%A9-plt-savefig-%E4%B8%BA%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%AA%97%E5%8F%A3%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B0%BA%E5%AF%B8/</url>
    
    <content type="html"><![CDATA[<p>在使用 <a href="https://github.com/neuropsychology/NeuroKit">NeuroKit</a> 分析心率时，可以通过下面代码保存结果为图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.tight_layout()<br>plt.savefig(<span class="hljs-string">&quot;ecg.png&quot;</span>, dpi=<span class="hljs-number">120</span>)<br></code></pre></td></tr></table></figure><p>但是得到的图片如下图所示，所有东西都挤在了一起：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ecg1.png"></p><p>使用 <code>plt.show()</code> 显示的默认窗口也是这样，必须要将窗口放大后才能将内容全部展开。可图片无法放大。</p><p>所以参考了：</p><ol><li><a href="https://stackoverflow.com/questions/38120826/how-to-make-plt-savefig-save-image-for-maximized-window-instead-of-default-s">How to make plt.savefig() save image for ‘maximized’ window instead of default size</a></li><li><a href="https://stackoverflow.com/questions/32428193/saving-matplotlib-graphs-to-image-as-full-screen">Saving Matplotlib graphs to image as full screen</a></li><li><a href="https://stackoverflow.com/questions/10041627/how-to-make-savefig-save-image-for-maximized-window-instead-of-default-size">How to make savefig() save image for ‘maximized’ window instead of default size</a></li></ol><p>这三个问题，以及 <a href="https://github.com/neuropsychology/NeuroKit/pull/678">ppg_plot() was not returning matplotlib.Figure</a> 后有解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">figure = plt.gcf()  <span class="hljs-comment"># get current figure</span><br>figure.set_size_inches(<span class="hljs-number">32</span>, <span class="hljs-number">18</span>)  <span class="hljs-comment"># set figure&#x27;s size manually to your full screen (32x18)</span><br>plt.savefig(<span class="hljs-string">&#x27;ecg.png&#x27;</span>, bbox_inches=<span class="hljs-string">&#x27;tight&#x27;</span>, dpi=<span class="hljs-number">120</span>)  <span class="hljs-comment"># bbox_inches removes extra white spaces</span><br></code></pre></td></tr></table></figure><p>保存图片ok</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ecg2.png"></p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>Neurokit</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECG/PPG 量测解决方案</title>
    <link href="/2023/11/16/ECG-PPG-%E9%87%8F%E6%B5%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/11/16/ECG-PPG-%E9%87%8F%E6%B5%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>心脏运作可以揭露人体许多极具价值的信息，包括其健康状态、生活方式，甚至是情绪状态及心脏疾病的早期发病等。传统的医疗设备中，监测心跳速率和心脏活动是经由测量电生理讯号与心电图 (ECG) 来完成的，需要将电极连接到身体来量测心脏组织中所引发电气活动的信号。此外，随着心跳会有一压力波通过血管进行传递，这个波会稍微改变血管的直径，除了 ECG 外的另一选择──光体积变化描记图法 (Photoplethysmography, PPG) 就是利用这个变化，是一种无需测量生物电信号就能获得心脏功能信息的光学技术。PPG 主要用于测量血氧饱和度 (SpO2)，但也可不进行生物电信号测量就提供心脏功能信息。借助 PPG 技术，心率监护仪可集成到手表或护腕等可穿戴设备上，以达成连续侦测的应用。</p><h3 id="2-生理讯号：ECG-vs-PPG-与-PTT"><a href="#2-生理讯号：ECG-vs-PPG-与-PTT" class="headerlink" title="2.生理讯号：ECG vs. PPG 与 PTT"></a>2.生理讯号：ECG vs. PPG 与 PTT</h3><p>心电描记术 (Electrocardiography, ECG或者EKG) 是一种经胸腔以时间为单位记录心脏的电生理活动，利用在人体皮肤表面贴上的电极，可以侦测到心脏的电位传动，而心电图所记录的并不是单一心室或心房细胞的电位变化，而是心脏整体的电位变化。心电图的结果通常以波型显示，基本包括有 P 波、QRS 波组、T 波、P 波代表的是心房收缩，QRS 波组则是心室收缩，T 波是心室舒张。有关心跳率的测量或评估，是以 R 波与 R 波的间隔时间来代表。RR 间隔越大代表心跳率越低，RR 间隔越小代表心跳率越高。测量 ECG 信号常常要在身体多个部位连接传感器电极，在胸部和四肢之间最多可以连接 10 个电极。</p><p><img src="https://www.richtek.com/Design%20Support/Technical%20Document/~/media/Richtek/Design%20Support/Technical%20Documentation/AN057/CN/Version4/image001.jpg?file=preview.png"></p><p>光体积变化描记图法 (Photoplethysmography，简称PPG) 是借光电手段在活体组织中检测血液容积变化的一种无创检测方法。当一定波长的光束照射到指端皮肤表面，每次心跳时，血管的收缩和扩张都会影响光的透射 (例如在透射PPG中，通过指尖的光线) 或是光的反射 (例如在反射 PPG 中，来自手腕表面附近的光线)。当光线透过皮肤组织然后再反射到光敏传感器时，光照会有一定的衰减。像肌肉、骨骼、静脉和其他连接组织对光的吸收是基本不变的 (前提是测量部位没有大幅度的运动)，但是动脉会不同，由于动脉里有血液的脉动，那么对光的吸收自然也会有所变化。当我们把光转换成电信号时，正是由于动脉对光的吸收有变化而其他组织对光的吸收基本不变，得到的信号就可以分为直流 DC 信号和交流 AC 信号。提取其中的 AC 信号，就能反应出血液流动的特点。</p><p><img src="https://www.richtek.com/Design%20Support/Technical%20Document/~/media/Richtek/Design%20Support/Technical%20Documentation/AN057/CN/Version4/image002.png?file=preview.png"></p><p>下图是 PPG 信号和 ECG 信号的对比：</p><p><img src="https://www.richtek.com/Design%20Support/Technical%20Document/~/media/Richtek/Design%20Support/Technical%20Documentation/AN057/CN/Version4/image003.png?file=preview.png"></p><p>根据 PPG 与 ECG 个别的生理特征点，我们可以发现 ECG 的峰值来自于心室的收缩，而 PPG 的峰值则是因为血管收缩所造成的，因此我们可以得到血液自心脏送出后到达量测部位的传输时间，也就是脉搏波传递时间 Pulse Transit Time (PTT)，脉搏波传递的速度与血压是直接相关的，血压高时，脉搏波传递快，反之则慢，所以通过心电信号 ECG 与脉搏波信号 PPG 获得脉搏传递时间 (PTT)，再加上常规的一些身体参数 (如身高、体重) 即可得出脉搏波传递速度，通过建立的特征方程来估计人体脉搏的收缩压与舒张压，可实现无创连续血压测量。</p><h3 id="3-信号处理"><a href="#3-信号处理" class="headerlink" title="3.信号处理"></a>3.信号处理</h3><h4 id="ECG"><a href="#ECG" class="headerlink" title="ECG"></a>ECG</h4><p>一般 ECG 电极需放置在心脏两侧并紧贴皮肤，可以用来记录心电信号随时间的变化。实际 ECG 信号的幅度只有几毫伏，频率不超过几百赫兹。ECG 测量面临诸多挑战：一方面，来自 ECG 主电源的 50Hz 至 60Hz 电容耦合干扰要比心脏信号强许多；另一方面，身体皮肤的接触阻抗以及传感器之间阻抗的不匹配，这会导致较大的偏差并降低共模抑制能力；此外，还要解决接触噪声以及电磁源产生的干扰问题。此类应用中一些重要的放大器参数包括共模抑制、输入偏移电压和偏移电压漂移、输出摆幅以及放大器噪声，说明如下：</p><ul><li><strong>共模抑制</strong></li></ul><p>如前文所述，放置在患者皮肤上的电极可能有大约数百毫伏特的直流电压，而有用讯号的电压通常小于一毫伏特。仪表放大器配置非常适合这种情况，该放大器将消除任何与差分输入共模的讯号 (来自电极或任何共模噪声，如 60Hz 干扰)，同时放大有用的心电讯号。在这种情况下，考虑放大器电路的共模抑制参数是非常重要的，不仅针对直流讯号，还要考虑跨频率，尤其是线路频率为 50Hz 或 60Hz 时。具有高共模抑制比的放大器将消除更多不需要的噪声并实现更高精度的测量。</p><ul><li><strong>输入偏移电压和偏移电压漂移</strong></li></ul><p>由于有用电压相当小，放大器需要提供增益，以提高检测电路的分辨率。此应用需要高增益，因此放大器的偏移电压非常重要。放大器产生的任何偏移电压都将乘以电路增益，例如，假定心脏收缩在皮肤上的一个指定电极上产生 1 毫伏特电压，假定放大器电路的增益设置为 1000，则放大器电路的理想输出为 1 伏特，但如果放大器的输入偏移电压为 100 微伏特时，则将在输出产生 100 毫伏特的误差 (占有用讯号的 10%)。值得注意的是，放大器的输入偏移误差以输入为参考，因此，误差将与放大器的增益成比例。 </p><p>与所有电子组件一样，放大器的特性会随时间和温度发生变化，其电压偏移也是如此。放大器电压偏移是误差的来源，随着偏移电压的漂移，此误差可能变得更大。然而，透过选择低漂移放大器 (如采用自动归零校准架构的放大器) 或者定期执行系统校准，藉此校正失调和漂移的运算放大器，可大幅度地减小此类误差源带来的影响。</p><ul><li><strong>放大器输出摆幅</strong></li></ul><p>在前面的示例中，电极上 1 毫伏特电压变化会在放大器电路的输出上产生 1 伏特的电压变化。对于 5 伏特单电源系统，这代表放大器电路可精确检测 0 ~ 5 毫伏特的电压，放大器需要输出可摆动到最低与最高的电源轨。相反地，如果放大器不支持轨对轨的输出摆动，则电压的动态范围会变小，就无法正确检测出完整的输入讯号，因而会限制检测电路的动态范围，无法做出精确的侦测。</p><ul><li><strong>放大器噪声</strong></li></ul><p>当评估此类应用的放大器时，另一个必须考虑的重要参数是放大器噪声。值得注意的是，放大器的噪声可能不会随频率保持恒定，尤其是在 1&#x2F;f 噪声可成为主要噪声源的低频率下；在 ECG 应用中，有用的讯号带宽通常为直流到 100Hz，因此 1&#x2F;f 噪声仍是误差源之一。</p><h4 id="PPG"><a href="#PPG" class="headerlink" title="PPG"></a>PPG</h4><p>测量 PPG 面临的主要挑战来自环境光和运动产生的干扰。阳光产生的直流误差相对而言比较容易消除，但日光灯和节能灯发出的光线都带有可引起交流误差的频率分量。运动也会干扰光学系统，当光学心率监护仪用于睡眠研究时，这可能不是问题，但如果在活动期间穿戴，则将很难消除运动伪像，光学传感器 (LED 和光电检测器) 和皮肤之间的相对移动也会降低光信号的灵敏度。</p><p>此外，运动的频率分量也可能会被误判为心率，因此，必须测量该运动并进行补偿。设备与人体之间相贴越紧密，这种影响就越小，但采用机械方式消除这种影响几乎是不可能的。通常可使用多种方法来测量运动的干扰，其中一种是光学方法，即使用多个 LED 波长。共模信号表示运动，而差分信号用来检测心率。不过，最好是使用真正的运动传感器，该传感器不仅可准确测量应用于可穿戴设备的运动，而且还可用于提供其他功能，例如跟踪活动、计算步数或者在检测到特定g值时启动某个应用。</p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>PPG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「文档翻译」HeartPy - Python Heart Rate Analysis Toolkit II</title>
    <link href="/2023/11/07/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit-II/"/>
    <url>/2023/11/07/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit-II/</url>
    
    <content type="html"><![CDATA[<h1 id="Analysing-Smartwatch-Data"><a href="#Analysing-Smartwatch-Data" class="headerlink" title="Analysing Smartwatch Data"></a>Analysing Smartwatch Data</h1><p>本笔记本概述了如何使用 HeartPy 分析从智能手表设备获取的原始 PPG 数据。</p><p>与指尖或耳垂上的典型 PPG 传感器相比，以这种方式测量的信号包含更多的噪声，指尖或耳垂上的灌注比手腕上的灌注更容易测量。</p><p>分析此类信号需要一些额外的步骤，如本笔记中所述。</p><p>首先让我们加载依赖项和数据文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> heartpy <span class="hljs-keyword">as</span> hp<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;raw_ppg.csv&#x27;</span>)<br>df.keys()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Index([<span class="hljs-string">&#x27;ppg&#x27;</span>, <span class="hljs-string">&#x27;timer&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)<br></code></pre></td></tr></table></figure><p>查看文件格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>))<br><br>plt.plot(df[<span class="hljs-string">&#x27;ppg&#x27;</span>].values)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit7.png"></p><p>PPG 似乎有断断续续的部分点缀在非信号之间（传感器未记录的时间段）。</p><p>现在，让我们对第一个信号部分进行切片，看看发生了什么。稍后我将向您展示如何自动排除非信号部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">signal = df[<span class="hljs-string">&#x27;ppg&#x27;</span>].values[<span class="hljs-number">14500</span>:<span class="hljs-number">20500</span>]<br>timer = df[<span class="hljs-string">&#x27;timer&#x27;</span>].values[<span class="hljs-number">14500</span>:<span class="hljs-number">20500</span>]<br>plt.plot(signal)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit8.png"></p><p>现在我们需要知道采样率。它用于计算所有其他内容。</p><p>HeartPy 有多种从计时器列获取采样率的方法。让我们看看计时器的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">timer[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">array(<span class="hljs-punctuation">[</span>&#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">57.978</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.078</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.178</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.279</span>&#x27;<span class="hljs-punctuation">,</span><br>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.379</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.479</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.579</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.679</span>&#x27;<span class="hljs-punctuation">,</span><br>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.779</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.879</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.980</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.092</span>&#x27;<span class="hljs-punctuation">,</span><br>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.180</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.283</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.381</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.481</span>&#x27;<span class="hljs-punctuation">,</span><br>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.582</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.681</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.781</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.882</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      dtype=object)<br></code></pre></td></tr></table></figure><p>格式是 <strong>HH:MM:SS:mm</strong></p><p>HeartPy 附带了一个日期时间函数，可以使用 <code>get_samplerate_datetime</code> 将日期转化为采样率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Seems easy enough, right? Now let&#x27;s determine the sample rate</span><br><br>sample_rate = hp.get_samplerate_datetime(timer, timeformat = <span class="hljs-string">&#x27;%H:%M:%S.%f&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sampling rate is: %.3f Hz&#x27;</span> %sample_rate)<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">sampling rate is<span class="hljs-punctuation">:</span> <span class="hljs-number">9.986</span> Hz<br></code></pre></td></tr></table></figure><p>采样率相当低，但为了节省电量，许多智能手表都采用这种方式。对于确定 BPM 来说这很好，但任何心率变异性 (HRV) 测量都可能不会非常准确。</p><p>采样率的第二个考虑因素是它是否稳定。包括智能手表在内的许多设备可以同时执行许多操作。他们运行的操作系统除了测量心率外还有其他任务，因此当以 10Hz 进行测量时，操作系统可能不会每 100 毫秒就准备好进行一次测量。因此，采样率可能会有所不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-comment">#let&#x27;s create a list &#x27;newtimer&#x27; to house our datetime objects</span><br>newtimer = [datetime.strptime(x, <span class="hljs-string">&#x27;%H:%M:%S.%f&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> timer]<br><br><span class="hljs-comment">#let&#x27;s compute the real distances from entry to entry</span><br>elapsed = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(newtimer) - <span class="hljs-number">1</span>):<br>    elapsed.append(<span class="hljs-number">1</span> / ((newtimer[i+<span class="hljs-number">1</span>] - newtimer[i]).microseconds / <span class="hljs-number">1000000</span>))<br><br><span class="hljs-comment">#and plot the results</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br>plt.plot(elapsed)<br>plt.xlabel(<span class="hljs-string">&#x27;Sample number&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Actual sampling rate in Hz&#x27;</span>)<br>plt.show()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mean sampling rate: %.3f&#x27;</span> %np.mean(elapsed))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;median sampling rate: %.3f&#x27;</span>%np.median(elapsed))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;standard deviation: %.3f&#x27;</span>%np.std(elapsed))<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit9.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">mean sampling rate<span class="hljs-punctuation">:</span> <span class="hljs-number">9.987</span><br>median sampling rate<span class="hljs-punctuation">:</span> <span class="hljs-number">10.000</span><br>standard deviation<span class="hljs-punctuation">:</span> <span class="hljs-number">0.183</span><br></code></pre></td></tr></table></figure><p>信号均值接近 10Hz，并且方差较低。 偶尔出现 12Hz 的峰值或 9Hz 的下降表明计时器不准确，但这种情况并不常见。</p><p>对于我们当前的目的来说，这已经足够了。</p><p>当然，您可以对信号进行插值和重新采样，使其具有精确的采样率，但对计算测量的影响可能很小。 </p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>HeartPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>PPG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「文档翻译」HeartPy - Python Heart Rate Analysis Toolkit I</title>
    <link href="/2023/11/06/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit%20I/"/>
    <url>/2023/11/06/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit%20I/</url>
    
    <content type="html"><![CDATA[<p>文档地址<a href="https://github.com/paulvangentcom/heartrate_analysis_python#heartpy---python-heart-rate-analysis-toolkit">HeartPy - Python Heart Rate Analysis Toolkit</a></p><h1 id="HeartPy-Python-心率分析工具包"><a href="#HeartPy-Python-心率分析工具包" class="headerlink" title="HeartPy - Python 心率分析工具包"></a>HeartPy - Python 心率分析工具包</h1><p>欢迎使用 HeartPy，Python 心率分析工具包的文档。该工具包旨在处理使用 PPG 数据。</p><ul><li>该工具包是在海牙举行的 Humanist 2018 会议上展示的（<a href="https://www.researchgate.net/publication/325967542_Heart_Rate_Analysis_for_Human_Factors_Development_and_Validation_of_an_Open_Source_Toolkit_for_Noisy_Naturalistic_Heart_Rate_Data">请参阅此处的论文</a>）。</li><li>有关该功能的技术论文<a href="http://doi.org/10.13140/RG.2.2.24895.56485">可在此处获得</a>；</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>如果您正在寻找一些有关如何开始使用 HeartPy 的动手示例，请查看以下链接！这些笔记本展示了如何使用 HeartPy 处理各种分析任务，包括智能手表数据、智能戒指数据、常规 PPG 和常规（非常嘈杂）心电图。笔记本有时无法通过 github 引擎呈现，因此要么在本地打开它们，要么使用 <a href="https://nbviewer.jupyter.org/">nbviewer</a> 之类的在线查看器。</p><p>我们建议您按以下顺序阅读笔记：</p><ul><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/1_regular_PPG/Analysing_a_PPG_signal.ipynb">1. 分析光电容积描记（PPG）信号</a>，一个使用内置示例开始使用 HeartPy 的笔记。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/1_regular_ECG/Analysing_a_regular_ECG_signal.ipynb">2. 分析心电图（ECG）信号</a>，用于处理 HeartPy 和典型心电图数据的笔记。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/3_smartwatch_data/Analysing_Smartwatch_Data.ipynb">3. Analyzing smartwatch data</a>，一个分析智能手表低分辨率 PPG 数据的笔记。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/smartring_data/Analysing_Smart_Ring_Data.ipynb">4. 智能环数据分析</a>，一个分析智能环 PPG 数据的笔记本。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/noisy_ECG/Analysing_Noisy_ECG.ipynb">5. 分析嘈杂的心电图数据</a>，使用来自 MIT-BIH 噪声的数据处理非常嘈杂的心电图数据的高级笔记压力测试数据。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/6_colorblind_mode/Colorblind_mode.ipynb">6. Colorblind mode - How To and Styles</a></li></ul><h3 id="示例1-分析-PPG-信号"><a href="#示例1-分析-PPG-信号" class="headerlink" title="示例1.分析 PPG 信号"></a>示例1.分析 PPG 信号</h3><p>本笔记适合那些不了解 HeartPy 的人。 它包含一些可用 API 的简单示例。</p><p>在本笔记中，我们将介绍如何使用 HeartPy 分析常规 PPG 信号。</p><p>为此，我们将使用与 HeartPy 一起打包的示例数据集。</p><p>HeartPy 附带一个函数 <code>load_exampledata()</code> 可以加载提供的数据集。 </p><p>0：一个短的、非常干净的 PPG 信号，以 100.0 Hz 采样<br>1：稍长（约 2 分钟）的 PPG 信号，前三分之一丢失信号，其余信号出现随机噪声尖峰<br>2：在驾驶模拟器中驾驶时使用食指上的脉冲传感器和 Arduino 记录的长（约 11.5 分钟）PPG 信号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#First let&#x27;s import</span><br><span class="hljs-keyword">import</span> heartpy <span class="hljs-keyword">as</span> hp<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">#first let&#x27;s load the clean PPG signal</span><br>data, timer = hp.load_exampledata(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#and visualise</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br>plt.plot(data)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit1.png"></p><p>运行 <code>hp.process()</code> 时，会返回两个字典：working_data（包含您可能想要访问的工作数据，例如峰值位置和峰峰值间隔）和 measures（包含计算的输出测量值）。</p><p>在文档中，我们将它们缩写为「wd」和「m」。</p><p>现在您可能想要可视化分析结果。</p><p>Heartpy 附带了一个函数 <code>hp.plotter(wd, m)</code> 来完成此操作。该函数要求为其提供工作数据和测量字典。</p><p>如果在调用 <code>hp.plotter(wd, m)</code> 之前向 matplotlib 指定图形大小等参数，则将使用指定的图形大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#run the analysis</span><br>wd, m = hp.process(data, sample_rate = <span class="hljs-number">100.0</span>)<br><br><span class="hljs-comment">#set large figure</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#call plotter</span><br>hp.plotter(wd, m)<br><br><span class="hljs-comment">#display measures computed</span><br><span class="hljs-keyword">for</span> measure <span class="hljs-keyword">in</span> m.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %f&#x27;</span> %(measure, m[measure]))<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit2.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">bpm<span class="hljs-punctuation">:</span> <span class="hljs-number">58.898848</span><br>ibi<span class="hljs-punctuation">:</span> <span class="hljs-number">1018.695652</span><br>sdnn<span class="hljs-punctuation">:</span> <span class="hljs-number">65.760061</span><br>sdsd<span class="hljs-punctuation">:</span> <span class="hljs-number">34.866925</span><br>rmssd<span class="hljs-punctuation">:</span> <span class="hljs-number">64.737231</span><br>pnn20<span class="hljs-punctuation">:</span> <span class="hljs-number">0.863636</span><br>pnn50<span class="hljs-punctuation">:</span> <span class="hljs-number">0.409091</span><br>hr_mad<span class="hljs-punctuation">:</span> <span class="hljs-number">40.000000</span><br>sd1<span class="hljs-punctuation">:</span> <span class="hljs-number">45.758077</span><br>sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">82.926832</span><br>s<span class="hljs-punctuation">:</span> <span class="hljs-number">11921.000816</span><br>sd1/sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">0.551789</span><br>breathingrate<span class="hljs-punctuation">:</span> <span class="hljs-number">0.161095</span><br></code></pre></td></tr></table></figure><p>That looks nice, and we ran into no problems.</p><p>Let’s move on to the second included dataset and explore it first:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data, timer = hp.load_exampledata(<span class="hljs-number">1</span>)<br><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br>plt.plot(data)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit3.png"></p><p>这是故意制作的一个更棘手的信号。一开始没有信号。信号开始后，当在记录时用力移动传感器时，会出现一些噪音尖峰。这模仿了在野外录制时可能发生的情况，以及参与者移动并意外拉动传感器电缆时可能发生的情况。</p><p>HeartPy 旨在开箱即用地处理此类事情。 我们先看一下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">sample_rate = hp.get_samplerate_mstimer(timer)<br><br>wd, m = hp.process(data, sample_rate)<br><br><span class="hljs-comment">#plot</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br>hp.plotter(wd, m)<br><br><span class="hljs-comment">#display measures computed</span><br><span class="hljs-keyword">for</span> measure <span class="hljs-keyword">in</span> m.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %f&#x27;</span> %(measure, m[measure]))<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit4.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">bpm<span class="hljs-punctuation">:</span> <span class="hljs-number">62.376304</span><br>ibi<span class="hljs-punctuation">:</span> <span class="hljs-number">961.903744</span><br>sdnn<span class="hljs-punctuation">:</span> <span class="hljs-number">64.613519</span><br>sdsd<span class="hljs-punctuation">:</span> <span class="hljs-number">29.871930</span><br>rmssd<span class="hljs-punctuation">:</span> <span class="hljs-number">57.069746</span><br>pnn20<span class="hljs-punctuation">:</span> <span class="hljs-number">0.797297</span><br>pnn50<span class="hljs-punctuation">:</span> <span class="hljs-number">0.486486</span><br>hr_mad<span class="hljs-punctuation">:</span> <span class="hljs-number">47.010333</span><br>sd1<span class="hljs-punctuation">:</span> <span class="hljs-number">40.344402</span><br>sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">81.621935</span><br>s<span class="hljs-punctuation">:</span> <span class="hljs-number">10345.227446</span><br>sd1/sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">0.494284</span><br>breathingrate<span class="hljs-punctuation">:</span> <span class="hljs-number">0.155994</span><br></code></pre></td></tr></table></figure><p>请注意，我们从计时器列计算了 sample_rate（以毫秒为单位）。这一点很重要，因为我们不知道信号的采样率是多少。所有测量都取决于了解采样率。</p><p>HeartPy 附带两个函数：<code>hp.get_samplerate_mstimer()</code>，用于基于 ms 计时器计算采样率；<code>hp.get_samplerate_datetime()</code>，用于基于日期时间值中的列计算 sample_rate。</p><p>您之前已经了解了我们如何使用 mstimer，现在让我们看一下使用日期时间字符串对时间进行编码的野外记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data, timer = hp.load_exampledata(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(timer[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">2016</span><span class="hljs-number">-11</span><span class="hljs-number">-24</span> <span class="hljs-number">13</span><span class="hljs-punctuation">:</span><span class="hljs-number">58</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.081000</span><br></code></pre></td></tr></table></figure><p>When computing the sample rate we need to give <code>get_samplerate_datetime()</code> the format of the string (by default it expects HH:MM:SS.ms):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sample_rate = hp.get_samplerate_datetime(timer, timeformat=<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sample rate is: %f Hz&#x27;</span> %sample_rate)<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">sample rate is<span class="hljs-punctuation">:</span> <span class="hljs-number">100.419711</span> Hz<br></code></pre></td></tr></table></figure><p>Now that we know all that, running the analysis is the same as before:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">wd, m = hp.process(data, sample_rate, report_time = <span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#plot</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br>hp.plotter(wd, m)<br><br><span class="hljs-comment">#let&#x27;s zoom in on a bit</span><br>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<br>plt.xlim(<span class="hljs-number">20000</span>, <span class="hljs-number">30000</span>)<br>hp.plotter(wd, m)<br><br><span class="hljs-comment">#display measures computed</span><br><span class="hljs-keyword">for</span> measure <span class="hljs-keyword">in</span> m.keys():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %f&#x27;</span> %(measure, m[measure]))<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">Finished in <span class="hljs-number">0.248689</span> sec<br></code></pre></td></tr></table></figure><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit5.png"></p><p>![](&#x2F;Users&#x2F;bakako&#x2F;Library&#x2F;Mobile Documents&#x2F;com<del>apple</del>CloudDocs&#x2F;blog&#x2F;图&#x2F;「文档翻译」HeartPy-Python-Heart-Rate-Analysis-Toolkit&#x2F;「文档翻译」HeartPy-Python-Heart-Rate-Analysis-Toolkit6.png)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">bpm<span class="hljs-punctuation">:</span> <span class="hljs-number">97.325149</span><br>ibi<span class="hljs-punctuation">:</span> <span class="hljs-number">616.490194</span><br>sdnn<span class="hljs-punctuation">:</span> <span class="hljs-number">57.916589</span><br>sdsd<span class="hljs-punctuation">:</span> <span class="hljs-number">30.173744</span><br>rmssd<span class="hljs-punctuation">:</span> <span class="hljs-number">38.181375</span><br>pnn20<span class="hljs-punctuation">:</span> <span class="hljs-number">0.320281</span><br>pnn50<span class="hljs-punctuation">:</span> <span class="hljs-number">0.086345</span><br>hr_mad<span class="hljs-punctuation">:</span> <span class="hljs-number">29.874613</span><br>sd1<span class="hljs-punctuation">:</span> <span class="hljs-number">26.997110</span><br>sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">75.178572</span><br>s<span class="hljs-punctuation">:</span> <span class="hljs-number">6376.189507</span><br>sd1/sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">0.359106</span><br>breathingrate<span class="hljs-punctuation">:</span> <span class="hljs-number">0.258103</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据处理</category>
      
      <category>HeartPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECG</tag>
      
      <tag>PPG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 在使用 curve_fit 拟合函数时，报错OptimizeWarning: Covariance of the parameters could not be estimated</title>
    <link href="/2023/11/06/Python-%E5%9C%A8%E4%BD%BF%E7%94%A8-curve-fit-%E6%8B%9F%E5%90%88%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8A%A5%E9%94%99OptimizeWarning-Covariance-of-the-parameters-could-not-be-estimated/"/>
    <url>/2023/11/06/Python-%E5%9C%A8%E4%BD%BF%E7%94%A8-curve-fit-%E6%8B%9F%E5%90%88%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8A%A5%E9%94%99OptimizeWarning-Covariance-of-the-parameters-could-not-be-estimated/</url>
    
    <content type="html"><![CDATA[<p>在使用 Scipy 函数进行曲线拟合时遇到这个问题，协方差矩阵无法正确求出，均为Inf。</p><p><strong>解决方案为给拟合的参数定义一个边界：</strong></p><p>scipy.optimize.curve_fit 是一个用于拟合曲线的函数。它可以帮助我们通过拟合数据点来得到一个函数模型，以便我们能够使用这个模型进行预测和分析。</p><p>在某些情况下，我们希望通过对函数参数设置边界来控制拟合结果。这时我们可以使用 curve_fit 函数中的 bounds 参数。</p><p>bounds 参数是一个元组，用于指定每个参数的下限和上限。如果一个参数没有边界限制，可以将其设置为负无穷或正无穷。</p><p>以下是一个使用 bounds 参数的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> curve_fit<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, a, b, c</span>):<br>    <span class="hljs-keyword">return</span> a * np.exp(-b * x) + c<br><br><span class="hljs-comment"># 创建模拟数据</span><br>xdata = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">50</span>)<br>y = func(xdata, <span class="hljs-number">2.5</span>, <span class="hljs-number">1.3</span>, <span class="hljs-number">0.5</span>)<br>ydata = y + <span class="hljs-number">0.2</span> * np.random.normal(size=<span class="hljs-built_in">len</span>(xdata))<br><br><span class="hljs-comment"># 设置参数边界</span><br>bounds = ([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [np.inf, np.inf, np.inf])<br><br><span class="hljs-comment"># 使用curve_fit拟合数据</span><br>popt, pcov = curve_fit(func, xdata, ydata, bounds=bounds)<br><br><span class="hljs-comment"># 打印拟合结果</span><br><span class="hljs-built_in">print</span>(popt)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无氧储备(AWC/ARC)和临界功率(CP/CV)</title>
    <link href="/2023/10/30/%E6%97%A0%E6%B0%A7%E5%82%A8%E5%A4%87-AWC-ARC-%E5%92%8C%E4%B8%B4%E7%95%8C%E5%8A%9F%E7%8E%87-CP-CV/"/>
    <url>/2023/10/30/%E6%97%A0%E6%B0%A7%E5%82%A8%E5%A4%87-AWC-ARC-%E5%92%8C%E4%B8%B4%E7%95%8C%E5%8A%9F%E7%8E%87-CP-CV/</url>
    
    <content type="html"><![CDATA[<p>在可以测得功率的时候，一般采用：</p><ul><li>无氧储备 AWC，单位是 J；</li><li>临界功率 CP，单位是 W。</li></ul><p>若无法测得功率，或者像跑步一样可以用速度来代替功率，则可以采用：</p><ul><li>无氧储备 ARC，单位是 m；</li><li>临界速度 CV，单位是 m&#x2F;s。</li></ul><p>具体资料可参考：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/619952272">临界功率和无氧储备：你的血槽</a>;</li><li><a href="https://zhuanlan.zhihu.com/p/448008831">自行车功率训练中的临界功率的概念与应用</a>；</li><li><a href="https://www.exphyslab.com/cp">Critical Power App</a>;</li><li><a href="https://uiantraininglog.blogspot.com/2020/02/critical-power.html">跑步臨界功率 － Critical Power</a>;</li><li><a href="https://uiantraininglog.blogspot.com/2018/03/ftp.html">跑步功率最重要的數據：找出自己的臨界功率</a>;</li><li><a href="http://www.epsport.net/epsport/week/show.asp?repno=509&page=1">無氧速度儲備 (anaerobic speed reserve)</a>;</li><li><a href="http://www.epsport.net/epsport/week/show2020.asp?repno=402&page=2">臨界速度的測量</a>;</li><li><a href="http://www.epsport.net/epsport/week/show2020.asp?repno=357&page=3">ARC、Vmax–跑步無氧運動能力指標</a>.</li></ol>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 给出具体函数形式，求函数各项系数</title>
    <link href="/2023/10/30/python-%E7%BB%99%E5%87%BA%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F%EF%BC%8C%E6%B1%82%E5%87%BD%E6%95%B0%E5%90%84%E9%A1%B9%E7%B3%BB%E6%95%B0/"/>
    <url>/2023/10/30/python-%E7%BB%99%E5%87%BA%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F%EF%BC%8C%E6%B1%82%E5%87%BD%E6%95%B0%E5%90%84%E9%A1%B9%E7%B3%BB%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">##使用curve_fit</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> curve_fit<br> <br><span class="hljs-comment">#自定义函数 e指数形式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, a, b,c</span>):<br>  <span class="hljs-keyword">return</span> a*np.sqrt(x)*(b*np.square(x)+c)<br> <br><span class="hljs-comment">#定义x、y散点坐标</span><br>x = [<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span>]<br>x = np.array(x)<br>num = [<span class="hljs-number">453</span>,<span class="hljs-number">482</span>,<span class="hljs-number">503</span>,<span class="hljs-number">508</span>,<span class="hljs-number">498</span>,<span class="hljs-number">479</span>]<br>y = np.array(num)<br> <br><span class="hljs-comment">#非线性最小二乘法拟合</span><br>popt, pcov = curve_fit(func, x, y)<br><span class="hljs-comment">#获取popt里面是拟合系数</span><br><span class="hljs-built_in">print</span>(popt)<br>a = popt[<span class="hljs-number">0</span>] <br>b = popt[<span class="hljs-number">1</span>]<br>c = popt[<span class="hljs-number">2</span>]<br>yvals = func(x,a,b,c) <span class="hljs-comment">#拟合y值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;popt:&#x27;</span>, popt)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数a:&#x27;</span>, a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数b:&#x27;</span>, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数c:&#x27;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数pcov:&#x27;</span>, pcov)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数yvals:&#x27;</span>, yvals)<br><span class="hljs-comment">#绘图</span><br>plot1 = plt.plot(x, y, <span class="hljs-string">&#x27;s&#x27;</span>,label=<span class="hljs-string">&#x27;original values&#x27;</span>)<br>plot2 = plt.plot(x, yvals, <span class="hljs-string">&#x27;r&#x27;</span>,label=<span class="hljs-string">&#x27;polyfit values&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>plt.legend(loc=<span class="hljs-number">4</span>) <span class="hljs-comment">#指定legend的位置右下角</span><br>plt.title(<span class="hljs-string">&#x27;curve_fit&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 解析 json 格式文件</title>
    <link href="/2023/10/13/Python-%E8%A7%A3%E6%9E%90-json-%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/"/>
    <url>/2023/10/13/Python-%E8%A7%A3%E6%9E%90-json-%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>下面是一个简单的 Json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;startTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1700624323510</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;endTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1700625057456</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tester&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;round&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">40</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;round&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">40</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>用 Python 进行解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">node_times = []<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    data = json.load(file)<br>    nodes = data[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;nodes&#x27;</span>]<br>    start_time = data[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;startTime&#x27;</span>]<br>    end_time = data[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;endTime&#x27;</span>]<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:<br>        node_times.append(node[<span class="hljs-string">&#x27;timeout&#x27;</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoreData 报错 Failed to call designated initializer on NSManagedObject class</title>
    <link href="/2023/10/10/CoreData-%E6%8A%A5%E9%94%99-Failed-to-call-designated-initializer-on-NSManagedObject-class/"/>
    <url>/2023/10/10/CoreData-%E6%8A%A5%E9%94%99-Failed-to-call-designated-initializer-on-NSManagedObject-class/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://stackoverflow.com/questions/33301250/resolving-failed-to-call-designated-initializer-on-nsmanagedobject-class">Resolving ‘Failed to call designated initializer on NSManagedObject class’</a></li></ul><p>The problem lies not in the code in your question, but in the snippet you included as comments to the other answer:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> currentCourse <span class="hljs-operator">=</span> <span class="hljs-type">Course</span>()<br></code></pre></td></tr></table></figure><p>This doesn’t just declare <code>currentCourse</code> to be of type <code>Course</code>, it also creates an instance of the <code>Course</code> entity using the standard <code>init</code> method. This is expressly not allowed: You must use the designated initialiser: <code>init(entity entity: NSEntityDescription, insertIntoManagedObjectContext context: NSManagedObjectContext?)</code>. This is described in the Apple Documentation <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObject_Class/index.html#//apple_ref/doc/uid/TP30001171-SW7">here</a>.</p><p>I suspect you do not ever use the instance created by the above var definition, so just define it as being of type <code>Course?</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> currentCourse : <span class="hljs-type">Course</span>?<br></code></pre></td></tr></table></figure><p>Since it is optional, you do not need to set an initial value, though you will need to unwrap the value whenever it is used.</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CoreData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoreData 删除数据时 SwiftUI 崩溃</title>
    <link href="/2023/10/10/CoreData-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%97%B6-SwiftUI-%E5%B4%A9%E6%BA%83/"/>
    <url>/2023/10/10/CoreData-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%97%B6-SwiftUI-%E5%B4%A9%E6%BA%83/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://stackoverflow.com/questions/60604658/crash-when-delete-a-record-from-coredata-in-swiftui">Crash when delete a record from coredata in SwiftUI</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CoreData</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 汉字转码</title>
    <link href="/2023/10/10/Swift-%E6%B1%89%E5%AD%97%E8%BD%AC%E7%A0%81/"/>
    <url>/2023/10/10/Swift-%E6%B1%89%E5%AD%97%E8%BD%AC%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="汉字转码"><a href="#汉字转码" class="headerlink" title="汉字转码"></a>汉字转码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> <span class="hljs-type">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.baidu.com/s?wd=点个赞吧&quot;</span><br><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> str.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> <span class="hljs-type">URL</span> <span class="hljs-operator">=</span> result<span class="hljs-operator">?</span>.removingPercentEncoding<br><span class="hljs-built_in">print</span>(<span class="hljs-type">URL</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI TextField 与 Keyboard 合集</title>
    <link href="/2023/10/06/SwiftUI-TextField-%E4%B8%8E-Keyboard-%E5%90%88%E9%9B%86/"/>
    <url>/2023/10/06/SwiftUI-TextField-%E4%B8%8E-Keyboard-%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h2><ul><li><a href="https://fatbobman.com/zh/posts/textfield-event-focus-keyboard/">SwiftUI TextField 进阶 —— 事件、焦点、键盘</a></li></ul><p>修改 TextField 属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 背景颜色</span><br><span class="hljs-type">UITextField</span>.appearance().backgroundColor <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>(<span class="hljs-type">Color</span>.blue)<br><span class="hljs-comment">// 竖线颜色</span><br><span class="hljs-type">UITextField</span>.appearance().tintColor <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>(<span class="hljs-type">Color</span>.red)<br><span class="hljs-comment">// 还有很多属性，这里不展示了</span><br><span class="hljs-comment">// Search Bar 也适用</span><br></code></pre></td></tr></table></figure><p>修改 TextField 大小：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">TextField</span>(<span class="hljs-string">&quot;名称&quot;</span>, text: <span class="hljs-variable">$name</span>)<br>    .textFieldStyle(.roundedBorder)<br>    .controlSize(.large)<span class="hljs-comment">//单独好像不会生效</span><br></code></pre></td></tr></table></figure><h2 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h2><ul><li><a href="https://stackoverflow.com/questions/56491386/how-to-hide-keyboard-when-using-swiftui">How to hide keyboard when using SwiftUI?</a>;</li></ul><p>关于键盘会上推组件：</p><p><a href="https://fatbobman.com/zh/posts/textfield-event-focus-keyboard/">掌握 SwiftUI 的 Safe Area</a></p>]]></content>
    
    
    <categories>
      
      <category>合集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 创建可以自动停止的 Timer</title>
    <link href="/2023/10/06/Swift-%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%81%9C%E6%AD%A2%E7%9A%84-Timer/"/>
    <url>/2023/10/06/Swift-%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%81%9C%E6%AD%A2%E7%9A%84-Timer/</url>
    
    <content type="html"><![CDATA[<h3 id="在离开页面时停止-Timer"><a href="#在离开页面时停止-Timer" class="headerlink" title="在离开页面时停止 Timer"></a>在离开页面时停止 Timer</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimerView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> timer: <span class="hljs-type">Timer</span>?<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Image</span>(<span class="hljs-string">&quot;pic&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(number)</span>&quot;</span>)<br>                .font(.largeTitle)<br>        &#125;<br>        .onAppear &#123;<br>            <span class="hljs-keyword">self</span>.timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.scheduledTimer(withTimeInterval: <span class="hljs-number">1</span>, repeats: <span class="hljs-literal">true</span>) &#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span><br>                <span class="hljs-keyword">self</span>.number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-keyword">self</span>.number)<br>                <br>            &#125;<br>        &#125;<br>        .onDisappear &#123;<br>            <span class="hljs-keyword">self</span>.timer<span class="hljs-operator">?</span>.invalidate()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-Combine-提供的-timer-publisher"><a href="#使用-Combine-提供的-timer-publisher" class="headerlink" title="使用 Combine 提供的 timer publisher"></a>使用 Combine 提供的 timer publisher</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><span class="hljs-keyword">import</span> Combine<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimerView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">1</span>, on: .main, in: .common).autoconnect()<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Image</span>(<span class="hljs-string">&quot;pic&quot;</span>)<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(number)</span>&quot;</span>)<br>                .font(.largeTitle)<br>        &#125;<br>        .onReceive(timer, perform: &#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span><br>             <span class="hljs-keyword">self</span>.number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-keyword">self</span>.number)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>combine 扩充了 timer 的功能，我们可以直接产生 timer 的 publisher，让它定时发送 value。在此我们设定它每秒触发一次。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">1</span>, on: .main, in: .common).autoconnect()<br></code></pre></td></tr></table></figure><p>由于 timer 的 publisher 必须先连接才能发送 value 的 publisher，所以我们调用 autoconnect，让它可以自动连接，方便之后接收 timer 发送的 value。</p><p>在 view 上调用 onReceive(_:perform:)，传入 publisher timer，接收 timer 每秒发送的 value，perform 传入 timer 定時触发的 closure 。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">.onReceive(timer, perform: &#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span><br>             <span class="hljs-keyword">self</span>.number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-keyword">self</span>.number)<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用 onReceive(_:perform:) 定义 timer 触发的 closure 有特別的好处，当 SwiftUI view 关闭后，timer 也会自动停止，不用另外调用 invalidate。</p><h4 id="timer-publisher-发送的-value-是时间"><a href="#timer-publisher-发送的-value-是时间" class="headerlink" title="timer publisher 发送的 value 是时间"></a>timer publisher 发送的 value 是时间</h4><p>timer publisher 的类型是 TimerPublisher，从它的定义我们发现它发送的 value 类型是 Date，因此以下例子打印的 value 是 timer 触发的时间。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">.onReceive(timer, perform: &#123; (value) <span class="hljs-keyword">in</span><br>    <span class="hljs-built_in">print</span>(value)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yoyo 间歇恢复测试</title>
    <link href="/2023/10/05/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/10/05/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-测试规则"><a href="#1-测试规则" class="headerlink" title="1.测试规则"></a>1.测试规则</h3><p>具体实施可参考视频：</p><ol><li><a href="https://www.bilibili.com/video/BV1gx411f7Gi/?spm_id_from=333.337.search-card.all.click&vd_source=e6f379136d38211008ce7d13802d4571">马竞新赛季YOYO体能测试，看看谁坚持到了最后？_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1vV411f7KU/?spm_id_from=333.788.recommend_more_video.1&vd_source=e6f379136d38211008ce7d13802d4571">yoyo间歇跑测试背景音 Yo-Yo Intermittent _ Beep Test_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1Po4y1D7E3/?spm_id_from=333.788.recommend_more_video.-1&vd_source=e6f379136d38211008ce7d13802d4571">Yo-Yo Intermittent Recovery Test - UP COACH_哔哩哔哩_bilibili</a></li></ol><p>理论上说，yoyo 测试是测量个体有氧能力的有效可靠预测指标。</p><p>但实际上，在前提<strong>统一标准</strong>的前提下，yoyo 测试更多是用来进行个体历史成绩的纵向对比，以及多个体间的横向对比。</p><p>通过 yoyo 测试估算 VO2max 意义不大，可以认为 yoyo 测试为定性测试（给一个评分）而不是定量测试。</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p>yoyo测试有三种变体：</p><ol><li>YYIR1<ul><li>针对年轻或休闲运动员，起始速度为 10km&#x2F;hr。</li></ul></li><li>YYIR2<ul><li>针对精英和专业运动员，起始速度为 13km&#x2F;hr。</li></ul></li><li>亚最大 yoyo 测试<ul><li>用于监测比赛期间、康复期间或难以进行最大测试的个体的表现。</li></ul></li></ol><p>在进行测试时，不一定非要按这三个变体执行。可参考<a href="https://www.bilibili.com/video/BV1gx411f7Gi/?spm_id_from=333.337.search-card.all.click&vd_source=e6f379136d38211008ce7d13802d4571">马竞新赛季YOYO体能测试，看看谁坚持到了最后？_哔哩哔哩_bilibili</a></p><h3 id="3-测试执行（标准情况）"><a href="#3-测试执行（标准情况）" class="headerlink" title="3.测试执行（标准情况）"></a>3.测试执行（标准情况）</h3><p>尽量保证环境、设施一致。</p><h4 id="3-1-所需设备"><a href="#3-1-所需设备" class="headerlink" title="3.1.所需设备"></a>3.1.所需设备</h4><ul><li>设施——一致、平坦、防滑（最小长度30m）</li><li>标记锥体</li><li>卷尺（&gt;30m）</li><li>YYIR 测试音频 CD 或 MP3</li><li>带扬声器的CD或MP3播放器（扬声器的音量尤为重要）</li><li>记录完成的往返次数的裁判员</li></ul><h4 id="3-2-测试程序"><a href="#3-2-测试程序" class="headerlink" title="3.2.测试程序"></a>3.2.测试程序</h4><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%951.png"></p><ol><li>参与者从锥体 B 开始测试；</li><li>蜂鸣信号（信号 1）发出后，倒计时 1 启动，参与者从锥体 B 出发，跑向锥体 C。必须在下一个蜂鸣信号（信号 2）发出之前，也就是倒计时 1 结束结束之前到达锥体 C；</li><li>到达锥体 C 后，等待信号（信号 2）发出。信号 2 发出后，倒计时 2 启动。必须在下一个信号（信号 3）发出之前，也就是倒计时 2 结束之前返回锥体 B；</li><li>返回后，参与者将有 10 秒的恢复时间，在此期间他们的活动范围必须在圆锥体 B 和圆锥体 A 之间；</li><li>重复以上。</li></ol><h4 id="3-3-失败条件"><a href="#3-3-失败条件" class="headerlink" title="3.3.失败条件"></a>3.3.失败条件</h4><ol><li>抢跑必须返回起点线重新开始这次折返跑，否则取消测试资格。但实际执行起来，如果不是特别明显则不会记录；</li><li><strong>如果个人未能在分配的时间内到达圆锥体 B 或 C，则会给予一次警告（黄牌）。两黄变一红则视为测试结束。</strong><ol><li><strong>在获得警告后，个人仍必须抵达锥体 B 或 C，否则取消测试资格。也就是必须是 B→C→B→C→B….，不可以出现 B→B 或者 C→C 的情况。</strong></li></ol></li></ol><h3 id="4-评分系统"><a href="#4-评分系统" class="headerlink" title="4.评分系统"></a>4.评分系统</h3><p>取参与者红牌罚下前完成的级别作为成绩。</p><h4 id="4-1-评分格式"><a href="#4-1-评分格式" class="headerlink" title="4.1.评分格式"></a>4.1.评分格式</h4><p>一般评分格式会采用：</p><p>YYIR1-13.1</p><ol><li>YYIR1 为参与者当前参与 yoyo 测试的类型；</li><li>13 为参与者失败前完成的速度等级；</li><li>1 为参与者失败前完成速度等级的往返次数；</li></ol><h4 id="4-2-评分参考"><a href="#4-2-评分参考" class="headerlink" title="4.2.评分参考"></a>4.2.评分参考</h4><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%952.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 通过 CMMotionManager 获取 iPhone 加速度传感器、陀螺仪等信息</title>
    <link href="/2023/09/13/Swift-%E9%80%9A%E8%BF%87-CMMotionManager-%E8%8E%B7%E5%8F%96-iPhone-%E5%8A%A0%E9%80%9F%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E9%99%80%E8%9E%BA%E4%BB%AA%E7%AD%89%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/09/13/Swift-%E9%80%9A%E8%BF%87-CMMotionManager-%E8%8E%B7%E5%8F%96-iPhone-%E5%8A%A0%E9%80%9F%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E9%99%80%E8%9E%BA%E4%BB%AA%E7%AD%89%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="获取-IMU-数据"><a href="#获取-IMU-数据" class="headerlink" title="获取 IMU 数据"></a>获取 IMU 数据</h3><p>方法具体代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">getData</span>() &#123;<br><br>    <span class="hljs-keyword">if</span> motionManager.isDeviceMotionAvailable &#123;<br>        <span class="hljs-comment">// 数据更新时间，最短0.01s</span><br>        motionManager.deviceMotionUpdateInterval <span class="hljs-operator">=</span> <span class="hljs-number">0.01</span><br>        <span class="hljs-comment">// timer效果</span><br>        motionManager.startDeviceMotionUpdates(to: <span class="hljs-type">OperationQueue</span>.main) &#123; data, error <span class="hljs-keyword">in</span><br><br>            gravityX <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.gravity.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            gravityY <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.gravity.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            gravityZ <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.gravity.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br><br>            userAccelerationX <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.userAcceleration.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            userAccelerationY <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.userAcceleration.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            userAccelerationZ <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.userAcceleration.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br><br>            rotationX <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.rotationRate.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            rotationY <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.rotationRate.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            rotationZ <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.rotationRate.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br><br>            roll <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.roll <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            pitch <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.pitch <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            yaw <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.yaw <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br><br>            w <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.w <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            wx <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            wy <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>            wz <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br><br>            <span class="hljs-comment">// 当前时间</span><br>            <span class="hljs-keyword">let</span> toc <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>().milliStamp<br>            <span class="hljs-comment">// 计时时间 = 当前时间 - 程序开始时间</span><br>            time <span class="hljs-operator">=</span> toc <span class="hljs-operator">-</span> tic<br>            number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">let</span> dot <span class="hljs-operator">=</span> <span class="hljs-type">Dot</span>(number: number, gravityX: gravityX, gravityY: gravityY, gravityZ: gravityZ, userAccelerationX: userAccelerationX, userAccelerationY: userAccelerationY, userAccelerationZ: userAccelerationZ, rotationX: rotationX, rotationY: rotationY, rotationZ: rotationZ, roll: roll, pitch: pitch, yaw: yaw, w: w, wx: wx, wy: wy, wz: wz, time: time)<br><br>            dots.append(dot)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dot 的数据结构</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dot</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> roll <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> pitch <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> yaw <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> w <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wx <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wy <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wz <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> time <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>()<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>时间戳（精确到毫秒）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Date</span> &#123;<br>    <span class="hljs-comment">// 获取当前 秒级 时间戳 - 10位</span><br>    <span class="hljs-keyword">var</span> timeStamp : <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970<br>        <span class="hljs-keyword">let</span> timeStamp <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(timeInterval)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(timeStamp)</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前 毫秒级 时间戳 - 13位</span><br>    <span class="hljs-keyword">var</span> milliStamp : <span class="hljs-type">CLongLong</span> &#123;<br>        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970<br>        <span class="hljs-keyword">let</span> millisecond <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>(round(timeInterval<span class="hljs-operator">*</span><span class="hljs-number">1000</span>))<br>        <span class="hljs-comment">// return &quot;\(millisecond)&quot;</span><br>        <span class="hljs-keyword">return</span> millisecond<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="导出-csv-文件"><a href="#导出-csv-文件" class="headerlink" title="导出 .csv 文件"></a>导出 .csv 文件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">exportCSV</span>() &#123;<br>    <span class="hljs-comment">// 导出文件名称</span><br>    <span class="hljs-keyword">let</span> fileName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SPACE TRACK.csv&quot;</span><br>    <span class="hljs-comment">// 导出路径</span><br>    <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> <span class="hljs-type">NSURL</span>(fileURLWithPath: <span class="hljs-type">NSTemporaryDirectory</span>()).appendingPathComponent(fileName)<br>    <span class="hljs-comment">// 表头，注意不要加空格</span><br>    <span class="hljs-keyword">var</span> csvHead <span class="hljs-operator">=</span> <span class="hljs-string">&quot;number,gravityX,gravityY,gravityZ,userAccelerationX,userAccelerationY,userAccelerationZ,rotationX,rotationY,rotationZ,roll,pitch,yaw,w,wx,wy,wz,time<span class="hljs-subst">\n</span>&quot;</span><br><br>    <span class="hljs-comment">// 将数据写入表头</span><br>    <span class="hljs-keyword">for</span> dot <span class="hljs-keyword">in</span> dots &#123;<br>        csvHead.append(<span class="hljs-string">&quot;<span class="hljs-subst">\(dot.number)</span>,<span class="hljs-subst">\(dot.gravityX)</span>,<span class="hljs-subst">\(dot.gravityY)</span>,<span class="hljs-subst">\(dot.gravityZ)</span>,<span class="hljs-subst">\(dot.userAccelerationX)</span>,<span class="hljs-subst">\(dot.userAccelerationY)</span>,<span class="hljs-subst">\(dot.userAccelerationZ)</span>,<span class="hljs-subst">\(dot.rotationX)</span>,<span class="hljs-subst">\(dot.rotationY)</span>,<span class="hljs-subst">\(dot.rotationZ)</span>,<span class="hljs-subst">\(dot.roll)</span>,<span class="hljs-subst">\(dot.pitch)</span>,<span class="hljs-subst">\(dot.yaw)</span>,<span class="hljs-subst">\(dot.w)</span>,<span class="hljs-subst">\(dot.wx)</span>,<span class="hljs-subst">\(dot.wy)</span>,<span class="hljs-subst">\(dot.wz)</span>,<span class="hljs-subst">\(dot.time)</span><span class="hljs-subst">\n</span>&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">try</span> csvHead.write(to: path<span class="hljs-operator">!</span>, atomically: <span class="hljs-literal">true</span>, encoding: .utf8)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;EXPORT&quot;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-built_in">print</span>(path <span class="hljs-operator">??</span> <span class="hljs-string">&quot;not found&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HeadCell</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span>&#123;<br>        <span class="hljs-type">HStack</span>(spacing: <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">Text</span>(title)<br>                .font(.system(size: <span class="hljs-number">14.0</span>, weight: .bold, design: .default))<br>            <span class="hljs-type">Spacer</span>()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BodyCell</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span><br>    <span class="hljs-comment">// MARK: @State var content: Double 就不会刷新....</span><br>    <span class="hljs-meta">@Binding</span> <span class="hljs-keyword">var</span> content: <span class="hljs-type">Double</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span>&#123;<br>        <span class="hljs-type">HStack</span>(spacing: <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">Text</span>(title)<br>                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))<br>            <span class="hljs-type">Spacer</span>()<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(content)</span>&quot;</span>)<br>                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimeCell</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span><br>    <span class="hljs-meta">@Binding</span> <span class="hljs-keyword">var</span> content: <span class="hljs-type">CLongLong</span><br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span>&#123;<br>        <br>        <span class="hljs-type">HStack</span>(spacing: <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">Text</span>(title)<br>                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))<br>            <span class="hljs-type">Spacer</span>()<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(content)</span>&quot;</span>)<br>                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的一点是，从 <code>content</code> 要实时刷新，所以需要 <code>@Binding</code> 声明。</p><h3 id="主界面代码"><a href="#主界面代码" class="headerlink" title="主界面代码"></a>主界面代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><span class="hljs-keyword">import</span> CoreMotion<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MainView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br><br>    <span class="hljs-keyword">let</span> motionManager <span class="hljs-operator">=</span> <span class="hljs-type">CMMotionManager</span>()<br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> gravityX: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> gravityY: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> gravityZ: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> userAccelerationX: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> userAccelerationY: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> userAccelerationZ: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> rotationX: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> rotationY: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> rotationZ: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> roll: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> pitch: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> yaw: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> w: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> wx: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> wy: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> wz: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> tic: <span class="hljs-type">CLongLong</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 记录运行时间  </span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> time: <span class="hljs-type">CLongLong</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> dots: [<span class="hljs-type">Dot</span>] <span class="hljs-operator">=</span> []<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> isStart <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">getData</span>() &#123;<br>        <span class="hljs-comment">// 这里不再重复展示</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">exportCSV</span>() &#123;<br>        <span class="hljs-comment">// 这里不再重复展示</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">var</span> body : <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <br>        <span class="hljs-type">NavigationView</span> &#123;<br>            <br>            <span class="hljs-type">List</span>&#123;<br>                <br>                <span class="hljs-type">TimeCell</span>(title: <span class="hljs-string">&quot;时间 ms&quot;</span>, content: <span class="hljs-variable">$time</span>)<br>                <br>                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;重力加速度&quot;</span>)) &#123;<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;X轴&quot;</span>, content: <span class="hljs-variable">$gravityX</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Y轴&quot;</span>, content: <span class="hljs-variable">$gravityY</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Z轴&quot;</span>, content: <span class="hljs-variable">$gravityZ</span>)<br>                &#125;<br>                <br>                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;用户加速度&quot;</span>)) &#123;<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;X轴&quot;</span>, content: <span class="hljs-variable">$userAccelerationX</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Y轴&quot;</span>, content: <span class="hljs-variable">$userAccelerationY</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Z轴&quot;</span>, content: <span class="hljs-variable">$userAccelerationZ</span>)<br>                &#125;<br>                <br>                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;角速度&quot;</span>))&#123;<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;X轴&quot;</span>, content: <span class="hljs-variable">$rotationX</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Y轴&quot;</span>, content: <span class="hljs-variable">$rotationY</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Z轴&quot;</span>, content: <span class="hljs-variable">$rotationZ</span>)<br>                &#125;<br>                <br>                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;欧拉角&quot;</span>))&#123;<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;俯仰&quot;</span>, content: <span class="hljs-variable">$pitch</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;摆头&quot;</span>, content: <span class="hljs-variable">$yaw</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;倾斜&quot;</span>, content: <span class="hljs-variable">$roll</span>)<br>                &#125;<br>                <br>                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;四元数&quot;</span>))&#123;<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;w&quot;</span>, content: <span class="hljs-variable">$w</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;wx&quot;</span>, content: <span class="hljs-variable">$wx</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;wy&quot;</span>, content: <span class="hljs-variable">$wy</span>)<br>                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;wz&quot;</span>, content: <span class="hljs-variable">$wz</span>)<br>                &#125;<br>                <br>            &#125;<br>        <br>            .navigationTitle(<span class="hljs-string">&quot;Accelerometer&quot;</span>)<br>            .toolbar &#123;<br>                <span class="hljs-comment">// 开始以及停止按钮</span><br>                <span class="hljs-type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;<br>                    <span class="hljs-type">Button</span> &#123;<br>                        withAnimation()&#123;<br>                            isStart.toggle()<br>                        &#125;<br>                        tic <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>().milliStamp<br>                        <span class="hljs-keyword">if</span> isStart &#123;<br>                            getData()<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">// 停止记录数据</span><br>                            motionManager.stopDeviceMotionUpdates()<br>                        &#125;<br>                    &#125; label: &#123;<br>                        <span class="hljs-type">Image</span>(systemName: isStart <span class="hljs-operator">?</span> <span class="hljs-string">&quot;stop.circle.fill&quot;</span> : <span class="hljs-string">&quot;restart.circle.fill&quot;</span>)<br>                            .font(.system(size: <span class="hljs-number">14.0</span>, weight: .medium, design: .default))<br>                            .foregroundColor(.red)<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 导出 .csv 文件按钮</span><br>                <span class="hljs-type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;<br>                    <span class="hljs-type">Button</span> &#123;<br>                        exportCSV()<br>                        showingAlert.toggle()<br>                    &#125; label: &#123;<br>                        <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;square.and.arrow.up.fill&quot;</span>)<br>                            .font(.system(size: <span class="hljs-number">14.0</span>, weight: .medium, design: .default))<br>                            .foregroundColor(.red)<br>                    &#125;<br>                    .alert(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;SUCCESS!&quot;</span>), isPresented: <span class="hljs-variable">$showingAlert</span>) &#123;<br>                        <span class="hljs-comment">// Button(&quot;Cancel&quot;, role: .destructive) &#123; &#125;</span><br>                        <span class="hljs-comment">// Button(&quot;Cancel&quot;, role: .cancel) &#123; &#125;</span><br>                        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Confirm&quot;</span>) &#123; &#125;<br>                    &#125; message: &#123;<br>                        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;CSV路径 file:///private/var/mobile/Containers/Data/Application/&quot;</span>)<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dot</span> &#123;<br>    <span class="hljs-comment">// 这里不再重复展示</span><br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Date</span> &#123;<br>    <span class="hljs-comment">// 这里不再重复展示</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
      <category>数据采集</category>
      
      <category>iPhone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
      <tag>Sensor</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 导出 .csv 文件</title>
    <link href="/2023/09/13/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/09/13/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h3><p>数据格式如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dot</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> roll <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> pitch <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> yaw <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> w <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wx <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wy <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wz <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> time <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>()<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>导出 .csv 的方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">exportCSV</span>() &#123;<br>    <span class="hljs-comment">// 导出文件名称</span><br>    <span class="hljs-keyword">let</span> fileName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SPACE TRACK.csv&quot;</span><br>    <span class="hljs-comment">// 导出路径</span><br>    <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> <span class="hljs-type">NSURL</span>(fileURLWithPath: <span class="hljs-type">NSTemporaryDirectory</span>()).appendingPathComponent(fileName)<br>    <span class="hljs-comment">// 表头，注意不要加空格</span><br>    <span class="hljs-keyword">var</span> csvHead <span class="hljs-operator">=</span> <span class="hljs-string">&quot;number,gravityX,gravityY,gravityZ,userAccelerationX,userAccelerationY,userAccelerationZ,rotationX,rotationY,rotationZ,roll,pitch,yaw,w,wx,wy,wz,time<span class="hljs-subst">\n</span>&quot;</span><br><br>    <span class="hljs-comment">// 将数据写入表头</span><br>    <span class="hljs-keyword">for</span> dot <span class="hljs-keyword">in</span> dots &#123;<br>        csvHead.append(<span class="hljs-string">&quot;<span class="hljs-subst">\(dot.number)</span>,<span class="hljs-subst">\(dot.gravityX)</span>,<span class="hljs-subst">\(dot.gravityY)</span>,<span class="hljs-subst">\(dot.gravityZ)</span>,<span class="hljs-subst">\(dot.userAccelerationX)</span>,<span class="hljs-subst">\(dot.userAccelerationY)</span>,<span class="hljs-subst">\(dot.userAccelerationZ)</span>,<span class="hljs-subst">\(dot.rotationX)</span>,<span class="hljs-subst">\(dot.rotationY)</span>,<span class="hljs-subst">\(dot.rotationZ)</span>,<span class="hljs-subst">\(dot.roll)</span>,<span class="hljs-subst">\(dot.pitch)</span>,<span class="hljs-subst">\(dot.yaw)</span>,<span class="hljs-subst">\(dot.w)</span>,<span class="hljs-subst">\(dot.wx)</span>,<span class="hljs-subst">\(dot.wy)</span>,<span class="hljs-subst">\(dot.wz)</span>,<span class="hljs-subst">\(dot.time)</span><span class="hljs-subst">\n</span>&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">try</span> csvHead.write(to: path<span class="hljs-operator">!</span>, atomically: <span class="hljs-literal">true</span>, encoding: .utf8)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;EXPORT&quot;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-built_in">print</span>(path <span class="hljs-operator">??</span> <span class="hljs-string">&quot;not found&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将文件的路径打印出来是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">file:///private/var/mobile/Containers/Data/Application/</span><br></code></pre></td></tr></table></figure><h3 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h3><p>可以采用  <code>Share Extension</code> 的方式获取文件，但实现起来有些复杂。</p><p>最简单的方法是：</p><p>在 Xcode 里点击「Window - Device and Simulator」找到运行 App 的设备以及 App，选择「Download Container」</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B61.png"></p><p>之后可以在工程文件架中找到下载下来的文件，点击「显示包内容」</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B62.png"></p><p>在「AppData - tmp」路径下即可找到导出的 .csv 文件</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B63.png"></p>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
      <category>数据采集</category>
      
      <category>iPhone</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iCloud 同步文件卡住的解决办法</title>
    <link href="/2023/09/13/iCloud-%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%8D%A1%E4%BD%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/09/13/iCloud-%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%8D%A1%E4%BD%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://sspai.com/post/72882">一日一技 | Mac 上 iCloud 云盘同步卡住了？可以试试这样做</a></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>导致 iCloud 云盘同步卡住的原因一般有</p><ul><li>网络问题</li><li><strong>一次性向 iCloud 云盘塞入了过多需要同步的文件</strong></li><li><strong>文件夹嵌套层级太多</strong></li><li>Apple ID 转区</li></ul><p>我遇到两次同步卡住都是因为2、3点。</p><p>如果你<strong>一次性向 iCloud 云盘塞入了过多需要同步的文件</strong>，iCloud 云盘进程在同步前就需要进行大量的计算和检索，花费时间会变长、占用资源变多，如果这时其中有一个文件又问题，很有可能会卡住整个 iCloud 云盘同步的进度。如果桌面或者文稿文件夹中有大量文件的 Mac ，突然打开了对应 iCloud 云盘的「桌面与文稿」同步功能，就非常有可能会出现这样前面提到的情况。</p><p>此外，<strong>文件夹嵌套层级太多</strong>也可能是另一个原因，和<strong>一次性向 iCloud 云盘塞入了过多需要同步的文件</strong>的道理相似，过多的文件夹嵌套层级也可能会增加 iCloud 云盘在同步时的计算量与出错风险。而在最新的 <a href="https://sspai.com/link?target=https://www.v2ex.com/t/841605">信息</a> 中显示，iCloud 云盘似乎已经拒绝同步带有太多嵌套层级的文件夹。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在终端「分别」输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">killall bird<br>killall cloudd<br></code></pre></td></tr></table></figure><p>通过 <code>killall bird</code> 和 <code>killall cloudd</code> 两个命令，将 iCloud 云盘最紧密的两个进程 bird 和 cloudd 进程手动杀死。这两个进程被终止后，macOS 会自动重新将这两个进程拉起，这时我们就可以重新观察 iCloud 云盘的同步情况。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 串口查询</title>
    <link href="/2023/09/12/Linux-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/09/12/Linux-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>输入指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /dev/tty*<br></code></pre></td></tr></table></figure><p>即可获得串口列表。</p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关节活动度 ROM</title>
    <link href="/2023/09/11/%E5%85%B3%E8%8A%82%E6%B4%BB%E5%8A%A8%E5%BA%A6-ROM/"/>
    <url>/2023/09/11/%E5%85%B3%E8%8A%82%E6%B4%BB%E5%8A%A8%E5%BA%A6-ROM/</url>
    
    <content type="html"><![CDATA[<p>关节活动度（Range of motion, ROM）又称关节活动范围。可以分为被动关节活动度（PROM），助力关节活动度（AAROM）和主动关节活动度（AROM）。</p><ul><li><strong>Passive range of motion</strong> (or <strong>PROM</strong>) - Therapist or equipment moves the joint through the range of motion with no effort from the patient.</li><li><strong>Active assistive range of motion</strong> (or <strong>AAROM</strong>) - Patient uses the muscles surrounding the joint to perform the exercise but requires some help from the therapist or equipment (such as a strap).</li><li><strong>Active range of motion</strong> (or <strong>AROM</strong>) - Patient performs the exercise to move the joint without any assistance to the muscles surrounding the joint.</li></ul><p>关节活动度训练（ROM 训练）：恢复或增大关节活动度的一种康复性训练。因关节自身损伤，关节周围组织损伤，神经麻痹以及老年退行性病变等，均可引起关节活动受限。训练可分为矫正性措施和预防性措施。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派蓝牙连接 HC05 提示 Failed to connect: org.bluez.Error.NotAvailable 解决办法</title>
    <link href="/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5-HC05-%E6%8F%90%E7%A4%BA-Failed-to-connect-org-bluez-Error-NotAvailable-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5-HC05-%E6%8F%90%E7%A4%BA-Failed-to-connect-org-bluez-Error-NotAvailable-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>树莓派在连接 HC05 蓝牙模块时遇见了一些问题。</p><p>虽然成功配对：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># pair 98:D3:02:96:9A:BB</span><br><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">pair</span> <span class="hljs-string">with</span> <span class="hljs-number">98</span><span class="hljs-string">:D3:02:96:9A:BB</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">yes</span><br><span class="hljs-string">Request</span> <span class="hljs-string">PIN</span> <span class="hljs-string">code</span><br>[<span class="hljs-string">agent</span>] <span class="hljs-attr">Enter PIN code:</span> [<span class="hljs-string">DEL</span>] <span class="hljs-string">Device</span> <span class="hljs-string">4D:9E:4F:54:59:22</span> <span class="hljs-string">4D-9E-4F-54-59-22</span><br>[<span class="hljs-string">agent</span>] <span class="hljs-attr">Enter PIN code:</span> [<span class="hljs-string">DEL</span>] <span class="hljs-string">Device</span> <span class="hljs-number">10</span><span class="hljs-string">:05:6C:76:F6:F0</span> <span class="hljs-string">MC76F6F0</span><br>[<span class="hljs-string">agent</span>] <span class="hljs-attr">Enter PIN code:</span> <span class="hljs-number">1234</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB UUIDs:</span> <span class="hljs-number">00001101</span><span class="hljs-number">-0000</span><span class="hljs-number">-1000</span><span class="hljs-number">-8000</span><span class="hljs-string">-00805f9b34fb</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">yes</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Paired:</span> <span class="hljs-literal">yes</span><br><span class="hljs-string">Pairing</span> <span class="hljs-string">successful</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">no</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>但可以看到自动断开了。</p><p>再次连接时，提示 <code>Failed to connect: org.bluez.Error.NotAvailable</code>，如下面所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># connect 98:D3:02:96:9A:BB</span><br><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">connect</span> <span class="hljs-string">to</span> <span class="hljs-number">98</span><span class="hljs-string">:D3:02:96:9A:BB</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">yes</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">yes</span><br><span class="hljs-attr">Failed to connect:</span> <span class="hljs-string">org.bluez.Error.NotAvailable</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">no</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>在 GUI 上进行连接，则会提示 <code>Connection failed - No usable services on this device</code>。</p><p>此处问题并非个例、在其它帖子里看到过相同问题。</p><p>真正的原因是默认情况下树莓派蓝牙始终是作为从模式，所以主动连接的话，无论什么设备都会秒掉线（存疑）。</p><p>下面是解决办法：</p><p>不再通过 bluetoothctl 工具进行连接，而是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rfcomm connect hci0 98:D3:02:96:9A:BB<br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://forums.raspberrypi.com/viewtopic.php?t=162911&sid=86d298a19589e7836b4eb2408a920bde">Failed to connect: org.bluez.Error.NotAvailable</a>；</li><li><a href="https://forums.raspberrypi.com/viewtopic.php?t=163712&sid=3d7b1a34f4fcf6cfcafecdb3d345bf15">Raspberry Pi 3 Unable to Connect to Arduino with HC-06</a></li><li><a href="https://raspberrypi.stackexchange.com/questions/82173/failed-to-connect-org-bluez-error-notavailable-error">Failed to connect: org.bluez.Error.NotAvailable - Error</a>；</li><li><a href="https://blog.csdn.net/jinanhezhuang/article/details/109250208">树莓派和HC-05蓝牙连接以及通过串口写入（Write）和读入(Read)数据</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>DIY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>串口</tag>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派配置蓝牙（终端）</title>
    <link href="/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%93%9D%E7%89%99%EF%BC%88%E7%BB%88%E7%AB%AF%EF%BC%89/"/>
    <url>/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%93%9D%E7%89%99%EF%BC%88%E7%BB%88%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol><li><p>启动蓝牙命令行工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bluetoothctl<br></code></pre></td></tr></table></figure></li><li><p>开启代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">agent on<br></code></pre></td></tr></table></figure></li><li><p>扫描设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scan on<br></code></pre></td></tr></table></figure><p>通过扫描设备，可以检索到对应设备的 MAC 地址，之后可以用该设备的 MAC 地址来与树莓派进行配对，扫描结果如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># scan on</span><br><span class="hljs-string">Discovery</span> <span class="hljs-string">started</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Controller E4:5F:01:26:55:90 Discovering:</span> <span class="hljs-literal">yes</span><br>[<span class="hljs-string">NEW</span>] <span class="hljs-string">Device</span> <span class="hljs-string">4A:E4:8E:E3:BC:54</span> <span class="hljs-string">4A-E4-8E-E3-BC-54</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 9C:19:C2:4D:88:DC Name:</span> <span class="hljs-string">Redmi</span> <span class="hljs-string">Buds</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>树莓派与蓝牙设备进行配对</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">pair</span> <span class="hljs-string">MAC</span><br></code></pre></td></tr></table></figure><p>输入 MAC 地址后即可配对。期间可能要输入 PIN 码。配对成功提示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># pair 9C:19:C2:4D:88:DC</span><br><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">pair</span> <span class="hljs-string">with</span> <span class="hljs-string">9C:19:C2:4D:88:DC</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 9C:19:C2:4D:88:DC Connected:</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure></li><li><p>连接设备（第一次配对会自动连接，否则需要执行以下命令连接）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">connect</span> <span class="hljs-string">MAC</span><br></code></pre></td></tr></table></figure><p>连接成功（如需退出可输入 <code>quit</code> 退出蓝牙）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># connect 9C:19:C2:4D:88:DC</span><br><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">connect</span> <span class="hljs-string">to</span> <span class="hljs-string">9C:19:C2:4D:88:DC</span><br>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 9C:19:C2:4D:88:DC Connected:</span> <span class="hljs-literal">yes</span><br><span class="hljs-string">Connection</span> <span class="hljs-string">successful</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>DIY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>串口</tag>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 终端历史命令查询</title>
    <link href="/2023/09/11/macOS-%E7%BB%88%E7%AB%AF%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/09/11/macOS-%E7%BB%88%E7%AB%AF%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>在终端输出 <code>history</code> 可以查询到最近输入的部分指令。</p><p>在终端输出 <code>history 0</code> 可以查询最近 1000 条输入的指令。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 查看蓝牙设备的 MAC 地址</title>
    <link href="/2023/09/11/macOS-%E6%9F%A5%E7%9C%8B%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84-MAC-%E5%9C%B0%E5%9D%80/"/>
    <url>/2023/09/11/macOS-%E6%9F%A5%E7%9C%8B%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84-MAC-%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<p>安装所需软件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install bluetoothconnector<br></code></pre></td></tr></table></figure><p>目标设备之前必须与 Mac 成功匹配过。</p><p>在终端使用下面的命令得到设备的 MAC 地址:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BluetoothConnector<br></code></pre></td></tr></table></figure><p>会得到类似这样的输出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">70</span><span class="hljs-string">-ae-d5-c8-48-84</span> <span class="hljs-bullet">-</span> <span class="hljs-string">ᖰ´༥`ᖳ</span><br><span class="hljs-number">80</span><span class="hljs-number">-82</span><span class="hljs-number">-23</span><span class="hljs-string">-cc-20-2e</span> <span class="hljs-bullet">-</span> <span class="hljs-string">AirPods</span><br><span class="hljs-number">98</span><span class="hljs-string">-d3-02-96-9a-bb</span> <span class="hljs-bullet">-</span> <span class="hljs-string">H-C-2010-06-01</span><br><span class="hljs-string">a0-78-17-e3-dd-38</span> <span class="hljs-bullet">-</span> <span class="hljs-string">TrackPaaaaaaad</span><br><span class="hljs-string">ac-90-85-7f-18-5b</span> <span class="hljs-bullet">-</span> <span class="hljs-string">AirPods</span> <span class="hljs-string">Plus++</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>DIY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 打开文件在 scanning files to index 卡死，或者关闭文件时等待时间过长</title>
    <link href="/2023/09/11/PyCharm-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%9C%A8-scanning-files-to-index-%E5%8D%A1%E6%AD%BB%EF%BC%8C%E6%88%96%E8%80%85%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6%E6%97%B6%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/"/>
    <url>/2023/09/11/PyCharm-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%9C%A8-scanning-files-to-index-%E5%8D%A1%E6%AD%BB%EF%BC%8C%E6%88%96%E8%80%85%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6%E6%97%B6%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="缓存原因"><a href="#缓存原因" class="headerlink" title="缓存原因"></a>缓存原因</h3><p>通过 File - Invalidate caches… 的方式清理缓存。</p><h3 id="网盘原因"><a href="#网盘原因" class="headerlink" title="网盘原因"></a>网盘原因</h3><p>因为我的工程文件是放在 Dropbox 里的。有时候会因为 Dropbox 在同步文件导致打开工程文件后，在建立和更新索引时卡住。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」STRETCH-SHORTENING CYCLE (SSC)</title>
    <link href="/2023/09/11/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSTRETCH-SHORTENING-CYCLE-SSC/"/>
    <url>/2023/09/11/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DSTRETCH-SHORTENING-CYCLE-SSC/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.scienceforsport.com/stretch-shortening-cycle/">STRETCH-SHORTENING CYCLE (SSC)</a></p><p>The stretch-shortening cycle is a spring-like mechanism that enhances athletic performance in explosive- and endurance-based sports.</p><p><strong>Contents of Article</strong></p><ol><li>Summary</li><li>What is the Stretch-Shortening Cycle (SSC)?</li><li>What are the mechanisms of the Stretch-Shortening Cycle?</li><li>Electromechanical Delay (EMD)</li><li>Conclusion</li><li>References</li><li>About the Author</li><li>Comments</li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The stretch-shortening cycle (SSC) refers to the ‘pre-stretch’ or ‘countermovement’ action that is commonly observed during typical human movements such as jumping. This pre-stretch allows the athlete to produce more force and move quicker. Though there is controversy surrounding the mechanics responsible for the performance improvements observed from using the SSC,  it is likely to be a combination of the active state and the storage of elastic energy within the tendon. Due to the negative effects of the electromechanical delay, it may be suggested that training methods which improve muscular pre-activity, such as plyometric and ballistic training, may be beneficial for improving athletic performance.</p><h2 id="What-is-the-Stretch-Shortening-Cycle-SSC"><a href="#What-is-the-Stretch-Shortening-Cycle-SSC" class="headerlink" title="What is the Stretch-Shortening Cycle (SSC)?"></a>What is the Stretch-Shortening Cycle (SSC)?</h2><p>Athletes have been shown to jump 2-4 cm higher during the <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">countermovement jump</a>(CMJ) than they can during the <a href="https://www.scienceforsport.com/squat-jump/">squat jump</a> (SJ) (1). This is simply because the <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a>incorporates a pre-stretch dropping action when compared to an <a href="https://www.scienceforsport.com/squat-jump/">SJ</a>, which initiates the movement from a static position without the use of a pre-stretch (2). This pre-stretch, or ‘countermovement’ action is known as the stretch-shortening cycle (SSC) and is comprised of three phases (eccentric, amortization, and concentric) (Figure 1) (3). Images A-B display the eccentric phase, image C demonstrates the amortisation phase, and images D-E represent the concentric phase of the SSC.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/01/Figure-1-Phases-of-the-Stretch-Shortening-Cycle-1024x189.jpg"></p><p>The SSC is described as a rapid cyclical muscle action whereby the muscle undergoes an eccentric contraction, followed by a transitional period prior to the concentric contraction (4). This muscle action is also sometimes referred to as the reverse action of muscles (5). The action of the SSC is perhaps best described as a spring-like mechanism, whereby compressing the coil causes it to rebound and therefore jump off a surface or in a different direction (Figure 2). Increasing the speed at which the coil is compressed or how hard it is pressed down (amount of force applied) will result in the spring jumping higher or farther. This is known as the ‘rate of loading’, and increasing this will often mean the spring will jump higher or farther. Therefore, a jump that incorporates a ‘run-up’ will often allow an athlete to jump higher or farther than a jump from a static position because of an increase in the rate of loading (6, 7, 8).</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/01/Figure-2-Spring-like-mechanism-of-the-Stretch-Shortening-Cycle-SSC.png"></p><p>The SSC does not only occur during single-bout <a href="https://www.scienceforsport.com/multidirectional-plyometrics-how-do-these-impact-jump-change-of-direction-and-dynamic-postural-control/">jumping or rebounding movements but also during any form of human movement when a limb changes direction</a>. For example, during walking, jumping, running, twisting or even lowering and then raising your arm. As the limbs are continuously changing direction, there is constant use of the SSC in order to change the direction the limb is moving. As some movements are much faster than others (e.g. sprinting vs. walking), there are great differences in the speed of the SSC. Consequently, the SSC has been separated into two categories based on the duration of the SSC:</p><ol><li>Fast-SSC: &lt;250 milliseconds (ms)</li><li>Slow-SSC: &gt;250 ms</li></ol><p>Table 1 provides some examples of common exercises and their potential SSC classification. As displayed in Table 1, a long jump is typically classified as a fast-SSC movement as it has a ground contact time of 140-170 ms (9). Whereas race walking, which has a ground contact time of 270-300 ms is commonly classified as a slow-SSC movement (10).</p><p><strong>Table 2</strong>. Ground contact times&#x2F;coupling time of common exercises.</p><table><thead><tr><th><strong>Exercise</strong></th><th><strong>Ground contact time</strong></th><th><strong>SSC Classification</strong></th></tr></thead><tbody><tr><td>Race walking (10)</td><td>270-300</td><td>Slow</td></tr><tr><td>Sprinting (11)</td><td>80-90</td><td>Fast</td></tr><tr><td>Countermovement jump (CMJ) (12)</td><td>500</td><td>Slow</td></tr><tr><td>Depth Jump (20-60cm) (2,3)</td><td>130-300</td><td>Fast &#x2F; Slow</td></tr><tr><td>Long Jump (13)</td><td>140-170</td><td>Fast</td></tr><tr><td>Multiple Hurdle Jumps (5)</td><td>150</td><td>Fast</td></tr></tbody></table><p>As measuring the duration of the SSC at each contributing joint (e.g. ankle, knee, hip) during a jumping exercise is problematic, researchers have often questioned the ability to measure the SSC indirectly by analysing the ground contact times. As a result, researchers have looked for relationships between ground contact times and coupling time*. Strong relationships have been found between coupling time and exercises with ground contact times ranging from 270-2500 ms (16, 17).</p><p>However, no relationships were observed in exercises with ground contact times of 400-800 ms (17). This, therefore, questions the reliability of classifying exercises with ground contact times of &lt; 850 ms into particular SSC categories based on their ground contact duration. For example, simply classifying race walking as a slow-SSC movement because it has a ground contact time between 270-300 ms. Though this is often common practice, understanding the issue with doing so is important.</p><blockquote><p><em>Coupling time is the amortisation&#x2F;isometric phase of the SSC which connects the eccentric to the concentric phase – hence the term ‘coupling’, as it couples the two together. Or in other words, coupling time is defined as the transition between the eccentric and concentric phases of the SSC (16).</em></p></blockquote><h2 id="What-are-the-mechanisms-of-the-Stretch-Shortening-Cycle"><a href="#What-are-the-mechanisms-of-the-Stretch-Shortening-Cycle" class="headerlink" title="What are the mechanisms of the Stretch-Shortening Cycle?"></a>What are the mechanisms of the Stretch-Shortening Cycle?</h2><p>There are numerous neurophysiological mechanisms thought to contribute to the SSC, some of which include: storage of elastic energy (18, 19, 20, 21), involuntary nervous processes (22, 23), active state (1, 24), length-tension characteristics (25, 26), pre-activity tension (27, 28) and enhanced <a href="https://www.scienceforsport.com/how-tennis-ball-drills-can-help-develop-hand-eye-coordination/">motor coordination</a> (1, 24). Despite this large list, it is commonly agreed there are three primary mechanics responsible for the performance-enhancing effects of the SSC (2).</p><p>These three mechanisms are:</p><ol><li>Storage of Elastic Energy</li><li>Neurophysiological Model</li><li>Active State</li></ol><p><strong>Storage of Elastic Energy</strong></p><p>The concept of elastic energy is similar to that of a stretched rubber band. When the band is stretched, there is a build-up of stored energy, which when released, causes the band to rapidly contract back to its original shape. The amount of stored elastic energy (sometimes referred to as ‘strain’ or ‘potential’ energy) is potentially equal to the applied force and induced deformation (5). In other words, the amount of force used to stretch the band should be equivalent to the amount of force produced by the band in order to return to its pre-stretched state.</p><p>In humans, this stretch and storage of elastic energy is instead placed upon the muscles and tendons during movement. However, due to the elastic properties of the tendon, it is commonly agreed that the tendon is the primary site for the storage of elastic energy (29, 30). Unlike muscles, the tendons cannot be voluntarily contracted, and as a result, they can only remain in their state of tension.</p><p>This means the muscle must contract and stiffen prior to the beginning of the SSC during ground contact – known as ‘muscular pre-activity’. The muscle must then remain contracted&#x2F; stiff during the first two processes of the SSC (eccentric and amortisation phases) in order to transmit the isometric forces into the tendon. This causes the deformation&#x2F; lengthening of the tendon and the development of the storage of elastic energy.</p><p>During the concentric phase of the SSC (often referred to as the ‘positive acceleration’ phase), the muscle is then able to concentrically contract and provide additional propulsive force (2). Failing to stiffen during the eccentric and amortisation phases, means the performance-enhancing effect of the SSC will be lost and the joint would likely collapse. This demonstrates the importance of muscle stiffness during the SSC and its ability to improve performance. It also suggests that athletes with higher levels of <a href="https://www.scienceforsport.com/the-importance-of-muscular-strength-in-athletic-performance/">muscular strength</a> can absorb more force (i.e. higher rate of loading), and therefore have a better ability to use the SSC.</p><p>An abundance of research has demonstrated that stronger athletes have a better ability to store elastic energy than less-strong individuals (31, 32, 33). Elite athletes from both power- and endurance-based sports have also been demonstrated to possess a superior ability to store elastic energy (31, 32). Furthermore, efficient utilisation of the SSC during sprinting has been shown to recover approximately 60% of total mechanical energy, suggesting the other 40% is recovered by metabolic processes (34, 35). In aerobic long-distance running, higher SSC abilities have also been shown to enhance running economy – suggesting that athletes with a better SSC capacity can conserve more energy whilst running (33, 36, 37). This indicates the importance of the SSC for both energy release and energy conservation. However, this storage of the elastic energy within the tendon cannot last forever and has been shown to have a half-life of 850 milliseconds (38).</p><p><strong>Neurophysiological Model</strong></p><p>The muscles and tendons contain sensory receptors known as ‘proprioceptors’, these send information to the brain about changes in length, tension and joint angles (39). The proprioceptors within the muscle are known as ‘muscle spindles’, whilst those in the tendon are called ‘Golgi tendon organs’.</p><p>When a muscle is forcefully lengthened, the muscle spindles engage a stretch-reflex response to <a href="https://www.scienceforsport.com/what-adaptations-occur-to-youth-athletes-using-injury-prevention-programs/">prevent over-lengthening and limit the possibility of injury</a>. The engagement of these muscle spindles is thought to cause increased recruitment of motor units and&#x2F; or an increased rate coding effect (40, 41). An excitation of either or both of these neural responses would lead to a concurrent increase in concentric force output and may, therefore, explain the performance-enhancing effects of the SSC.</p><p>The increase in concentric force output would therefore then lead to an enhanced <a href="https://www.scienceforsport.com/max-power-the-keys-to-getting-the-most-out-of-power-training/">power</a> output during sporting movements (e.g. jump), and thus may improve performance. However, many studies have reported no increase in muscle activation after a pre-stretch activity (e.g. <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a>) when compared to non-pre-stretch activity (e.g. <a href="https://www.scienceforsport.com/squat-jump/">SJ</a>) (26, 42, 43). This suggests that muscle spindle reflex activity does not have any impact on the increased force by the SSC (1).</p><p>Furthermore, when a muscle is forcefully lengthened, the Golgi tendon organs (GTO) engage an opposite stretch-reflex response to the muscle spindles. Their role is to inhibit (i.e. prevent) the excitation of the muscle spindles during forceful over-lengthening to prevent the possibility of injury (5). Though this may seem like a bizarre trade-off between the muscle spindles and the GTO, the muscle spindles activate when the muscle-tendon unit is forcefully lengthened, whilst the GTO activate when the forceful lengthening becomes too large (39).</p><p>Due to the inhibitory stretch-reflex response of the GTO, it is thought this may counteract the contraction action of the muscle spindles. If so, this would mean that the GTO inhibits the high-muscular stiffness needed during the SSC and therefore reduces the concentric force output and subsequent performance (2). In fact, research has shown that muscle activation levels – and therefore muscle stiffness – have been reduced during the early phases of the SSC in individuals who are unaccustomed to intense SSC movements (28).</p><p>Interestingly, however, 4-months of <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometric training</a> has been shown to reduce this GTO inhibitory effect (disinhibition) and increase muscular pre-activity and muscle-tendon stiffness (27). As a result, it appears that effective training methods (e.g. <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometrics</a>) can reduce or even eliminate the potential negative effects observed from the GTO inhibitory effect.</p><p><strong>Active State</strong></p><p>The active state is the period of time in which force can be developed during the eccentric and amortisation phases of the SSC before any concentric contraction occurs. For example, during the ‘countermovement’ or ‘dropping’ action of the <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a>, the active state is developed during the eccentric and amortisation phases. The unpinning belief is that exercises that possess longer eccentric and amortisation phases of the SSC will allow more time for the formation of cross-bridges, therefore enhancing joint moments, and thus improving concentric force output. Increasing the amount of force, and the time available for force to be developed typically leads to a concurrent increase in the impulse (Impulse &#x3D; Force x Time) (24, 44). In other words, increasing the force application will lead to improvements in power output and therefore athletic performance.</p><p>There is widespread agreement to suggest the active state is the largest contributor to the performance-enhancing effects of the SSC, as it allows for a greater build-up of force prior to concentric shortening (1, 24, 44, 2).</p><h2 id="What-is-the-Electromechanical-Delay-EMD"><a href="#What-is-the-Electromechanical-Delay-EMD" class="headerlink" title="What is the Electromechanical Delay (EMD)?"></a>What is the Electromechanical Delay (EMD)?</h2><p>The electromechanical delay (EMD) refers to a neural and physiological delay in the production of mechanical force. This simply implies the muscles cannot generate and transmit force to the skeletal system instantaneously, instead, there is a slight delay. A delay in the production of mechanical force can, therefore, lead to a reduction in performance (24).</p><p>Currently, there are numerous components that have been suggested to contribute to this delay:</p><ol><li>Finite rate of increase in muscle stimulation by the central nervous system.</li><li>Propagation of the action potential on the muscle membrane.</li><li>Time constraints of calcium release and cross-bridge formation.</li><li>Interaction between the contractile filaments and the series of elastic components.</li><li>Toe region of the tendon.</li></ol><p>As a complete analysis of all these neurophysiological factors is beyond the scope of this article and readily available in exercise physiology textbooks, only the toe region will be explained.</p><p>The toe region of the SSC, otherwise simply explained as ‘slack within the tendon’ is present at the very beginning of the SSC. To simplify this concept, imagine a coiled-up piece of string that is being pulled from both ends in order to straighten it out and create tension. Well this ‘slack’, before the string is straight, is referred to as the ‘toe-region’. It is recognised that this slack within the tendon delays the time in which muscle-tendon stiffness and concentric force can be generated – simply the time taken to straighten the string and create tension (45) (Figure 3). Therefore, the toe region reduces the time available to generate force during the SSC and thus reduces concentric force output.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/02/Figure-3-Tendon-Force-Deformation-Curve-Toe-Region-Science-for-Sport.png"></p><p>Due to the negative effects of the EMD on mechanical force, it has been proposed that optimising muscular pre-activity may reduce or even counteract the effects of EMD by exciting the muscle and creating muscle-tendon stiffness prior to the start of the SSC (2). As a result, training methods which improve pre-activity, such as <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometric</a> and <a href="https://www.scienceforsport.com/ballistic-training/">ballistic training</a>, may be beneficial for the optimization of the SSC (27).</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The SSC, otherwise known as the reverse action of muscles, is a spring-like mechanism shown to enhance <a href="https://www.scienceforsport.com/omega-3s-why-they-are-the-real-alphas-of-fat-for-athletic-performance/">athletic performance</a> both in explosive- and endurance-based sports. Well-trained athletes appear to possess better SSC capacities than less- or non-trained individuals and thus highlight the necessity to optimise this property to enhance athleticism. Despite the long list of mechanisms proposed to influence the effects of the SSC, the active state is commonly believed to be the primary contributor. The time to develop mechanical force is negatively affected by the electromechanical delay, and thus attempts to maximise muscular pre-activity via particular training methods (e.g. <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometrics</a>) should be profound.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li>Bobbert MF and Casius LJ. Is the countermovement on jump height due to active state development? Med Sci Sport Exerc 37: 440–446, 2005. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15741843">PubMed]</a></li><li>Turner, A.N. &amp; Jeffreys, I. (2010). The stretch-shortening cycle: proposed mechanisms and methods for enhancement. <em>Journal of Strength and Conditioning Research, 17,</em> 60-67. [<a href="https://www.researchgate.net/publication/232163543_The_Stretch-Shortening_Cycle_Proposed_Mechanisms_and_Methods_for_Enhancement">Link]</a></li><li>Komi PV (1984) Physiological and biomechanical correlates of muscle function: effects of muscle structure and stretch-shortening cycle on force and speed. Exerc Sport Sci Rev 12:81-121 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/6376140">PubMed]</a></li><li>Lloyd, R.S., Oliver, J.L., Hughes, M.G., and Williams, C.A. (2012). The effects of 4-weeks of plyometric training on <a href="https://www.scienceforsport.com/reactive-strength-index/">reactive strength index</a> and leg stiffness in male youths. <em>Journal of Strength and Conditioning Research</em>, 26(10), pp.2812–2819. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22130392">PubMed]</a></li><li>Zatsiorsky VM and Kraemer WJ. Science and Practice of Strength Training. Champaign, IL: Human Kinetics, 2006. pp. 33–39. [<a href="http://www.humankinetics.com/products/all-products/science-and-practice-of-strength-training-2nd-edition">Link]</a></li><li>Aura O and Viitasalo JT. Biomechanical characteristics of jumping. Int J Sports Biomech 5: 89–97, 1989. [<a href="https://journals.humankinetics.com/view/journals/jab/5/1/article-p89.xml">Link]</a></li><li>McBride JM,McCaulleyGO, and Cormie P. Influence of preactivity and eccentric muscle activity on concentric performance during vertical jumping. J Strength Cond Res 23: 750–757, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18438244">PubMed]</a></li><li>McCaulley GO, Cormie P, Cavill MJ, Nuzzo JL, Urbiztondo ZG, and McBride JM. Mechanical efficiency during repetitive vertical jumping. Eur J Appl Physiol 101: 115–123, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17530275">PubMed]</a></li><li>Stefanyshyn, D. &amp; Nigg, B. (1998) Contribution of the lower extremity joints to mechanical energy in running vertical jumps and running long jumps. Journal of Sport Sciences, 16, 177-186. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/9531006">PubMed]</a></li><li>Padulo, J, Annino, G, D’Ottavio, S, Vernillo, G, Smith, L, Migliaccio, GM, and Tihanyi, J. Footstep analysis at different slopes and speeds in elite race walking. J Strength Cond Res 27(1): 125–129, 2013 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22450256">PubMed]</a></li><li>Taylor, M. J. D., &amp; Beneke, R. (2012). Spring Mass Characteristics of the Fastest Men on Earth.<em>International journal of sports medicine</em>, <em>33</em>(8), 667.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22510798">PubMed</a>]</li><li>Laffaye, G., &amp; Wagner, P. (2013). Eccentric <a href="https://www.scienceforsport.com/rate-of-force-development-rfd-2/">rate of force development</a>determines jumping performance. <em>Computer Methods in Biomechanics and Biomedical Engineering</em>, 16(1), pp.82–83. [<a href="http://www.tandfonline.com/doi/abs/10.1080/10255842.2013.815839?journalCode=gcmb20">Link]</a></li><li>Ball, NB, Stock, CG, and Scurr, JC. Bilateral contact ground reaction forces and contact times during plyometric drop jumping. J Strength Cond Res 24(10): 2762–2769, 2010. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/20613651">PubMed]</a></li><li>Walsh, M, Arampatzis, A, Schade, F, and Bruggemann, G. The effect of drop jump starting height and contact time on power, work performed and moment of force. J Strength Cond Res 18: 561–566, 2004. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15320658">PubMed]</a></li><li>Flanagan EP and Comyns TM. The use of contact time and the reactive strength index to optimise fast stretch-shortening cycle training. Strength Cond J 30: 33– 38, 2008. [<a href="https://www.researchgate.net/publication/232212864_The_Use_of_Contact_Time_and_the_Reactive_Strength_Index_to_Optimize_Fast_Stretch-Shortening_Cycle_Training">Link]</a></li><li>Kobsar, D., &amp; Barden, J. (2011). Contact time predicts coupling time in slow stretch-shortening cycle jumps. <em>Journal of Strength and Conditioning Research,</em> 25(1), pp.51-52. [<a href="http://journals.lww.com/nsca-jscr/Abstract/2011/03001/Contact_Time_Predicts_Coupling_Time_in_Slow.79.aspx?trendmd-shared=0">Link]</a></li><li>Zameziati, K., Morin, J.B., Deiuri, E., Telonio, A., &amp; Belli, A. (2006). Influence of the contact time on coupling time and a simple method to measure coupling time. <em>European Journal of Applied Physiology</em>, 96, pp.752–756. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16477446">PubMed]</a></li><li>Potteiger JA, Lockwood RH, Haub MD, Dolezal BA, Almuzaini KS, Schroeder JM, and Zebas CJ. Muscle <a href="https://www.scienceforsport.com/a-strength-power-training-decision-tree/">power and fiber characteristics following 8 weeks of plyometric training</a>. J Strength Cond Res 13: 275–279, 1999. [<a href="https://www.researchgate.net/publication/232211979_Muscle_Power_and_Fiber_Characteristics_Following_8_Weeks_of_Plyometric_Training">Link]</a></li><li>Spurrs RW, Murphy AJ, and Watsford ML. The <a href="https://www.scienceforsport.com/sleep-extension-through-napping-may-effect-performance/">effect of plyometric training on distance running performance</a>. Eur J Appl Physiol 89: 1–7, 2003. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/12627298">PubMed]</a></li><li>McBride JM,McCaulleyGO, and Cormie P. influence of preactivity and eccentric muscle activity on concentric performance during vertical jumping. J Strength Cond Res 23: 750–757, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18438244">PubMed]</a></li><li>Myer GD, Ford KR, Brent JL, and Hewett TE. The effects of plyometric vs. dynamic stabilization and balance training on power, balance, and landing force in female athletes. J Strength Cond Res 20: 345–353, 2006. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16686562">PubMed]</a></li><li>Bosco C, Komi PV, and Ito A. Pre-stretch potentiation of human skeletal muscle during ballistic movement. Acta Physiol Scand 111: 135–140, 1981. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7282389">PubMed]</a></li><li>Bosco C, Montanari G, Ribacchi R, Giovenali P, Latteri F, Iachelli G, Faina M, Coli R, DalMonte A, Las RosaM, CortelliG, and Saibene F. Relationship between the efficiency of muscular work during jumping and the energetic of running. Eur J Appl Physiol 56: 138–143, 1987. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/3569218">PubMed]</a></li><li>Bobbert MF, Gerritsen KGM, Litjens MCA, and Van Soest AJ. Why is countermovement jump height greater than squat jump height? Med Sci Sports Exerc 28: 1402–1412, 1996. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/8933491">PubMed]</a></li><li>Ettema GJ, Huijing PA, and De Hann A. The potentiating effect of pre-stretch on contractile performance of rat gastrocnemius medialis muscle during subsequent shortening and isometric contractions. J Exp Biology 165: 121– 136, 1992. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/1588248">PubMed]</a></li><li>Finni T, Ikegawa S, Lepola V, and Komi P. In vivo behaviour of vastus lateralis muscle during dynamic performances. Eur J Sport Sci 1: 1–13, 2001. [<a href="http://www.tandfonline.com/doi/abs/10.1080/17461390100071101">Link]</a></li><li>Kyrolainen H, Komi PV, and Kim DH. Effects of <a href="https://www.scienceforsport.com/how-to-implement-strength-and-power-training-principles-into-rehabilitation/">power training</a> on neuromuscular performance and mechanical efficiency. Scand J Med Sci Sports 1: 78–87, 1991. [<a href="http://onlinelibrary.wiley.com/doi/10.1111/j.1600-0838.1991.tb00275.x/abstract">Link]</a></li><li>Schmidtbleicher D, Gollhofer A, and Frick U. Effects of stretch shortening time training on the performance capability and innervation characteristics of leg extensor muscles. In: Biomechanics XI-A (Vol 7-A). DeGroot G, Hollander A, Huijing P, and Van Ingen Schenau G, eds. Amsterdam, the Netherlands: Free University Press, 1988. pp. 185–189. [<a href="https://books.google.com.au/books/about/Biomechanics_XI_A.html?id=_v97SQAACAAJ&redir_esc=y">Link]</a></li><li>Kubo K, Kawakami Y, and Fukunaga T. Influence of elastic properties of tendon structures on <a href="https://www.scienceforsport.com/monitoring-fatigue-are-subjective-wellness-jumping-performance-and-submaximal-running-test-reliable/">jump performance</a> in humans. J Appl Physiol 87: 2090–2096, 1999. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/10601154">PubMed]</a></li><li>Lichtwark GA, and Wilson AM. Is Achilles tendon compliance optimised for maximum muscle efficiency during locomotion? J Biomech 40: 1768–1775, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17101140">PubMed]</a></li><li>Hobara H, Kimura K, Omuro K, Gomi K. Muraoka T, Iso S, and Kanosue K. Determinants of difference in leg stiffness between endurance- and power-trained athletes. J Biomech 41: 506–514, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18062979">PubMed]</a></li><li>Arampatzis A, Karamanidis K, Morey- Klapsing G, De Monte G, and Stafilidis S. Mechanical properties of the triceps surae tendon and aponeurosis in relation to intensity of sport activity. J Biomech 40: 1946–1952, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17101142">PubMed]</a></li><li>Dalleau G, Belli A, Bourdin M, and Lacour JR. The spring-mass model and the energy cost of treadmill running. Eur J Appl Physiol Occup Physiol 77: 257–263, 1998. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/9535587">PubMed]</a></li><li>Voigt M, Bojsen-Moller F, Simonsen EB, and Dyhre-Poulsen P. The influence of tendon Youngs modulus, dimensions and instantaneous moment arms on the efficiency of human movement. J Biomech 28: 281–291, 1995. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7730387">PubMed]</a></li><li>Verkhoshansky YV. Quickness and velocity in sports movements. N Stud Athletics. 11: 29–37, 1996. [<a href="https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwipnYCGquzKAhWGspQKHY2hB2QQFggcMAA&url=http://www.iaaf.org/download/downloadnsa?filename=4b717228-d483-4074-952a-26eacf94b253.pdf&urlslug=quickness-and-velocity-in-sports-movements&usg=AFQjCNFm_wOXPr4WcBEPoq50xPc-lYKszg&sig2=AY-zt1vx9u1Hl71uYO1A2g">Link]</a></li><li>Heise GD and Martin PE. ‘‘Leg spring’’ characteristics and the aerobic demand of running. Med Sci Sports Exerc 30: 750– 754, 1998. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/9588619">PubMed]</a></li><li>Goldspink G. Muscle energetic and animal locomotion: In Mechanics and Energetic of Animal Locomotion. Alexander Mc and Goldspink G, eds. London, United Kingdom: Chapman and Hill, 1977. pp. 57–81. [<a href="http://www.amazon.com/Mechanics-energetics-locomotion-McNeill-Alexander/dp/0470991852">PubMed]</a></li><li>Wilson, G.J., Murphy, A.J., and Pryor, J.F. (1994). Musculotendinous stiffness: Its relationship to eccentric, isometric, and concentric performance. <em>Journal of Applied Physiology</em>, 76(1), pp.2714–2719. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7928905">PubMed]</a></li><li><em>McArdle, W.D., Katch, F.I., Katch, L.K., (2010). Exercise physiology: Nutrition, energy, and human performance, 7th</em> London: Lippincott Williams &amp; Wilkins. [<a href="http://www.amazon.com/Exercise-Physiology-Nutrition-Performance-Lippincott/dp/0781797810">Link]</a></li><li>Butler, R.J., Crowell, H.P., and Davis, I.M. (2003). Lower extremity stiffness: Implications for performance and injury. <em>Clinical Biomechanics</em>, 18(1), pp.511–517. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/12828900">PubMed]</a></li><li>Bosco, C., Komi, P.V., and Ito, A. (1981). Pre-stretch potentiation of human skeletal muscle during ballistic movement. <em>Acta Physiologica Scandinavica,</em> 111(17), pp.135–140. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7282389">PubMed]</a></li><li>Kubo K, Morimoto M, Komuro T, Yata H, Tsunoda N, Kanehisa H, and Fukunga T. Effects of plyometric and weight <a href="https://www.scienceforsport.com/which-to-choose-to-maximise-performance-in-team-sports-complex-or-contrast-training/">training on muscle-tendon complex and jump performance</a>. Med Sci Sports Exerc 39: 1801–1810, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17909408">PubMed]</a></li><li>Thompson DD and Chapman AE. The mechanical response of active human muscle during and after stretch. Eur J Appl Physiol 57: 691–697, 1998. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/3416853">PubMed]</a></li><li>Van Ingen Schenau GJ, Bobbert MF, and De Hann A. Mechanics and energetics of the stretch shortening cycle: A stimulating discussion. J Appl Biomech 13: 484– 496, 1997. [<a href="https://www.researchgate.net/publication/229071227_Mechanics_and_energetics_of_the_stretch-shortening_cycle_A_stimulating_discussion">Link]</a></li><li>Hill, A.V. (1938). The heat of shortening and the dynamic constants of muscle. Proceedings of the Royal Social B, 126, pp.136–195. [<a href="http://rspb.royalsocietypublishing.org/content/126/843/136">Link]</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」RATE OF FORCE DEVELOPMENT (RFD)</title>
    <link href="/2023/09/11/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DRATE-OF-FORCE-DEVELOPMENT-RFD/"/>
    <url>/2023/09/11/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DRATE-OF-FORCE-DEVELOPMENT-RFD/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.scienceforsport.com/rate-of-force-development-rfd-2/">RATE OF FORCE DEVELOPMENT (RFD)</a></p><p>The Rate of Force Development (RFD) is a measure of explosive strength, and higher RFDs have been linked with better athletic performance.</p><p><strong>Contents of Article</strong></p><ol><li>Summary</li><li>What is the Rate of Force Development (RFD)?</li><li>What impacts the Rate of Force Development?</li><li>Why is the Rate of Force Development important for sports?</li><li>How do you calculate the Rate of Force Development?</li><li>Is the Rate of Force Development valid and reliable?</li><li>How do you improve your Rate of Force Development?</li><li>Conclusion</li><li>References</li><li>About the Author</li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The Rate of Force Development (RFD) is a measure of explosive strength, or simply how fast an athlete can develop force. Athletes with a higher RFD have been shown to perform better during numerous physical performance tests. This, therefore, highlights the potential importance this value has in the role of athletic development. </p><p>Whilst many forms of training have been shown to improve the RFD in untrained individuals, only <a href="https://www.scienceforsport.com/how-to-get-started-with-resistance-training-what-you-need-to-know/">resistance</a> and <a href="https://www.scienceforsport.com/ballistic-training/">ballistic training</a> have been shown to enhance this quality in trained athletes. Lastly, though there are multiple ways to measure the RFD, the time-interval sampling windows appear to be the most reliable.</p><h2 id="What-is-the-Rate-of-Force-Development"><a href="#What-is-the-Rate-of-Force-Development" class="headerlink" title="What is the Rate of Force Development?"></a>What is the Rate of Force Development?</h2><p>The RFD is a measure of explosive strength, or simply how fast an athlete can develop force – hence the ‘rate’ of ‘force development’. This is defined as the speed at which the contractile elements of the muscle can develop force (1). Therefore, improving an athlete’s RFD may make them more explosive as they can develop larger forces in a shorter period of time. Developing a more explosive athlete may improve their sporting performance. In fact, higher RFDs have been directly linked with better jump (2-8), sprint (9), cycling (10), weightlifting (5, 6), and even golf swing performances (11).</p><p>The RFD is commonly believed to be manifested during the <a href="http://www.scienceforsport.com/stretch-shortening-cycle/">stretch-shortening cycle (SSC)</a>. Depending upon the duration of <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a>, exercises are classified as either slow- (≥ 250 milliseconds) or fast-SSC (≤ 250 milliseconds) movements (12). For example, a <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">counter-movement jump</a> (CMJ) is classified as a slow-SSC movement as the duration of the SSC lasts approximately 500 milliseconds (3). On the other hand, sprinting is classified as a fast-SSC movement as the duration of the SSC lasts between 80-90 milliseconds (13). Table 1 displays the SSC durations of some common exercises.</p><p>Table 1. SSC durations of common exercises.</p><table><thead><tr><th>Exercise</th><th>SSC Duration (Ms)</th><th>SSC Classification</th></tr></thead><tbody><tr><td>Race Walking (14)</td><td>270-300</td><td>Slow</td></tr><tr><td>Sprinting (13)</td><td>80-90</td><td>Fast</td></tr><tr><td>Countermovement Jump (CMJ) (3)</td><td>500</td><td>Slow</td></tr><tr><td>Drop Jump (20cm - 60cm) (15, 16)</td><td>130-300</td><td>Fast &#x2F; Slow</td></tr><tr><td>Long Jump (17)</td><td>140-170</td><td>Fast</td></tr><tr><td>Multiple Hurdle Jumps (18)</td><td>150</td><td>Fast</td></tr></tbody></table><p>Because the movement is slower, exercises with slow-SSC have a longer timeframe to develop force than those with a fast-SSC; this means slow-SSC exercises can typically create higher peak forces (7, 19). However, as there is typically less urgency to develop force during the slow-SSC movements, they often do not develop force as quickly as fast-SSC movements. This means that exercises with a slow-SSC produce lower RFDs than fast-SSC movements (7, 19). Therefore, slow-SSC exercises produce higher peak forces, but lower RFD than fast-SSC movements.</p><p>On the other hand, as it takes 140-710 milliseconds to develop peak force during various jump exercises (7, 5, 20), fast-SSC exercises may struggle to produce peak forces because the <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a> simply does not last long enough. Whilst they may not be capable of producing peak forces, they can produce large a RFD due to the speed of the movement (Table 2).</p><p>Table 2. Differences between force-time characteristics of various exercises.</p><table><thead><tr><th>Exercise</th><th>Peak Force(N)</th><th>Time to Peak Force(s)</th><th>Peak RFD</th><th>Time to Peak RFD</th></tr></thead><tbody><tr><td>Isometric Mid-Thigh Pull</td><td>3177</td><td>0.25</td><td>22008</td><td>0.12</td></tr><tr><td>Mid-Thigh Clean Pull @ 90% of 1RM</td><td>2327</td><td>0.25</td><td>23472</td><td>0.14</td></tr><tr><td>Mid-Thigh Clean Pull @ 30% of 1RM</td><td>1817</td><td>0.15</td><td>27607</td><td>0.09</td></tr><tr><td>Countermovement Jump (CMJ)</td><td>1449</td><td>0.39</td><td>12093</td><td>0.26</td></tr><tr><td>Squat Jump (SJ)</td><td>1663</td><td>0.32</td><td>11529</td><td>0.19</td></tr></tbody></table><p>Data extracted from experienced male weightlifters Kawamori et al., (7).</p><p>It is suggested that exercises characterised by larger joint displacements (i.e. work through a larger range of movement) are typically categorised as slow-SSC movements. Whereas exercises with smaller joint displacements are commonly referred to as fast-SSC movements (21). For example, a <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a> (slow-SSC movement) experiences larger joint displacements than sprinting (fast-SSC) (Figure 1). This helps to dissociate between what are slow-SSC movements and what are fast-SSC movements when no research has determined what classification they belong to.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/01/Figure-1-CMJ-and-Sprint-Joint-Angles.jpg"></p><h2 id="What-impacts-the-Rate-of-Force-Development"><a href="#What-impacts-the-Rate-of-Force-Development" class="headerlink" title="What impacts the Rate of Force Development?"></a>What impacts the Rate of Force Development?</h2><p>Improvements in RFD are likely to be the result of increases in muscle-tendon stiffness (22, 23), enhanced muscle force production via changes in muscle fibre type or type area (from type I to type IIA) (24, 25), and increases in neural drive during the early phase of the <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a> (&lt; 100 ms) (26, 27). In contrast, RFD appears to be negatively affected by changes in muscle fibre type (from type IIX to type IIA) (28), and increases in fascicle length (causing reduced muscle stiffness) (29).</p><h2 id="Why-is-the-Rate-of-Force-Development-important-for-sports"><a href="#Why-is-the-Rate-of-Force-Development-important-for-sports" class="headerlink" title="Why is the Rate of Force Development important for sports?"></a>Why is the Rate of Force Development important for sports?</h2><p>As <a href="https://www.scienceforsport.com/max-power-the-keys-to-getting-the-most-out-of-power-training/">power</a> is a key determinant in the performances of many sports, optimising an athlete’s explosiveness may be of great importance (30-35). Research has identified that RFD has been directly linked to performances during jumping (2-8), <a href="https://www.scienceforsport.com/olympic-weightlifting/">weightlifting</a>(5, 6), cycling (10), sprinting (9), and even during the golf swing (11) – suggesting a better RFD can lead to better athletic performance. Moreover, elite sprinters have been shown to possess greater RFD than well-trained sprinters (9). Collectively, this information suggests that RFD may be an important contributor to athletic performance.</p><ul><li>RFD linked to better jump, sprint, cycling, <a href="https://www.scienceforsport.com/olympic-weightlifting/">weightlifting,</a> and golf swing performances</li><li>Elite-level sprinters have better RFD than well-trained sprinters</li><li>Power-trained athletes have greater RFD than non-power-trained athletes (36).</li><li>Power-trained athletes have greater RFD than endurance athletes (36).</li></ul><h2 id="How-do-you-calculate-the-Rate-of-Force-Development"><a href="#How-do-you-calculate-the-Rate-of-Force-Development" class="headerlink" title="How do you calculate the Rate of Force Development?"></a>How do you calculate the Rate of Force Development?</h2><p>As RFD is an expression of explosive strength, it is measured in Newtons per second squared (N·s-1). The RFD can be calculated for isometric, concentric and eccentric muscle contractions, with the latter two otherwise referred to in the research as the ‘positive’ and ‘negative’ acceleration phases of the <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a> (2, 3). In fact, one study suggests that eccentric RFD is a better predictor of jump performance than concentric RFD because it summarises several intrinsic properties of muscle and tendons during a key moment (2). However, this is yet to be validated by other research.</p><p>Multiple measures of RFD have been developed in order to measure various components of performance during both isometric and dynamic movements:</p><ol><li>Average RFD or IES (Index of Explosiveness) (2, 3, 5, 6, 8, 9, 11, 37, 38)</li><li>Time-interval RFD (11, 39)</li><li>Instantaneous RFD (40, 41)</li><li>Peak or maximal RFD (42, 4, 5, 7, 10, 11, 36)</li><li>Time to peak RFD (11, 7)</li></ol><p><strong>Average RFD</strong></p><p>This value is identical to the IES discussed by Zatsiorsky (1995) (37) and is calculated by dividing the peak force by the time to achieve peak force (39). However, this form of measuring average RFD has been shown to have lower levels of reliability in comparison to time-interval RFD and peak RFD (39). These lower levels of reliability may be associated with each athlete’s time to achieve peak force, as not all athletes can achieve peak force in the same time frame. Therefore, measuring RFD using predetermined time intervals can accommodate for these variances.</p><p><strong>How to calculate Average RFD</strong></p><p>Example – Calculating Average RFD</p><p><em>Average RFD</em> <em>[N·s-1] &#x3D; Peak Force [N] &#x2F; Time to achieve peak force [s][&#x2F;toggle]</em></p><p>Time-Interval RFD: Though this measure of RFD is effectively the same as average RFD, it is calculated at various time intervals (e.g. 0-30, 0-50, 0-90, 0-100, 0-150, 0-200, and 0-250 milliseconds [39]). This value simply represents a change in force divided by a change in time. It is calculated by dividing the force at the end of the time interval by the duration of the time interval (39) (Table 3). Just note that when calculating RFD, the time should be calculated in seconds, not milliseconds.</p><p><strong>How to Calculate Time-Interval RFD</strong></p><p>Example – Calculating RFD with a 0-30 millisecond time-interval:</p><p><em>RFD</em> <em>[N·s-1] &#x3D; Change in Force [N] &#x2F; Change in Time [s]</em></p><p><em>RFD</em> <em>[N·s-1] &#x3D; Force [N] at 30 milliseconds &#x2F; 0.03 second time-interval [s]</em></p><p><em>RFD</em> <em>[N·s-1] &#x3D; 50N &#x2F; 0.03s</em></p><p><em>RFD</em> <em>[N·s-1] &#x3D; 1,666</em></p><p>Table 3. Time-interval RFD calculations for the isometric mid-thigh clean pull.</p><table><thead><tr><th>Time(Ms)</th><th>Force(N)</th><th>Change in Force(N)</th><th>Change in Time(s)</th><th>Change in Force &#x2F; Change in Time</th><th>RFD(N·s-1)</th></tr></thead><tbody><tr><td>0-30</td><td>50</td><td>50</td><td>0.03</td><td>50&#x2F;0.03</td><td>1666</td></tr><tr><td>0-50</td><td>180</td><td>180</td><td>0.05</td><td>180&#x2F;0.05</td><td>3600</td></tr><tr><td>0-90</td><td>540</td><td>540</td><td>0.09</td><td>540&#x2F;0.09</td><td>6000</td></tr><tr><td>0-100</td><td>600</td><td>600</td><td>0.1</td><td>590&#x2F;0.1</td><td>5900</td></tr><tr><td>0-150</td><td>850</td><td>850</td><td>0.15</td><td>850&#x2F;0.15</td><td>5666</td></tr><tr><td>0-200</td><td>1200</td><td>1200</td><td>0.2</td><td>1190&#x2F;0.2</td><td>5950</td></tr><tr><td>0-250</td><td>1400</td><td>1400</td><td>0.25</td><td>1400&#x2F;0.25</td><td>5600</td></tr></tbody></table><p>This data is adapted from the data reported by (11).</p><p>The <a href="https://www.scienceforsport.com/what-do-strength-and-conditioning-coaches-do-and-how-can-you-get-a-job-in-the-sc-industry/">strength and conditioning coach </a>should select the time intervals they wish to use based upon the nature of the exercise. For example, if the exercise has a fast-<a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a>movement (e.g. Sprinting – 80-90 milliseconds), then it may be suggested that time intervals of ≤ 100 milliseconds may be most appropriate (e.g. 0-50, 0-90, and 0-100 milliseconds). Furthermore, the early time intervals (&lt; 100 ms) are often referred to as ‘early phase’ RFD, whilst &gt; 100s time intervals are referred to as ‘late phase’ RFD.</p><p><strong>Instantaneous RFD</strong></p><p>This value is measured by using the maximal tangential slope between two adjacent data points. In other words, the data is recorded using 1 millisecond time intervals, and from this, the change in force is divided by the change in time at every 1 millisecond time interval. As this value of RFD is calculated every 1 millisecond, it provides a very precise measure of RFD.</p><p><strong>Peak or Maximal RFD</strong></p><p>This value of RFD is really as simple as it sounds, it is the largest amount of RFD produced during the movement. Most commonly, the value is identified by measuring the peak RFD during numerous sampling windows of 1, 2, 5, 10, 20, 30, and 50 (40, 39). For example, if the strength and conditioning coach selected a sampling window of 5 milliseconds, they would measure peak RFD every 5 milliseconds (e.g. 0-5, 5-10, and 10-15 milliseconds and so forth). They would then simply identify the largest RFD value out of those recorded – this value is then the peak RFD. Whilst all of these sampling windows have been reported as reliable measures of peak RFD, the 20 millisecond sampling window has been shown to be the most reliable (39). Table 4 demonstrates how to identify peak RFD during an isometric performance.</p><p>Table 4. Peak RFD calculations using 50-millisecond sampling windows.</p><table><thead><tr><th>Time(Ms)</th><th>Force(N)</th><th>Change in Force(N)</th><th>Change in Time(s)</th><th>Change in Force &#x2F; Change in Time</th><th>RFD(N·s-1)</th></tr></thead><tbody><tr><td>0-50</td><td>180</td><td>180</td><td>0.05</td><td>180&#x2F;0.05</td><td>3600</td></tr><tr><td>50-100</td><td>600</td><td>420</td><td>0.05</td><td>420&#x2F;0.05</td><td>8400</td></tr><tr><td>100-150</td><td>850</td><td>250</td><td>0.05</td><td>250&#x2F;0.05</td><td>5000</td></tr><tr><td>150-200</td><td>1200</td><td>350</td><td>0.05</td><td>350&#x2F;0.05</td><td>7000</td></tr><tr><td>200-250</td><td>1400</td><td>200</td><td>0.05</td><td>200&#x2F;0.05</td><td>4000</td></tr></tbody></table><table><thead><tr><th align="right">Peak RFD</th><th>8400</th></tr></thead><tbody><tr><td align="right">Time to Peak RFD (Ms)</td><td>100</td></tr><tr><td align="right">Average RFD (peak force &#x2F; time to peak force)</td><td>5600</td></tr></tbody></table><p>From this data, the coach is able to calculate the athlete’s peak RFD, time to peak RFD and average RFD. These variables are useful tools for comparing a group of athletes to identify who the best and worst individuals are at developing force quickly.</p><p><strong>Time to Peak RFD</strong></p><p>As displayed in Table 4, this value of RFD is extremely straightforward. It is a useful tool for measuring performance as it provides the coach with information on how quickly the athlete is able to achieve their maximal explosive strength (i.e. peak RFD). Decreasing an athlete’s time to achieve peak RFD will allow them to produce higher forces in shorter periods of time, and therefore may increase their explosiveness and overall athletic performance.</p><h2 id="Is-the-Rate-of-Force-Development-valid-and-reliable"><a href="#Is-the-Rate-of-Force-Development-valid-and-reliable" class="headerlink" title="Is the Rate of Force Development valid and reliable?"></a>Is the Rate of Force Development valid and reliable?</h2><p>The RFD and its various measures (Average RFD, Time-Interval RFD, Peak RFD, and Time to Peak RFD) have all been shown to be valid and reliable tools for assessing explosive strength (11, 39). However, the most reliable measures for assessing RFD appears to be any of the time-interval sampling windows (i.e. 0-30, 0-50, 0-90, 0-100, 0-150, 0-200, and 0-250 milliseconds), and peak RFD using 20 millisecond windows (39). It is therefore recommended that these two variables should be preferable when measuring RFD.</p><h2 id="How-do-you-improve-your-Rate-of-Force-Development"><a href="#How-do-you-improve-your-Rate-of-Force-Development" class="headerlink" title="How do you improve your Rate of Force Development?"></a>How do you improve your Rate of Force Development?</h2><p>Increasing the RFD whilst simultaneously reducing the time in which peak RFD occurs, will result in a left and upward shift in the force-time curve (Figure 2). This left and upward shift enables the athlete to produce greater forces in a shorter period of time, ultimately improving their explosiveness.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/03/Figure-2-Shift-in-the-Force-Time-curve-after-a-sucessful-training-programme..png"></p><p>It is often suggested that athletes must train at various sections along the force-time curve if improvements in RFD are to occur. By only training on one part of the force-time curve (e.g. maximum strength), it is likely the athlete will only improve their performance at that section on the paradigm. For example, only training maximal strength may lead to improvements in force production, but it may also result in a reduction in the time to achieve that force (Figure 3).</p><p>As training programmes that combine strength and power training have been repeatedly shown to improve athletic performance more than strength or speed training alone (43), there is no surprise that most exercise professionals commonly use an all-rounded approach within their programming.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/03/Figure-3-Force-time-curve-after-training-specifc-elements.png"></p><p>The following types of training have all shown to improve RFD:</p><ul><li>Resistance training (44, 45, 46, 47, 48)</li><li><a href="https://www.scienceforsport.com/ballistic-training/">Ballistic training</a> (49, 50, 51, 52)</li><li><a href="https://www.scienceforsport.com/olympic-weightlifting/">Olympic Weightlifting</a> (53)</li><li><a href="https://www.scienceforsport.com/plyometric-training/">Plyometric training</a> (54, 55, 50, 56)</li><li><a href="https://www.scienceforsport.com/nba-training-secrets-how-the-worlds-biggest-and-best-balance-training-and-games/">Balance training</a> (57, 58)</li></ul><p>However, only those listed below have shown RFD improvements in trained or athletic subjects:</p><ul><li>Resistance training (59, 60, 61, 62, 63)</li><li>Ballistic training (51, 52)</li></ul><p>So whilst numerous training methods have been shown to improve RFD in untrained and elderly males and females, little research has shown RFD improvements in trained or athletic subjects.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>RFD is a reliable measure of explosive strength, with higher RFDs have been linked with better athletic performance. Improvements in RFD are likely to be the result of increases in muscle-tendon stiffness, enhanced muscle force production via changes in muscle fibre type (from type I to type IIA), and increases in neural drive. </p><p>The most reliable values for measuring this component of performance appear to be calculating RFD at various time intervals and peak RFD using 20-millisecond sampling windows. Though various methods of training have been shown to improve performance (resistance, ballistic, <a href="https://www.scienceforsport.com/olympic-weightlifting/">Olympic Weightlifting</a>, <a href="https://www.scienceforsport.com/plyometric-training/">plyometrics</a>, and balance training), only resistance and ballistic training have been proven to increase RFD in trained and athletic populations.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/03/Rate-of-Force-Development.jpg"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li>Aagaard P., Simonsen E.B., Andersen J.L., Magnusson P., and Dyhre-Poulsen P. (2002) Increased rate of force development and neural drive of human skeleton muscle following resistance training. <em>J Appl Physiol</em> 93: 1318-1326. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/12235031">PubMed]</a></li><li>Laffaye, G., &amp; Wagner, P. (2013). Eccentric rate of force development determines jumping performance. <em>Computer Methods in Biomechanics and Biomedical Engineering</em>, 16(1), pp.82–83. [<a href="https://www.researchgate.net/publication/244987434_Eccentric_rate_of_force_development_determines_jumping_performance">Link]</a></li><li>Laffaye, G, Wagner, PP, and Tombleson, TIL. Countermovement jump height: Gender and sport-specific differences in the forcetime variables. J Strength Cond Res 28(4): 1096–1105, 2014 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/23838969">PubMed]</a></li><li>Haff, GG, Carlock, JM, Hartman, MJ, Kilgore, JL, Kawamori, N, Jackson, JR, Morris, RT, Sands, WA, and Stone, MH. Force-time curve characteristics of dynamic and isometric muscle actions of elite women Olympic weightlifters. J Strength Cond Res 19: 741–748, 2005. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16287343">PubMed]</a></li><li>McLellan, CP, Lovell, DI, and Gass, GC. The role of rate of force development on vertical jump performance. J Strength Cond Res 25(2): 379–385, 2011 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/20093963">PubMed]</a></li><li>Haff, GG, Stone, MH, O’Bryant, HS, Harman, E, Dinan, CN, Johnson, R, and Han, KH. Force-time dependent characteristics of dynamic and isometric muscle actions. J Strength Cond Res 11: 269– 272, 1997. [<a href="http://journals.lww.com/nsca-jscr/Abstract/1997/11000/Force_Time_Dependent_Characteristics_of_Dynamic.14.aspx">Link]</a></li><li>Kawamori, N, Rossi, SJ, Justice, BD, Haff, EE, Pistilli, EE, O’Bryant, HS, Stone, MH, and Haff, GG. Peak force and rate of force development during isometric and dynamic mid-thigh clean pulls performed at various intensities. J Strength Cond Res 20: 483–491, 2006. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16937959">PubMed]</a></li><li>Nuzzo, JL, McBride, JM, Cormie, P, and McCaulley, GO. Relationship between countermovement jump performance and multijoint isometric and dynamic tests of strength. J Strength Cond Res 22: 699–707, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18438251">PubMed]</a></li><li>Slawinski, J, Bonnefoy, A, Leveˆque, JM, Ontanon, G, Riquet, A, Dumas, R, and Che&#96; ze, L. Kinematic and kinetic comparisons of elite and well-trained sprinters during sprint start. J Strength Cond Res 24(4): 896–905, 2010 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/19935105">PubMed]</a></li><li>Stone, MH, Sands, WA, Carlock, J, Callan, S, Dickie, D, Daigle, K, Cotton, J, Smith, SL, and Hartman, M. The importance of isometric maximum strength and peak rate-of-force development in sprint cycling. J Strength Cond Res 18(4): 878–884, 2004. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15574097">PubMed]</a></li><li>Leary, BK, Statler, J, Hopkins, B, Fitzwater, R, Kesling, T, Lyon, J, Phillips, B, Bryner, RW, Cormie, P, and Haff, GG. The relationship between isometric force-time curve characteristics and club head speed in recreational golfers. J Strength Cond Res 26: 2685–2697, 2012. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22797001">PubMed]</a></li><li>Turner, A., and Jeffreys, I. (2010). The Stretch-Shortening Cycle: Proposed Mechanisms and Methods for Enhancement. <em>Strength and Conditioning Journal</em>. 32(4), pp.87-99. [<a href="https://www.researchgate.net/publication/232163543_The_Stretch-Shortening_Cycle_Proposed_Mechanisms_and_Methods_for_Enhancement">PubMed]</a></li><li>Taylor, M. J. D., &amp; Beneke, R. (2012). Spring Mass Characteristics of the Fastest Men on Earth.<em>International journal of sports medicine</em>, <em>33</em>(8), 667.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22510798">PubMed</a>]</li><li>Padulo, J, Annino, G, D’Ottavio, S, Vernillo, G, Smith, L, Migliaccio, GM, and Tihanyi, J. Footstep analysis at different slopes and speeds in elite race walking. J Strength Cond Res 27(1): 125–129, 2013 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22450256">PubMed]</a></li><li>Ball, NB, Stock, CG, and Scurr, JC. Bilateral contact ground reaction forces and contact times during plyometric drop jumping. J Strength Cond Res 24(10): 2762–2769, 2010. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/20613651">PubMed]</a></li><li>Walsh, M, Arampatzis, A, Schade, F, and Bruggemann, G. The effect of drop jump starting height and contact time on power, work performed and moment of force. J Strength Cond Res 18: 561–566, 2004. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15320658">PubMed]</a></li><li>Stefanyshyn, D. &amp; Nigg, B. (1998) Contribution of the lower extremity joints to mechanical energy in running vertical jumps and running long jumps. Journal of Sport Sciences, 16, 177-186.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/9531006">PubMed]</a></li><li>Flanagan EP and Comyns TM. The use of contact time and the <a href="https://www.scienceforsport.com/reactive-strength-index/">reactive strength index</a> to optimise fast stretch-shortening cycle training. Strength Cond J 30: 33– 38, 2008. [<a href="https://www.researchgate.net/publication/232212864_The_Use_of_Contact_Time_and_the_Reactive_Strength_Index_to_Optimize_Fast_Stretch-Shortening_Cycle_Training">Link]</a></li><li>Jensen, R.L., Flanagan, E.P., &amp; Ebben, W.P. (2008). Rate of force development and time to peak force during plyometric exercises. <em>Musculoskeletal Mechanics</em>, ISBS Conference 2008, July 14-18, 2008, Seoul, Korea. 199-202. [<a href="https://ojs.ub.uni-konstanz.de/cpa/article/view/2023">Link]</a></li><li>Markstrom, JL and Olsson, CJ. Countermovement jump peak force relative to body weight and jump height as predictors for sprint running performances: (In)homogeneity of track and field athletes? J Strength Cond Res 27(4): 944–953, 2013 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22692108">PubMed]</a></li><li>Ebben WP, Flanagan EP, Jensen RJ. Gender Similarities in Rate of Force Development and Time to Takeoff during the Countermovement Jump. Journal of Exercise Physiology, 2007;10(6):10-17. [<a href="https://www.researchgate.net/publication/231424259_Gender_similarities_in_rate_of_force_development_and_time_to_takeoff_during_the_countermovement_jump">Link]</a></li><li>Kubo, K., Kanehisa, H., Ito, M., &amp; Fukunaga, T. (2001). Effects of isometric training on the elasticity of human tendon structures in vivo. Journal of Applied Physiology, 91(1), 26-32.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/11408409">PubMed</a>]</li><li>Burgess, K. E., Connick, M. J., Graham-Smith, P., &amp; Pearson, S. J. (2007). Plyometric vs. isometric training influences on tendon properties and muscle output. The Journal of Strength &amp; Conditioning Research, 21(3), 986-989.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/17685695">PubMed</a>]</li><li>Häkkinen, K., Alen, M., Kraemer, W. J., Gorostiaga, E., Izquierdo, M., Rusko, H., &amp; Paavolainen, L. (2003). Neuromuscular adaptations during concurrent strength and endurance training versus strength training. European journal of applied physiology, 89(1), 42-52.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/12627304">PubMed</a>]</li><li>Aagaard, P., Simonsen, E. B., Andersen, J. L., Magnusson, P., &amp; Dyhre-Poulsen, P. (2002a). Increased rate of force development and neural drive of human skeletal muscle following resistance training. Journal of applied physiology, 93(4), 1318-1326.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/12235031">PubMed</a>]</li><li>Van Cutsem, M., Duchateau, J., &amp; Hainaut, K. (1998). Changes in single motor unit behaviour contribute to the increase in contraction speed after dynamic training in humans. The Journal of Physiology, 513(Pt 1), 295.[<a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2231276/">PubMed</a>]</li><li>Vila-Chã, C., Falla, D., Correia, M. V., &amp; Farina, D. (2012). Changes in H reflex and V wave following short-term endurance and strength training. Journal of Applied Physiology, 112(1), 54-63.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/21998264">PubMed</a>]</li><li>Andersen, L. L., Andersen, J. L., Zebis, M. K., &amp; Aagaard, P. (2010). Early and late rate of force development: differential adaptive responses to resistance training?. Scandinavian journal of medicine &amp; science in sports, 20(1), e162-e169.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19793220">PubMed</a>]</li><li>Blazevich, A. J., Cannavan, D., Horne, S., Coleman, D. R., &amp; Aagaard, P. (2009). Changes in muscle force-length properties affect the early rise of force in vivo. Muscle &amp; nerve, 39(4), 512.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19296490">PubMed</a>]</li><li>Baker, D and Nance, S. (1999). The relation between strength and power in professional rugby league players. Journal of Strength and Conditioning Research, 13: 224–229. [<a href="https://www.researchgate.net/publication/232100672_The_Relation_Between_Strength_and_Power_in_Professional_Rugby_League_Players">Link]</a></li><li>Comfort, P, Allen, M, and Graham-Smith, P. (2011a). Kinetic comparisons during variations of the power clean. Journal of Strength and Conditioning Research, 25: 3269– 3273. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22080325">PubMed]</a></li><li>Comfort, P, Fletcher, C, and McMahon, JJ. (2012). Determination of optimal load during the power clean in collegiate athletes. Journal of Strength and Conditioning Research, 26: 2970–2974. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22190161">PubMed]</a></li><li>Cormie, P, McBride, JM, and McCaulley, GO. (2007). Validation of power measurement techniques in dynamic lower body resistance exercises. J Appl Biomech 23: 103–118. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17603130">PubMed]</a></li><li>Cronin, J, McNair, PJ, and Marshall, RN. (2001). <a href="https://www.scienceforsport.com/power-development-how-one-simple-test-can-take-you-to-the-next-level/">Developing explosive power:</a> A comparison of technique and training. J Sci Med Sport 4: 59–70. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/11339494">PubMed]</a></li><li>Garhammer, J. &amp; Gregor, R. (1992). Propulsion Forces as a Function of Intensity for Weightlifting and Vertical Jumping, J. Appl. Sports Sci. Research, 6(3): 129-134. [<a href="https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwi1ysHItOfKAhULFJQKHdwXACwQFggcMAA&url=http://web.csulb.edu/~atlastwl/Propulsive_Forces_WL_VJ_JASSR1992.pdf&usg=AFQjCNHId0Sx525QKsSIdQZY_o6-4w3v6w&sig2=seDtUrzl1Kb1T2oQqe2acg">Link]</a></li><li>Hakkinen, K., and E. Myllyla. Acute effects of muscle fatigue and recovery on force production and relaxation in endurance, power and strength athletes. <em>Sports Med. Phys. Fitness</em> 30: 5–12. 1990. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/2195236">PubMed]</a></li><li>Zatsiorsky, VM. Science and Practice of Strength Training. Champaign, IL: Human Kinetics, 1995. [<a href="http://www.humankinetics.com/products/all-products/science-and-practice-of-strength-training-2nd-edition">Link]</a></li><li>Comfort, P., Udall, R., &amp; Jones, P.A. (2012). The effect of loading on kinematic and kinetic variables during the mid-thigh clean pull. Journal of Strength and Conditioning Research. 26(5):1208-14, [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22516901">PubMed]</a></li><li>Haff, GG, Ruben, RP, Lider, J, Twine, C, and Cormie, P. A comparison of methods for determining the rate of force development during isometric midthigh clean pulls. J Strength Cond Res 29(2): 386–395, 2015 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/25259470">PubMed]</a></li><li>Comfort, P, Allen, M, and Graham-Smith, P. Comparisons of peak ground reaction force and rate of force development during variations of the power clean. J Strength Cond Res 25(5): 1235–1239, 2011a [<a href="http://www.ncbi.nlm.nih.gov/pubmed/21522071">PubMed]</a></li><li>Comfort, P, Allen, M, and Graham-Smith, P. Kinetic comparisons during variations of the power clean. J Strength Cond Res 25(12): 3269–3273, 2011b [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22080325">PubMed]</a></li><li>Wilson, G.J., Lyttle, A.D., Ostrowski, K.J., &amp; Murphy, A.J. (1995). Assessing dynamic performance: A comparison of rate of force development tests. J Strength Cond Res, 9(3), 176-181. [<a href="https://www.researchgate.net/publication/232100152_Assessing_Dynamic_Performance_A_Comparison_of_Rate_of_Force_Development_Tests">Link]</a></li><li>Stone, M.H., (1993). Literature review: Explosive exercises and training. National Strength and Conditioning Association Journal, 15(3), pp.7-15. [<a href="https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&cad=rja&uact=8&ved=0ahUKEwit6sWwtefKAhWFo5QKHTsrApIQFggyMAI&url=http://www.usrowing.org/docs/default-source/resource-library/10a-6.pdf?sfvrsn=0&usg=AFQjCNFyUeeVxyWIRa90OE4P5tkFs_PSmw&sig2=2SYnwYPgctHcjAWQndBjAQ">Link]</a></li><li>Thompson, B. J., Stock, M. S., Shields, J. E., Luera, M. J., Munayer, I. K., Mota, J. A., &amp; Olinghouse, K. D. (2015). Barbell deadlift training increases the rate of torque development and vertical jump performance in novices. The Journal of Strength &amp; Conditioning Research, 29(1), 1-10.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/25226322">PubMed</a>]</li><li>Unhjem, R., Lundestad, R., Fimland, M. S., Mosti, M. P., Wang, E. (2015) Strength training-induced responses in older adults: attenuation of descending neural drive with age. Age. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/25940749">PubMed</a>]</li><li>Mosti, M. P., Carlsen, T., Aas, E., Hoff, J., Stunes, A. K., &amp; Syversen, U. (2014). Maximal Strength Training Improves Bone Mineral Density and Neuromuscular Performance in Young Adult Women. The Journal of Strength &amp; Conditioning Research, 28(10), 2935-2945.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/24736773">PubMed</a>]</li><li>Oliveira, F. B., Oliveira, A. S., Rizatto, G. F., &amp; Denadai, B. S. (2013a). Resistance training for explosive and maximal strength: effects on early and late rate of force development. Journal of sports science &amp; medicine, 12(3), 402.[<a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3772581/">PubMed</a>]</li><li>Branislav, R., Milivoj, D., Abella, C. P., Deval, V. C., &amp; Siniša, K. (2013). Effects of combined and classic training on different isometric rate of force development parameters of leg extensors in female volleyball players: Discriminative analysis approach. Journal of research in medical sciences: the official journal of Isfahan University of Medical Sciences, 18(10), 840.[<a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3897066/">PubMed</a>]</li><li>Kramer, A., Ritzmann, R., Gruber, M., &amp; Gollhofer, A. (2012). Four weeks of training in a sledge jump system improved the jump pattern to almost natural reactive jumps. European journal of applied physiology, 112(1), 285.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/21544569">PubMed</a>]</li><li>De Villarreal, E. S. S., Izquierdo, M., &amp; Gonzalez-Badillo, J. J. (2011). Enhancing jump performance after combined vs. maximal power, heavy-resistance, and <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometric training</a> alone. The Journal of Strength &amp; Conditioning Research, 25(12), 3274-3281.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22082794">PubMed</a>]</li><li>Newton, R. U., Kraemer, W. J., &amp; Häkkinen, K. (1999). Effects of ballistic training on preseason preparation of elite volleyball players. Medicine and science in sports and exercise, 31(2), 323.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/10063823">PubMed</a>]</li><li>Cormie, P., McGuigan, M. R., &amp; Newton, R. U. (2010). Influence of strength on magnitude and mechanisms of adaptation to power training. Medicine and science in sports and exercise, 42(8), 1566.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/20639724">PubMed</a>]</li><li>Haff, G. G., Jackson, J. R., Kawamori, N., Carlock, J. M., Hartman, M. J., Kilgore, J. L., &amp; Stone, M. H. (2008). Force-time curve characteristics and hormonal alterations during an eleven-week training period in elite women weightlifters. Journal of strength and conditioning research, 22(2), 433-446.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/18550958">PubMed</a>]</li><li>Behrens, M., Mau-Moeller, A., &amp; Bruhn, S. (2014). Effect of plyometric training on neural and mechanical properties of the knee extensor muscles. International journal of sports medicine, 35(2), 101.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/23900900">PubMed</a>]</li><li>Correa, C. S., LaRoche, D. P., Cadore, E. L., Reischak-Oliveira, A., Bottaro, M., Kruel, L. F. M., &amp; Pinto, R. S. (2012). 3 Different types of strength training in older women. International journal of sports medicine, 33(12), 962.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22782384">PubMed</a>]</li><li>Kyröläinen, H., Avela, J., McBride, J. M., Koskinen, S., Andersen, J. L., Sipilä, S., &amp; Komi, P. V. (2005). Effects of power training on muscle structure and neuromuscular performance. Scandinavian journal of medicine &amp; science in sports, 15(1), 58.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/15679573">PubMed</a>]</li><li>Gruber, M., &amp; Gollhofer, A. (2004). Impact of sensorimotor training on the rate of force development and neural activation. European journal of applied physiology, 92(1-2), 98-105.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/15024669">PubMed</a>]</li><li>Gruber, M., Gruber, S. B., Taube, W., Schubert, M., Beck, S. C., &amp; Gollhofer, A. (2007). Differential effects of ballistic versus sensorimotor training on rate of force development and neural activation in humans. Journal of strength and conditioning research, 21(1), 274.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/17313292">PubMed</a>]</li><li>Ingebrigtsen, J., Holtermann, A., &amp; Roeleveld, K. (2009). Effects of load and contraction velocity during three-week biceps curls training on isometric and isokinetic performance. The Journal of Strength &amp; Conditioning Research, 23(6), 1670-1676.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19675498">PubMed</a>]</li><li>Lamont, H. S., Cramer, J. T., Bemben, D. A., Shehab, R. L., Anderson, M. A., &amp; Bemben, M. G. (2010). Effects of adding whole body vibration to squat training on isometric force&#x2F;time characteristics. The Journal of Strength &amp; Conditioning Research, 24(1), 171-183.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19924007">PubMed</a>]</li><li>Lamas, L., Ugrinowitsch, C., Rodacki, A., Pereira, G., Mattos, E. C., Kohn, A. F., &amp; Tricoli, V. (2012). Effects of strength and power training on neuromuscular adaptations and jumping movement pattern and performance. Journal of Strength &amp; Conditioning Research, 26(12), 3335.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22222321">PubMed</a>]</li><li>Farup, J., Sørensen, H., &amp; Kjølhede, T. (2014). Similar changes in muscle fiber phenotype with differentiated consequences for rate of force development: Endurance versus resistance training. Human movement science, 34, 109-119.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/24530017">PubMed</a>]</li><li>Bazyler, C. D., Sato, K., Wassinger, C. A., Lamont, H. S., &amp; Stone, M. H. (2014). The efficacy of incorporating partial squats in maximal strength training. Journal of strength and conditioning research&#x2F;National Strength &amp; Conditioning Association, 28(11), 3024.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/24662234">PubMed</a>]</li></ol>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发力率 RFD</title>
    <link href="/2023/09/11/%E5%8F%91%E5%8A%9B%E7%8E%87-RFD/"/>
    <url>/2023/09/11/%E5%8F%91%E5%8A%9B%E7%8E%87-RFD/</url>
    
    <content type="html"><![CDATA[<p>这篇文章说得最细致：<a href="https://www.scienceforsport.com/rate-of-force-development-rfd-2/">RATE OF FORCE DEVELOPMENT (RFD)</a></p><p>这两篇文章就稍微简单一点：</p><ol><li><a href="https://www.jeffchensports.com/blog/rfd">運動表現的迷思–RFD(發力率)？</a>;</li><li><a href="https://zhuanlan.zhihu.com/p/644908769">什么是发力率What is RFD？理论篇</a>；</li><li><a href="https://oneilathlete.com/the-difference-between-explosive-power-power-rfd/">爆發力&#x2F;功率&#x2F;發力率 你還分不清楚嗎？</a>;</li><li><a href="https://www.don1don.com/archives/131386/131386">如何訓練爆發力？ 四張圖了解功率輸出</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么心率高，可以认为是在做无氧运动？</title>
    <link href="/2023/09/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%83%E7%8E%87%E9%AB%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%81%9A%E6%97%A0%E6%B0%A7%E8%BF%90%E5%8A%A8%EF%BC%9F/"/>
    <url>/2023/09/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%83%E7%8E%87%E9%AB%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%81%9A%E6%97%A0%E6%B0%A7%E8%BF%90%E5%8A%A8%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>首先要明白一个概念：无氧运动是在描述人体运动状态，而不是运动本身。例如恒定配速（功率）的跑步直到心率漂移无法继续运动，整个过程即包含了有氧运动又包含了无氧运动。</p><p>然后需要明白，心率在能量体系下意味着什么？</p><ol><li>调节运输乳酸；</li><li>输送氧气；</li><li>排出二氧化碳。</li></ol><p>再思考为什么说能量系统决定心率？</p><p>几乎在所有情况下，无氧运动都伴随着有氧运动（在环境不缺氧的情况下），因为由于能量需求超过有氧产能，无氧产能必须补充有氧产能。</p><p>身体开始从事低强度运动时，做功肌肉（主要）为红肌。由于红肌生理特性，主要依赖有氧产能。且因为强度低，这意味着心脏对输送氧气和排出二氧化碳的需求不高，所以心率不高。</p><p>当强度开始增加，做功肌肉转向白肌。由于白肌生理特性，主要依赖无氧产能。且因为强度高，糖酵解快速主导供能产生乳酸，此时对于身体而言，心脏不但需要满足强度变化前的有氧产能负荷，还需要满足强度变化后的无氧产能负荷，负责调节乳酸、运输代谢乳酸所需的氧气和产生的二氧化碳。所以心率高。</p><p>综上，可以认为心率能相对客观地体现机体的能量系统运作情况。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mediapipe 实现姿态识别</title>
    <link href="/2023/09/08/Mediapipe-%E5%AE%9E%E7%8E%B0%E5%A7%BF%E6%80%81%E8%AF%86%E5%88%AB/"/>
    <url>/2023/09/08/Mediapipe-%E5%AE%9E%E7%8E%B0%E5%A7%BF%E6%80%81%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>参考代码：</p><ol><li><a href="https://www.bilibili.com/video/BV1dL4y1h7Q6/?spm_id_from=333.337.search-card.all.click&vd_source=7be016a2c85222bad595561263f3937e">【编程奇妙夜】AI健身+三维人体姿态估计（附Mediapipe代码复现）</a></li><li><a href="https://drive.google.com/drive/folders/12d-EkyobfORHN18KptxHko1CDbnGvXIl">Google云盘</a></li></ol><h3 id="8-个类"><a href="#8-个类" class="headerlink" title="8 个类"></a>8 个类</h3><p>关于这 8 个类原文中也没有具体的解释，所以基本是照搬了源码。只对有 bug 无法运行的地方进行了修改。</p><h4 id="BootstrapHelper"><a href="#BootstrapHelper" class="headerlink" title="BootstrapHelper"></a>BootstrapHelper</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-keyword">from</span> mediapipe.python.solutions <span class="hljs-keyword">import</span> drawing_utils <span class="hljs-keyword">as</span> mp_drawing<br><span class="hljs-keyword">from</span> mediapipe.python.solutions <span class="hljs-keyword">import</span> pose <span class="hljs-keyword">as</span> mp_pose<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageDraw<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> Function.Show <span class="hljs-keyword">import</span> show_image<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootstrapHelper</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Helps to bootstrap images and filter pose samples for classification.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 images_in_folder,</span><br><span class="hljs-params">                 images_out_folder,</span><br><span class="hljs-params">                 csvs_out_folder</span>):<br>        <span class="hljs-variable language_">self</span>._images_in_folder = images_in_folder<br>        <span class="hljs-variable language_">self</span>._images_out_folder = images_out_folder<br>        <span class="hljs-variable language_">self</span>._csvs_out_folder = csvs_out_folder<br><br>        <span class="hljs-comment"># Get list of pose classes and print image statistics.</span><br>        <span class="hljs-variable language_">self</span>._pose_class_names = <span class="hljs-built_in">sorted</span>([n <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-variable language_">self</span>._images_in_folder) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n.startswith(<span class="hljs-string">&#x27;.&#x27;</span>)])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params">self, per_pose_class_limit=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Bootstraps images in a given folder.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Required image in folder (same use for image out folder):</span><br><span class="hljs-string">          pushups_up/</span><br><span class="hljs-string">            image_001.jpg</span><br><span class="hljs-string">            image_002.jpg</span><br><span class="hljs-string">            ...</span><br><span class="hljs-string">          pushups_down/</span><br><span class="hljs-string">            image_001.jpg</span><br><span class="hljs-string">            image_002.jpg</span><br><span class="hljs-string">            ...</span><br><span class="hljs-string">          ...</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Produced CSVs out folder:</span><br><span class="hljs-string">          pushups_up.csv</span><br><span class="hljs-string">          pushups_down.csv</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Produced CSV structure with pose 3D landmarks:</span><br><span class="hljs-string">          sample_00001,x1,y1,z1,x2,y2,z2,....</span><br><span class="hljs-string">          sample_00002,x1,y1,z1,x2,y2,z2,....</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Create output folder for CVSs.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-variable language_">self</span>._csvs_out_folder):<br>            os.makedirs(<span class="hljs-variable language_">self</span>._csvs_out_folder)<br><br>        <span class="hljs-keyword">for</span> pose_class_name <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._pose_class_names:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bootstrapping &#x27;</span>, pose_class_name, file=sys.stderr)<br><br>            <span class="hljs-comment"># Paths for the pose class.</span><br>            images_in_folder = os.path.join(<span class="hljs-variable language_">self</span>._images_in_folder, pose_class_name)<br>            images_out_folder = os.path.join(<span class="hljs-variable language_">self</span>._images_out_folder, pose_class_name)<br>            csv_out_path = os.path.join(<span class="hljs-variable language_">self</span>._csvs_out_folder, pose_class_name + <span class="hljs-string">&#x27;.csv&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(images_out_folder):<br>                os.makedirs(images_out_folder)<br><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_out_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> csv_out_file:<br>                csv_out_writer = csv.writer(csv_out_file, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>, quoting=csv.QUOTE_MINIMAL)<br>                <span class="hljs-comment"># Get list of images.</span><br>                image_names = <span class="hljs-built_in">sorted</span>([n <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> os.listdir(images_in_folder) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n.startswith(<span class="hljs-string">&#x27;.&#x27;</span>)])<br>                <span class="hljs-keyword">if</span> per_pose_class_limit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    image_names = image_names[:per_pose_class_limit]<br><br>                <span class="hljs-comment"># Bootstrap every image.</span><br>                <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> tqdm.tqdm(image_names):<br>                    <span class="hljs-comment"># Load image.</span><br>                    input_frame = cv2.imread(os.path.join(images_in_folder, image_name))<br>                    input_frame = cv2.cvtColor(input_frame, cv2.COLOR_BGR2RGB)<br><br>                    <span class="hljs-comment"># Initialize fresh pose tracker and run it.</span><br>                    <span class="hljs-comment"># 修改</span><br>                    <span class="hljs-comment"># with mp_pose.Pose(upper_body_only=False) as pose_tracker:</span><br>                    <span class="hljs-keyword">with</span> mp_pose.Pose() <span class="hljs-keyword">as</span> pose_tracker:<br>                        result = pose_tracker.process(image=input_frame)<br>                        pose_landmarks = result.pose_landmarks<br><br>                    <span class="hljs-comment"># Save image with pose prediction (if pose was detected).</span><br>                    output_frame = input_frame.copy()<br>                    <span class="hljs-keyword">if</span> pose_landmarks <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                        mp_drawing.draw_landmarks(<br>                            image=output_frame,<br>                            landmark_list=pose_landmarks,<br>                            connections=mp_pose.POSE_CONNECTIONS)<br>                    output_frame = cv2.cvtColor(output_frame, cv2.COLOR_RGB2BGR)<br>                    cv2.imwrite(os.path.join(images_out_folder, image_name), output_frame)<br><br>                    <span class="hljs-comment"># Save landmarks if pose was detected.</span><br>                    <span class="hljs-keyword">if</span> pose_landmarks <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                        <span class="hljs-comment"># Get landmarks.</span><br>                        frame_height, frame_width = output_frame.shape[<span class="hljs-number">0</span>], output_frame.shape[<span class="hljs-number">1</span>]<br>                        pose_landmarks = np.array(<br>                            [[lmk.x * frame_width, lmk.y * frame_height, lmk.z * frame_width]<br>                             <span class="hljs-keyword">for</span> lmk <span class="hljs-keyword">in</span> pose_landmarks.landmark],<br>                            dtype=np.float32)<br>                        <span class="hljs-keyword">assert</span> pose_landmarks.shape == (<span class="hljs-number">33</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;Unexpected landmarks shape: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(pose_landmarks.shape)<br>                        csv_out_writer.writerow([image_name] + pose_landmarks.flatten().astype(np.<span class="hljs-built_in">str</span>).tolist())<br><br>                    <span class="hljs-comment"># Draw XZ projection and concatenate with the image.</span><br>                    projection_xz = <span class="hljs-variable language_">self</span>._draw_xz_projection(<br>                        output_frame=output_frame, pose_landmarks=pose_landmarks)<br>                    output_frame = np.concatenate((output_frame, projection_xz), axis=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_draw_xz_projection</span>(<span class="hljs-params">self, output_frame, pose_landmarks, r=<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;red&#x27;</span></span>):<br>        frame_height, frame_width = output_frame.shape[<span class="hljs-number">0</span>], output_frame.shape[<span class="hljs-number">1</span>]<br>        img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (frame_width, frame_height), color=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> pose_landmarks <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> np.asarray(img)<br><br>        <span class="hljs-comment"># Scale radius according to the image width.</span><br>        r *= frame_width * <span class="hljs-number">0.01</span><br><br>        draw = ImageDraw.Draw(img)<br>        <span class="hljs-keyword">for</span> idx_1, idx_2 <span class="hljs-keyword">in</span> mp_pose.POSE_CONNECTIONS:<br>            <span class="hljs-comment"># Flip Z and move hips center to the center of the image.</span><br>            x1, y1, z1 = pose_landmarks[idx_1] * [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, frame_height * <span class="hljs-number">0.5</span>]<br>            x2, y2, z2 = pose_landmarks[idx_2] * [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, frame_height * <span class="hljs-number">0.5</span>]<br><br>            draw.ellipse([x1 - r, z1 - r, x1 + r, z1 + r], fill=color)<br>            draw.ellipse([x2 - r, z2 - r, x2 + r, z2 + r], fill=color)<br>            draw.line([x1, z1, x2, z2], width=<span class="hljs-built_in">int</span>(r), fill=color)<br><br>        <span class="hljs-keyword">return</span> np.asarray(img)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">align_images_and_csvs</span>(<span class="hljs-params">self, print_removed_items=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Makes sure that image folders and CSVs have the same sample.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Leaves only intersetion of samples in both image folders and CSVs.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> pose_class_name <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._pose_class_names:<br>            <span class="hljs-comment"># Paths for the pose class.</span><br>            images_out_folder = os.path.join(<span class="hljs-variable language_">self</span>._images_out_folder, pose_class_name)<br>            csv_out_path = os.path.join(<span class="hljs-variable language_">self</span>._csvs_out_folder, pose_class_name + <span class="hljs-string">&#x27;.csv&#x27;</span>)<br><br>            <span class="hljs-comment"># Read CSV into memory.</span><br>            rows = []<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_out_path) <span class="hljs-keyword">as</span> csv_out_file:<br>                csv_out_reader = csv.reader(csv_out_file, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)<br>                <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> csv_out_reader:<br>                    rows.append(row)<br><br>            <span class="hljs-comment"># Image names left in CSV.</span><br>            image_names_in_csv = []<br><br>            <span class="hljs-comment"># Re-write the CSV removing lines without corresponding images.</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_out_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> csv_out_file:<br>                csv_out_writer = csv.writer(csv_out_file, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>, quoting=csv.QUOTE_MINIMAL)<br>                <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:<br>                    image_name = row[<span class="hljs-number">0</span>]<br>                    image_path = os.path.join(images_out_folder, image_name)<br>                    <span class="hljs-keyword">if</span> os.path.exists(image_path):<br>                        image_names_in_csv.append(image_name)<br>                        csv_out_writer.writerow(row)<br>                    <span class="hljs-keyword">elif</span> print_removed_items:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Removed image from CSV: &#x27;</span>, image_path)<br><br>            <span class="hljs-comment"># Remove images without corresponding line in CSV.</span><br>            <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> os.listdir(images_out_folder):<br>                <span class="hljs-keyword">if</span> image_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> image_names_in_csv:<br>                    image_path = os.path.join(images_out_folder, image_name)<br>                    os.remove(image_path)<br>                    <span class="hljs-keyword">if</span> print_removed_items:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Removed image from folder: &#x27;</span>, image_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">analyze_outliers</span>(<span class="hljs-params">self, outliers</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Classifies each sample agains all other to find outliers.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        If sample is classified differrrently than the original class - it sould</span><br><span class="hljs-string">        either be deleted or more similar samples should be aadded.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> outlier <span class="hljs-keyword">in</span> outliers:<br>            image_path = os.path.join(<span class="hljs-variable language_">self</span>._images_out_folder, outlier.sample.class_name, outlier.sample.name)<br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Outlier&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  sample path =    &#x27;</span>, image_path)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  sample class =   &#x27;</span>, outlier.sample.class_name)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  detected class = &#x27;</span>, outlier.detected_class)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  all classes =    &#x27;</span>, outlier.all_classes)<br><br>            img = cv2.imread(image_path)<br>            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)<br>            show_image(img)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_outliers</span>(<span class="hljs-params">self, outliers</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Removes outliers from the image folders.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> outlier <span class="hljs-keyword">in</span> outliers:<br>            image_path = os.path.join(<span class="hljs-variable language_">self</span>._images_out_folder, outlier.sample.class_name, outlier.sample.name)<br>            os.remove(image_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_images_in_statistics</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Prints statistics from the input image folder.&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>._print_images_statistics(<span class="hljs-variable language_">self</span>._images_in_folder, <span class="hljs-variable language_">self</span>._pose_class_names)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_images_out_statistics</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Prints statistics from the output image folder.&quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>._print_images_statistics(<span class="hljs-variable language_">self</span>._images_out_folder, <span class="hljs-variable language_">self</span>._pose_class_names)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_print_images_statistics</span>(<span class="hljs-params">self, images_folder, pose_class_names</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Number of images per pose class:&#x27;</span>)<br>        <span class="hljs-keyword">for</span> pose_class_name <span class="hljs-keyword">in</span> pose_class_names:<br>            n_images = <span class="hljs-built_in">len</span>([<br>                n <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> os.listdir(os.path.join(images_folder, pose_class_name))<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n.startswith(<span class="hljs-string">&#x27;.&#x27;</span>)])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(pose_class_name, n_images))<br></code></pre></td></tr></table></figure><p>对源代码进行了一处修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将</span><br><span class="hljs-keyword">with</span> mp_pose.Pose(upper_body_only=<span class="hljs-literal">False</span>) <span class="hljs-keyword">as</span> pose_tracker:<br><span class="hljs-comment"># 修改成了</span><br><span class="hljs-keyword">with</span> mp_pose.Pose() <span class="hljs-keyword">as</span> pose_tracker:<br></code></pre></td></tr></table></figure><h4 id="EMADictSmoothing"><a href="#EMADictSmoothing" class="headerlink" title="EMADictSmoothing"></a>EMADictSmoothing</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EMADictSmoothing</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Smoothes pose classification.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, window_size=<span class="hljs-number">10</span>, alpha=<span class="hljs-number">0.2</span></span>):<br>        <span class="hljs-variable language_">self</span>._window_size = window_size<br>        <span class="hljs-variable language_">self</span>._alpha = alpha<br><br>        <span class="hljs-variable language_">self</span>._data_in_window = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Smoothes given pose classification.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Smoothing is done by computing Exponential Moving Average for every pose</span><br><span class="hljs-string">        class observed in the given time window. Missed pose classes arre replaced</span><br><span class="hljs-string">        with 0.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">          data: Dictionary with pose classification. Sample:</span><br><span class="hljs-string">              &#123;</span><br><span class="hljs-string">                &#x27;pushups_down&#x27;: 8,</span><br><span class="hljs-string">                &#x27;pushups_up&#x27;: 2,</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Result:</span><br><span class="hljs-string">          Dictionary in the same format but with smoothed and float instead of</span><br><span class="hljs-string">          integer values. Sample:</span><br><span class="hljs-string">            &#123;</span><br><span class="hljs-string">              &#x27;pushups_down&#x27;: 8.3,</span><br><span class="hljs-string">              &#x27;pushups_up&#x27;: 1.7,</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Add new data to the beginning of the window for simpler code.</span><br>        <span class="hljs-variable language_">self</span>._data_in_window.insert(<span class="hljs-number">0</span>, data)<br>        <span class="hljs-variable language_">self</span>._data_in_window = <span class="hljs-variable language_">self</span>._data_in_window[:<span class="hljs-variable language_">self</span>._window_size]<br><br>        <span class="hljs-comment"># Get all keys.</span><br>        keys = <span class="hljs-built_in">set</span>([key <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._data_in_window <span class="hljs-keyword">for</span> key, _ <span class="hljs-keyword">in</span> data.items()])<br><br>        <span class="hljs-comment"># Get smoothed values.</span><br>        smoothed_data = <span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>            factor = <span class="hljs-number">1.0</span><br>            top_sum = <span class="hljs-number">0.0</span><br>            bottom_sum = <span class="hljs-number">0.0</span><br>            <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._data_in_window:<br>                value = data[key] <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> data <span class="hljs-keyword">else</span> <span class="hljs-number">0.0</span><br><br>                top_sum += factor * value<br>                bottom_sum += factor<br><br>                <span class="hljs-comment"># Update factor.</span><br>                factor *= (<span class="hljs-number">1.0</span> - <span class="hljs-variable language_">self</span>._alpha)<br><br>            smoothed_data[key] = top_sum / bottom_sum<br><br>        <span class="hljs-keyword">return</span> smoothed_data<br></code></pre></td></tr></table></figure><h4 id="FullBodyPoseEmbedder"><a href="#FullBodyPoseEmbedder" class="headerlink" title="FullBodyPoseEmbedder"></a>FullBodyPoseEmbedder</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FullBodyPoseEmbedder</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Converts 3D pose landmarks into 3D embedding.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, torso_size_multiplier=<span class="hljs-number">2.5</span></span>):<br>        <span class="hljs-comment"># Multiplier to apply to the torso to get minimal body size.</span><br>        <span class="hljs-variable language_">self</span>._torso_size_multiplier = torso_size_multiplier<br><br>        <span class="hljs-comment"># Names of the landmarks as they appear in the prediction.</span><br>        <span class="hljs-variable language_">self</span>._landmark_names = [<br>            <span class="hljs-string">&#x27;nose&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_eye_inner&#x27;</span>, <span class="hljs-string">&#x27;left_eye&#x27;</span>, <span class="hljs-string">&#x27;left_eye_outer&#x27;</span>,<br>            <span class="hljs-string">&#x27;right_eye_inner&#x27;</span>, <span class="hljs-string">&#x27;right_eye&#x27;</span>, <span class="hljs-string">&#x27;right_eye_outer&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_ear&#x27;</span>, <span class="hljs-string">&#x27;right_ear&#x27;</span>,<br>            <span class="hljs-string">&#x27;mouth_left&#x27;</span>, <span class="hljs-string">&#x27;mouth_right&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_shoulder&#x27;</span>, <span class="hljs-string">&#x27;right_shoulder&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_elbow&#x27;</span>, <span class="hljs-string">&#x27;right_elbow&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_wrist&#x27;</span>, <span class="hljs-string">&#x27;right_wrist&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_pinky_1&#x27;</span>, <span class="hljs-string">&#x27;right_pinky_1&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_index_1&#x27;</span>, <span class="hljs-string">&#x27;right_index_1&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_thumb_2&#x27;</span>, <span class="hljs-string">&#x27;right_thumb_2&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_hip&#x27;</span>, <span class="hljs-string">&#x27;right_hip&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_knee&#x27;</span>, <span class="hljs-string">&#x27;right_knee&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_ankle&#x27;</span>, <span class="hljs-string">&#x27;right_ankle&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_heel&#x27;</span>, <span class="hljs-string">&#x27;right_heel&#x27;</span>,<br>            <span class="hljs-string">&#x27;left_foot_index&#x27;</span>, <span class="hljs-string">&#x27;right_foot_index&#x27;</span>,<br>        ]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, landmarks</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Normalizes pose landmarks and converts to embedding</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">          landmarks - NumPy array with 3D landmarks of shape (N, 3).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Result:</span><br><span class="hljs-string">          Numpy array with pose embedding of shape (M, 3) where `M` is the number of</span><br><span class="hljs-string">          pairwise distances defined in `_get_pose_distance_embedding`.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> landmarks.shape[<span class="hljs-number">0</span>] == <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>._landmark_names), <span class="hljs-string">&#x27;Unexpected number of landmarks: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(landmarks.shape[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment"># Get pose landmarks.</span><br>        landmarks = np.copy(landmarks)<br><br>        <span class="hljs-comment"># Normalize landmarks.</span><br>        landmarks = <span class="hljs-variable language_">self</span>._normalize_pose_landmarks(landmarks)<br><br>        <span class="hljs-comment"># Get embedding.</span><br>        embedding = <span class="hljs-variable language_">self</span>._get_pose_distance_embedding(landmarks)<br><br>        <span class="hljs-keyword">return</span> embedding<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_normalize_pose_landmarks</span>(<span class="hljs-params">self, landmarks</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Normalizes landmarks translation and scale.&quot;&quot;&quot;</span><br>        landmarks = np.copy(landmarks)<br><br>        <span class="hljs-comment"># Normalize translation.</span><br>        pose_center = <span class="hljs-variable language_">self</span>._get_pose_center(landmarks)<br>        landmarks -= pose_center<br><br>        <span class="hljs-comment"># Normalize scale.</span><br>        pose_size = <span class="hljs-variable language_">self</span>._get_pose_size(landmarks, <span class="hljs-variable language_">self</span>._torso_size_multiplier)<br>        landmarks /= pose_size<br>        <span class="hljs-comment"># Multiplication by 100 is not required, but makes it eaasier to debug.</span><br>        landmarks *= <span class="hljs-number">100</span><br><br>        <span class="hljs-keyword">return</span> landmarks<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_pose_center</span>(<span class="hljs-params">self, landmarks</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Calculates pose center as point between hips.&quot;&quot;&quot;</span><br>        left_hip = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(<span class="hljs-string">&#x27;left_hip&#x27;</span>)]<br>        right_hip = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(<span class="hljs-string">&#x27;right_hip&#x27;</span>)]<br>        center = (left_hip + right_hip) * <span class="hljs-number">0.5</span><br>        <span class="hljs-keyword">return</span> center<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_pose_size</span>(<span class="hljs-params">self, landmarks, torso_size_multiplier</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Calculates pose size.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        It is the maximum of two values:</span><br><span class="hljs-string">          * Torso size multiplied by `torso_size_multiplier`</span><br><span class="hljs-string">          * Maximum distance from pose center to any pose landmark</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># This approach uses only 2D landmarks to compute pose size.</span><br>        landmarks = landmarks[:, :<span class="hljs-number">2</span>]<br><br>        <span class="hljs-comment"># Hips center.</span><br>        left_hip = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(<span class="hljs-string">&#x27;left_hip&#x27;</span>)]<br>        right_hip = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(<span class="hljs-string">&#x27;right_hip&#x27;</span>)]<br>        hips = (left_hip + right_hip) * <span class="hljs-number">0.5</span><br><br>        <span class="hljs-comment"># Shoulders center.</span><br>        left_shoulder = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(<span class="hljs-string">&#x27;left_shoulder&#x27;</span>)]<br>        right_shoulder = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(<span class="hljs-string">&#x27;right_shoulder&#x27;</span>)]<br>        shoulders = (left_shoulder + right_shoulder) * <span class="hljs-number">0.5</span><br><br>        <span class="hljs-comment"># Torso size as the minimum body size.</span><br>        torso_size = np.linalg.norm(shoulders - hips)<br><br>        <span class="hljs-comment"># Max dist to pose center.</span><br>        pose_center = <span class="hljs-variable language_">self</span>._get_pose_center(landmarks)<br>        max_dist = np.<span class="hljs-built_in">max</span>(np.linalg.norm(landmarks - pose_center, axis=<span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(torso_size * torso_size_multiplier, max_dist)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_pose_distance_embedding</span>(<span class="hljs-params">self, landmarks</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Converts pose landmarks into 3D embedding.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        We use several pairwise 3D distances to form pose embedding. All distances</span><br><span class="hljs-string">        include X and Y components with sign. We differnt types of pairs to cover</span><br><span class="hljs-string">        different pose classes. Feel free to remove some or add new.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">          landmarks - NumPy array with 3D landmarks of shape (N, 3).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Result:</span><br><span class="hljs-string">          Numpy array with pose embedding of shape (M, 3) where `M` is the number of</span><br><span class="hljs-string">          pairwise distances.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        embedding = np.array([<br>            <span class="hljs-comment"># One joint.</span><br><br>            <span class="hljs-variable language_">self</span>._get_distance(<br>                <span class="hljs-variable language_">self</span>._get_average_by_names(landmarks, <span class="hljs-string">&#x27;left_hip&#x27;</span>, <span class="hljs-string">&#x27;right_hip&#x27;</span>),<br>                <span class="hljs-variable language_">self</span>._get_average_by_names(landmarks, <span class="hljs-string">&#x27;left_shoulder&#x27;</span>, <span class="hljs-string">&#x27;right_shoulder&#x27;</span>)),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_shoulder&#x27;</span>, <span class="hljs-string">&#x27;left_elbow&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_shoulder&#x27;</span>, <span class="hljs-string">&#x27;right_elbow&#x27;</span>),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_elbow&#x27;</span>, <span class="hljs-string">&#x27;left_wrist&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_elbow&#x27;</span>, <span class="hljs-string">&#x27;right_wrist&#x27;</span>),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_hip&#x27;</span>, <span class="hljs-string">&#x27;left_knee&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_hip&#x27;</span>, <span class="hljs-string">&#x27;right_knee&#x27;</span>),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_knee&#x27;</span>, <span class="hljs-string">&#x27;left_ankle&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_knee&#x27;</span>, <span class="hljs-string">&#x27;right_ankle&#x27;</span>),<br><br>            <span class="hljs-comment"># Two joints.</span><br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_shoulder&#x27;</span>, <span class="hljs-string">&#x27;left_wrist&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_shoulder&#x27;</span>, <span class="hljs-string">&#x27;right_wrist&#x27;</span>),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_hip&#x27;</span>, <span class="hljs-string">&#x27;left_ankle&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_hip&#x27;</span>, <span class="hljs-string">&#x27;right_ankle&#x27;</span>),<br><br>            <span class="hljs-comment"># Four joints.</span><br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_hip&#x27;</span>, <span class="hljs-string">&#x27;left_wrist&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_hip&#x27;</span>, <span class="hljs-string">&#x27;right_wrist&#x27;</span>),<br><br>            <span class="hljs-comment"># Five joints.</span><br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_shoulder&#x27;</span>, <span class="hljs-string">&#x27;left_ankle&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_shoulder&#x27;</span>, <span class="hljs-string">&#x27;right_ankle&#x27;</span>),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_hip&#x27;</span>, <span class="hljs-string">&#x27;left_wrist&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;right_hip&#x27;</span>, <span class="hljs-string">&#x27;right_wrist&#x27;</span>),<br><br>            <span class="hljs-comment"># Cross body.</span><br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_elbow&#x27;</span>, <span class="hljs-string">&#x27;right_elbow&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_knee&#x27;</span>, <span class="hljs-string">&#x27;right_knee&#x27;</span>),<br><br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_wrist&#x27;</span>, <span class="hljs-string">&#x27;right_wrist&#x27;</span>),<br>            <span class="hljs-variable language_">self</span>._get_distance_by_names(landmarks, <span class="hljs-string">&#x27;left_ankle&#x27;</span>, <span class="hljs-string">&#x27;right_ankle&#x27;</span>),<br><br>            <span class="hljs-comment"># Body bent direction.</span><br><br>            <span class="hljs-comment"># self._get_distance(</span><br>            <span class="hljs-comment">#     self._get_average_by_names(landmarks, &#x27;left_wrist&#x27;, &#x27;left_ankle&#x27;),</span><br>            <span class="hljs-comment">#     landmarks[self._landmark_names.index(&#x27;left_hip&#x27;)]),</span><br>            <span class="hljs-comment"># self._get_distance(</span><br>            <span class="hljs-comment">#     self._get_average_by_names(landmarks, &#x27;right_wrist&#x27;, &#x27;right_ankle&#x27;),</span><br>            <span class="hljs-comment">#     landmarks[self._landmark_names.index(&#x27;right_hip&#x27;)]),</span><br>        ])<br><br>        <span class="hljs-keyword">return</span> embedding<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_average_by_names</span>(<span class="hljs-params">self, landmarks, name_from, name_to</span>):<br>        lmk_from = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(name_from)]<br>        lmk_to = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(name_to)]<br>        <span class="hljs-keyword">return</span> (lmk_from + lmk_to) * <span class="hljs-number">0.5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_distance_by_names</span>(<span class="hljs-params">self, landmarks, name_from, name_to</span>):<br>        lmk_from = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(name_from)]<br>        lmk_to = landmarks[<span class="hljs-variable language_">self</span>._landmark_names.index(name_to)]<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._get_distance(lmk_from, lmk_to)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_distance</span>(<span class="hljs-params">self, lmk_from, lmk_to</span>):<br>        <span class="hljs-keyword">return</span> lmk_to - lmk_from<br><br></code></pre></td></tr></table></figure><h4 id="PoseClassificationVisualizer"><a href="#PoseClassificationVisualizer" class="headerlink" title="PoseClassificationVisualizer"></a>PoseClassificationVisualizer</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageFont<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageDraw<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoseClassificationVisualizer</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Keeps track of classifcations for every frame and renders them.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 class_name,</span><br><span class="hljs-params">                 plot_location_x=<span class="hljs-number">0.05</span>,</span><br><span class="hljs-params">                 plot_location_y=<span class="hljs-number">0.05</span>,</span><br><span class="hljs-params">                 plot_max_width=<span class="hljs-number">0.4</span>,</span><br><span class="hljs-params">                 plot_max_height=<span class="hljs-number">0.4</span>,</span><br><span class="hljs-params">                 plot_figsize=(<span class="hljs-params"><span class="hljs-number">9</span>, <span class="hljs-number">4</span></span>),</span><br><span class="hljs-params">                 plot_x_max=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 plot_y_max=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                 counter_location_x=<span class="hljs-number">0.00</span>,</span><br><span class="hljs-params">                 counter_location_y=<span class="hljs-number">0.50</span>,</span><br><span class="hljs-params">                 counter_font_path=<span class="hljs-string">&#x27;https://github.com/googlefonts/roboto/blob/main/src/hinted/Roboto-Regular.ttf?raw=true&#x27;</span>,</span><br><span class="hljs-params">                 counter_font_color=<span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="hljs-params">                 counter_font_size=<span class="hljs-number">0.15</span></span>):<br>        <span class="hljs-variable language_">self</span>._class_name = class_name<br>        <span class="hljs-variable language_">self</span>._plot_location_x = plot_location_x<br>        <span class="hljs-variable language_">self</span>._plot_location_y = plot_location_y<br>        <span class="hljs-variable language_">self</span>._plot_max_width = plot_max_width<br>        <span class="hljs-variable language_">self</span>._plot_max_height = plot_max_height<br>        <span class="hljs-variable language_">self</span>._plot_figsize = plot_figsize<br>        <span class="hljs-variable language_">self</span>._plot_x_max = plot_x_max<br>        <span class="hljs-variable language_">self</span>._plot_y_max = plot_y_max<br>        <span class="hljs-variable language_">self</span>._counter_location_x = counter_location_x<br>        <span class="hljs-variable language_">self</span>._counter_location_y = counter_location_y<br>        <span class="hljs-variable language_">self</span>._counter_font_path = counter_font_path<br>        <span class="hljs-variable language_">self</span>._counter_font_color = counter_font_color<br>        <span class="hljs-variable language_">self</span>._counter_font_size = counter_font_size<br><br>        <span class="hljs-variable language_">self</span>._counter_font = <span class="hljs-literal">None</span><br><br>        <span class="hljs-variable language_">self</span>._pose_classification_history = []<br>        <span class="hljs-variable language_">self</span>._pose_classification_filtered_history = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 frame,</span><br><span class="hljs-params">                 pose_classification,</span><br><span class="hljs-params">                 pose_classification_filtered,</span><br><span class="hljs-params">                 repetitions_count</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Renders pose classifcation and counter until given frame.&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Extend classification history.</span><br>        <span class="hljs-variable language_">self</span>._pose_classification_history.append(pose_classification)<br>        <span class="hljs-variable language_">self</span>._pose_classification_filtered_history.append(pose_classification_filtered)<br><br>        <span class="hljs-comment"># Output frame with classification plot and counter.</span><br>        output_img = Image.fromarray(frame)<br><br>        output_width = output_img.size[<span class="hljs-number">0</span>]<br>        output_height = output_img.size[<span class="hljs-number">1</span>]<br><br>        <span class="hljs-comment"># Draw the plot.</span><br>        img = <span class="hljs-variable language_">self</span>._plot_classification_history(output_width, output_height)<br>        <span class="hljs-comment"># 修改</span><br>        <span class="hljs-comment"># img.thumbnail((int(output_width * self._plot_max_width),</span><br>        <span class="hljs-comment">#                int(output_height * self._plot_max_height)),</span><br>        <span class="hljs-comment">#               Image.ANTIALIAS)</span><br><br>        img.thumbnail((<span class="hljs-built_in">int</span>(output_width * <span class="hljs-variable language_">self</span>._plot_max_width), <span class="hljs-built_in">int</span>(output_height * <span class="hljs-variable language_">self</span>._plot_max_height)))<br><br>        output_img.paste(img,<br>                         (<span class="hljs-built_in">int</span>(output_width * <span class="hljs-variable language_">self</span>._plot_location_x),<br>                          <span class="hljs-built_in">int</span>(output_height * <span class="hljs-variable language_">self</span>._plot_location_y)))<br><br>        <span class="hljs-comment"># Draw the count.</span><br>        output_img_draw = ImageDraw.Draw(output_img)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._counter_font <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            font_size = <span class="hljs-built_in">int</span>(output_height * <span class="hljs-variable language_">self</span>._counter_font_size)<br>            font_request = requests.get(<span class="hljs-variable language_">self</span>._counter_font_path, allow_redirects=<span class="hljs-literal">True</span>)<br>            <span class="hljs-variable language_">self</span>._counter_font = ImageFont.truetype(io.BytesIO(font_request.content), size=font_size)<br>        output_img_draw.text((output_width * <span class="hljs-variable language_">self</span>._counter_location_x,<br>                              output_height * <span class="hljs-variable language_">self</span>._counter_location_y),<br>                             <span class="hljs-built_in">str</span>(repetitions_count),<br>                             font=<span class="hljs-variable language_">self</span>._counter_font,<br>                             fill=<span class="hljs-variable language_">self</span>._counter_font_color)<br><br>        <span class="hljs-keyword">return</span> output_img<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_plot_classification_history</span>(<span class="hljs-params">self, output_width, output_height</span>):<br>        fig = plt.figure(figsize=<span class="hljs-variable language_">self</span>._plot_figsize)<br><br>        <span class="hljs-keyword">for</span> classification_history <span class="hljs-keyword">in</span> [<span class="hljs-variable language_">self</span>._pose_classification_history,<br>                                       <span class="hljs-variable language_">self</span>._pose_classification_filtered_history]:<br>            y = []<br>            <span class="hljs-keyword">for</span> classification <span class="hljs-keyword">in</span> classification_history:<br>                <span class="hljs-keyword">if</span> classification <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    y.append(<span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>._class_name <span class="hljs-keyword">in</span> classification:<br>                    y.append(classification[<span class="hljs-variable language_">self</span>._class_name])<br>                <span class="hljs-keyword">else</span>:<br>                    y.append(<span class="hljs-number">0</span>)<br>            plt.plot(y, linewidth=<span class="hljs-number">7</span>)<br><br>        plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>, alpha=<span class="hljs-number">0.75</span>)<br>        plt.xlabel(<span class="hljs-string">&#x27;Frame&#x27;</span>)<br>        plt.ylabel(<span class="hljs-string">&#x27;Confidence&#x27;</span>)<br>        plt.title(<span class="hljs-string">&#x27;Classification history for `&#123;&#125;`&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>._class_name))<br>        <span class="hljs-comment"># 修改</span><br>        <span class="hljs-comment"># plt.legend(loc=&#x27;upper right&#x27;)</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._plot_y_max <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            plt.ylim(top=<span class="hljs-variable language_">self</span>._plot_y_max)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._plot_x_max <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            plt.xlim(right=<span class="hljs-variable language_">self</span>._plot_x_max)<br><br>        <span class="hljs-comment"># Convert plot to image.</span><br>        buf = io.BytesIO()<br>        dpi = <span class="hljs-built_in">min</span>(<br>            output_width * <span class="hljs-variable language_">self</span>._plot_max_width / <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>._plot_figsize[<span class="hljs-number">0</span>]),<br>            output_height * <span class="hljs-variable language_">self</span>._plot_max_height / <span class="hljs-built_in">float</span>(<span class="hljs-variable language_">self</span>._plot_figsize[<span class="hljs-number">1</span>]))<br>        fig.savefig(buf, dpi=dpi)<br>        buf.seek(<span class="hljs-number">0</span>)<br>        img = Image.<span class="hljs-built_in">open</span>(buf)<br>        plt.close()<br><br>        <span class="hljs-keyword">return</span> img<br><br></code></pre></td></tr></table></figure><p>对源代码进行了两处修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改一</span><br><span class="hljs-comment"># 将</span><br>img.thumbnail((<span class="hljs-built_in">int</span>(output_width * <span class="hljs-variable language_">self</span>._plot_max_width), <span class="hljs-built_in">int</span>(output_height * <span class="hljs-variable language_">self</span>._plot_max_height)), Image.ANTIALIAS)<br><span class="hljs-comment"># 修改为了</span><br>img.thumbnail((<span class="hljs-built_in">int</span>(output_width * <span class="hljs-variable language_">self</span>._plot_max_width), <span class="hljs-built_in">int</span>(output_height * <span class="hljs-variable language_">self</span>._plot_max_height)))<br><br><span class="hljs-comment"># 修改二</span><br><span class="hljs-comment"># 注释掉了</span><br><span class="hljs-comment"># plt.legend(loc=&#x27;upper right&#x27;)</span><br><span class="hljs-comment"># 否则会报错</span><br></code></pre></td></tr></table></figure><h4 id="PoseClassifier"><a href="#PoseClassifier" class="headerlink" title="PoseClassifier"></a>PoseClassifier</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> Class.PoseSampleClass <span class="hljs-keyword">import</span> PoseSample<br><span class="hljs-keyword">from</span> Class.PoseSampleOutlierClass <span class="hljs-keyword">import</span> PoseSampleOutlier<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoseClassifier</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Classifies pose landmarks.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 pose_samples_folder,</span><br><span class="hljs-params">                 pose_embedder,</span><br><span class="hljs-params">                 file_extension=<span class="hljs-string">&#x27;csv&#x27;</span>,</span><br><span class="hljs-params">                 file_separator=<span class="hljs-string">&#x27;,&#x27;</span>,</span><br><span class="hljs-params">                 n_landmarks=<span class="hljs-number">33</span>,</span><br><span class="hljs-params">                 n_dimensions=<span class="hljs-number">3</span>,</span><br><span class="hljs-params">                 top_n_by_max_distance=<span class="hljs-number">30</span>,</span><br><span class="hljs-params">                 top_n_by_mean_distance=<span class="hljs-number">10</span>,</span><br><span class="hljs-params">                 axes_weights=(<span class="hljs-params"><span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.2</span></span>)</span>):<br>        <span class="hljs-variable language_">self</span>._pose_embedder = pose_embedder<br>        <span class="hljs-variable language_">self</span>._n_landmarks = n_landmarks<br>        <span class="hljs-variable language_">self</span>._n_dimensions = n_dimensions<br>        <span class="hljs-variable language_">self</span>._top_n_by_max_distance = top_n_by_max_distance<br>        <span class="hljs-variable language_">self</span>._top_n_by_mean_distance = top_n_by_mean_distance<br>        <span class="hljs-variable language_">self</span>._axes_weights = axes_weights<br><br>        <span class="hljs-variable language_">self</span>._pose_samples = <span class="hljs-variable language_">self</span>._load_pose_samples(pose_samples_folder,<br>                                                     file_extension,<br>                                                     file_separator,<br>                                                     n_landmarks,<br>                                                     n_dimensions,<br>                                                     pose_embedder)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_load_pose_samples</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                           pose_samples_folder,</span><br><span class="hljs-params">                           file_extension,</span><br><span class="hljs-params">                           file_separator,</span><br><span class="hljs-params">                           n_landmarks,</span><br><span class="hljs-params">                           n_dimensions,</span><br><span class="hljs-params">                           pose_embedder</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Loads pose samples from a given folder.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Required folder structure:</span><br><span class="hljs-string">          neutral_standing.csv</span><br><span class="hljs-string">          pushups_down.csv</span><br><span class="hljs-string">          pushups_up.csv</span><br><span class="hljs-string">          squats_down.csv</span><br><span class="hljs-string">          ...</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Required CSV structure:</span><br><span class="hljs-string">          sample_00001,x1,y1,z1,x2,y2,z2,....</span><br><span class="hljs-string">          sample_00002,x1,y1,z1,x2,y2,z2,....</span><br><span class="hljs-string">          ...</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Each file in the folder represents one pose class.</span><br>        file_names = [name <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> os.listdir(pose_samples_folder) <span class="hljs-keyword">if</span> name.endswith(file_extension)]<br><br>        pose_samples = []<br>        <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> file_names:<br>            <span class="hljs-comment"># Use file name as pose class name.</span><br>            class_name = file_name[:-(<span class="hljs-built_in">len</span>(file_extension) + <span class="hljs-number">1</span>)]<br><br>            <span class="hljs-comment"># Parse CSV.</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(pose_samples_folder, file_name)) <span class="hljs-keyword">as</span> csv_file:<br>                csv_reader = csv.reader(csv_file, delimiter=file_separator)<br>                <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> csv_reader:<br>                    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(row) == n_landmarks * n_dimensions + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Wrong number of values: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(row))<br>                    landmarks = np.array(row[<span class="hljs-number">1</span>:], np.float32).reshape([n_landmarks, n_dimensions])<br>                    pose_samples.append(PoseSample(<br>                        name=row[<span class="hljs-number">0</span>],<br>                        landmarks=landmarks,<br>                        class_name=class_name,<br>                        embedding=pose_embedder(landmarks),<br>                    ))<br><br>        <span class="hljs-keyword">return</span> pose_samples<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_pose_sample_outliers</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Classifies each sample against the entire database.&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Find outliers in target poses</span><br>        outliers = []<br>        <span class="hljs-keyword">for</span> sample <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._pose_samples:<br>            <span class="hljs-comment"># Find nearest poses for the target one.</span><br>            pose_landmarks = sample.landmarks.copy()<br>            pose_classification = <span class="hljs-variable language_">self</span>.__call__(pose_landmarks)<br>            class_names = [class_name <span class="hljs-keyword">for</span> class_name, count <span class="hljs-keyword">in</span> pose_classification.items() <span class="hljs-keyword">if</span> count == <span class="hljs-built_in">max</span>(pose_classification.values())]<br><br>            <span class="hljs-comment"># Sample is an outlier if nearest poses have different class or more than</span><br>            <span class="hljs-comment"># one pose class is detected as nearest.</span><br>            <span class="hljs-keyword">if</span> sample.class_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> class_names <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(class_names) != <span class="hljs-number">1</span>:<br>                outliers.append(PoseSampleOutlier(sample, class_names, pose_classification))<br><br>        <span class="hljs-keyword">return</span> outliers<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, pose_landmarks</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Classifies given pose.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Classification is done in two stages:</span><br><span class="hljs-string">          * First we pick top-N samples by MAX distance. It allows to remove samples</span><br><span class="hljs-string">            that are almost the same as given pose, but has few joints bent in the</span><br><span class="hljs-string">            other direction.</span><br><span class="hljs-string">          * Then we pick top-N samples by MEAN distance. After outliers are removed</span><br><span class="hljs-string">            on a previous step, we can pick samples that are closes on average.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">          pose_landmarks: NumPy array with 3D landmarks of shape (N, 3).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">          Dictionary with count of nearest pose samples from the database. Sample:</span><br><span class="hljs-string">            &#123;</span><br><span class="hljs-string">              &#x27;pushups_down&#x27;: 8,</span><br><span class="hljs-string">              &#x27;pushups_up&#x27;: 2,</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Check that provided and target poses have the same shape.</span><br>        <span class="hljs-keyword">assert</span> pose_landmarks.shape == (<span class="hljs-variable language_">self</span>._n_landmarks, <span class="hljs-variable language_">self</span>._n_dimensions), <span class="hljs-string">&#x27;Unexpected shape: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(pose_landmarks.shape)<br><br>        <span class="hljs-comment"># Get given pose embedding.</span><br>        pose_embedding = <span class="hljs-variable language_">self</span>._pose_embedder(pose_landmarks)<br>        flipped_pose_embedding = <span class="hljs-variable language_">self</span>._pose_embedder(pose_landmarks * np.array([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]))<br><br>        <span class="hljs-comment"># Filter by max distance.</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># That helps to remove outliers - poses that are almost the same as the</span><br>        <span class="hljs-comment"># given one, but has one joint bent into another direction and actually</span><br>        <span class="hljs-comment"># represnt a different pose class.</span><br>        max_dist_heap = []<br>        <span class="hljs-keyword">for</span> sample_idx, sample <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>._pose_samples):<br>            max_dist = <span class="hljs-built_in">min</span>(<br>                np.<span class="hljs-built_in">max</span>(np.<span class="hljs-built_in">abs</span>(sample.embedding - pose_embedding) * <span class="hljs-variable language_">self</span>._axes_weights),<br>                np.<span class="hljs-built_in">max</span>(np.<span class="hljs-built_in">abs</span>(sample.embedding - flipped_pose_embedding) * <span class="hljs-variable language_">self</span>._axes_weights),<br>            )<br>            max_dist_heap.append([max_dist, sample_idx])<br><br>        max_dist_heap = <span class="hljs-built_in">sorted</span>(max_dist_heap, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>        max_dist_heap = max_dist_heap[:<span class="hljs-variable language_">self</span>._top_n_by_max_distance]<br><br>        <span class="hljs-comment"># Filter by mean distance.</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># After removing outliers we can find the nearest pose by mean distance.</span><br>        mean_dist_heap = []<br>        <span class="hljs-keyword">for</span> _, sample_idx <span class="hljs-keyword">in</span> max_dist_heap:<br>            sample = <span class="hljs-variable language_">self</span>._pose_samples[sample_idx]<br>            mean_dist = <span class="hljs-built_in">min</span>(<br>                np.mean(np.<span class="hljs-built_in">abs</span>(sample.embedding - pose_embedding) * <span class="hljs-variable language_">self</span>._axes_weights),<br>                np.mean(np.<span class="hljs-built_in">abs</span>(sample.embedding - flipped_pose_embedding) * <span class="hljs-variable language_">self</span>._axes_weights),<br>            )<br>            mean_dist_heap.append([mean_dist, sample_idx])<br><br>        mean_dist_heap = <span class="hljs-built_in">sorted</span>(mean_dist_heap, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>        mean_dist_heap = mean_dist_heap[:<span class="hljs-variable language_">self</span>._top_n_by_mean_distance]<br><br>        <span class="hljs-comment"># Collect results into map: (class_name -&gt; n_samples)</span><br>        class_names = [<span class="hljs-variable language_">self</span>._pose_samples[sample_idx].class_name <span class="hljs-keyword">for</span> _, sample_idx <span class="hljs-keyword">in</span> mean_dist_heap]<br>        result = &#123;class_name: class_names.count(class_name) <span class="hljs-keyword">for</span> class_name <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(class_names)&#125;<br><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h4 id="PoseSample"><a href="#PoseSample" class="headerlink" title="PoseSample"></a>PoseSample</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoseSample</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, landmarks, class_name, embedding</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.landmarks = landmarks<br>        <span class="hljs-variable language_">self</span>.class_name = class_name<br><br>        <span class="hljs-variable language_">self</span>.embedding = embedding<br></code></pre></td></tr></table></figure><h4 id="PoseSampleOutlier"><a href="#PoseSampleOutlier" class="headerlink" title="PoseSampleOutlier"></a>PoseSampleOutlier</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoseSampleOutlier</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sample, detected_class, all_classes</span>):<br>        <span class="hljs-variable language_">self</span>.sample = sample<br>        <span class="hljs-variable language_">self</span>.detected_class = detected_class<br>        <span class="hljs-variable language_">self</span>.all_classes = all_classes<br></code></pre></td></tr></table></figure><h4 id="RepetitionCounter"><a href="#RepetitionCounter" class="headerlink" title="RepetitionCounter"></a>RepetitionCounter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RepetitionCounter</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Counts number of repetitions of given target pose class.&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, class_name, enter_threshold=<span class="hljs-number">6</span>, exit_threshold=<span class="hljs-number">4</span></span>):<br>        <span class="hljs-variable language_">self</span>._class_name = class_name<br><br>        <span class="hljs-comment"># If pose counter passes given threshold, then we enter the pose.</span><br>        <span class="hljs-variable language_">self</span>._enter_threshold = enter_threshold<br>        <span class="hljs-variable language_">self</span>._exit_threshold = exit_threshold<br><br>        <span class="hljs-comment"># Either we are in given pose or not.</span><br>        <span class="hljs-variable language_">self</span>._pose_entered = <span class="hljs-literal">False</span><br><br>        <span class="hljs-comment"># Number of times we exited the pose.</span><br>        <span class="hljs-variable language_">self</span>._n_repeats = <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">n_repeats</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._n_repeats<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, pose_classification</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Counts number of repetitions happend until given frame.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        We use two thresholds. First you need to go above the higher one to enter</span><br><span class="hljs-string">        the pose, and then you need to go below the lower one to exit it. Difference</span><br><span class="hljs-string">        between the thresholds makes it stable to prediction jittering (which will</span><br><span class="hljs-string">        cause wrong counts in case of having only one threshold).</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">          pose_classification: Pose classification dictionary on current frame.</span><br><span class="hljs-string">            Sample:</span><br><span class="hljs-string">              &#123;</span><br><span class="hljs-string">                &#x27;pushups_down&#x27;: 8.3,</span><br><span class="hljs-string">                &#x27;pushups_up&#x27;: 1.7,</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">          Integer counter of repetitions.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Get pose confidence.</span><br>        pose_confidence = <span class="hljs-number">0.0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._class_name <span class="hljs-keyword">in</span> pose_classification:<br>            pose_confidence = pose_classification[<span class="hljs-variable language_">self</span>._class_name]<br><br>        <span class="hljs-comment"># On the very first frame or if we were out of the pose, just check if we</span><br>        <span class="hljs-comment"># entered it on this frame and update the state.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>._pose_entered:<br>            <span class="hljs-variable language_">self</span>._pose_entered = pose_confidence &gt; <span class="hljs-variable language_">self</span>._enter_threshold<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._n_repeats<br><br>        <span class="hljs-comment"># If we were in the pose and are exiting it, then increase the counter and</span><br>        <span class="hljs-comment"># update the state.</span><br>        <span class="hljs-keyword">if</span> pose_confidence &lt; <span class="hljs-variable language_">self</span>._exit_threshold:<br>            <span class="hljs-variable language_">self</span>._n_repeats += <span class="hljs-number">1</span><br>            <span class="hljs-variable language_">self</span>._pose_entered = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._n_repeats<br></code></pre></td></tr></table></figure><h3 id="6-个方法"><a href="#6-个方法" class="headerlink" title="6 个方法"></a>6 个方法</h3><h4 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h4><p>Code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_image</span>(<span class="hljs-params">img</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Shows output PIL image.&quot;&quot;&quot;</span><br>    plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>    plt.imshow(img)<br>    plt.show()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">look_image</span>(<span class="hljs-params">img</span>):<br>    <span class="hljs-comment"># opencv读入图像格式为BGR，matplotlib可视化格式为RGB，因此需将BGR转RGB</span><br>    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)<br>    plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>    plt.imshow(img_RGB)<br>    plt.show()<br></code></pre></td></tr></table></figure><h4 id="ProcessFrame"><a href="#ProcessFrame" class="headerlink" title="ProcessFrame"></a>ProcessFrame</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> mediapipe.python.solutions <span class="hljs-keyword">import</span> drawing_utils <span class="hljs-keyword">as</span> mp_drawing<br><span class="hljs-keyword">from</span> mediapipe.python.solutions <span class="hljs-keyword">import</span> pose <span class="hljs-keyword">as</span> mp_pose<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_frame</span>(<span class="hljs-params">img, pose</span>):<br>    <span class="hljs-comment"># 记录该帧开始处理的时间</span><br>    start_time = time.time()<br><br>    <span class="hljs-comment"># 获取图像宽高</span><br>    h, w = img.shape[<span class="hljs-number">0</span>], img.shape[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment"># BGR转RGB</span><br>    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)<br>    <span class="hljs-comment"># 将RGB图像输入模型，获取预测结果</span><br>    results = pose.process(img_RGB)<br><br>    <span class="hljs-keyword">if</span> results.pose_landmarks:  <span class="hljs-comment"># 若检测出人体关键点</span><br><br>        <span class="hljs-comment"># 可视化关键点及骨架连线</span><br>        mp_drawing.draw_landmarks(img, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):  <span class="hljs-comment"># 遍历所有33个关键点，可视化</span><br><br>            <span class="hljs-comment"># 获取该关键点的三维坐标</span><br>            cx = <span class="hljs-built_in">int</span>(results.pose_landmarks.landmark[i].x * w)<br>            cy = <span class="hljs-built_in">int</span>(results.pose_landmarks.landmark[i].y * h)<br>            cz = results.pose_landmarks.landmark[i].z<br><br>            radius = <span class="hljs-number">10</span><br><br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 鼻尖</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]:  <span class="hljs-comment"># 肩膀</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">223</span>, <span class="hljs-number">155</span>, <span class="hljs-number">6</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">23</span>, <span class="hljs-number">24</span>]:  <span class="hljs-comment"># 髋关节</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">1</span>, <span class="hljs-number">240</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>]:  <span class="hljs-comment"># 胳膊肘</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">140</span>, <span class="hljs-number">47</span>, <span class="hljs-number">240</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">25</span>, <span class="hljs-number">26</span>]:  <span class="hljs-comment"># 膝盖</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>]:  <span class="hljs-comment"># 手腕和脚腕</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">223</span>, <span class="hljs-number">155</span>, <span class="hljs-number">60</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>]:  <span class="hljs-comment"># 左手</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">94</span>, <span class="hljs-number">218</span>, <span class="hljs-number">121</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>]:  <span class="hljs-comment"># 右手</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">16</span>, <span class="hljs-number">144</span>, <span class="hljs-number">247</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">27</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>]:  <span class="hljs-comment"># 左脚</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">29</span>, <span class="hljs-number">123</span>, <span class="hljs-number">243</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">28</span>, <span class="hljs-number">30</span>, <span class="hljs-number">32</span>]:  <span class="hljs-comment"># 右脚</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">193</span>, <span class="hljs-number">182</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]:  <span class="hljs-comment"># 嘴</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">205</span>, <span class="hljs-number">235</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]:  <span class="hljs-comment"># 眼及脸颊</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">94</span>, <span class="hljs-number">218</span>, <span class="hljs-number">121</span>), -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 其它关键点</span><br>                img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># 展示图片</span><br>        <span class="hljs-comment"># look_img(img)</span><br><br>    <span class="hljs-keyword">else</span>:<br>        scaler = <span class="hljs-number">1</span><br>        failure_str = <span class="hljs-string">&#x27;No Person&#x27;</span><br>        img = cv2.putText(img, failure_str, (<span class="hljs-number">25</span> * scaler, <span class="hljs-number">100</span> * scaler), cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">1.25</span> * scaler, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span> * scaler)<br>        <span class="hljs-comment"># print(&#x27;从图像中未检测出人体关键点，报错。&#x27;)</span><br><br>    <span class="hljs-comment"># 记录该帧处理完毕的时间</span><br>    end_time = time.time()<br>    <span class="hljs-comment"># 计算每秒处理图像帧数FPS</span><br>    FPS = <span class="hljs-number">1</span> / (end_time - start_time)<br><br>    scaler = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 在图像上写FPS数值，参数依次为：图片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细</span><br>    img = cv2.putText(img, <span class="hljs-string">&#x27;FPS  &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(FPS)), (<span class="hljs-number">25</span> * scaler, <span class="hljs-number">50</span> * scaler), cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">1.25</span> * scaler, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span> * scaler)<br>    <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> mediapipe <span class="hljs-keyword">as</span> mp<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> Function.Show <span class="hljs-keyword">import</span> look_image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image</span>(<span class="hljs-params">path</span>):<br><br>    <span class="hljs-comment"># 导入solution</span><br>    mp_pose = mp.solutions.pose<br>    <span class="hljs-comment"># # 导入绘图函数</span><br>    mp_drawing = mp.solutions.drawing_utils<br><br>    <span class="hljs-comment"># 导入模型</span><br>    pose = mp_pose.Pose(static_image_mode=<span class="hljs-literal">True</span>,        <span class="hljs-comment"># 是静态图片还是连续视频帧</span><br>                        model_complexity=<span class="hljs-number">2</span>,            <span class="hljs-comment"># 选择人体姿态关键点检测模型，0性能差但快，2性能好但慢，1介于两者之间</span><br>                        smooth_landmarks=<span class="hljs-literal">True</span>,         <span class="hljs-comment"># 是否平滑关键点</span><br>                        enable_segmentation=<span class="hljs-literal">True</span>,      <span class="hljs-comment"># 是否人体抠图</span><br>                        min_detection_confidence=<span class="hljs-number">0.5</span>,  <span class="hljs-comment"># 置信度阈值</span><br>                        min_tracking_confidence=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># 追踪阈值</span><br><br>    <span class="hljs-comment"># 从图片文件读入图像，opencv读入为BGR格式</span><br>    img = cv2.imread(path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;original&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    look_image(img)<br><br>    <span class="hljs-comment"># BGR转RGB</span><br>    img_RGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)<br>    <span class="hljs-comment"># 将RGB图像输入模型，获取预测结果</span><br>    results = pose.process(img_RGB)<br><br>    mp_drawing.draw_landmarks(img, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    look_image(img)<br><br>    <span class="hljs-comment"># 三维真实物理坐标系</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;world&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    mp_drawing.plot_landmarks(results.pose_world_landmarks, mp_pose.POSE_CONNECTIONS)<br><br>    <span class="hljs-comment"># 抠图</span><br>    <span class="hljs-comment"># mask 表示每个像素对应人体的概率</span><br>    mask = results.segmentation_mask<br>    <span class="hljs-built_in">print</span>(mask.shape)<br>    <span class="hljs-built_in">print</span>(img.shape)<br>    <span class="hljs-comment"># 阈值过滤</span><br>    mask = mask &gt; <span class="hljs-number">0.5</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mask&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    plt.imshow(mask)<br>    plt.show()<br><br>    <span class="hljs-comment"># 单通道转三通道</span><br>    mask_3 = np.stack((mask, mask, mask), axis=-<span class="hljs-number">1</span>)<br>    MASK_COLOR = [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">0</span>]<br>    fg_image = np.zeros(img.shape, dtype=np.uint8)<br>    fg_image[:] = MASK_COLOR<br>    <span class="hljs-comment"># 获得前景人像</span><br>    FG_img = np.where(mask_3, img, fg_image)<br>    <span class="hljs-comment"># 获得抠掉前景人像的背景</span><br>    BG_img = np.where(~mask_3, img, fg_image)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;forward&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    look_image(FG_img)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;back&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    look_image(BG_img)<br><br>    <span class="hljs-comment"># 所有关键点的检测结果</span><br>    <span class="hljs-comment"># print(results.pose_landmarks)</span><br>    <span class="hljs-comment"># 关节连接</span><br>    <span class="hljs-comment"># print(mp_pose.POSE_CONNECTIONS)</span><br><br>    <span class="hljs-comment"># 左胳膊肘关键点的归一化坐标</span><br>    <span class="hljs-built_in">print</span>(results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ELBOW])<br>    <span class="hljs-comment"># results.pose_landmarks.landmark[13]</span><br>    <span class="hljs-comment"># results.pose_landmarks.landmark[13].x</span><br><br>    <span class="hljs-comment"># img.shape = (high, width, channel)</span><br>    h = img.shape[<span class="hljs-number">0</span>]<br>    w = img.shape[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment"># 左胳膊肘关键点像素横坐标</span><br>    <span class="hljs-built_in">print</span>(results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ELBOW].x * w)<br>    <span class="hljs-comment"># 左胳膊肘关键点像素纵坐标</span><br>    <span class="hljs-built_in">print</span>(results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ELBOW].y * h)<br><br>    <span class="hljs-comment"># 获取该关键点的三维坐标</span><br>    cx = <span class="hljs-built_in">int</span>(results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE].x * w)<br>    cy = <span class="hljs-built_in">int</span>(results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE].y * h)<br>    cz = results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE].z<br><br>    <span class="hljs-comment"># 绘制圆，目标图像，圆心坐标，半径，BGR颜色，线宽 -1 表示填充</span><br>    img = cv2.circle(img, (cx, cy), <span class="hljs-number">15</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;knee&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br>    look_image(img)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):<br>        <span class="hljs-comment"># 获取该关键点的三维坐标</span><br>        cx = <span class="hljs-built_in">int</span>(results.pose_landmarks.landmark[i].x * w)<br>        cy = <span class="hljs-built_in">int</span>(results.pose_landmarks.landmark[i].y * h)<br>        cz = results.pose_landmarks.landmark[i].z<br><br>        radius = <span class="hljs-number">10</span><br><br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 鼻尖</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]:  <span class="hljs-comment"># 肩膀</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">223</span>, <span class="hljs-number">155</span>, <span class="hljs-number">6</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">23</span>, <span class="hljs-number">24</span>]:  <span class="hljs-comment"># 髋关节</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">1</span>, <span class="hljs-number">240</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>]:  <span class="hljs-comment"># 胳膊肘</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">140</span>, <span class="hljs-number">47</span>, <span class="hljs-number">240</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">25</span>, <span class="hljs-number">26</span>]:  <span class="hljs-comment"># 膝盖</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>]:  <span class="hljs-comment"># 手腕和脚腕</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">223</span>, <span class="hljs-number">155</span>, <span class="hljs-number">60</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>]:  <span class="hljs-comment"># 左手</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">94</span>, <span class="hljs-number">218</span>, <span class="hljs-number">121</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>]:  <span class="hljs-comment"># 右手</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">16</span>, <span class="hljs-number">144</span>, <span class="hljs-number">247</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">27</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>]:  <span class="hljs-comment"># 左脚</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">29</span>, <span class="hljs-number">123</span>, <span class="hljs-number">243</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">28</span>, <span class="hljs-number">30</span>, <span class="hljs-number">32</span>]:  <span class="hljs-comment"># 右脚</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">193</span>, <span class="hljs-number">182</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]:  <span class="hljs-comment"># 嘴</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">205</span>, <span class="hljs-number">235</span>, <span class="hljs-number">255</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]:  <span class="hljs-comment"># 眼及脸颊</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">94</span>, <span class="hljs-number">218</span>, <span class="hljs-number">121</span>), -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 其它关键点</span><br>            img = cv2.circle(img, (cx, cy), radius, (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), -<span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;all&#x27;</span>)<br>    look_image(img)<br></code></pre></td></tr></table></figure><h4 id="HandleWithDataset"><a href="#HandleWithDataset" class="headerlink" title="HandleWithDataset"></a>HandleWithDataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Class.BootstrapHelperClass <span class="hljs-keyword">import</span> BootstrapHelper<br><span class="hljs-keyword">from</span> Class.FullBodyPoseEmbedderClass <span class="hljs-keyword">import</span> FullBodyPoseEmbedder<br><span class="hljs-keyword">from</span> Class.PoseClassifierClass <span class="hljs-keyword">import</span> PoseClassifier<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_with_dataset</span>(<span class="hljs-params">images_in_folder_path, images_out_folder_path, csvs_out_folder_path</span>):<br><br>    bootstrap_images_in_folder = images_in_folder_path<br>    bootstrap_images_out_folder = images_out_folder_path<br>    bootstrap_csvs_out_folder = csvs_out_folder_path<br><br>    bootstrap_helper = BootstrapHelper(<br>        images_in_folder=bootstrap_images_in_folder,<br>        images_out_folder=bootstrap_images_out_folder,<br>        csvs_out_folder=bootstrap_csvs_out_folder<br>    )<br><br>    <span class="hljs-comment"># 检测每个动作有多少张图</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dataset&#x27;</span>)<br>    bootstrap_helper.print_images_in_statistics()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------&#x27;</span>)<br><br>    <span class="hljs-comment"># 提取特征</span><br>    bootstrap_helper.bootstrap(per_pose_class_limit=<span class="hljs-literal">None</span>)<br><br>    <span class="hljs-comment"># 检查每个动作有多少张图提取了特征</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;recognize&#x27;</span>)<br>    bootstrap_helper.print_images_out_statistics()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------&#x27;</span>)<br><br>    pose_embedder = FullBodyPoseEmbedder()<br><br>    <span class="hljs-comment"># 参数</span><br>    pose_classifier = PoseClassifier(<br>        pose_samples_folder=bootstrap_csvs_out_folder,<br>        pose_embedder=pose_embedder,<br>        top_n_by_max_distance=<span class="hljs-number">30</span>,<br>        top_n_by_mean_distance=<span class="hljs-number">10</span><br>    )<br><br>    <span class="hljs-comment"># 过滤异常数据</span><br>    outliers = pose_classifier.find_pose_sample_outliers()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Number of outliers: &#x27;</span>, <span class="hljs-built_in">len</span>(outliers))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------&#x27;</span>)<br><br>    <span class="hljs-comment"># 看一下异常数据</span><br>    bootstrap_helper.analyze_outliers(outliers)<br><br>    <span class="hljs-comment"># 移除异常</span><br>    bootstrap_helper.remove_outliers(outliers)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------&#x27;</span>)<br>    bootstrap_helper.align_images_and_csvs(print_removed_items=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;last&#x27;</span>)<br>    bootstrap_helper.print_images_out_statistics()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump_for_the_app</span>(<span class="hljs-params">path</span>):<br>    pose_samples_folder = path<br>    pose_samples_csv_path = <span class="hljs-string">&#x27;squat_csvs_out_basic.csv&#x27;</span><br>    file_extension = <span class="hljs-string">&#x27;csv&#x27;</span><br>    file_separator = <span class="hljs-string">&#x27;,&#x27;</span><br><br>    <span class="hljs-comment"># Each file in the folder represents one pose class.</span><br>    file_names = [name <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> os.listdir(pose_samples_folder) <span class="hljs-keyword">if</span> name.endswith(file_extension)]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pose_samples_csv_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> csv_out:<br>        csv_out_writer = csv.writer(csv_out, delimiter=file_separator, quoting=csv.QUOTE_MINIMAL)<br>        <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> file_names:<br>            <span class="hljs-comment"># Use file name as pose class name.</span><br>            class_name = file_name[:-(<span class="hljs-built_in">len</span>(file_extension) + <span class="hljs-number">1</span>)]<br><br>            <span class="hljs-comment"># One file line: `sample_00001,x1,y1,x2,y2,....`.</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(pose_samples_folder, file_name)) <span class="hljs-keyword">as</span> csv_in:<br>                csv_in_reader = csv.reader(csv_in, delimiter=file_separator)<br>                <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> csv_in_reader:<br>                    row.insert(<span class="hljs-number">1</span>, class_name)<br>                    csv_out_writer.writerow(row)<br></code></pre></td></tr></table></figure><h4 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> mediapipe <span class="hljs-keyword">as</span> mp<br><span class="hljs-keyword">from</span> Function.ProcessFrame <span class="hljs-keyword">import</span> process_frame<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">camera</span>():<br>    <span class="hljs-comment"># 导入solution</span><br>    mp_pose = mp.solutions.pose<br><br>    <span class="hljs-comment"># 导入模型</span><br>    pose = mp_pose.Pose(static_image_mode=<span class="hljs-literal">False</span>,       <span class="hljs-comment"># 是静态图片还是连续视频帧</span><br>                        model_complexity=<span class="hljs-number">2</span>,            <span class="hljs-comment"># 选择人体姿态关键点检测模型，0性能差但快，2性能好但慢，1介于两者之间</span><br>                        smooth_landmarks=<span class="hljs-literal">True</span>,         <span class="hljs-comment"># 是否平滑关键点</span><br>                        min_detection_confidence=<span class="hljs-number">0.5</span>,  <span class="hljs-comment"># 置信度阈值</span><br>                        min_tracking_confidence=<span class="hljs-number">0.5</span>)   <span class="hljs-comment"># 追踪阈值</span><br><br>    cap = cv2.VideoCapture(<span class="hljs-number">1</span>)<br>    cap.<span class="hljs-built_in">open</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 无限循环，直到break被触发</span><br>    <span class="hljs-keyword">while</span> cap.isOpened():<br>        <span class="hljs-comment"># 获取画面</span><br>        success, frame = cap.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> success:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment">## !!!处理帧函数</span><br>        frame = process_frame(img=frame, pose=pose)<br><br>        <span class="hljs-comment"># 展示处理后的三通道图像</span><br>        cv2.imshow(<span class="hljs-string">&#x27;my_window&#x27;</span>, frame)<br><br>        <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> [<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>), <span class="hljs-number">27</span>]:  <span class="hljs-comment"># 按键盘上的q或esc退出（在英文输入法下）</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># 关闭摄像头</span><br>    cap.release()<br><br>    <span class="hljs-comment"># 关闭图像窗口</span><br>    cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-keyword">from</span> Class.FullBodyPoseEmbedderClass <span class="hljs-keyword">import</span> FullBodyPoseEmbedder<br><span class="hljs-keyword">from</span> Class.PoseClassifierClass <span class="hljs-keyword">import</span> PoseClassifier<br><span class="hljs-keyword">from</span> Class.EMADictSmoothingClass <span class="hljs-keyword">import</span> EMADictSmoothing<br><span class="hljs-keyword">from</span> Class.PoseClassificationVisualizerClass <span class="hljs-keyword">import</span> PoseClassificationVisualizer<br><span class="hljs-keyword">from</span> Class.RepetitionCounterClass <span class="hljs-keyword">import</span> RepetitionCounter<br><br><span class="hljs-keyword">from</span> mediapipe.python.solutions <span class="hljs-keyword">import</span> drawing_utils <span class="hljs-keyword">as</span> mp_drawing<br><span class="hljs-keyword">from</span> mediapipe.python.solutions <span class="hljs-keyword">import</span> pose <span class="hljs-keyword">as</span> mp_pose<br><br><span class="hljs-keyword">from</span> Function.Show <span class="hljs-keyword">import</span> show_image, look_image<br><span class="hljs-keyword">from</span> Function.ProcessFrame <span class="hljs-keyword">import</span> process_frame<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">application</span>(<span class="hljs-params">datasource, v_path, c_path, key, enter_threshold, exit_threshold, frames, is_debug</span>):<br><br>    <span class="hljs-keyword">if</span> datasource == <span class="hljs-string">&#x27;video&#x27;</span>:<br>        video_path = v_path<br>        cap = cv2.VideoCapture(video_path)<br>        cap_n_frames = cap.get(cv2.CAP_PROP_FRAME_COUNT)        <span class="hljs-comment"># CAP_PROP_FRAME_COUNT 获取视频帧数 fps * time</span><br>    <span class="hljs-keyword">elif</span> datasource == <span class="hljs-string">&#x27;camera&#x27;</span>:<br>        cap = cv2.VideoCapture(<span class="hljs-number">1</span>)<br>        cap.<span class="hljs-built_in">open</span>(<span class="hljs-number">0</span>)<br>        cap_n_frames = frames<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;cap‘s frames is &#x27;</span>, cap_n_frames)<br><br>    class_name = key<br>    pose_samples_folder = c_path<br>    pose_tracker = mp_pose.Pose()<br><br>    <span class="hljs-comment"># Initialize embedder.</span><br>    pose_embedder = FullBodyPoseEmbedder()<br><br>    <span class="hljs-comment"># Initialize classifier.</span><br>    <span class="hljs-comment"># Check that you are using the same parameters as during bootstrapping.</span><br>    <span class="hljs-comment"># 参数</span><br>    pose_classifier = PoseClassifier(<br>        pose_samples_folder=pose_samples_folder,<br>        pose_embedder=pose_embedder,<br>        top_n_by_max_distance=<span class="hljs-number">30</span>,<br>        top_n_by_mean_distance=<span class="hljs-number">10</span><br>    )<br><br>    <span class="hljs-comment"># Initialize EMA smoothing.</span><br>    <span class="hljs-comment"># 参数</span><br>    pose_classification_filter = EMADictSmoothing(<br>        window_size=<span class="hljs-number">10</span>,<br>        alpha=<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-comment"># 指定动作的两个阈值</span><br>    <span class="hljs-comment"># 参数</span><br>    repetition_counter = RepetitionCounter(<br>        class_name=class_name,<br>        enter_threshold=enter_threshold,<br>        exit_threshold=exit_threshold)<br><br>    <span class="hljs-comment"># Initialize renderer.</span><br>    <span class="hljs-comment"># 参数</span><br>    pose_classification_visualizer = PoseClassificationVisualizer(<br>        class_name=class_name,<br>        plot_x_max=cap_n_frames,<br>        <span class="hljs-comment"># Graphic looks nicer if it&#x27;s the same as `top_n_by_mean_distance`.</span><br>        plot_y_max=<span class="hljs-number">10</span>)      <span class="hljs-comment"># graph的Y轴高度</span><br><br>    <span class="hljs-comment"># 无限循环，直到break被触发</span><br>    <span class="hljs-comment"># while cap.isOpen():</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 获取画面</span><br>        success, input_frame = cap.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> success:<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> [<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>), <span class="hljs-number">27</span>]:  <span class="hljs-comment"># 按键盘上的q或esc退出（在英文输入法下）</span><br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># Run pose tracker.</span><br>        input_frame = cv2.cvtColor(input_frame, cv2.COLOR_BGR2RGB)<br><br>        <span class="hljs-keyword">if</span> is_debug:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STEP I&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Image Type is &#x27;</span>, <span class="hljs-built_in">type</span>(input_frame))  <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Image Shape is &#x27;</span>, input_frame.shape)<br>            show_image(input_frame)<br>            look_image(input_frame)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>        result = pose_tracker.process(image=input_frame)<br>        pose_landmarks = result.pose_landmarks<br><br>        <span class="hljs-comment"># Draw pose prediction.</span><br>        output_frame = input_frame.copy()<br>        <span class="hljs-comment"># 有肢体数据</span><br>        <span class="hljs-keyword">if</span> pose_landmarks <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            mp_drawing.draw_landmarks(image=output_frame, landmark_list=pose_landmarks, connections=mp_pose.POSE_CONNECTIONS)<br><br>            <span class="hljs-keyword">if</span> is_debug:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STEP II&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Image Type is &#x27;</span>, <span class="hljs-built_in">type</span>(output_frame))  <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Image Shape is &#x27;</span>, output_frame.shape)<br>                show_image(output_frame)<br>                look_image(output_frame)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> pose_landmarks <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># Get landmarks.</span><br>            frame_height, frame_width = output_frame.shape[<span class="hljs-number">0</span>], output_frame.shape[<span class="hljs-number">1</span>]<br>            pose_landmarks = np.array([[lmk.x * frame_width, lmk.y * frame_height, lmk.z * frame_width]<br>                                       <span class="hljs-keyword">for</span> lmk <span class="hljs-keyword">in</span> pose_landmarks.landmark], dtype=np.float32)<br>            <span class="hljs-keyword">assert</span> pose_landmarks.shape == (<span class="hljs-number">33</span>, <span class="hljs-number">3</span>), <span class="hljs-string">&#x27;Unexpected landmarks shape: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(pose_landmarks.shape)<br><br>            <span class="hljs-comment"># Classify the pose on the current frame.</span><br>            pose_classification = pose_classifier(pose_landmarks)<br><br>            <span class="hljs-comment"># Smooth classification using EMA.</span><br>            pose_classification_filtered = pose_classification_filter(pose_classification)<br><br>            <span class="hljs-comment"># Count repetitions.</span><br>            repetitions_count = repetition_counter(pose_classification_filtered)<br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># No pose =&gt; no classification on current frame.</span><br>            pose_classification = <span class="hljs-literal">None</span><br><br>            <span class="hljs-comment"># Still add empty classification to the filter to maintaing correct</span><br>            <span class="hljs-comment"># smoothing for future frames.</span><br>            pose_classification_filtered = pose_classification_filter(<span class="hljs-built_in">dict</span>())<br>            pose_classification_filtered = <span class="hljs-literal">None</span><br><br>            <span class="hljs-comment"># Don&#x27;t update the counter presuming that person is &#x27;frozen&#x27;. Just</span><br>            <span class="hljs-comment"># take the latest repetitions count.</span><br>            repetitions_count = repetition_counter.n_repeats<br><br>        <span class="hljs-comment"># Draw classification plot and repetition counter.</span><br>        output_frame = pose_classification_visualizer(<br>            frame=output_frame,<br>            pose_classification=pose_classification,<br>            pose_classification_filtered=pose_classification_filtered,<br>            repetitions_count=repetitions_count)<br><br>        <span class="hljs-keyword">if</span> is_debug:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STEP III&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Image Type is &#x27;</span>, <span class="hljs-built_in">type</span>(output_frame))  <span class="hljs-comment"># &lt;class &#x27;PIL.Image.Image&#x27;&gt;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Image Shape is &#x27;</span>, np.array(output_frame).shape)  <span class="hljs-comment"># Image no Shape</span><br>            show_image(output_frame)<br>            <span class="hljs-comment"># look_image(output_frame)        # 无法打开Image格式</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>        <span class="hljs-comment"># PIL.Image格式转OpenCV</span><br>        output_frame = cv2.cvtColor(np.asarray(output_frame), cv2.COLOR_RGB2BGR)<br><br>        <span class="hljs-comment"># cv2.imshow(&#x27;camera&#x27;, output_frame)</span><br><br>        <span class="hljs-keyword">if</span> is_debug:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STEP IV&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(output_frame))  <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br>            <span class="hljs-built_in">print</span>(output_frame.shape)<br>            show_image(output_frame)<br>            look_image(output_frame)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>        output_frame = process_frame(img=output_frame, pose=pose_tracker)<br><br>        <span class="hljs-keyword">if</span> is_debug:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;STEP V&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(output_frame))  <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br>            <span class="hljs-built_in">print</span>(output_frame.shape)<br>            show_image(output_frame)<br>            look_image(output_frame)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----&#x27;</span>)<br><br>        <span class="hljs-comment"># 展示处理后的三通道图像</span><br>        <span class="hljs-comment"># cv2.namedWindow(&quot;video&quot;, 0)</span><br>        <span class="hljs-comment"># cv2.resizeWindow(&quot;video&quot;, 1080, 1920)</span><br>        cv2.imshow(<span class="hljs-string">&#x27;camera&#x27;</span>, output_frame)<br><br>    <span class="hljs-comment"># 关闭摄像头</span><br>    cap.release()<br><br>    <span class="hljs-comment"># 关闭图像窗口</span><br>    cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Function.HandleWithDataset <span class="hljs-keyword">import</span> handle_with_dataset, dump_for_the_app<br><span class="hljs-keyword">from</span> Function.Application <span class="hljs-keyword">import</span> application<br><span class="hljs-keyword">from</span> Function.Camera <span class="hljs-keyword">import</span> camera<br><span class="hljs-keyword">from</span> Function.Image <span class="hljs-keyword">import</span> image<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    dataset_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/dataset&#x27;</span>            <span class="hljs-comment"># 数据集文件夹路径</span><br>    images_out_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/images_out&#x27;</span>      <span class="hljs-comment"># 关键点检测后的图像文件夹</span><br>    csvs_out_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/csvs_out&#x27;</span>          <span class="hljs-comment"># 关键点检测后的坐标文件夹</span><br>    video_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/squat-4.mp4&#x27;</span>          <span class="hljs-comment"># 视频</span><br>    image_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/pose.jpg&#x27;</span>             <span class="hljs-comment"># 图片</span><br>    key = <span class="hljs-string">&#x27;down&#x27;</span><br>    is_debug = <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># yolo是做目标检测的，不是做关键点检测的</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">switch</span>(<span class="hljs-params">num</span>):<br>        <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>:<br>            image(path=image_path)<br>        <span class="hljs-keyword">elif</span> num == <span class="hljs-number">1</span>:<br>            camera()<br>        <span class="hljs-keyword">elif</span> num == <span class="hljs-number">2</span>:<br>            handle_with_dataset(dataset_path, images_out_path, csvs_out_path)<br>            <span class="hljs-comment"># dump_for_the_app(csvs_out_path)</span><br>        <span class="hljs-keyword">elif</span> num == <span class="hljs-number">3</span>:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            datasource: camera or video</span><br><span class="hljs-string">            v_path: 视频路径</span><br><span class="hljs-string">            c_path: 坐标文件夹</span><br><span class="hljs-string">            key:</span><br><span class="hljs-string">            enter_threshold: 置信度判定阈值</span><br><span class="hljs-string">            exit_threshold: 置信度回落阈值</span><br><span class="hljs-string">            frames: 帧数*时间</span><br><span class="hljs-string">            is_debug:</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            application(datasource=<span class="hljs-string">&#x27;camera&#x27;</span>, v_path=<span class="hljs-literal">None</span>, c_path=csvs_out_path,<br>                        key=key, enter_threshold=<span class="hljs-number">4</span>, exit_threshold=<span class="hljs-number">2</span>, frames=<span class="hljs-number">300</span>, is_debug=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">elif</span> num == <span class="hljs-number">4</span>:<br>            application(datasource=<span class="hljs-string">&#x27;video&#x27;</span>, v_path=video_path, c_path=csvs_out_path,<br>                        key=key, enter_threshold=<span class="hljs-number">4</span>, exit_threshold=<span class="hljs-number">2</span>, frames=<span class="hljs-literal">None</span>, is_debug=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error Number&#x27;</span>)<br><br>    switch(<span class="hljs-number">0</span>)<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    0：识别图片</span><br><span class="hljs-string">    1: 调用摄像头</span><br><span class="hljs-string">    2: 训练数据集</span><br><span class="hljs-string">    3: 摄像头计数</span><br><span class="hljs-string">    4: 视频计数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>人体姿态识别 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 展示 PDF 文件</title>
    <link href="/2023/09/01/Hexo-%E5%B1%95%E7%A4%BA-PDF-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/09/01/Hexo-%E5%B1%95%E7%A4%BA-PDF-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="安装-hexo-pdf-插件"><a href="#安装-hexo-pdf-插件" class="headerlink" title="安装 hexo-pdf 插件"></a>安装 hexo-pdf 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-pdf<br></code></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在需要的文章添加如下语句：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% pdf YourURL %&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 除余和取整</title>
    <link href="/2023/08/31/Swift-%E9%99%A4%E4%BD%99%E5%92%8C%E5%8F%96%E6%95%B4/"/>
    <url>/2023/08/31/Swift-%E9%99%A4%E4%BD%99%E5%92%8C%E5%8F%96%E6%95%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="常规方法"><a href="#常规方法" class="headerlink" title="常规方法"></a>常规方法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> x <span class="hljs-operator">=</span> <span class="hljs-number">8.625</span><br><span class="hljs-built_in">print</span>(x <span class="hljs-operator">/</span> <span class="hljs-number">0.75</span>)<br><span class="hljs-comment">// Prints &quot;11.5&quot;</span><br><br><span class="hljs-comment">// 取整</span><br><span class="hljs-keyword">let</span> q <span class="hljs-operator">=</span> (x <span class="hljs-operator">/</span> <span class="hljs-number">0.75</span>).rounded(.towardZero)<br><span class="hljs-comment">// q == 11.0</span><br><br><span class="hljs-comment">// 除余</span><br><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> x.truncatingRemainder(dividingBy: <span class="hljs-number">0.75</span>)<br><span class="hljs-comment">// r == 0.375</span><br><br><span class="hljs-keyword">let</span> x1 <span class="hljs-operator">=</span> <span class="hljs-number">0.75</span> <span class="hljs-operator">*</span> q <span class="hljs-operator">+</span> r<br><span class="hljs-comment">// x1 == 8.625</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://developer.apple.com/documentation/corefoundation/cgfloat/2882763-truncatingremainder">truncatingRemainder(dividingBy:)</a></li></ul><p>或者</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> number1 <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> number2 <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">let</span> quotient <span class="hljs-operator">=</span> number1 <span class="hljs-operator">/</span> number2<span class="hljs-comment">// 3</span><br><span class="hljs-keyword">let</span> remainder <span class="hljs-operator">=</span> number1 <span class="hljs-operator">%</span> number2<span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>也可以使用 <a href="https://developer.apple.com/documentation/swift/int/quotientandremainder(dividingby:)">quotientAndRemainder(dividingBy:)</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">quotientAndRemainder</span>(<span class="hljs-params">dividingBy</span> <span class="hljs-params">rhs</span>: <span class="hljs-type">Int</span>) -&gt; (quotient: <span class="hljs-type">Int</span>, remainder: <span class="hljs-type">Int</span>)<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> number1 <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> number2 <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">let</span> answer <span class="hljs-operator">=</span> number1.quotientAndRemainder(dividingBy: number2)<br>answer.quotient<span class="hljs-comment">// 3</span><br>answer.remainder<span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h2 id="是否能整除"><a href="#是否能整除" class="headerlink" title="是否能整除"></a>是否能整除</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> number <span class="hljs-operator">=</span> <span class="hljs-number">8</span><br><span class="hljs-keyword">if</span> number <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个整数可以被2整除&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个整数不能被2整除&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>呼吸代谢监测：代码</title>
    <link href="/2023/08/29/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%EF%BC%9A%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/08/29/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%EF%BC%9A%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>呼吸代谢监测系统的实现原理可以看「呼吸代谢监测：原理」这篇文章，这里不多做介绍。</p><h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><h3 id="气体流量采集"><a href="#气体流量采集" class="headerlink" title="气体流量采集"></a>气体流量采集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">get_flow_thread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ser, error, x_data, y_data, lock, unlock</span>):<br>        <span class="hljs-built_in">super</span>(get_flow_thread, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.ser = ser<br><br>        <span class="hljs-variable language_">self</span>.error = error              <span class="hljs-comment"># 流量传感器平均误差</span><br>        <span class="hljs-variable language_">self</span>.threshold = <span class="hljs-number">0.05</span>           <span class="hljs-comment"># 阈值，用来过滤流量传感器误差</span><br><br>        <span class="hljs-variable language_">self</span>.x_data = x_data<br>        <span class="hljs-variable language_">self</span>.y_data = y_data<br>        <span class="hljs-variable language_">self</span>.lock = lock<br>        <span class="hljs-variable language_">self</span>.unlock = unlock<br><br>        <span class="hljs-variable language_">self</span>.tic = time.time()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.get_data()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">self</span>):<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">ATPS_to_STPD</span>(<span class="hljs-params">s</span>):<br>            <span class="hljs-comment"># 百帕hPa to mmHg</span><br>            <span class="hljs-comment"># https://industrial.panasonic.cn/ea/presureunit</span><br>            <span class="hljs-comment"># https://www.sojson.com/convert/pressure.html</span><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">transform_mmHg</span>(<span class="hljs-params">p</span>):<br>                p = p * <span class="hljs-number">0.750065</span><br>                <span class="hljs-keyword">return</span> p<br><br>            e_temperature = <span class="hljs-number">34</span>                  <span class="hljs-comment"># COSMED systems assume the temperature of expired air to be 34C.</span><br>            pB = transform_mmHg(<span class="hljs-number">1008</span>)           <span class="hljs-comment"># 来源天气，单位hPa百帕，要转化成mmHg</span><br>            pH2O = <span class="hljs-number">39.9</span>                         <span class="hljs-comment"># 单位mmHg，34度气体温度对应100%水蒸气含量压力</span><br>            x1 = <span class="hljs-number">273</span> / (<span class="hljs-number">273</span> + e_temperature)    <span class="hljs-comment"># 273K = 0C</span><br>            x2 = (pB - pH2O) / <span class="hljs-number">760</span>              <span class="hljs-comment"># 760mmHg 标准大气压</span><br>            STPD_factor = x1 * x2<br>            s = s * STPD_factor<br>            <span class="hljs-keyword">return</span> s<br>        <span class="hljs-comment"># N线程锁定</span><br>        <span class="hljs-variable language_">self</span>.lock.lock()<br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = <span class="hljs-variable language_">self</span>.ser.readline()<br>            result = ATPS_to_STPD(<span class="hljs-built_in">float</span>(sensor_value) - <span class="hljs-variable language_">self</span>.error)      <span class="hljs-comment"># 流量传感器在没有气体流动的情况下也存在读数，所以要校准</span><br>            y = result <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(<span class="hljs-variable language_">self</span>.y_data[-<span class="hljs-number">1</span>] - result) &gt; <span class="hljs-variable language_">self</span>.threshold <span class="hljs-keyword">else</span> <span class="hljs-variable language_">self</span>.y_data[-<span class="hljs-number">1</span>]       <span class="hljs-comment"># 如果新的读值与上一个值的差距小于阈值则放弃新读值</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># 没有对传感器数据进行校验，所以串口读取的值可能是字符串，字符串无法to float，所以需要手动赋值</span><br>            <span class="hljs-comment"># 一般来说会手动赋予上一个值，如果数据为空也就是第一次出现无法 to float时，则=0</span><br>            y = <span class="hljs-variable language_">self</span>.y_data[-<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.y_data) != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-comment"># print(e)</span><br><br>        toc = time.time()<br>        x = toc - <span class="hljs-variable language_">self</span>.tic<br><br>        <span class="hljs-variable language_">self</span>.x_data.append(x)<br>        <span class="hljs-variable language_">self</span>.y_data.append(y)<br>        <span class="hljs-comment"># N+1线程解锁</span><br>        <span class="hljs-variable language_">self</span>.unlock.unlock()<br></code></pre></td></tr></table></figure><h3 id="气体浓度采集"><a href="#气体浓度采集" class="headerlink" title="气体浓度采集"></a>气体浓度采集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">get_gas_thread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ser, environment, x_data, y_data, lock, unlock</span>):<br>        <span class="hljs-built_in">super</span>(get_gas_thread, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.ser = ser<br>        <span class="hljs-variable language_">self</span>.environment = environment      <span class="hljs-comment"># 环境的O2、CO2浓度</span><br>        <span class="hljs-variable language_">self</span>.x_data = x_data<br>        <span class="hljs-variable language_">self</span>.y_data = y_data<br>        <span class="hljs-variable language_">self</span>.lock = lock<br>        <span class="hljs-variable language_">self</span>.unlock = unlock<br><br>        <span class="hljs-variable language_">self</span>.tic = time.time()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.get_data()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.lock.lock()<br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = <span class="hljs-variable language_">self</span>.ser.readline()<br>            y = <span class="hljs-built_in">float</span>(sensor_value)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            y = <span class="hljs-variable language_">self</span>.y_data[-<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.y_data) != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-variable language_">self</span>.environment  <span class="hljs-comment"># 如果是字符串，则赋予上一个值，如果数据长度为0则直接赋予环境浓度</span><br>            <span class="hljs-comment"># print(e)</span><br><br>        toc = time.time()<br>        x = toc - <span class="hljs-variable language_">self</span>.tic<br><br>        <span class="hljs-variable language_">self</span>.x_data.append(x)<br>        <span class="hljs-variable language_">self</span>.y_data.append(y)<br>        <span class="hljs-variable language_">self</span>.unlock.unlock()<br></code></pre></td></tr></table></figure><h2 id="数据计算"><a href="#数据计算" class="headerlink" title="数据计算"></a>数据计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">calculate_thread</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, e_O2, e_CO2,</span><br><span class="hljs-params">                 x_data, VO2_data, VCO2_data, RQ_data,</span><br><span class="hljs-params">                 O2_data, CO2_data, flow_data, lock, unlock</span>):<br>        <span class="hljs-built_in">super</span>(calculate_thread, <span class="hljs-variable language_">self</span>).__init__()<br><br>        <span class="hljs-variable language_">self</span>.e_O2 = e_O2<br>        <span class="hljs-variable language_">self</span>.e_CO2 = e_CO2<br>        <span class="hljs-variable language_">self</span>.x_data = x_data<br>        <span class="hljs-variable language_">self</span>.VO2_data = VO2_data<br>        <span class="hljs-variable language_">self</span>.VCO2_data = VCO2_data<br>        <span class="hljs-variable language_">self</span>.RQ_data = RQ_data<br>        <span class="hljs-variable language_">self</span>.O2_data = O2_data<br>        <span class="hljs-variable language_">self</span>.CO2_data = CO2_data<br>        <span class="hljs-variable language_">self</span>.flow_data = flow_data<br>        <span class="hljs-variable language_">self</span>.lock = lock<br>        <span class="hljs-variable language_">self</span>.unlock = unlock<br><br>        <span class="hljs-variable language_">self</span>.tic = time.time()<br>        <span class="hljs-variable language_">self</span>.flow_win = np.zeros(<span class="hljs-number">1800</span>)<span class="hljs-comment"># 取 3min 的气体流量作为平均数，也意味着 3min 后才能测得真实数据</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.calculate()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> VO2<br>        <span class="hljs-keyword">global</span> RQ<br>        <span class="hljs-keyword">global</span> EE<br>        <span class="hljs-keyword">global</span> Ve<br><br>        <span class="hljs-variable language_">self</span>.lock.lock()<br>        toc = time.time()<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">average</span>():<br>            <span class="hljs-variable language_">self</span>.flow_win[:-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.flow_win[<span class="hljs-number">1</span>:]  <span class="hljs-comment"># 移动</span><br>            <span class="hljs-variable language_">self</span>.flow_win[-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.flow_data[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 将新值写入</span><br>            <span class="hljs-keyword">return</span> np.mean(<span class="hljs-variable language_">self</span>.flow_win)<br><br>        fi_O2 = <span class="hljs-variable language_">self</span>.e_O2                       <span class="hljs-comment"># 吸入空气O2浓度</span><br>        fi_CO2 = <span class="hljs-variable language_">self</span>.e_CO2                     <span class="hljs-comment"># 吸入空气CO2浓度</span><br>        fe_O2 = <span class="hljs-variable language_">self</span>.O2_data[-<span class="hljs-number">1</span>]                <span class="hljs-comment"># 呼出气体O2浓度</span><br>        fe_CO2 = <span class="hljs-variable language_">self</span>.CO2_data[-<span class="hljs-number">1</span>]              <span class="hljs-comment"># 呼出气体O2浓度</span><br>        Ve = average()<br><br>        fi_O2 /= <span class="hljs-number">100</span>        <span class="hljs-comment"># 20 -&gt; 20%</span><br>        fi_CO2 /= <span class="hljs-number">100</span><br>        fe_O2 /= <span class="hljs-number">100</span><br>        fe_CO2 /= <span class="hljs-number">100</span><br><br>        fi_N2 = <span class="hljs-number">1</span> - fi_O2 - fi_CO2              <span class="hljs-comment"># 计算吸入空气中和呼出气体的N2浓度</span><br>        fe_N2 = <span class="hljs-number">1</span> - fe_O2 - fe_CO2<br>        Vi = Ve * fe_N2 / fi_N2                 <span class="hljs-comment"># 由于人体不与N2发生反应，所以N2的量是不变的，根据这个计算吸入气流量</span><br>        VO2 = (Vi * fi_O2) - (Ve * fe_O2)       <span class="hljs-comment"># 计算O2消耗速率，由于Ve的单位（传感器的单位）是L/min，所以耗氧量也是L/min</span><br>        VCO2 = (Ve * fe_CO2) - (Vi * fi_CO2)    <span class="hljs-comment"># 计算CO2产生速率</span><br><br>        <span class="hljs-comment"># VO2 != 0 ? VCO2/VO2 : 0</span><br>        <span class="hljs-comment"># RQ = VCO2 / VO2 if VO2 != 0 else 0</span><br><br>        <span class="hljs-keyword">if</span> VO2 &gt; <span class="hljs-number">0.01</span> <span class="hljs-keyword">and</span> VCO2 &gt; <span class="hljs-number">0.01</span>:          <span class="hljs-comment"># 呼吸的时候才计算RQ，其他时候计算出来的RQ没有意义</span><br>            RQ = VCO2 / VO2                     <span class="hljs-comment"># RQ呼吸商=RER呼吸交换率</span><br>        <span class="hljs-keyword">else</span>:<br>            RQ = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_EE</span>(<span class="hljs-params">a, b</span>):                 <span class="hljs-comment"># O2与EE对应关系</span><br>            z = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) &lt; <span class="hljs-number">0.71</span>:<br>                z = <span class="hljs-number">4.686</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.71</span>:<br>                z = <span class="hljs-number">4.69</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.72</span>:<br>                z = <span class="hljs-number">4.702</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.73</span>:<br>                z = <span class="hljs-number">4.714</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.74</span>:<br>                z = <span class="hljs-number">4.727</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.75</span>:<br>                z = <span class="hljs-number">4.738</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.76</span>:<br>                z = <span class="hljs-number">4.751</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.77</span>:<br>                z = <span class="hljs-number">4.764</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.78</span>:<br>                z = <span class="hljs-number">4.776</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.79</span>:<br>                z = <span class="hljs-number">4.788</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.80</span>:<br>                z = <span class="hljs-number">4.801</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.81</span>:<br>                z = <span class="hljs-number">4.813</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.82</span>:<br>                z = <span class="hljs-number">4.825</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.83</span>:<br>                z = <span class="hljs-number">4.838</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.84</span>:<br>                z = <span class="hljs-number">4.85</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.85</span>:<br>                z = <span class="hljs-number">4.862</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.86</span>:<br>                z = <span class="hljs-number">4.875</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.87</span>:<br>                z = <span class="hljs-number">4.887</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.88</span>:<br>                z = <span class="hljs-number">4.899</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.89</span>:<br>                z = <span class="hljs-number">4.911</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.90</span>:<br>                z = <span class="hljs-number">4.924</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.91</span>:<br>                z = <span class="hljs-number">4.936</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.92</span>:<br>                z = <span class="hljs-number">4.948</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.93</span>:<br>                z = <span class="hljs-number">4.961</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.94</span>:<br>                z = <span class="hljs-number">4.973</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.95</span>:<br>                z = <span class="hljs-number">4.985</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.96</span>:<br>                z = <span class="hljs-number">4.998</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.97</span>:<br>                z = <span class="hljs-number">5.01</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.98</span>:<br>                z = <span class="hljs-number">5.022</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) == <span class="hljs-number">0.99</span>:<br>                z = <span class="hljs-number">5.035</span> * b<br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">round</span>(a, <span class="hljs-number">2</span>) &gt; <span class="hljs-number">0.99</span>:<br>                z = <span class="hljs-number">5.047</span> * b<br>            <span class="hljs-keyword">return</span> z<br><br>        EE = calculate_EE(RQ, VO2)<br>        x = toc - <span class="hljs-variable language_">self</span>.tic<br>        <span class="hljs-variable language_">self</span>.x_data.append(x)<br>        <span class="hljs-variable language_">self</span>.VO2_data.append(VO2)<br>        <span class="hljs-variable language_">self</span>.VCO2_data.append(VCO2)<br>        <span class="hljs-variable language_">self</span>.RQ_data.append(RQ)<br>        <span class="hljs-variable language_">self</span>.unlock.unlock()<br></code></pre></td></tr></table></figure><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, title</span>):<br>        <span class="hljs-built_in">super</span>(Window, <span class="hljs-variable language_">self</span>).__init__()<br><br>        <span class="hljs-variable language_">self</span>.title = title<br>        palette = <span class="hljs-variable language_">self</span>.palette()<br>        palette.setColor(<span class="hljs-variable language_">self</span>.backgroundRole(), QColor(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        <span class="hljs-variable language_">self</span>.setPalette(palette)<br>        <span class="hljs-variable language_">self</span>.setAutoFillBackground(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 不设置也可以</span><br>        <span class="hljs-variable language_">self</span>.resize(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>)<br><br>        <span class="hljs-variable language_">self</span>.flow_error = flow_error<br>        <span class="hljs-variable language_">self</span>.environment_O2 = environment_O2<br>        <span class="hljs-variable language_">self</span>.environment_CO2 = environment_CO2<br><br>        <span class="hljs-variable language_">self</span>.O2_ser = O2_ser<br>        <span class="hljs-variable language_">self</span>.CO2_ser = CO2_ser<br>        <span class="hljs-variable language_">self</span>.flow_ser = flow_ser<br><br>        <span class="hljs-variable language_">self</span>.setWindowTitle(<span class="hljs-variable language_">self</span>.title)<br>        <span class="hljs-variable language_">self</span>.O2_plot, <span class="hljs-variable language_">self</span>.CO2_plot, <span class="hljs-variable language_">self</span>.flow_plot = pg.PlotWidget(), pg.PlotWidget(), pg.PlotWidget()<br>        <span class="hljs-variable language_">self</span>.VO2_plot, <span class="hljs-variable language_">self</span>.VCO2_plot, <span class="hljs-variable language_">self</span>.RQ_plot = pg.PlotWidget(), pg.PlotWidget(), pg.PlotWidget()<br><br>        <span class="hljs-variable language_">self</span>.O2_color = QColor(<span class="hljs-number">255</span>, <span class="hljs-number">228</span>, <span class="hljs-number">196</span>)<br>        <span class="hljs-variable language_">self</span>.CO2_color = QColor(<span class="hljs-number">255</span>, <span class="hljs-number">182</span>, <span class="hljs-number">193</span>)<br>        <span class="hljs-variable language_">self</span>.flow_color = QColor(<span class="hljs-number">135</span>, <span class="hljs-number">206</span>, <span class="hljs-number">235</span>)<br>        <span class="hljs-variable language_">self</span>.VO2_color = QColor(<span class="hljs-number">240</span>, <span class="hljs-number">255</span>, <span class="hljs-number">240</span>)<br>        <span class="hljs-variable language_">self</span>.VCO2_color = QColor(<span class="hljs-number">240</span>, <span class="hljs-number">255</span>, <span class="hljs-number">240</span>)<br>        <span class="hljs-variable language_">self</span>.RQ_color = QColor(<span class="hljs-number">255</span>, <span class="hljs-number">248</span>, <span class="hljs-number">220</span>)<br><br>        <span class="hljs-variable language_">self</span>.O2_curve = <span class="hljs-variable language_">self</span>.O2_plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.O2_color, width=<span class="hljs-number">1</span>)<br>        )<br><br>        <span class="hljs-variable language_">self</span>.CO2_curve = <span class="hljs-variable language_">self</span>.CO2_plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.CO2_color, width=<span class="hljs-number">1</span>)<br>        )<br><br>        <span class="hljs-variable language_">self</span>.flow_curve = <span class="hljs-variable language_">self</span>.flow_plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.flow_color, width=<span class="hljs-number">1</span>)<br>        )<br><br>        <span class="hljs-variable language_">self</span>.VO2_curve = <span class="hljs-variable language_">self</span>.VO2_plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.VO2_color, width=<span class="hljs-number">1</span>)<br>        )<br>        <span class="hljs-variable language_">self</span>.VCO2_curve = <span class="hljs-variable language_">self</span>.VCO2_plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.VCO2_color, width=<span class="hljs-number">1</span>)<br>        )<br><br>        <span class="hljs-variable language_">self</span>.RQ_curve = <span class="hljs-variable language_">self</span>.RQ_plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.RQ_color, width=<span class="hljs-number">1</span>)<br>        )<br><br>        <span class="hljs-variable language_">self</span>.init_pg_O2()<br>        <span class="hljs-variable language_">self</span>.init_pg_CO2()<br>        <span class="hljs-variable language_">self</span>.init_pg_flow()<br>        <span class="hljs-variable language_">self</span>.init_pg_VO2()<br>        <span class="hljs-variable language_">self</span>.init_pg_VCO2()<br>        <span class="hljs-variable language_">self</span>.init_pg_RQ()<br><br>        <span class="hljs-variable language_">self</span>.O2_x, <span class="hljs-variable language_">self</span>.O2_y = [], []<br>        <span class="hljs-variable language_">self</span>.CO2_x, <span class="hljs-variable language_">self</span>.CO2_y = [], []<br>        <span class="hljs-variable language_">self</span>.flow_x, <span class="hljs-variable language_">self</span>.flow_y = [], []<br><br>        <span class="hljs-variable language_">self</span>.VO2, <span class="hljs-variable language_">self</span>.VCO2, <span class="hljs-variable language_">self</span>.RQ = [], [], []<br>        <span class="hljs-variable language_">self</span>.calculate_x = []       <span class="hljs-comment"># 用于 VO2、VCO2、RQ 的 x 轴显示</span><br><br>        <span class="hljs-variable language_">self</span>.O2_mutex = QMutex()<br>        <span class="hljs-variable language_">self</span>.CO2_mutex = QMutex()<br>        <span class="hljs-variable language_">self</span>.flow_mutex = QMutex()<br>        <span class="hljs-variable language_">self</span>.calculate_mutex = QMutex()<br><br>        <span class="hljs-variable language_">self</span>.O2_thread = get_gas_thread(<span class="hljs-variable language_">self</span>.O2_ser, <span class="hljs-variable language_">self</span>.environment_O2, <span class="hljs-variable language_">self</span>.O2_x, <span class="hljs-variable language_">self</span>.O2_y, <span class="hljs-variable language_">self</span>.O2_mutex, <span class="hljs-variable language_">self</span>.CO2_mutex)<br>        <span class="hljs-variable language_">self</span>.CO2_thread = get_gas_thread(<span class="hljs-variable language_">self</span>.CO2_ser, <span class="hljs-variable language_">self</span>.environment_CO2, <span class="hljs-variable language_">self</span>.CO2_x, <span class="hljs-variable language_">self</span>.CO2_y, <span class="hljs-variable language_">self</span>.CO2_mutex, <span class="hljs-variable language_">self</span>.flow_mutex)<br>        <span class="hljs-variable language_">self</span>.flow_thread = get_flow_thread(<span class="hljs-variable language_">self</span>.flow_ser, <span class="hljs-variable language_">self</span>.flow_error, <span class="hljs-variable language_">self</span>.flow_x, <span class="hljs-variable language_">self</span>.flow_y, <span class="hljs-variable language_">self</span>.flow_mutex, <span class="hljs-variable language_">self</span>.calculate_mutex)<br>        <span class="hljs-variable language_">self</span>.calculate_thread = calculate_thread(<span class="hljs-variable language_">self</span>.environment_O2, <span class="hljs-variable language_">self</span>.environment_CO2, <span class="hljs-variable language_">self</span>.calculate_x, <span class="hljs-variable language_">self</span>.VO2, <span class="hljs-variable language_">self</span>.VCO2, <span class="hljs-variable language_">self</span>.RQ, <span class="hljs-variable language_">self</span>.O2_y, <span class="hljs-variable language_">self</span>.CO2_y, <span class="hljs-variable language_">self</span>.flow_y,<br>                                                 <span class="hljs-variable language_">self</span>.calculate_mutex, <span class="hljs-variable language_">self</span>.O2_mutex)<br><br>        <span class="hljs-variable language_">self</span>.CO2_mutex.lock()<br>        <span class="hljs-variable language_">self</span>.flow_mutex.lock()<br>        <span class="hljs-variable language_">self</span>.calculate_mutex.lock()<br><br>        <span class="hljs-variable language_">self</span>.O2_thread.start()<br>        <span class="hljs-variable language_">self</span>.CO2_thread.start()<br>        <span class="hljs-variable language_">self</span>.flow_thread.start()<br>        <span class="hljs-variable language_">self</span>.calculate_thread.start()<br><br>        layout_vs_1 = QVBoxLayout()<br>        layout_vs_2 = QVBoxLayout()<br>        layout_hs_1 = QHBoxLayout()<br>        layout_vs_3 = QVBoxLayout()<br><br>        layout_vs_1.addWidget(<span class="hljs-variable language_">self</span>.O2_plot)<br>        layout_vs_1.addWidget(<span class="hljs-variable language_">self</span>.CO2_plot)<br>        layout_vs_1.addWidget(<span class="hljs-variable language_">self</span>.flow_plot)<br><br>        layout_vs_2.addWidget(<span class="hljs-variable language_">self</span>.VO2_plot)<br>        layout_vs_2.addWidget(<span class="hljs-variable language_">self</span>.VCO2_plot)<br>        layout_vs_2.addWidget(<span class="hljs-variable language_">self</span>.RQ_plot)<br><br>        <span class="hljs-variable language_">self</span>.label = QLabel(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.label.resize(<span class="hljs-number">1920</span>, <span class="hljs-number">100</span>)<br><br>        <span class="hljs-variable language_">self</span>.button = QPushButton(<span class="hljs-string">&#x27;导出数据&#x27;</span>, <span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.button.clicked.connect(<span class="hljs-keyword">lambda</span>: <span class="hljs-variable language_">self</span>.output_data())<br>        <span class="hljs-variable language_">self</span>.button.resize(<span class="hljs-number">1920</span>, <span class="hljs-number">100</span>)<br><br>        layout_hs_1.addLayout(layout_vs_1)<br>        layout_hs_1.addLayout(layout_vs_2)<br>        layout_vs_3.addLayout(layout_hs_1)<br>        layout_vs_3.addWidget(<span class="hljs-variable language_">self</span>.label)<br>        layout_vs_3.addWidget(<span class="hljs-variable language_">self</span>.button)<br><br>        <span class="hljs-variable language_">self</span>.central_widget = QWidget()<br>        <span class="hljs-variable language_">self</span>.central_widget.setLayout(layout_vs_3)<br>        <span class="hljs-variable language_">self</span>.setCentralWidget(<span class="hljs-variable language_">self</span>.central_widget)<br><br>        <span class="hljs-comment"># 100ms 刷新一次绘图</span><br>        <span class="hljs-variable language_">self</span>.timer = QTimer()<br>        <span class="hljs-variable language_">self</span>.timer.timeout.connect(<span class="hljs-keyword">lambda</span>: <span class="hljs-variable language_">self</span>.plot_data())<br>        <span class="hljs-variable language_">self</span>.timer.start(<span class="hljs-number">100</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_data</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.O2_curve.setData(<span class="hljs-variable language_">self</span>.O2_x, <span class="hljs-variable language_">self</span>.O2_y)<br>        <span class="hljs-variable language_">self</span>.CO2_curve.setData(<span class="hljs-variable language_">self</span>.CO2_x, <span class="hljs-variable language_">self</span>.CO2_y)<br>        <span class="hljs-variable language_">self</span>.flow_curve.setData(<span class="hljs-variable language_">self</span>.flow_x, <span class="hljs-variable language_">self</span>.flow_y)<br>        <span class="hljs-variable language_">self</span>.VO2_curve.setData(<span class="hljs-variable language_">self</span>.calculate_x, <span class="hljs-variable language_">self</span>.VO2)<br>        <span class="hljs-variable language_">self</span>.VCO2_curve.setData(<span class="hljs-variable language_">self</span>.calculate_x, <span class="hljs-variable language_">self</span>.VCO2)<br>        <span class="hljs-variable language_">self</span>.RQ_curve.setData(<span class="hljs-variable language_">self</span>.calculate_x, <span class="hljs-variable language_">self</span>.RQ)<br>        <span class="hljs-comment"># RQ约为0.8-0.85</span><br>        <span class="hljs-comment"># 1. 運動習慣對身體能量來源消耗的影響(文献)</span><br>        <span class="hljs-comment">#    人體安靜休息時的RER約0.82、在極低強度(散步、慢跑、輕鬆騎車)運動時的RER反而下降(約0.75至0.80之間)。</span><br>        <span class="hljs-comment"># 2. https://www.adinstruments.com/</span><br>        <span class="hljs-comment">#    An average human has an RER at rest of around 0.8, although this can vary a bit depending on diet and other</span><br>        <span class="hljs-comment">#    factors. During a stress test, RER will typically gradually increase to a peak of about 1.2 (again variable</span><br>        <span class="hljs-comment">#    depending on the individual). An RER of 1.0 is the anaerobic threshold, the point at which the body begins</span><br>        <span class="hljs-comment">#    to metabolize sugar using the less efficient anaerobic pathway and build up lactic acid.</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment"># 静息时VO2约为3.5ml/kg/min（1MET）</span><br>        <span class="hljs-comment"># 1. The standard oxygen consumption value equivalent to one metabolic equivalent</span><br>        <span class="hljs-comment">#    (3.5 ml/min/kg) is not appropriate for elderly people</span><br>        <span class="hljs-comment"># 2. Resting Oxygen Uptake Value of 1 Metabolic Equivalent of Task in Older Adults:</span><br>        <span class="hljs-comment">#    A Systematic Review and Descriptive Analysis</span><br>        <span class="hljs-variable language_">self</span>.label.setText(<span class="hljs-string">&#x27;VO2: &#x27;</span> + <span class="hljs-built_in">format</span>(VO2 * <span class="hljs-number">1000</span> / mass, <span class="hljs-string">&#x27;.2f&#x27;</span>) + <span class="hljs-string">&#x27;mL/kg/min&#x27;</span><br>                           + <span class="hljs-string">&#x27;     | VO2: &#x27;</span> + <span class="hljs-built_in">format</span>(VO2, <span class="hljs-string">&#x27;.2f&#x27;</span>) + <span class="hljs-string">&#x27;L/min&#x27;</span><br>                           + <span class="hljs-string">&#x27;     | RQ: &#x27;</span> + <span class="hljs-built_in">format</span>(RQ, <span class="hljs-string">&#x27;.2f&#x27;</span>)<br>                           + <span class="hljs-string">&#x27;     | EE: &#x27;</span> + <span class="hljs-built_in">format</span>(EE, <span class="hljs-string">&#x27;.2f&#x27;</span>) + <span class="hljs-string">&#x27;kcal/min&#x27;</span><br>                           + <span class="hljs-string">&#x27;     | Ve: &#x27;</span> + <span class="hljs-built_in">format</span>(Ve, <span class="hljs-string">&#x27;.2f&#x27;</span>) + <span class="hljs-string">&#x27;L/min&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pg_O2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.O2_plot.setTitle(<span class="hljs-string">&#x27;O2浓度 &#x27;</span>, color=<span class="hljs-variable language_">self</span>.O2_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.O2_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.O2_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.O2_plot.setYRange(<span class="hljs-number">25</span>, <span class="hljs-number">14</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pg_CO2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.CO2_plot.setTitle(<span class="hljs-string">&#x27;CO2浓度 &#x27;</span>, color=<span class="hljs-variable language_">self</span>.CO2_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.CO2_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.CO2_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.CO2_plot.setYRange(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pg_flow</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.flow_plot.setTitle(<span class="hljs-string">&#x27;通气量 &#x27;</span>, color=<span class="hljs-variable language_">self</span>.flow_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.flow_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;L/min&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.flow_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.flow_plot.setYRange(<span class="hljs-number">180</span>, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pg_VO2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.VO2_plot.setTitle(<span class="hljs-string">&#x27;摄氧量&#x27;</span>, color=<span class="hljs-variable language_">self</span>.VO2_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.VO2_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;L/min&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.VO2_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-comment"># self.VO2_plot.setYRange(60, 0)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pg_VCO2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.VCO2_plot.setTitle(<span class="hljs-string">&#x27;CO2产生速度&#x27;</span>, color=<span class="hljs-variable language_">self</span>.VCO2_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.VCO2_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;L/min&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.VCO2_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-comment"># self.VCO2_plot.setYRange(60, 0)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_pg_RQ</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.RQ_plot.setTitle(<span class="hljs-string">&#x27;呼吸商&#x27;</span>, color=<span class="hljs-variable language_">self</span>.RQ_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.RQ_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;VCO2 / VO2&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.RQ_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.RQ_plot.setYRange(<span class="hljs-number">1.5</span>, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output_data</span>(<span class="hljs-params">self</span>):<br>        O2_df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Time&#x27;</span>: <span class="hljs-variable language_">self</span>.O2_x, <span class="hljs-string">&#x27;O2&#x27;</span>: <span class="hljs-variable language_">self</span>.O2_y&#125;)<br>        CO2_df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Time&#x27;</span>: <span class="hljs-variable language_">self</span>.CO2_x, <span class="hljs-string">&#x27;CO2&#x27;</span>: <span class="hljs-variable language_">self</span>.CO2_y&#125;)<br>        flow_df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Time&#x27;</span>: <span class="hljs-variable language_">self</span>.flow_x, <span class="hljs-string">&#x27;flow&#x27;</span>: <span class="hljs-variable language_">self</span>.flow_y&#125;)<br><br>        O2_df.to_csv(<span class="hljs-string">&#x27;O2&#x27;</span>, index=<span class="hljs-literal">False</span>)<br>        CO2_df.to_csv(<span class="hljs-string">&#x27;CO2&#x27;</span>, index=<span class="hljs-literal">False</span>)<br>        flow_df.to_csv(<span class="hljs-string">&#x27;flow&#x27;</span>, index=<span class="hljs-literal">False</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calibration</span>():<br>    calibration_time_start = <span class="hljs-number">0</span>  <span class="hljs-comment"># 计次</span><br>    calibration_time_end = <span class="hljs-number">30</span>  <span class="hljs-comment"># 校准时间</span><br>    O2_calibration_data = []<br>    CO2_calibration_data = []<br>    flow_calibration_data = []<br><br>    O2 = <span class="hljs-number">20.93</span><br>    CO2 = <span class="hljs-number">0.03</span><br>    flow = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_timer</span>():<br>        <span class="hljs-keyword">if</span> calibration_time_start == calibration_time_end:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calibration Complete&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;O2: &#x27;</span> + <span class="hljs-built_in">str</span>(O2) +<br>                  <span class="hljs-string">&#x27;| CO2: &#x27;</span> + <span class="hljs-built_in">str</span>(CO2) +<br>                  <span class="hljs-string">&#x27;| flow error: &#x27;</span> + <span class="hljs-built_in">str</span>(flow))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最好让系统暖机3分钟，这样不会出现延迟。至于为什么，天知道&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            get_data()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>        <span class="hljs-keyword">nonlocal</span> calibration_time_start<br>        <span class="hljs-keyword">nonlocal</span> O2<br>        <span class="hljs-keyword">nonlocal</span> CO2<br>        <span class="hljs-keyword">nonlocal</span> flow<br><br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = O2_ser.readline().strip()<br>            O2_value = <span class="hljs-built_in">float</span>(sensor_value)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> calibration_time_start == <span class="hljs-number">0</span>:<br>                O2_value = O2<br>            <span class="hljs-keyword">else</span>:<br>                O2_value = O2_calibration_data[-<span class="hljs-number">1</span>]<br>                <span class="hljs-comment"># print(e)</span><br><br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = CO2_ser.readline().strip()<br>            CO2_value = <span class="hljs-built_in">float</span>(sensor_value)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> calibration_time_start == <span class="hljs-number">0</span>:<br>                CO2_value = CO2<br>            <span class="hljs-keyword">else</span>:<br>                CO2_value = CO2_calibration_data[-<span class="hljs-number">1</span>]<br>                <span class="hljs-comment"># print(e)</span><br><br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = flow_ser.readline().strip()<br>            flow_value = <span class="hljs-built_in">float</span>(sensor_value)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> calibration_time_start == <span class="hljs-number">0</span>:<br>                flow_value = flow<br>            <span class="hljs-keyword">else</span>:<br>                flow_value = flow_calibration_data[-<span class="hljs-number">1</span>]<br>                <span class="hljs-comment"># print(e)</span><br><br>        O2_calibration_data.append(O2_value)<br>        CO2_calibration_data.append(CO2_value)<br>        flow_calibration_data.append(flow_value)<br><br>        O2 = <span class="hljs-built_in">max</span>(O2_calibration_data, key=O2_calibration_data.count)<br>        CO2 = <span class="hljs-built_in">max</span>(CO2_calibration_data, key=CO2_calibration_data.count)<br>        flow = <span class="hljs-built_in">max</span>(flow_calibration_data, key=flow_calibration_data.count)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calibrating, Wait &#x27;</span> + <span class="hljs-built_in">str</span>(calibration_time_end - calibration_time_start) + <span class="hljs-string">&#x27; Second&#x27;</span>)<br>        calibration_time_start += <span class="hljs-number">1</span><br>        time.sleep(<span class="hljs-number">1</span>)<br>        create_timer()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calibration Start...&#x27;</span>)<br>    create_timer()<br><br>    <span class="hljs-keyword">return</span> O2, CO2, flow<br></code></pre></td></tr></table></figure><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> serial<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pyqtgraph <span class="hljs-keyword">as</span> pg<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer, QMutex<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QHBoxLayout, QWidget, QLabel, QPushButton<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QColor<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    O2_port = <span class="hljs-string">&#x27;/dev/cu.usbmodem1101&#x27;</span><br>    CO2_port = <span class="hljs-string">&#x27;/dev/cu.usbmodem1201&#x27;</span><br>    flow_port = <span class="hljs-string">&#x27;/dev/cu.usbmodem1301&#x27;</span><br>    <span class="hljs-comment"># O2_port = &#x27;/dev/ttyACM2&#x27;</span><br>    <span class="hljs-comment"># CO2_port = &#x27;/dev/ttyACM1&#x27;</span><br>    <span class="hljs-comment"># flow_port = &#x27;/dev/ttyACM0&#x27;</span><br>    baud_rate1 = <span class="hljs-number">115200</span>  <span class="hljs-comment"># O2, flow</span><br>    baud_rate2 = <span class="hljs-number">9600</span>  <span class="hljs-comment"># CO2</span><br><br>    RQ = <span class="hljs-number">0</span><br>    VO2 = <span class="hljs-number">0</span><br>    Ve = <span class="hljs-number">0</span><br>    EE = <span class="hljs-number">0</span><br>    mass = <span class="hljs-number">67</span>           <span class="hljs-comment"># 体重</span><br><br>    <span class="hljs-comment"># 设置timeout参数，用来接收完整的数据帧</span><br>    O2_ser = serial.Serial(O2_port, baud_rate1, timeout=<span class="hljs-number">0.1</span>)<br>    CO2_ser = serial.Serial(CO2_port, baud_rate2, timeout=<span class="hljs-number">0.1</span>)<br>    flow_ser = serial.Serial(flow_port, baud_rate1, timeout=<span class="hljs-number">0.1</span>)<br><br>    environment_O2, environment_CO2, flow_error = calibration()<br><br>    app = QApplication(sys.argv)<br>    win = Window(<span class="hljs-string">&#x27;你猜这bug是怎么回事&#x27;</span>)<br>    win.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure><h2 id="DataAnalysis"><a href="#DataAnalysis" class="headerlink" title="DataAnalysis"></a>DataAnalysis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># 过滤掉误差数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flow_filter</span>(<span class="hljs-params">threshold, target</span>):<br>    df = pd.read_csv(<span class="hljs-string">&#x27;flow&#x27;</span>)<br>    values = []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;flow&#x27;</span>]:<br>        value = target <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(item) &lt; threshold <span class="hljs-keyword">else</span> item<br>        values.append(value)<br>    new_df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Time&#x27;</span>: df[<span class="hljs-string">&#x27;Time&#x27;</span>], <span class="hljs-string">&#x27;flow&#x27;</span>: values&#125;)<br>    <span class="hljs-keyword">return</span> new_df<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">O2_smooth</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">moving_average</span>(<span class="hljs-params">interval, window_size</span>):<br>        window = np.ones(<span class="hljs-built_in">int</span>(window_size)) / <span class="hljs-built_in">float</span>(window_size)<br>        <span class="hljs-keyword">return</span> np.convolve(interval, window, <span class="hljs-string">&#x27;same&#x27;</span>)  <span class="hljs-comment"># numpy的卷积函数</span><br>    y_av = moving_average(df1[<span class="hljs-string">&#x27;O2&#x27;</span>], window_size=<span class="hljs-number">10</span>)<br>    new_df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Time&#x27;</span>: df1[<span class="hljs-string">&#x27;Time&#x27;</span>], <span class="hljs-string">&#x27;O2&#x27;</span>: y_av&#125;)<br>    <span class="hljs-keyword">return</span> new_df<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_sensor_data</span>():<br>    fig, axes = plt.subplots(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>))<br><br>    axes[<span class="hljs-number">0</span>].scatter(df1[<span class="hljs-string">&#x27;Time&#x27;</span>], df1[<span class="hljs-string">&#x27;O2&#x27;</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;O2&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].scatter(df1_smooth[<span class="hljs-string">&#x27;Time&#x27;</span>], df1_smooth[<span class="hljs-string">&#x27;O2&#x27;</span>], c=<span class="hljs-string">&#x27;lightblue&#x27;</span>, marker=<span class="hljs-string">&#x27;.&#x27;</span>, label=<span class="hljs-string">&#x27;O2&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].set_ylabel(<span class="hljs-string">&#x27;%&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].legend(loc=<span class="hljs-number">2</span>)<br><br>    axes[<span class="hljs-number">1</span>].scatter(df2[<span class="hljs-string">&#x27;Time&#x27;</span>], df2[<span class="hljs-string">&#x27;CO2&#x27;</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;CO2&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].set_ylabel(<span class="hljs-string">&#x27;%&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].legend(loc=<span class="hljs-number">2</span>)<br><br>    axes[<span class="hljs-number">2</span>].scatter(df3[<span class="hljs-string">&#x27;Time&#x27;</span>], df3[<span class="hljs-string">&#x27;flow&#x27;</span>], c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;flow&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].set_ylabel(<span class="hljs-string">&#x27;L/min&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_key_data</span>():<br>    lens = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(df1), <span class="hljs-built_in">len</span>(df2), <span class="hljs-built_in">len</span>(df3))<br><br>    fi_O2 = df1[<span class="hljs-string">&#x27;O2&#x27;</span>][<span class="hljs-number">0</span>]<br>    fi_CO2 = df2[<span class="hljs-string">&#x27;CO2&#x27;</span>][<span class="hljs-number">0</span>]<br><br>    fi_O2 /= <span class="hljs-number">100</span>  <span class="hljs-comment"># 20 -&gt; 20%</span><br>    fi_CO2 /= <span class="hljs-number">100</span><br><br>    VO2_y_data = []<br>    VCO2_y_data = []<br><br>    RQ0_y_data = []<br>    RQ10_y_data = []<br>    RQ11_y_data = []<br>    RQ12_y_data = []<br>    RQ13_y_data = []<br><br>    x_data = []<br>    count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lens):<br>        fe_O2 = df1[<span class="hljs-string">&#x27;O2&#x27;</span>][i]<br>        fe_CO2 = df2[<span class="hljs-string">&#x27;CO2&#x27;</span>][i]<br><br>        fe_O2 /= <span class="hljs-number">100</span><br>        fe_CO2 /= <span class="hljs-number">100</span><br><br>        Ve = np.mean(df3[<span class="hljs-string">&#x27;flow&#x27;</span>][i:i+<span class="hljs-number">300</span>])<br><br>        fi_N2 = <span class="hljs-number">1</span> - fi_O2 - fi_CO2<br>        fe_N2 = <span class="hljs-number">1</span> - fe_O2 - fe_CO2<br>        Vi = Ve * fe_N2 / fi_N2<br>        VO2 = (Vi * fi_O2) - (Ve * fe_O2)<br>        VCO2 = (Ve * fe_CO2) - (Vi * fi_CO2)<br><br>        <span class="hljs-keyword">if</span> VO2 &gt; <span class="hljs-number">0.01</span> <span class="hljs-keyword">and</span> VCO2 &gt; <span class="hljs-number">0.01</span>:<br>            RQ = VCO2 / VO2<br>        <span class="hljs-keyword">else</span>:<br>            RQ = <span class="hljs-number">0</span><br><br>        VO2_y_data.append(VO2)<br>        VCO2_y_data.append(VCO2)<br><br>        <span class="hljs-keyword">if</span> RQ &gt;= <span class="hljs-number">1.3</span>:<br>            RQ0_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ10_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ11_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ12_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ13_y_data.append(RQ)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">1.2</span> &lt;= RQ &lt; <span class="hljs-number">1.3</span>:<br>            RQ0_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ10_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ11_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ12_y_data.append(RQ)<br>            RQ13_y_data.append(<span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">1.1</span> &lt;= RQ &lt; <span class="hljs-number">1.2</span>:<br>            RQ0_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ10_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ11_y_data.append(RQ)<br>            RQ12_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ13_y_data.append(<span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">1.0</span> &lt;= RQ &lt; <span class="hljs-number">1.1</span>:<br>            RQ0_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ10_y_data.append(RQ)<br>            RQ11_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ12_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ13_y_data.append(<span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">else</span>:<br>            RQ0_y_data.append(RQ)<br>            RQ10_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ11_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ12_y_data.append(<span class="hljs-literal">None</span>)<br>            RQ13_y_data.append(<span class="hljs-literal">None</span>)<br><br>        x_data.append(count)<br>        count += <span class="hljs-number">0.1</span><br><br>    fig, axes = plt.subplots(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">36</span>, <span class="hljs-number">10</span>))<br><br>    axes[<span class="hljs-number">0</span>].scatter(x_data, VO2_y_data, c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;VO2&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].set_ylabel(<span class="hljs-string">&#x27;L/min&#x27;</span>)<br>    axes[<span class="hljs-number">0</span>].legend(loc=<span class="hljs-number">2</span>)<br><br>    axes[<span class="hljs-number">1</span>].scatter(x_data, VCO2_y_data, c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;VCO2&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].set_ylabel(<span class="hljs-string">&#x27;L/min&#x27;</span>)<br>    axes[<span class="hljs-number">1</span>].legend(loc=<span class="hljs-number">2</span>)<br><br>    axes[<span class="hljs-number">2</span>].scatter(x_data, RQ0_y_data, c=<span class="hljs-string">&#x27;lightgreen&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;RQ&lt;1.0&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].scatter(x_data, RQ10_y_data, c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;1.0&lt;=RQ&lt;1.1&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].scatter(x_data, RQ11_y_data, c=<span class="hljs-string">&#x27;lightcoral&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;1.1&lt;=RQ&lt;1.2&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].scatter(x_data, RQ12_y_data, c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;1.2&lt;=RQ&lt;1.3&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].scatter(x_data, RQ13_y_data, c=<span class="hljs-string">&#x27;darkred&#x27;</span>, marker=<span class="hljs-string">&#x27;1&#x27;</span>, label=<span class="hljs-string">&#x27;RQ&gt;=1.3&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].set_xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].set_ylabel(<span class="hljs-string">&#x27;-&#x27;</span>)<br>    axes[<span class="hljs-number">2</span>].legend(loc=<span class="hljs-number">2</span>)<br><br><br><span class="hljs-comment"># 计算一段时间内的平均通气量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">average_flow</span>(<span class="hljs-params">a, b</span>):<br><br>    df = pd.read_csv(<span class="hljs-string">&#x27;flow&#x27;</span>)<br>    array = df[<span class="hljs-string">&#x27;flow&#x27;</span>][a:b]<br>    <span class="hljs-built_in">print</span>(np.mean(array))<br><br><br>df1 = pd.read_csv(<span class="hljs-string">&#x27;O2&#x27;</span>)<br>df1_smooth = O2_smooth()<br>df2 = pd.read_csv(<span class="hljs-string">&#x27;CO2&#x27;</span>)<br>df3 = flow_filter(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)     <span class="hljs-comment"># 小于阈值的数据都将被赋值 0</span><br><br>plot_sensor_data()<br>plot_key_data()<br><br>average_flow(<span class="hljs-number">2000</span>, <span class="hljs-number">3000</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VO2</tag>
      
      <tag>Python</tag>
      
      <tag>PyQt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」Mac 环境下搭建 Hexo 个人博客</title>
    <link href="/2023/08/28/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DMac-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/28/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8DMac-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://l3zc.com/2022/05/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Mac OS 环境下使用 Hexo 搭建个人博客</a>。</p><p>参考：</p><ol><li><a href="https://www.zhihu.com/question/26071345">Mac 系统有什么软件打开 .pub 文件？</a>；</li><li><a href="https://blog.csdn.net/xs20691718/article/details/81873921">hexo 发布之后 gitpage 自定义域名失效</a>。</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装-Git-和-Node-js"><a href="#安装-Git-和-Node-js" class="headerlink" title="安装 Git 和 Node.js"></a>安装 Git 和 Node.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br>brew install node<br></code></pre></td></tr></table></figure><h4 id="测试所需组件是否安装成功"><a href="#测试所需组件是否安装成功" class="headerlink" title="测试所需组件是否安装成功"></a>测试所需组件是否安装成功</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br>node -v<br>git --version<br></code></pre></td></tr></table></figure><p>均返回版本号即代表安装成功。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>我们使用 npm 命令安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>等待安装完成后初始化博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure><p>这条指令的作用是在你目前所在的目录下（默认是你的 home 目录）新建一个名为 blog 的文件夹（你可以将这条命令中的 blog 替换成任何你想要的名字），并在内初始化你的博客。<strong>之后所有的操作都在这个文件夹下进行，请确保在执行后文的操作前已经切换到了这个文件夹（cd blog）。</strong></p><p>待初始化完成，切换到 blog 文件夹中，即可生成和预览博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>执行 <code>hexo s</code> 命令后，通过浏览器访问 <code>http://127.0.0.1:4000</code> 可以预览你的博客，预览功能会实时监测博客的文件变化，并实时反馈在浏览器上，在调试博客前端时非常好用。</p><h3 id="部署网站到-GitHub"><a href="#部署网站到-GitHub" class="headerlink" title="部署网站到 GitHub"></a>部署网站到 GitHub</h3><p>执行 <code>hexo g</code> 命令后博客静态文件会生成在 public 文件夹下，只需要将这些文件上传到你的静态网站托管服务即可将站点发布到公网，本文用到的托管服务是 Github Pages，下文提到的用户名均指你的 Github 用户名。</p><h4 id="添加-SSH-Key-到-github"><a href="#添加-SSH-Key-到-github" class="headerlink" title="添加 SSH Key 到 github"></a>添加 SSH Key 到 github</h4><p>若之前使用过相关功能且已经配置过请跳过此步。</p><p>配置 Git 用户名和账号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;example@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>其中 <code>username</code> 是你的用户名，<code>example@example.com</code> 是你 Github 的登录邮箱。</p><p>然后通过终端命令生成 SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;example@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>如果已经创建过会出现 <code>Overwrite (y/n)? n</code> 提示可以输入 <code>n</code>，没有创建过的话三个回车就好，执行完成后会在 <code>~/.ssh/id_rsa.pub</code> 目录下生成需要使用的 key，也就是公钥。</p><p>到账户主文件夹下同时按 <code>Command+Shift+.</code> 显示隐藏文件，找到 <code>.ssh</code> 文件夹，打开 <code>id_rsa.pub</code>，将里面的内容全部复制（使用 cd 命令进入 <code>id_rsa.pub</code> 目录，再使用 <code>more id_rsa.pub</code> 命令查看公钥的内容）。</p><p>打开 <a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建 New SSH Key，Title 随意填，Key 就把刚才复制的内容全都粘贴上去。然后点 Add SSH Key 即可。</p><p>完成这些工作以后可以通过以下命令测试是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh git@github.com<br></code></pre></td></tr></table></figure><p>出现你的 Github 用户名代表配置成功。</p><h4 id="上传本地文件到-Github"><a href="#上传本地文件到-Github" class="headerlink" title="上传本地文件到 Github"></a>上传本地文件到 Github</h4><p>在Github上新建一个仓库，Repository Name 填 <code>你的用户名.github.io</code>，仓库状态设为 Public，点击 Create Repository 创建新的网站仓库。</p><p>安装 Hexo 的扩展 <code>hexo-deployer-git</code>，注意一定要在你的博客文件夹下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <br></code></pre></td></tr></table></figure><p>编辑博客安装文件夹下的 <code>_config.yml</code> 文件，<strong>翻到底部</strong>，修改 deploy 部分为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:你的用户名/你的用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>修改完成后保存，此时就可以使用 <code>hexo d</code> 把存在本地的博客 deploy 到 Github 上了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>第一次执行 <code>hexo d</code> 命令时可能要求你输入你的 Github 账号和密码，如果报错，可能是因为 Github 在 2021 年 8 月 13 日停止了使用账户密码认证的支持，这时需要在 Gihub 上 <a href="https://github.com/settings/tokens">Developer Settings页面</a> 上新建一个 Personal Access Token 代替密码就可以顺利 deploy。</p><p>执行完毕后，访问 <code>你的用户名.github.io</code> 就能看到你的博客了。</p><h3 id="绑定自定义域名（可选）"><a href="#绑定自定义域名（可选）" class="headerlink" title="绑定自定义域名（可选）"></a>绑定自定义域名（可选）</h3><p>其实到这一步就可以开始写博客了，默认的 github.io 的域名是可以更换的：</p><p>首先自行申请一个域名，登陆到域名申请的后台，添加一条 <code>CNAME</code> 解析记录：<code>你的用户名.github.io</code>。</p><p>打开存放博客的 Github 仓库，进入 Settings 页面在 pages 选项里的 Custom domain 里填入你的域名，点击 Save，勾选 Enforce HTTPS，即可通过自定义域名访问你的博客。</p><p>每次配置 Custom domain 之后，再次 <code>hexo deploy</code> 之后，Custom domain 会被重置失效。解决方案为：</p><p>在 hexo 生成的博客的 source 目录下新建一个 <code>CNAME</code> 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，Custom domain 都被重置掉。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EMG 相关应用场景</title>
    <link href="/2023/08/28/EMG-%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2023/08/28/EMG-%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="特征识别"><a href="#特征识别" class="headerlink" title="特征识别"></a>特征识别</h3><p>利用 sEMG 特征来识别动作。目前除了 sEMG 外，还有下面方案：</p><ol><li>基于计算机视觉的人体姿态识别；</li><li>基于惯性测量单元的人体姿态识别。</li></ol><p> sEMG 的主要应用领域为手势识别：</p><ol><li><a href="https://github.com/malele4th/sEMG_DeepLearning">基于表面肌电信号的动作识别（深度学习）</a>；</li></ol><h3 id="肌肉疲劳"><a href="#肌肉疲劳" class="headerlink" title="肌肉疲劳"></a>肌肉疲劳</h3><p>通过肌电疲劳阈值（electromyogram fatigue threshold, $EMG_{FT}$）测量法进行肌肉疲劳分析：</p><ol><li><a href="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/4521B14B-F4D8-4E18-9C33-075EB468CAA8_2/0anKdmJXKHOfJLskNNsD0U5WBCELNFkNh3CnGIplcIYz/4521B14B-F4D8-4E18-9C33-075EB468CAA8_2.pdf">基于表面肌电信号和动作捕捉的上肢运动疲劳分析</a>；</li><li><a href="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/9AE75833-3F90-40B1-8811-A1590D68338C_2/CW4iRhiNAqLM5DNQwFmOaVIAvLxsi5Az5ce3PaHqKxMz/9AE75833-3F90-40B1-8811-A1590D68338C_2.pdf">基于表面肌电信号的康复过程中肌疲劳有效性分析</a>。</li></ol><p>可以认为是借助 sEMG 以及 $EMG_{FT}$ 算法来测定个体运动过程中的肌肉疲劳拐点。</p><p>除了 $EMG_{FT}$ 外，监测肌肉疲劳的方法还有：</p><ol><li>通气阈值（ventilator threshold, VT）；</li><li>基于计算机视觉的人体姿态识别；</li><li>基于惯性测量单元的人体姿态识别（IMU）；</li><li>乳酸阈值(AT)。</li></ol><h3 id="肌肉激活程度"><a href="#肌肉激活程度" class="headerlink" title="肌肉激活程度"></a>肌肉激活程度</h3><p>参考：<a href="https://vintraining.medium.com/%E5%A6%82%E4%BD%95%E7%94%A8-emg-%E8%82%8C%E9%9B%BB%E5%9C%96-%E7%A0%94%E7%A9%B6-%E6%8C%91%E9%81%B8%E6%9C%80%E6%9C%89%E6%95%88%E7%9A%84%E8%A8%93%E7%B7%B4%E5%8B%95%E4%BD%9C-933d1ab20321">如何用 EMG（肌電圖）研究挑選最有效的訓練動作?</a></p><p>每块肌肉都有相应的「最大自主等长收缩（maximal voluntary isometric contraction, MVIC）」，可通过 EMG 振幅表示。而每个动作都有相应的募集肌肉，以及肌肉的激活程度 %MVIC。例如 Distefano 等人研究了健康自愿者的臀大肌和臀中肌肌电图振幅，这些自愿者进行了 12 种不同难度的下肢力量训练。每个训练重复四次求平均值用于分析。侧卧髋部外展对臀中肌的激活最大，为 81%MVIC。单肢深蹲和单肢硬拉可有效激活臀中肌（分别是 64% 和 58%MVIC）和臀大肌（分别为 59% 和 59%MVIC）。</p><p>但不是说动作募集肌肉的 %MVIC 越高，动作就越能刺激相关肌肉成长。还要看其他因素：</p><ol><li>活动范围（rang of motion, ROM）；</li><li>动作在肌肉延展状态下施加张力的大小和时间。</li></ol><p>此外还要加以区分概念：最大自主收缩或者最大肌力（maximum voluntary contraction, MVC）。</p>]]></content>
    
    
    <categories>
      
      <category>EMG Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>EMG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>呼吸代谢监测：原理</title>
    <link href="/2023/08/28/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%EF%BC%9A%E5%8E%9F%E7%90%86/"/>
    <url>/2023/08/28/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B%EF%BC%9A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="系统功能"><a href="#系统功能" class="headerlink" title="系统功能"></a>系统功能</h2><p>分析个体呼出气体成分，并计算耗氧速度（摄氧量）$V_{O_2}$ 以及代谢能量 EE。</p><h2 id="呼吸监测方法介绍"><a href="#呼吸监测方法介绍" class="headerlink" title="呼吸监测方法介绍"></a>呼吸监测方法介绍</h2><h3 id="道格拉斯袋法"><a href="#道格拉斯袋法" class="headerlink" title="道格拉斯袋法"></a>道格拉斯袋法</h3><p>道格拉斯袋法（douglas bags）是最早的开放式（open circuit）间接测量代谢消耗的方法，也是测量代谢消耗的「金标准」[1][2]。</p><p>原理很简单，将运动呼出的气体用道格拉斯气袋收集起来，然后测量气袋中气体的体积、$O_2$、$CO_2$ 浓度。之后经过计算就能得出运动中代谢能量消耗。</p><h3 id="逐步呼吸法"><a href="#逐步呼吸法" class="headerlink" title="逐步呼吸法"></a>逐步呼吸法</h3><p>道格拉斯袋法必须在运动完成后进行测量，测得值是一个平均量，无法实时测量，也无法对运动的某个时间节点进行分析。随着计算机的发展，逐步呼吸法（breath by breath）被发明[3]。借助于传感器（对传感器性能和信号处理要求很高）和电脑，可以实现对每次呼出气体的流量、成分进行测量，从而得到实时代谢能量消耗。</p><h3 id="混合气室法（系统采用）"><a href="#混合气室法（系统采用）" class="headerlink" title="混合气室法（系统采用）"></a>混合气室法（系统采用）</h3><p>混合气室法（mixing chamber）[4]是将呼出气体排入到一个 5L 左右的混合室内让其充分混合，通过测量混合室中的气体浓度来计算代谢能量消耗。可以理解为测量几次呼出气体的平均值。主要有 2 个优点：</p><ol><li>相较于道格拉斯袋法，混合气室法能实现实时代谢测量（相较于逐步呼吸法没那么实时，视运动量而定）；</li><li>相较于逐步呼吸法，虽然时效性没有那么好，但混合气室法更加稳定[5]，信号处理起来更容易[6]，且对传感器的要求不高。</li></ol><h2 id="系统组成"><a href="#系统组成" class="headerlink" title="系统组成"></a>系统组成</h2><p>基于混合气室法的呼吸监测模块由 4 个重要组成部分。</p><h3 id="非重复呼吸阀-管道"><a href="#非重复呼吸阀-管道" class="headerlink" title="非重复呼吸阀&#x2F;管道"></a>非重复呼吸阀&#x2F;管道</h3><p>非重复呼吸阀（Non Rebreathing Valve）的作用是保证第二次呼吸不会吸入上一次呼出的气体，否则会造成误差。但实际这个现象不可避免，所以需要保证呼吸阀腔体（也叫死腔，dead space）体积小于 70ml[1]。</p><p>此外，死腔体积不能太小，否者会对呼吸造成阻力增加测量时的人体额外能量消耗，WHO 建议呼吸阀的阻力不高于 $300L&#x2F;min-5cmH_2O$[1]。同理，连接呼吸阀和混合室的管道建议阻力不高于 $300L&#x2F;min-1.5cmH_2O$。</p><h3 id="混合室"><a href="#混合室" class="headerlink" title="混合室"></a>混合室</h3><p>人体在静息状态下，每分钟的通气量大约为 4-8L，采用 5L 的混合室，意味着静息状态的呼出气体能在 1min 中充满混合室（将混合室原本的气体排出）。</p><h3 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3><p>传感器的原则是响应时间越短越好。</p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p><a href="https://wonderhoi.com/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/">传感器的响应时间</a>。</p><h4 id="传感器清单"><a href="#传感器清单" class="headerlink" title="传感器清单"></a>传感器清单</h4><p><a href="https://wonderhoi.com/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/">气体流量传感器</a>；</p><p><a href="https://wonderhoi.com/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/">O2浓度传感器</a>；</p><p><a href="https://wonderhoi.com/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/">CO2浓度传感器</a>。</p><h3 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h3><p>目前的方案是下位机数据采集 Arduino&#x2F;C++，上位机数据处理树莓派&#x2F;Python。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>呼吸代谢监测系统最终会采集到：</p><ol><li>呼出或吸入气体流量；</li><li>呼出气体中的 $O_2$ 浓度；</li><li>呼出气体中的 $CO_2$ 浓度。</li></ol><p>之后通过计算可得出摄氧速度（摄氧量） $V_{O_2}$、呼吸商 RQ、代谢能量 EE。</p><p><strong>这里按气体流量传感器采集呼出气体流量计算（采集吸入气体的流量其计算原理是一样的）。</strong></p><h3 id="气体流量-ATPS-换算-STPD"><a href="#气体流量-ATPS-换算-STPD" class="headerlink" title="气体流量 ATPS 换算 STPD"></a>气体流量 ATPS 换算 STPD</h3><p>气体体积需按标准状态（STPD 状态，$\theta &#x3D; 0°C$，$\rho &#x3D; 101.3kPa$ 或 $\rho &#x3D; 760mmHg$，干燥气体）来计算[7][8]。</p><p>由于所收集的气体都是饱和水蒸气（其饱和水蒸气压力是温度的函数），而测量温度为室温条（ATPS 状态，环境温度，环境压力，水蒸气饱和），两者换算系数 $f$ 可利用水蒸气分压计算：</p><p>在千帕单位下换算系数为：<br>$$<br>f &#x3D; \frac{273K * (\rho-\rho_{H_2O})}{(273K+\theta)*101.3kPa}<br>$$<br>或者在毫米汞柱单位下：<br>$$<br>f &#x3D; \frac{273K * (\rho-\rho_{H_2O})}{(273K+\theta)*760mmHg}<br>$$<br>其中：</p><ul><li>$f$ 为标准状态气体体积换算系数；</li><li>$\rho$ 为测得环境的大气压；</li><li>$\rho_{H_2O}$ 为呼出气体饱和水蒸气的分压；</li><li>$\theta$ 为呼出气体的温度（在气体流量计中或用道格拉斯袋时测量的大气温度），单位为摄氏度(°C)。</li></ul><p>如果收集到的呼出气体在环境中受热高于 37°C 以上，需用 37°C 的饱和水蒸气压 6.27kPa。如果收集到的呼出气体温度不高于 37°C，其饱和水蒸气压见下表：</p><p>20°C~37°C 范围内（间隔为 1°C）饱和水蒸气压力，单位为千帕(kPa)：</p><table><thead><tr><th>温度&#x2F;°C</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>20</td><td>2.34</td><td>2.49</td><td>2.64</td><td>2.81</td><td>2.98</td><td>3.17</td><td>3.36</td><td>3.56</td><td>3.78</td><td>4.00</td></tr><tr><td>30</td><td>4.24</td><td>4.49</td><td>4.75</td><td>5.03</td><td>5.32</td><td>5.62</td><td>5.94</td><td>6.27</td><td>-</td><td>-</td></tr></tbody></table><p>转换为毫米汞柱(mmHg)：</p><table><thead><tr><th>温度&#x2F;°C</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>20</td><td>17.5</td><td>18.7</td><td>19.8</td><td>21.1</td><td>22.4</td><td>23.8</td><td>25.2</td><td>26.7</td><td>28.4</td><td>30.0</td></tr><tr><td>30</td><td>31.8</td><td>33.7</td><td>35.7</td><td>37.7</td><td>39.9</td><td>42.2</td><td>44.6</td><td>47.1</td><td>-</td><td>-</td></tr></tbody></table><p>记气体流量传感器读值（呼出气体流量）为 $V_{E-ATPS}$，单位一般为 L&#x2F;min。</p><p>则标准状态的气体流量为 $V_{E-STPD}&#x3D;f*V_{E-ATPS}$。</p><h4 id="BTPS-概念"><a href="#BTPS-概念" class="headerlink" title="BTPS 概念"></a>BTPS 概念</h4><ul><li>STPD 状态，$\theta &#x3D; 0°C$，$\rho &#x3D; 101.3kPa$ 或 $\rho &#x3D; 760mmHg$，干燥气体；</li><li>ATPS 状态，环境温度，环境压力，水蒸气饱和；</li><li>BTPS 状态，身体内环境温度 37°C，环境压力，水蒸气饱和。</li></ul><p>三者的转换公式为：<br>$$<br>V_{BTPS}&#x3D;V_{ATPS} * \frac{(273K+37) * (\rho-\rho_{H_2O})}{(273K+\theta) * (\rho-47.1mmHg)}<br>$$</p><p>$$<br>V_{STPD}&#x3D;V_{BTPS} * \frac{273K * (\rho-47.1mmHg)}{(273K+37) * 760mmHg}<br>$$</p><h3 id="V-O-2-计算"><a href="#V-O-2-计算" class="headerlink" title="$V_{O_2}$ 计算"></a>$V_{O_2}$ 计算</h3><p>核心关系是人体不会消耗和产生氮气，也就是人体吸入和呼出的 $N_2$ 量是不变的。大气中气体成分可以近似分为 0.03% 的 $CO_2$，20.93% 的 $O_2$ 和 79.04% 的 $N_2$ 以及非常少的稀有气体。</p><p>记吸入气体中 $O_2$ 浓度为 $F_IO_2$，$CO_2$ 浓度为 $F_ICO_2$，$N_2$ 浓度为 $F_IN_2$；</p><p>记呼出气体中 $O_2$ 浓度为 $F_EO_2$，$CO_2$ 浓度为 $F_ECO_2$，$N_2$ 浓度为 $F_EN_2$。</p><p>那么吸入气体流量：<br>$$<br>V_{I-STPD}&#x3D;V_{E-STPD}*\frac{F_EN_2}{F_IN_2}&#x3D;V_{E-STPD}*\frac{1-F_EO_2-F_ECO_2}{1-F_IO_2-F_ICO_2}<br>$$<br>$O_2$ 消耗速度（摄氧量）：<br>$$<br>V_{O_2}&#x3D;V_{I-STPD}*F_IO_2-V_{E-STPD}*F_EO_2<br>$$<br>同理 $CO_2$ 产生速度：<br>$$<br>V_{CO_2}&#x3D;V_{E-STPD}*F_ECO_2-V_{I-STPD}*F_ICO_2<br>$$</p><h4 id="最大摄氧量-V-O-2max"><a href="#最大摄氧量-V-O-2max" class="headerlink" title="最大摄氧量 $V_{O_2max}$"></a>最大摄氧量 $V_{O_2max}$</h4><p>当个体满足以下 4 种条件的任意 3 种即认为达到最大摄氧量标准[9]：</p><ol><li>$V_{O_2}$ 不随负荷的增加而上升，且个体达到力竭；</li><li>$V_{O_2}$ 的变化幅度不超过 5% 或 150mL&#x2F;min 或 2mL&#x2F;kg&#x2F;min；</li><li>呼吸商大于 1.15；</li><li>心率大于 180 次&#x2F;min。</li></ol><h3 id="RQ、EE计算"><a href="#RQ、EE计算" class="headerlink" title="RQ、EE计算"></a>RQ、EE计算</h3><p>呼吸商 RQ 或者呼吸交换率 RER 等于 $\frac{V_{CO_2}}{V_{O_2}}$。根据 RQ 数值查询对应的 O2-kCal&#x2F;L 数值：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B1.png"></p><p>例如 RQ&#x3D;0.8，那么意味着每消耗 1L 氧气，人体需要代谢 4.801kCal 的能量。那么此时的人体代谢 EE &#x3D; $V_{O_2}$ * 4.801 kCal&#x2F;min。</p><h4 id="呼吸底物"><a href="#呼吸底物" class="headerlink" title="呼吸底物"></a>呼吸底物</h4><p>由上表可以发现，根据 RQ 可以知道当前呼吸代谢底物是以脂肪为主还是以糖类为主。</p><h2 id="系统校准"><a href="#系统校准" class="headerlink" title="系统校准"></a>系统校准</h2><p>系统校准可以采用测量代谢当量 MET 的方法进行。1MET 的耗氧量为 3.5ml&#x2F;kg&#x2F;min[10]，在人<strong>静息</strong>状态下测得。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864610603-1d877ddb-18a2-4d7e-881a-5cc99e0757d4.pdf">📎Open-circuit respirometry a historical review of portable gas analysis systems.pdf</a></p><p>[2] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864623935-2727c37e-08b5-4cde-bed8-0ac81d0c527f.pdf">📎a brief historical review of the use of Douglas bags and chemical analyzers.pdf</a></p><p>[3] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864746920-56963d18-9dce-4cf1-9034-3ad2229d9af5.pdf">📎On-line computer analysis and breath-by-breath graphical display of exercise function tests..pdf</a></p><p>[4] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864829672-a808cc03-6ed0-4525-8dfa-31de54e3d435.pdf">📎Validity and Stability of a Computerized Metabolic System with Mixing Chamber.pdf</a></p><p>[5] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864864021-dd003bcd-bd70-4c95-888a-7b6223a43b05.pdf">📎Accuracy and precision of CPET equipment A comparison of breath by breath and mixing chamber systems.pdf</a></p><p>[6] <a href="https://www.redbackbiotek.com/mixing-chamber">Mxing Chamber vs Breath by Breath</a></p><p>[7] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1692113579367-e3ed568b-cb7a-4409-9709-89baabb1a4ae.pdf">📎Metabolic Computations in Open-Circuit Spirometry.pdf</a></p><p>[8] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1692113510091-3b4b025d-54f9-42e4-b53e-50f43c2bf02b.pdf">📎热环境人类工效学 代谢率的测定.pdf</a></p><p>[9] 《体育院校通用教材&#x2F;运动生理学》，人民体育出版社，2002</p><p>[10]  <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1692114986255-7fc81d83-22c1-41c8-9b77-4b87cbbbf5d0.pdf">📎Resting Oxygen Uptake Value of 1 Metabolic Equivalent of Task in Older Adults A Systematic Review and Descriptive Analysis.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>代谢计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」使用 uPic 搭配腾讯云搭建图床</title>
    <link href="/2023/08/26/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E4%BD%BF%E7%94%A8-uPic-%E6%90%AD%E9%85%8D%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/08/26/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E4%BD%BF%E7%94%A8-uPic-%E6%90%AD%E9%85%8D%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<p><a href="https://sspai.com/post/64169">原文链接</a></p><h3 id="搭建私有图床"><a href="#搭建私有图床" class="headerlink" title="搭建私有图床"></a>搭建私有图床</h3><p>免费图床有两个缺点，一方面是基于隐私的保护的问题，另一方面是你不知道它什么时候可能就没了~，所以如果你对资源管理有更高的要求，或者你是一个小团队需要有自己的图床以保证稳定性，不妨往下看，我手把手教你搭建自己的私有图床。</p><p>需要用到两个东西：</p><ol><li>腾讯云 COS（对象存储）</li><li>uPic 客户端</li></ol><h4 id="购买腾讯云-COS"><a href="#购买腾讯云-COS" class="headerlink" title="购买腾讯云 COS"></a>购买腾讯云 COS</h4><p>其实国内提供对象存储服务的有很多，例如腾讯云、阿里云、七牛云、百度云、又拍云等，选择腾讯云主要是基于两点考虑：</p><ol><li>稳定可靠速度快，节点丰富还便宜</li><li>支持微信或 QQ 登录，对大多数人来说方面，不用再格外注册账号</li></ol><blockquote><p>你甚至可以使用 github 来做免费图床，但缺点是 github 在国内速度太慢了，体验不好，我不推荐。</p></blockquote><p>首先，你需要注册并开通「<a href="https://sspai.com/link?target=https://link.zhihu.com/?target=https://console.cloud.tencent.com/cos5">腾讯云对象存储</a>」，你可以使用微信或 QQ 登录：</p><p><img src="https://cdn.sspai.com/2020/12/22/8c71da4b83b79821350aeb074312bb85.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>在「存储桶列表」&gt;「创建存储桶」，地区按照你的实际情况选择，访问权限设置为「公有读私有写」：</p><p><img src="https://cdn.sspai.com/2020/12/22/157a4689ac564d86ab64cfe8ce0c456b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/16e922b14f5ae75c91845683a540b870.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>存储桶创建好之后，接下来就可以直接上传图片：</p><p><img src="https://cdn.sspai.com/2020/12/22/b09b74e4a9cd77b4255cd4542d519ba9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>上传完成后，点击「详情」，复制「对象地址」中的 URL 即可访问对象：</p><p><img src="https://cdn.sspai.com/2020/12/22/e6bd74b237fa8914f5dc85788c8b3fdf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/5f6286198ba8b1ad6c743952cd4d9b99.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>如果你要使用 Markdown，只需要手动编辑 Markdown 语法即可，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">example</span>](<span class="hljs-link">https://myupic-1253463441.cos.ap-nanjing.myqcloud.com/3b6cae2afdea8f710c0a5ccb460c39cb-0.jpg</span>)<br></code></pre></td></tr></table></figure><p>腾讯云是根据流量来实时计费的，根据我自己的使用经验来看价格是非常便宜：</p><p><img src="https://cdn.sspai.com/2020/12/22/3908682f470e049dae15ff3b3178352d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>更详细的计费规则参见：<a href="https://sspai.com/link?target=https://link.zhihu.com/?target=https://cloud.tencent.com/product/cos/pricing">腾讯云 COS 定价</a></p><p>上面已经介绍了基本的使用方法，但是你可能也发现了，如果每张图片都这样手动上传、手动复制链接、手动粘贴的话，效率未免太低了，这时候就需要使用我们的主角—— uPic 客户端了。</p><h4 id="uPic-客户端配置"><a href="#uPic-客户端配置" class="headerlink" title="uPic 客户端配置"></a>uPic 客户端配置</h4><p>uPic客户端是开源免费的，可以在如下 GitHub 地址进行下载：</p><ul><li><a href="https://sspai.com/link?target=https://github.com/gee1k/uPic">https://github.com/gee1k/uPic</a></li></ul><p>打开偏好设置，在「图床」中添加一个「腾讯云 COS」：</p><p><img src="https://cdn.sspai.com/2020/12/22/16763a27c4f28b8a2608574f1b763bd9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><h3 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h3><ul><li><code>区域</code>: 对象储存空间所属的区域，可在腾讯云控制台查看。</li><li><code>空间名称</code>: 对象储存空间名称，可在腾讯云控制台查看。</li><li><code>SecretId</code>: 密钥。</li><li><code>SecretKey</code>: 密钥。</li><li><code>域名</code>: 使用腾讯云默认提供的测试域名或者你的自定义域名。域名可在控制台查看。<code>域名需以http://或者https://开头</code>。</li><li><code>保存路径</code>: 文件储存的路径（包括文件夹）。 <code>支持 &#123;year&#125; &#123;month&#125; &#123;day&#125; &#123;hour&#125; &#123;minute&#125; &#123;second&#125; &#123;since_second&#125; &#123;since_millisecond&#125; &#123;random&#125; &#123;filename&#125; &#123;.suffix&#125; 等变量。比如：上传的图片为 uPic.jpg，设定为 “uPic/&#123;filename&#125;&#123;.suffix&#125;”，则会保存到 “uPic/uPic.jpg”。</code></li><li>在<code>保存路径</code>输入框后面的是<code>网址后缀</code>: 用于自定义图片处理。腾讯云 COS 目前还不支持，先预留。</li></ul><p><strong>看起来有点复杂，不过没关系，下面跟着我一步步配置即可。</strong></p><p>点击腾讯云<strong>「</strong>存储桶列表<strong>」</strong>，点击「配置管理」：</p><p><img src="https://cdn.sspai.com/2020/12/22/1b8680f5e02cc2d70f1a0253afd037c1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>可以看到「存储桶名称」和「访问域名」，复制填写到 uPic 中：</p><p><img src="https://cdn.sspai.com/2020/12/22/a3fc05d6a35b9065478cc417c0a26679.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>然进入腾讯云「API 密钥管理」，系统会提示建议创建子账号来管理，点击「切换使用子账号密钥」：</p><p><img src="https://cdn.sspai.com/2020/12/22/ccd164a592c4ef6659d8231145681902.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>选择「快速创建」：</p><p><img src="https://cdn.sspai.com/2020/12/22/e39f339ac3902bc03f3b8672c1e0470a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>随意输入用户名，例如 GuestforuPic，点击用户权限：</p><p><img src="https://cdn.sspai.com/2020/12/22/461469f544f6e3037721265a3ea20757.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>搜索「QcloudCOSFullAccess」，勾选并确定：</p><p><img src="https://cdn.sspai.com/2020/12/22/71787d4c7210fceaaddf58a8805fdca9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/c0856f11a2315a401d5e8dcc5ba1617f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>然后进入腾讯云的「用户列表」&gt;「用户详情」&gt;「API密钥」&gt;「新建密钥」：</p><p><img src="https://cdn.sspai.com/2020/12/22/641b4ba0223a8225ad0161ddbdb92b91.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/e20dabd582fda5b2ebb904738c6529b6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>复制 SecretId 和 SecretKey 到 uPic 客户端：</p><p><img src="https://cdn.sspai.com/2020/12/22/b6c2c37042dc1bef7ec884cc3be20fde.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>至于最后的「保存路径」可以保持不变，如果你有特殊要求再做自定义。</p><p>点击「验证」测试一下，如果提示上传成功就配置完成啦！点击保存即可。</p><p><img src="https://cdn.sspai.com/2020/12/22/67ca93666ebccc3e530b3affabcbe7c6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中 PIL.Image 和 OpenCV 图像格式相互转换</title>
    <link href="/2023/08/22/Python-%E4%B8%AD-PIL.Image-%E5%92%8C-OpenCV-%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8F%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/08/22/Python-%E4%B8%AD-PIL.Image-%E5%92%8C-OpenCV-%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8F%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>OpenCV 转换成 PIL.Image 格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image  <br><span class="hljs-keyword">import</span> numpy  <br>  <br>img = cv2.imread(<span class="hljs-string">&quot;1.jpg&quot;</span>)  <br><br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))<br><br>cv2.imshow(<span class="hljs-string">&quot;OpenCV&quot;</span>,img)  <br>image = Image.fromarray(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))  <br>image.show()<br><span class="hljs-comment">#让显示等待键盘输入维持在那里，否则程序跑完就闪退啦！</span><br>cv2.waitKey(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># (256, 256, 3)</span><br><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>PIL.Image 转换成 OpenCV 格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image  <br><span class="hljs-keyword">import</span> numpy  <br>  <br>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>)  <br><br><span class="hljs-comment"># print(img.shape)# Image has no attribute &#x27;shape&#x27;</span><br><span class="hljs-built_in">print</span>(np.array(img).shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))<br><br>image.show()  <br>img = cv2.cvtColor(numpy.asarray(image),cv2.COLOR_RGB2BGR)  <br>cv2.imshow(<span class="hljs-string">&quot;OpenCV&quot;</span>,img)  <br>cv2.waitKey(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># (256, 256, 3)</span><br><span class="hljs-comment"># &lt;class &#x27;Image&#x27;&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>人体姿态识别 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 配置 Conda 环境</title>
    <link href="/2023/08/22/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/08/22/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>VSCode 下载 Python 插件：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%831.png"></p><p>在 VSCode 中使用 CTRL+P 打开搜索，然后输入 <code>&gt; select interpreter</code>：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%832.png"></p><p>选择对应环境即可。</p><p>运行代码后，可以在 VSCode 的终端发现自动输入了如下指令：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%833.png"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV CAP_PROP_FRAME_COUNT 获取视频帧数问题</title>
    <link href="/2023/08/18/OpenCV-CAP_PROP_FRAME_COUNT-%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/18/OpenCV-CAP_PROP_FRAME_COUNT-%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>OpenCV 读取视频，可以通过属性 <code>CAP_PROP_FRAME_COUNT</code> 获取视频的总帧数，但是有些视频通过该属性获取的帧数和实际遍历整个视频的帧数不一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cv<br>video = <span class="hljs-string">&#x27;video.mp4&#x27;</span><br>cap = cv.VideoCapture(video)<br>frames = cap.get(cv.CAP_PROP_FRAME_COUNT)    <span class="hljs-comment"># 通过属性获取帧数</span><br>count = <span class="hljs-number">0</span>    <span class="hljs-comment"># 用于计算视频的实际帧数</span><br><span class="hljs-keyword">while</span> cap.isOpened():<br>    ret, frame = cap.read()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>        <span class="hljs-keyword">break</span><br>    count += <span class="hljs-number">1</span><br>cap.release()<br><span class="hljs-built_in">print</span>(frames)<br><span class="hljs-built_in">print</span>(count)<br><br><span class="hljs-comment"># output: </span><br><span class="hljs-comment"># 432</span><br><span class="hljs-comment"># 541</span><br></code></pre></td></tr></table></figure><p>出现这种原因是，视频中包含了损坏的或不能被 OpenCV 解码的帧，OpenCV 就会跳过这些帧，因此造成通过属性 <code>CAP_PROP_FRAME_COUNT</code> 和实际读取的帧数不一样。</p>]]></content>
    
    
    <categories>
      
      <category>人体姿态识别 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AlphaPose 部署</title>
    <link href="/2023/08/16/AlphaPose-%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/08/16/AlphaPose-%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/MVIG-SJTU/AlphaPose">AlphaPose</a> 为开源项目。项目基于PyTorch深度学习框架，所以要安装PyTorch，一般来说把这两个教程看完，PyTorch就能成功安装了：</p><ul><li><a href="https://blog.csdn.net/a922922737/article/details/126620490?ops_request_misc=%7B%22request_id%22:%22168343325116800227473919%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168343325116800227473919&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-126620490-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=pytorch%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&spm=1018.2226.3001.4187">搭建Pytorch环境(GPU版本，含CUDA、cuDNN)，并在Pycharm上使用（零基础小白向）</a></li><li><a href="https://www.cnblogs.com/sixuwuxian/p/16756072.html">PyCharm与Anaconda超详细安装配置教程</a></li></ul><p>之后就是 AlphaPose 的本地部署，copy 源码后一个一个一个一个往 Conda 环境里安装依赖直到程序能正常运行。</p><p>需要注意的是在安装依赖过程出现的问题：</p><ol><li>numpy 版本不能太旧也不能太新了，我用的版本是 1.20.2；</li><li>安装 yaml 库的时候，是 <code>conda install pyyaml</code>，别安装成了 <code>conda install yaml</code>，会报错 <code>No module named ‘yaml’</code>；</li><li>安装 cython_bbox，<code>pip install -e git+https://github.com/samson-wang/cython_bbox.git#egg=cython-bbox</code>；</li><li>有一些会调用 C++API 的库在 pip 安装时报错，是因为系统要安装 C++ 环境。用 Microsoft C++ 生成工具（Build Tools）。报错内容 <code>Microsoft Visual C++ 14.0 or greater is required. Get it with &quot;Microsoft C++ Build Tools&quot;: https://visualstudio.microsoft.com/visual-cpp-build-tools/ ERROR: Could not build wheels for psutil, which is required to install pyproject.toml-based projects</code></li><li>报错 <code>No module named ‘detector’</code> 的话，把 demo_inference.py 拿到根目录下运行即可；</li><li>下载目标检测模型 yolov3-spp.weights，并在 yolo 文件夹中新建 data 文件夹并将模型放入：detector&#x2F;yolo&#x2F;data&#x2F;yolov3-spp.weights；</li><li>下载 <a href="https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/MODEL_ZOO.md">人体姿态估计模型</a> 放入 pretrained_models 文件夹中，使用模型时，需要调用相应的 config 文件，config 文件不用额外下载，源码自带；</li></ol><p>部署完成后，cd 到一级文件夹输入下面指令即可运行（更多指令可查看 <a href="https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/GETTING_STARTED.md">Getting Started</a>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">调用config：configs/halpe_26/resnet/256x192_res50_lr1e-3_1x.yaml<br>调用模型：pretrained_models/halpe26_fast_res50_256x192.pth<br><br>识别图片并保存<br>python demo_inference.py --cfg configs/halpe_26/resnet/256x192_res50_lr1e-3_1x.yaml --checkpoint pretrained_models/halpe26_fast_res50_256x192.pth --indir examples/demo/ --save_img<br><br>识别摄像头<br>python demo_inference.py --cfg configs/halpe_26/resnet/256x192_res50_lr1e-3_1x.yaml --checkpoint pretrained_models/halpe26_fast_res50_256x192.pth --outdir examples/res --vis --webcam 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>人体姿态识别 Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 以及 pyqt 线程锁简单使用</title>
    <link href="/2023/08/15/Python-%E4%BB%A5%E5%8F%8A-pyqt-%E7%BA%BF%E7%A8%8B%E9%94%81%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/15/Python-%E4%BB%A5%E5%8F%8A-pyqt-%E7%BA%BF%E7%A8%8B%E9%94%81%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>项目一共有 4 个线程，分别为 3 个传感器采集线程和 1 个计算线程。</p><p>理想中 4 个线程需要以队列的方式执行：</p><p>线程 1 采集数据 ——&gt; 线程 2 采集数据 ——&gt; 线程 3 采集数据 ——&gt; 线程 4 计算数据</p><p>这里采用给线程加锁的方式：</p><h3 id="采用-threading-并加锁"><a href="#采用-threading-并加锁" class="headerlink" title="采用 threading 并加锁"></a>采用 threading 并加锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-comment"># 重写线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculate</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, count</span>):<br>        threading.Thread.__init__(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.count = count<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 每0.1秒执行一次cal函数，不要带()</span><br>        timer = threading.Timer(<span class="hljs-number">0.1</span>, <span class="hljs-variable language_">self</span>.cal)<br>        timer.start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&#x27; is &#x27;</span> + <span class="hljs-variable language_">self</span>.count)<br>        <span class="hljs-variable language_">self</span>.count += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count1 = <span class="hljs-number">0</span><br>    count2 = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 初始化线程</span><br>    calculate1 = Calculate(<span class="hljs-string">&#x27;COUNT1&#x27;</span>, count1)<br>    calculate2 = Calculate(<span class="hljs-string">&#x27;COUNT2&#x27;</span>, count2)<br>    calculate1.start()<br>    calculate2.start()<br><br><span class="hljs-comment"># ouput:</span><br><span class="hljs-comment"># COUNT1 is 0</span><br><span class="hljs-comment"># COUNT1 is 1</span><br><span class="hljs-comment"># COUNT1 is 2</span><br><span class="hljs-comment"># COUNT2 is 0</span><br><span class="hljs-comment"># COUNT1 is 3</span><br><span class="hljs-comment"># COUNT2 is 1</span><br><span class="hljs-comment"># COUNT1 is 4</span><br><span class="hljs-comment"># COUNT2 is 2</span><br><span class="hljs-comment"># COUNT2 is 3</span><br><br></code></pre></td></tr></table></figure><p>可以发现两个线程之间的执行并不同步，若想同步执行，则需要加「线程锁」。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-comment"># 重写线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculate</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, count, acquire, release</span>):<br>        threading.Thread.__init__(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.count = count<br>        <span class="hljs-variable language_">self</span>.acquire = acquire  <span class="hljs-comment"># 需要加锁线程</span><br>        <span class="hljs-variable language_">self</span>.release = release  <span class="hljs-comment"># 需要解锁线程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        timer = threading.Timer(<span class="hljs-number">0.1</span>, <span class="hljs-variable language_">self</span>.cal)<br>        timer.start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.acquire.acquire()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&#x27; is &#x27;</span> + <span class="hljs-variable language_">self</span>.count)<br>        <span class="hljs-variable language_">self</span>.count += <span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.release.release()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    count1 = <span class="hljs-number">0</span><br>    count2 = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 初始化线程锁</span><br>    count1_lock = threading.Lock()<br>    count2_lock = threading.Lock()<br>    <span class="hljs-comment"># count2加锁，这样只能先运行没有加锁的count1</span><br>    count2_lock.acquire()<br>    calculate1 = Calculate(<span class="hljs-string">&#x27;COUNT1&#x27;</span>, count1, count1_lock, count2_lock)<br>    calculate2 = Calculate(<span class="hljs-string">&#x27;COUNT2&#x27;</span>, count2, count2_lock, count1_lock)<br><br>    calculate1.start()<br>    calculate2.start()<br><br><span class="hljs-comment"># ouput:</span><br><span class="hljs-comment"># COUNT1 is 0</span><br><span class="hljs-comment"># COUNT2 is 0</span><br><span class="hljs-comment"># COUNT1 is 1</span><br><span class="hljs-comment"># COUNT2 is 1</span><br><span class="hljs-comment"># COUNT1 is 2</span><br><span class="hljs-comment"># COUNT2 is 2</span><br><span class="hljs-comment"># COUNT1 is 3</span><br><span class="hljs-comment"># COUNT2 is 3</span><br></code></pre></td></tr></table></figure><h3 id="采用-QThread-并加锁"><a href="#采用-QThread-并加锁" class="headerlink" title="采用 QThread 并加锁"></a>采用 QThread 并加锁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer, QMutex<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication<br><br><br><span class="hljs-comment"># 重写线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculate</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, count, lock, unlock</span>):<br>        <span class="hljs-built_in">super</span>(Calculate, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.count = count<br>        <span class="hljs-variable language_">self</span>.lock = lock  <span class="hljs-comment"># 需要加锁线程</span><br>        <span class="hljs-variable language_">self</span>.unlock = unlock  <span class="hljs-comment"># 需要解锁线程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        timer = QTimer()<br>        timer.timeout.connect(<span class="hljs-keyword">lambda</span>: <span class="hljs-variable language_">self</span>.cal())<br>        timer.start(<span class="hljs-number">100</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.lock.lock()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name + <span class="hljs-string">&#x27; is &#x27;</span> + <span class="hljs-variable language_">self</span>.count)<br>        <span class="hljs-variable language_">self</span>.count += <span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.unlock.unlock()<br><br><br><span class="hljs-comment"># QThread只能在QT程序中运行</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Window, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.count1 = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.count2 = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 初始化线程锁</span><br>        <span class="hljs-variable language_">self</span>.count1_lock = QMutex()<br>        <span class="hljs-variable language_">self</span>.count2_lock = QMutex()<br>        <span class="hljs-comment"># count2加锁，这样只能先运行没有加锁的count1</span><br>        <span class="hljs-variable language_">self</span>.count2_lock.lock()<br>        <span class="hljs-variable language_">self</span>.calculate1 = Calculate(<span class="hljs-string">&#x27;COUNT1&#x27;</span>, <span class="hljs-variable language_">self</span>.count1, <span class="hljs-variable language_">self</span>.count1_lock, <span class="hljs-variable language_">self</span>.count2_lock)<br>        <span class="hljs-variable language_">self</span>.calculate2 = Calculate(<span class="hljs-string">&#x27;COUNT2&#x27;</span>, <span class="hljs-variable language_">self</span>.count2, <span class="hljs-variable language_">self</span>.count2_lock, <span class="hljs-variable language_">self</span>.count1_lock)<br><br>        <span class="hljs-variable language_">self</span>.calculate1.start()<br>        <span class="hljs-variable language_">self</span>.calculate2.start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = QApplication(sys.argv)<br>    win = Window()<br>    win.show()<br>    sys.exit(app.exec_())<br><br><span class="hljs-comment"># ouput:</span><br><span class="hljs-comment"># COUNT1 is 0</span><br><span class="hljs-comment"># COUNT2 is 0</span><br><span class="hljs-comment"># COUNT1 is 1</span><br><span class="hljs-comment"># COUNT2 is 1</span><br><span class="hljs-comment"># COUNT1 is 2</span><br><span class="hljs-comment"># COUNT2 is 2</span><br><span class="hljs-comment"># COUNT1 is 3</span><br><span class="hljs-comment"># COUNT2 is 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>代谢计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>PyQt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>肌电传感器 SEN0240</title>
    <link href="/2023/08/14/%E8%82%8C%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0240/"/>
    <url>/2023/08/14/%E8%82%8C%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0240/</url>
    
    <content type="html"><![CDATA[<p>传感器采购自 DFRobot，基本上是即买即用。</p><ul><li><p><a href="https://www.dfrobot.com.cn/goods-1503.html">购买地址</a></p></li><li><p><a href="https://wiki.dfrobot.com.cn/_SKU_SEN0240_%E8%82%8C%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8_Analog_EMG_Sensor_by_OYMotion">相关信息</a>，<a href="https://www.yuque.com/cs/products/rwe87o">这个也是</a>。</p></li></ul><p>Arduino 驱动代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Copyright 2017, OYMotion Inc.</span><br><span class="hljs-comment">* All rights reserved.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* Redistribution and use in source and binary forms, with or without</span><br><span class="hljs-comment">* modification, are permitted provided that the following conditions</span><br><span class="hljs-comment">* are met:</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 1. Redistributions of source code must retain the above copyright</span><br><span class="hljs-comment">*    notice, this list of conditions and the following disclaimer.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 2. Redistributions in binary form must reproduce the above copyright</span><br><span class="hljs-comment">*    notice, this list of conditions and the following disclaimer in</span><br><span class="hljs-comment">*    the documentation and/or other materials provided with the</span><br><span class="hljs-comment">*    distribution.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><br><span class="hljs-comment">* &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><br><span class="hljs-comment">* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</span><br><span class="hljs-comment">* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE</span><br><span class="hljs-comment">* COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</span><br><span class="hljs-comment">* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,</span><br><span class="hljs-comment">* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS</span><br><span class="hljs-comment">* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED</span><br><span class="hljs-comment">* AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</span><br><span class="hljs-comment">* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF</span><br><span class="hljs-comment">* THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH</span><br><span class="hljs-comment">* DAMAGE.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(ARDUINO) &amp;&amp; ARDUINO &gt;= 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Arduino.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;WProgram.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;EMGFilters.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIMING_DEBUG 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SensorInputPin A0 <span class="hljs-comment">// input pin number</span></span><br><br>EMGFilters myFilter;<br><span class="hljs-comment">// discrete filters must works with fixed sample frequence</span><br><span class="hljs-comment">// our emg filter only support &quot;SAMPLE_FREQ_500HZ&quot; or &quot;SAMPLE_FREQ_1000HZ&quot;</span><br><span class="hljs-comment">// other sampleRate inputs will bypass all the EMG_FILTER</span><br><span class="hljs-type">int</span> sampleRate = SAMPLE_FREQ_1000HZ;<br><span class="hljs-comment">// For countries where power transmission is at 50 Hz</span><br><span class="hljs-comment">// For countries where power transmission is at 60 Hz, need to change to</span><br><span class="hljs-comment">// &quot;NOTCH_FREQ_60HZ&quot;</span><br><span class="hljs-comment">// our emg filter only support 50Hz and 60Hz input</span><br><span class="hljs-comment">// other inputs will bypass all the EMG_FILTER</span><br><span class="hljs-type">int</span> humFreq = NOTCH_FREQ_50HZ;<br><br><span class="hljs-comment">// Calibration:</span><br><span class="hljs-comment">// put on the sensors, and release your muscles;</span><br><span class="hljs-comment">// wait a few seconds, and select the max value as the threshold;</span><br><span class="hljs-comment">// any value under threshold will be set to zero</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> Threshold = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> timeStamp;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> timeBudget;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">/* add setup code here */</span><br>    myFilter.<span class="hljs-built_in">init</span>(sampleRate, humFreq, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// open serial</span><br>    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br><br>    <span class="hljs-comment">// setup for time cost measure</span><br>    <span class="hljs-comment">// using micros()</span><br>    timeBudget = <span class="hljs-number">1e6</span> / sampleRate;<br>    <span class="hljs-comment">// micros will overflow and auto return to zero every 70 minutes</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">/* add main program code here */</span><br>    <span class="hljs-comment">// In order to make sure the ADC sample frequence on arduino,</span><br>    <span class="hljs-comment">// the time cost should be measured each loop</span><br>    <span class="hljs-comment">/*------------start here-------------------*/</span><br>    timeStamp = <span class="hljs-built_in">micros</span>();<br><br>    <span class="hljs-type">int</span> Value = <span class="hljs-built_in">analogRead</span>(SensorInputPin);<br><br>    <span class="hljs-comment">// filter processing</span><br>    <span class="hljs-type">int</span> DataAfterFilter = myFilter.<span class="hljs-built_in">update</span>(Value);<br><br>    <span class="hljs-type">int</span> envlope = <span class="hljs-built_in">sq</span>(DataAfterFilter);<br>    <span class="hljs-comment">// any value under threshold will be set to zero</span><br>    envlope = (envlope &gt; Threshold) ? envlope : <span class="hljs-number">0</span>;<br><br>    timeStamp = <span class="hljs-built_in">micros</span>() - timeStamp;<br>    <span class="hljs-keyword">if</span> (TIMING_DEBUG) &#123;<br>        <span class="hljs-comment">// Serial.print(&quot;Read Data: &quot;); Serial.println(Value);</span><br>        <span class="hljs-comment">// Serial.print(&quot;Filtered Data: &quot;);Serial.println(DataAfterFilter);</span><br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Squared Data: &quot;</span>);<br>        Serial.<span class="hljs-built_in">println</span>(envlope);<br>        <span class="hljs-comment">// Serial.print(&quot;Filters cost time: &quot;); Serial.println(timeStamp);</span><br>        <span class="hljs-comment">// the filter cost average around 520 us</span><br>    &#125;<br><br>    <span class="hljs-comment">/*------------end here---------------------*/</span><br>    <span class="hljs-comment">// if less than timeBudget, then you still have (timeBudget - timeStamp) to</span><br>    <span class="hljs-comment">// do your work</span><br>    <span class="hljs-built_in">delayMicroseconds</span>(<span class="hljs-number">500</span>);<br>    <span class="hljs-comment">// if more than timeBudget, the sample rate need to reduce to</span><br>    <span class="hljs-comment">// SAMPLE_FREQ_500HZ</span><br>&#125;<br></code></pre></td></tr></table></figure><p>驱动代码需要用到 EMGFilters 库，<a href="https://github.com/oymotion/EMGFilters">下载地址</a>。</p><p><strong>推荐每次使用时都校准一次，因为即使是同一个人，不同位置的肌电信号也是不同的。</strong></p><p>校准流程：</p><ul><li>将样例代码中的 Threshold 变量改成 0，即：<code>static int Threshold = 0;</code>；</li><li>上传样例代码至 Arduino 控制板中，然后打开 Arduino IDE 的串口监视器，观察打印的数值；</li><li>放松手臂上的肌肉，观察串口打印的数值。身心平静，让肌肉放松一会，观察串口监视器打印的最大数值，并记录之。如果数值太大，比如 1000 以上，可尝试微调干电极的放置位置；</li><li>将样例代码中的 Threshold 变量改成刚才记录的最大数值，重新上传样例代码至 Arduino 主控板。</li></ul><p>需要注意的是：</p><ul><li><strong>使用时必须要把笔记本电脑电源断开才能出正确的波形</strong>，不然会有噪音；</li><li><strong>传感器必须「紧贴」皮肤（肌肉处），否则会出现 0-40000 的规律读值。这是 Arduino 模拟输入引脚的信号。就算不接入传感器，引脚也会有读值。而驱动代码会将该读值放大。</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>EMG Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EMG</tag>
      
      <tag>Arduino</tag>
      
      <tag>Sensor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyQt 组件之间的层级关系</title>
    <link href="/2023/08/14/PyQt-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/"/>
    <url>/2023/08/14/PyQt-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>PyQt 构建 UI 的逻辑有点类似 SwiftUI，下面以 pyqtgraph 为最小组件来构建 UI：</p><p>层级结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pyqtgraph <span class="hljs-keyword">as</span> pg<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QHBoxLayout, QWidget<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QColor<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, title</span>):<br>        <span class="hljs-built_in">super</span>(Window, <span class="hljs-variable language_">self</span>).__init__()<br><br>        <span class="hljs-variable language_">self</span>.title = title<br>        <span class="hljs-variable language_">self</span>.setWindowTitle(<span class="hljs-variable language_">self</span>.title)<span class="hljs-comment"># 设置标题</span><br>        <br>        palette = <span class="hljs-variable language_">self</span>.palette()<br>        palette.setColor(<span class="hljs-variable language_">self</span>.backgroundRole(), QColor(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        <span class="hljs-variable language_">self</span>.setPalette(palette)<span class="hljs-comment"># 设置背景颜色</span><br>        <span class="hljs-variable language_">self</span>.setAutoFillBackground(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 不设置也可以</span><br>        <span class="hljs-variable language_">self</span>.resize(<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>)<span class="hljs-comment"># 设置窗口大小</span><br>        <br>        <span class="hljs-variable language_">self</span>.plot = pg.PlotWidget()<br>        <span class="hljs-variable language_">self</span>.color = QColor(<span class="hljs-number">255</span>, <span class="hljs-number">228</span>, <span class="hljs-number">196</span>)<br><span class="hljs-variable language_">self</span>.curve = <span class="hljs-variable language_">self</span>.plot.plot(<br>            pen=pg.mkPen(color=<span class="hljs-variable language_">self</span>.color, width=<span class="hljs-number">1</span>)<span class="hljs-comment"># 设置曲线的颜色和粗细</span><br>        )<br>        <span class="hljs-variable language_">self</span>.curve.setData(X, Y)<span class="hljs-comment"># 设置 plot 数据</span><br>        <br>        <span class="hljs-variable language_">self</span>.plot.setBackground(<span class="hljs-string">&#x27;w&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.plot.setTitle(<span class="hljs-string">&#x27;Your Title&#x27;</span>, color=<span class="hljs-variable language_">self</span>.O2_color, size=<span class="hljs-string">&#x27;12pt&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time(s)&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.plot.setYRange(<span class="hljs-number">25</span>, <span class="hljs-number">14</span>)<br>        <br>        layout_vs = QVBoxLayout()<span class="hljs-comment"># 类似 SwiftUI 的 VStack 和 HStack</span><br>        layout_hs = QHBoxLayout()<br>        <br>        layout_vs.addWidget(<span class="hljs-variable language_">self</span>.plot)<br>        layout_vs.addWidget(<span class="hljs-variable language_">self</span>.plot)<br>        <br>        layout_hs.addLayout(layout_vs)<br>        layout_hs.addLayout(layout_vs)<br>        <br>        <span class="hljs-variable language_">self</span>.central_widget = QWidget()<br>        <span class="hljs-variable language_">self</span>.central_widget.setLayout(layout_hs)<br>        <span class="hljs-variable language_">self</span>.setCentralWidget(<span class="hljs-variable language_">self</span>.central_widget)<span class="hljs-comment"># 自此就构建出了 2*2 的界面</span><br>        <br>        <span class="hljs-comment"># 当然也可以直接构建单个 plot 的界面</span><br>        <span class="hljs-comment"># self.setCentralWidget(self.plot)</span><br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>app = QApplication(sys.argv)<br>    win = Window(<span class="hljs-string">&#x27;PyQt&#x27;</span>)<br>    win.show()<br>    sys.exit(app.exec_())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyQt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMU 内参标定</title>
    <link href="/2023/08/13/IMU-%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A/"/>
    <url>/2023/08/13/IMU-%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>标定的本质是参数辨识，参数包括陀螺仪和加速度计各自的零偏、刻度系数误差、安装误差。</p><p>IMU的内参标定：通过特定的方法找出生产工艺引起的误差，并把他们量化，最终将数据校正。</p><p>相关资料：</p><ol><li><a href="https://xiaotaoguo.com/p/imu-calibration/">IMU 内参标定</a>；</li><li><a href="https://zhuanlan.zhihu.com/p/129642638">多传感器融合定位理论基础（四）：IMU内参模型及标定</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
      <category>轨迹计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyqtgraph 无法实时刷新图表</title>
    <link href="/2023/08/13/pyqtgraph-%E6%97%A0%E6%B3%95%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E5%9B%BE%E8%A1%A8/"/>
    <url>/2023/08/13/pyqtgraph-%E6%97%A0%E6%B3%95%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E5%9B%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>使用 pyqtgraph 显示传感器数据时，会出现图表无法刷新的情况（数据依然在采集，但图表无法刷新）。</p><p>测试下来的原因是绘制 curve 的 <code>setData()</code> 必须在主线程中运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> serial<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QWidget<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer<br><span class="hljs-keyword">import</span> pyqtgraph <span class="hljs-keyword">as</span> pg<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, port, baud</span>):<br>        <span class="hljs-built_in">super</span>(Window, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.roll_plot = pg.PlotWidget()<br>        <span class="hljs-variable language_">self</span>.ser = serial.Serial(port, baud, timeout=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.roll_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;Flow L/min&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.roll_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time s&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.roll_curve = <span class="hljs-variable language_">self</span>.roll_plot.plot(pen=<span class="hljs-string">&#x27;r&#x27;</span>)<br><br>        win_size = <span class="hljs-number">50</span>  <span class="hljs-comment"># 5s</span><br>        <span class="hljs-variable language_">self</span>.roll_x = np.zeros(win_size)<br>        <span class="hljs-variable language_">self</span>.roll_y = np.zeros(win_size)<br><br>        layout = QVBoxLayout()<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.roll_plot)<br>        <br>        <span class="hljs-variable language_">self</span>.central_widget = QWidget()<br>        <span class="hljs-variable language_">self</span>.central_widget.setLayout(layout)<br>        <span class="hljs-variable language_">self</span>.setCentralWidget(<span class="hljs-variable language_">self</span>.central_widget)<br><br>        <span class="hljs-variable language_">self</span>.thread = Sensor(<span class="hljs-variable language_">self</span>.ser, <span class="hljs-variable language_">self</span>.roll_x, <span class="hljs-variable language_">self</span>.roll_y, <span class="hljs-variable language_">self</span>.roll_curve)<br>        <span class="hljs-variable language_">self</span>.thread.start()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ser, roll_x, roll_y, roll_curve</span>):<br>        <span class="hljs-built_in">super</span>(Sensor, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.ser = ser<br>        <span class="hljs-variable language_">self</span>.roll_x = roll_x<br>        <span class="hljs-variable language_">self</span>.roll_y = roll_y<br>        <span class="hljs-variable language_">self</span>.roll_curve = roll_curve<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.update_flow()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_flow</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = <span class="hljs-variable language_">self</span>.ser.readline()<br>            value = <span class="hljs-built_in">float</span>(sensor_value)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            value = <span class="hljs-number">0.0</span><br>            <span class="hljs-built_in">print</span>(e)<br><br>        <span class="hljs-variable language_">self</span>.roll_x[:-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.roll_x[<span class="hljs-number">1</span>:]<br>        <span class="hljs-variable language_">self</span>.roll_y[:-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.roll_y[<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-variable language_">self</span>.roll_x[-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.roll_x[-<span class="hljs-number">2</span>] + <span class="hljs-number">0.1</span><br>        <span class="hljs-variable language_">self</span>.roll_y[-<span class="hljs-number">1</span>] = value<br><br>        <span class="hljs-comment"># 这里的做法是在 Sensor 线程中调用 setData 刷新图表</span><br>        <span class="hljs-comment"># 但问题是在程序运行一段时间后，图表不会自动刷新</span><br>        <span class="hljs-variable language_">self</span>.roll_curve.setData(<span class="hljs-variable language_">self</span>.roll_x, <span class="hljs-variable language_">self</span>.roll_y)<br>        <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    app = QApplication(sys.argv)<br>    flow_win = Window(<span class="hljs-string">&#x27;/dev/tty.usbmodem1301&#x27;</span>, <span class="hljs-number">115200</span>)<br>    flow_win.show()<br>    sys.exit(app.exec_())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>修改为 <strong>Sensor 线程用于采集数据，主线程用来刷新图表</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> serial<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QWidget<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer<br><span class="hljs-keyword">import</span> pyqtgraph <span class="hljs-keyword">as</span> pg<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, port, baud</span>):<br>        <span class="hljs-built_in">super</span>(Window, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.roll_plot = pg.PlotWidget()<br>        <span class="hljs-variable language_">self</span>.ser = serial.Serial(port, baud, timeout=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-variable language_">self</span>.roll_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;Flow L/min&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.roll_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time s&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.roll_curve = <span class="hljs-variable language_">self</span>.roll_plot.plot(pen=<span class="hljs-string">&#x27;r&#x27;</span>)<br><br>        win_size = <span class="hljs-number">50</span>  <span class="hljs-comment"># 5s</span><br>        <span class="hljs-variable language_">self</span>.roll_x = np.zeros(win_size)<br>        <span class="hljs-variable language_">self</span>.roll_y = np.zeros(win_size)<br><br>        layout = QVBoxLayout()<br>        layout.addWidget(<span class="hljs-variable language_">self</span>.roll_plot)<br><br>        <span class="hljs-variable language_">self</span>.central_widget = QWidget()<br>        <span class="hljs-variable language_">self</span>.central_widget.setLayout(layout)<br>        <span class="hljs-variable language_">self</span>.setCentralWidget(<span class="hljs-variable language_">self</span>.central_widget)<br><br>        <span class="hljs-comment"># 仅采集数据</span><br>        <span class="hljs-variable language_">self</span>.thread = Sensor(<span class="hljs-variable language_">self</span>.ser, <span class="hljs-variable language_">self</span>.roll_x, <span class="hljs-variable language_">self</span>.roll_y)<br>        <span class="hljs-variable language_">self</span>.thread.start()<br><br>        <span class="hljs-comment"># 100ms 刷新一次图表</span><br>        <span class="hljs-variable language_">self</span>.timer = QTimer()<br>        <span class="hljs-variable language_">self</span>.timer.timeout.connect(<span class="hljs-keyword">lambda</span>: <span class="hljs-variable language_">self</span>.plot_data())<span class="hljs-comment"># Here！</span><br>        <span class="hljs-variable language_">self</span>.timer.start(<span class="hljs-number">100</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_data</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.roll_curve.setData(<span class="hljs-variable language_">self</span>.roll_x, <span class="hljs-variable language_">self</span>.roll_y)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span>(<span class="hljs-title class_ inherited__">QThread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ser, roll_x, roll_y</span>):<br>        <span class="hljs-built_in">super</span>(Sensor, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.ser = ser<br>        <span class="hljs-variable language_">self</span>.roll_x = roll_x<br>        <span class="hljs-variable language_">self</span>.roll_y = roll_y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.update_flow()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_flow</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            sensor_value = <span class="hljs-variable language_">self</span>.ser.readline()<br>            value = <span class="hljs-built_in">float</span>(sensor_value)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            value = <span class="hljs-number">0.0</span><br>            <span class="hljs-built_in">print</span>(e)<br><br>        <span class="hljs-variable language_">self</span>.roll_x[:-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.roll_x[<span class="hljs-number">1</span>:]<br>        <span class="hljs-variable language_">self</span>.roll_y[:-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.roll_y[<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-variable language_">self</span>.roll_x[-<span class="hljs-number">1</span>] = <span class="hljs-variable language_">self</span>.roll_x[-<span class="hljs-number">2</span>] + <span class="hljs-number">0.1</span><br>        <span class="hljs-variable language_">self</span>.roll_y[-<span class="hljs-number">1</span>] = value<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    app = QApplication(sys.argv)<br>    flow_win = Window(<span class="hljs-string">&#x27;/dev/tty.usbmodem1301&#x27;</span>, <span class="hljs-number">115200</span>)<br>    flow_win.show()<br>    sys.exit(app.exec_())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyQt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCP 远程拷贝文件到树莓派</title>
    <link href="/2023/08/11/SCP-%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <url>/2023/08/11/SCP-%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp file user@host:target path<br><br>eg. <br>scp main.py pi@192.168.1.1:/home/pi/Desktop/demo<br>将目录下的 main.py 拷贝至树莓派的桌面 demo 文件夹中<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 读取串口数据</title>
    <link href="/2023/08/11/Python-%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/08/11/Python-%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="serial-读取串口数据"><a href="#serial-读取串口数据" class="headerlink" title="serial 读取串口数据"></a>serial 读取串口数据</h3><p>初始化ser</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> serial<br><br>ser = serial.Serial(<span class="hljs-string">&#x27;com1&#x27;</span>, <span class="hljs-number">9600</span>, timeout=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>初始化的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">ser = serial.Serial(<br>port=<span class="hljs-literal">None</span>,              <br><span class="hljs-comment"># number of device, numbering starts at</span><br><span class="hljs-comment"># zero. if everything fails, the user</span><br><span class="hljs-comment"># can specify a device string, note</span><br><span class="hljs-comment"># that this isn&#x27;t portable anymore</span><br><span class="hljs-comment"># if no port is specified an unconfigured</span><br><span class="hljs-comment"># an closed serial port object is created</span><br><br>baudrate=<span class="hljs-number">9600</span>,          <span class="hljs-comment"># baud rate</span><br>bytesize=EIGHTBITS,     <span class="hljs-comment"># number of databits</span><br>parity=PARITY_NONE,     <span class="hljs-comment"># enable parity checking</span><br>stopbits=STOPBITS_ONE,  <span class="hljs-comment"># number of stopbits</span><br>timeout=<span class="hljs-literal">None</span>,           <span class="hljs-comment"># set a timeout value, None for waiting forever</span><br>xonxoff=<span class="hljs-number">0</span>,              <span class="hljs-comment"># enable software flow control</span><br>rtscts=<span class="hljs-number">0</span>,               <span class="hljs-comment"># enable RTS/CTS flow control</span><br>interCharTimeout=<span class="hljs-literal">None</span>   <span class="hljs-comment"># Inter-character timeout, None to disable</span><br>)<br></code></pre></td></tr></table></figure><p>ser的属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">name：设备名字</span><br><span class="hljs-string">port：读或者写端口</span><br><span class="hljs-string">baudrate：波特率</span><br><span class="hljs-string">bytesize：字节大小</span><br><span class="hljs-string">parity：校验位</span><br><span class="hljs-string">stopbits：停止位</span><br><span class="hljs-string">timeout：读超时设置</span><br><span class="hljs-string">writeTimeout：写超时</span><br><span class="hljs-string">xonxoff：软件流控</span><br><span class="hljs-string">rtscts：硬件流控</span><br><span class="hljs-string">dsrdtr：硬件流控</span><br><span class="hljs-string">interCharTimeout:字符间隔超时</span><br></code></pre></td></tr></table></figure><p>ser的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">ser.isOpen()                    <span class="hljs-comment"># 查看端口是否被打开。</span><br>ser.<span class="hljs-built_in">open</span>()                      <span class="hljs-comment"># 打开端口。</span><br>ser.close()                     <span class="hljs-comment"># 关闭端口。</span><br>ser.read()                      <span class="hljs-comment"># 从端口读字节数据。默认1个字节。</span><br>ser.read_all()                  <span class="hljs-comment"># 从端口接收全部数据。</span><br>ser.write(<span class="hljs-string">&quot;hello&quot;</span>)              <span class="hljs-comment"># 向端口写数据。</span><br>ser.readline()                  <span class="hljs-comment"># 读一行数据。</span><br>ser.readlines()                 <span class="hljs-comment"># 读多行数据。</span><br>in_waiting()                    <span class="hljs-comment"># 返回接收缓存中的字节数。</span><br>flush()                         <span class="hljs-comment"># 等待所有数据写出。</span><br>flushInput()                    <span class="hljs-comment"># 丢弃接收缓存中的所有数据。</span><br>flushOutput()                   <span class="hljs-comment"># 终止当前写操作，并丢弃发送缓存中的数据。</span><br></code></pre></td></tr></table></figure><h3 id="read-readline-readlines-三者的区别"><a href="#read-readline-readlines-三者的区别" class="headerlink" title="read(), readline(), readlines() 三者的区别"></a><code>read()</code>, <code>readline()</code>, <code>readlines()</code> 三者的区别</h3><h4 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h4><p>这里有个txt的文件，其内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">111</span><br><span class="hljs-number">222</span><br><span class="hljs-number">333</span><br></code></pre></td></tr></table></figure><p>用 <code>read()</code> 的输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># read(size)方法从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象</span><br>file_read = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file_path&#x27;</span>)<br><span class="hljs-built_in">print</span>(file_read.read())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(file_read.read()))<br>file_read.close()<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># 111</span><br><span class="hljs-comment"># 222</span><br><span class="hljs-comment"># 333</span><br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>read()</code> 每次读取整个文件，它通常将读取到底文件内容放到一个字符串变量中，也就是说 <code>read()</code> 生成文件内容是一个字符串类型。</strong></p><p>用 <code>readline()</code> 的输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">file_readline = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file_path&#x27;</span>)<br><span class="hljs-built_in">print</span>(file_readline.readline())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(file_readline.readline()))<br>file_readline.close()<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># 111</span><br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>readline()</code> 每只读取文件的一行，通常也是读取到的一行内容放到一个字符串变量中，返回str类型。</strong></p><p>用 <code>readlines()</code> 的输出为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">file_readlines = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file_path&#x27;</span>)<br><span class="hljs-built_in">print</span>(file_readlines.readlines())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(file_readlines.readlines()))<br>file_readlines.close()<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># [&#x27;111\n&#x27;, &#x27;222\n&#x27;, `333\n`]</span><br><span class="hljs-comment"># &lt;class &#x27;list&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>readlines()</code> 每次按行读取整个文件内容，将读取到的内容放到一个列表中，返回 list 类型。</strong></p><h4 id="ser"><a href="#ser" class="headerlink" title="ser"></a>ser</h4><p>串口发送数据内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">b&#x27;Hello/r/n&#x27;</span><br><span class="hljs-string">Arduino</span> <span class="hljs-string">端的代码为</span> <span class="hljs-string">Serial.println()</span> <span class="hljs-string">所以带/r/n。省麻烦可以用</span> <span class="hljs-string">Serial.print()</span><br></code></pre></td></tr></table></figure><p>用 <code>read()</code> 读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ser = serial.Serial(<span class="hljs-string">&#x27;com1&#x27;</span>, <span class="hljs-number">9600</span>, timeout=<span class="hljs-number">1</span>)<br>value = ser.read()<br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(value))<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># b&#x27;H&#x27;</span><br><span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>用 <code>readline()</code> 读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ser = serial.Serial(<span class="hljs-string">&#x27;com1&#x27;</span>, <span class="hljs-number">9600</span>, timeout=<span class="hljs-number">1</span>)<br>value = ser.readline()<br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(value))<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># b&#x27;Hello/r/n&#x27;</span><br><span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>目前我还没有遇到需要用 <code>readlines()</code> 的情况，等遇到了再补充。</p><h3 id="去掉换行符和字符串前面b"><a href="#去掉换行符和字符串前面b" class="headerlink" title="去掉换行符和字符串前面b"></a>去掉换行符和字符串前面b</h3><p>利用 <code>strip()</code> 或者 <code>rstrip()</code> 删除 value 末尾的空格、换行符、回车符、制表符。</p><p>再利用 <code>decode()</code> 或者 <code>decode(’utf-8‘)</code> 对其进行解码，将 bytes 转换为 string。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">value = value.strip().decode()<br><span class="hljs-built_in">print</span>(value)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(value))<br><br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># Hello</span><br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="关于-timeout-参数"><a href="#关于-timeout-参数" class="headerlink" title="关于 timeout 参数"></a>关于 timeout 参数</h3><p>这块内容来自<a href="https://blog.csdn.net/linZinan_/article/details/114804811">python serial库时read、readline、read_all等方法的区别</a>。</p><p>虽然说得很有道理，但我不能复现下面内容，以 MARK 为主。</p><blockquote><p>初始化的时候这里的 <code>timeout</code> 是指在设定的 <code>timeout</code> 时间范围内，如果读取的字节数据是有效的（就是非空）那就直接返回，否则一直会等到这个设定的 <code>timeout</code> 时间并返回这段时间所读的全部字节数据。</p><p>简单来说你可以理解为每 <code>timeout</code> 秒读一次数据，而如果 <code>timeout</code> 太小，数据量太大，可能一次发送不完，会数据未读完的状态。</p><p>也就是说，如果我的 <code>timeout</code> 设置为 0.01，现在我有一个串口通信的传感器，传感器通过串口使用发送一次数据，传感器如果在 0.01 秒内将所有数据都传输过来，就保存到缓存 <code>buffer</code> 中，到了 0.01 秒后就可以读取到传感器发送到 <code>buffer</code> 中的数据了；如果传感器在 0.01 秒内没有将数据发送全的话，<code>buffer</code> 中的数据就是不完全的，就会返回不完全的数据；如果传感器在 0.01 秒内发送了数据的话，<code>buffer</code> 也会返回两组合在一起的数据。</p><p><code>timeout</code> 的设置至关重要，如果不是特别高频的数据的话，<code>timeout=0.01</code> 的 100Hz 完全够了，当然 <code>timeout</code> 最小支持多少要看你的波特率。如果我 0.3 秒发送了一次数据，<code>timeout</code> 设置 0.01，就可以返回一次完整的数据；如果我 0.01 秒发送一次数据，<code>timeout</code> 设置 0.3，那么一次就会返回 30 次数据，所以这就是 <code>timeout</code> 的作用。</p><p>前面引入了 <code>buffer</code> 的概念，可以直接把 <code>buffer</code> 理解为一个文件夹，读数据的方式是和 <code>file</code> 是一样的，只是引入的 <code>timeout</code> 的概念，使得 <code>buffer</code> 内的数据会以 <code>1/timeout</code> 的频率进行刷新。</p><p>如果你把 <code>buffer</code> 当做 <code>file</code> 理解，那么 <code>readline()</code> 就是读取 <code>buffer</code> 中的一行，如果你的数据中存在 <code>\n</code> 这样的换行，那么用 <code>readline()</code> 先让不合适，很容易产生漏读的问题，而且如果你在一个 <code>timeout</code> 周期内没有用 <code>readline()</code> 处理完所有你想要的数据的话，<code>buffer</code> 就刷新了，因此推荐用 <code>read_all()</code> 或者 <code>readlines</code> 来读取。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>串口</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>O2 浓度传感器 SEN0496 驱动</title>
    <link href="/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>传感器采购自 DFRobot，基本上是即买即用。</p><ul><li><p><a href="https://www.dfrobot.com.cn/goods-3501.html">购买地址</a></p></li><li><p><a href="https://wiki.dfrobot.com.cn/SKU_SEN0496_Gravity_%E7%94%B5%E5%8C%96%E5%AD%A6%E6%B0%A7%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8_%E5%85%A8%E9%87%8F%E7%A8%8B_I2C">相关信息</a></p></li></ul><p>Arduino 驱动代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*!</span><br><span class="hljs-comment">  * @file  getOxygenConcentration.ino</span><br><span class="hljs-comment">  * @brief Enable the power, and the information is printed on the serial port.</span><br><span class="hljs-comment">  * @n When using IIC device, select I2C address, set the dialing switch A0, A1 (Address_0 is [0 0]), (Address_1 is [1 0]), (Address_2 is [0 1]), (Address_3 is [1 1]).</span><br><span class="hljs-comment">  * @copyright   Copyright (c) 2010 DFRobot Co.Ltd (https://www.dfrobot.com)</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DFRobot_EOxygenSensor.h&quot;</span>  <span class="hljs-comment">// 需要额外安装DFRobot_EOxygenSensor库</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  iic slave Address, The default is E_OXYGEN_ADDRESS_0</span><br><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_0               0x70</span><br><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_1               0x71</span><br><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_2               0x72</span><br><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_3               0x73</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OXYGEN_I2C_ADDRESS E_OXYGEN_ADDRESS_0</span><br><span class="hljs-function">DFRobot_EOxygenSensor_I2C <span class="hljs-title">oxygen</span><span class="hljs-params">(&amp;Wire, OXYGEN_I2C_ADDRESS)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br><span class="hljs-keyword">while</span>(!Serial);<br><span class="hljs-keyword">while</span>(!oxygen.<span class="hljs-built_in">begin</span>())&#123;<br>Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;NO Deivces !&quot;</span>);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>&#125; Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Device connected successfully !&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;oxygen concetnration is &quot;</span>); <br>    Serial.<span class="hljs-built_in">print</span>(oxygen.<span class="hljs-built_in">readOxygenConcentration</span>());<br>    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;% VOL&quot;</span>);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>Sensor</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CO2 浓度传感器 SEN0220 驱动</title>
    <link href="/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>传感器采购自 DFRobot，基本上是即买即用。</p><ul><li><p><a href="https://www.dfrobot.com.cn/goods-1360.html">购买地址</a></p></li><li><p><a href="https://wiki.dfrobot.com.cn/_SKU_SEN0220_Infrared_CO2_Sensor_0-50000ppm_Wide_Range__%E4%BA%8C%E6%B0%A7%E5%8C%96%E7%A2%B3%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97">相关信息</a></p></li></ul><p>Arduino 驱动代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*!</span><br><span class="hljs-comment"> * @file  SEN0220.ino</span><br><span class="hljs-comment"> * @brief Infrared CO2 Sensor 0-50000ppm(Wide Range)</span><br><span class="hljs-comment"> * @n This example is used for detectting CO2 concentration.</span><br><span class="hljs-comment"> * @copyright  Copyright (c) 2010 DFRobot Co.Ltd (http://www.dfrobot.com)</span><br><span class="hljs-comment"> * @license  The MIT License (MIT)</span><br><span class="hljs-comment"> * @author  lg.gang(lg.gang@qq.com)</span><br><span class="hljs-comment"> * @version  V1.0</span><br><span class="hljs-comment"> * @date  2016-06-06</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><br><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">mySerial</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>)</span></span>; <span class="hljs-comment">// RX, TX</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> hexData[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0xFF</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x79</span>&#125;; <span class="hljs-comment">//Read the gas density command /Don&#x27;t change the order</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>    <span class="hljs-keyword">while</span> (!Serial) &#123;<br>    &#125;<br>    mySerial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>mySerial.<span class="hljs-built_in">write</span>(hexData, <span class="hljs-number">9</span>);<br><span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (mySerial.<span class="hljs-built_in">available</span>() &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-type">long</span> hi, lo, CO2;<br><span class="hljs-type">int</span> ch = mySerial.<span class="hljs-built_in">read</span>();<br><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br>                hi = ch;    <span class="hljs-comment">//High concentration</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>                lo = ch;    <span class="hljs-comment">//Low concentration</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>) &#123;<br>                CO2 = hi * <span class="hljs-number">256</span> + lo; <span class="hljs-comment">//CO2 concentration</span><br>                Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CO2 concentration: &quot;</span>);<br>                Serial.<span class="hljs-built_in">print</span>(CO2);<br>                Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;ppm&quot;</span>);<br>            &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>Sensor</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino 输入输出数字信号</title>
    <link href="/2023/08/11/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/"/>
    <url>/2023/08/11/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>Arduino Uno 上每一个带有数字编号的引脚，都是数字引脚，包括写有 A 编号的模拟输入引脚。</p><p>数字信号是以 0、1 表示的电平不连续变化的信号，也就是以二进制的形式表示的信号。在 Arduino 中数字信号通过高低电平来表示，高电平则为数字信号 1，低电平则为数字信号 0。</p><p>在使用输入或输出功能前，需要先通过 <code>pinMode()</code> 函数配置引脚的模式为输入模式或输出模式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">pinMode</span>(pin, mode);<br></code></pre></td></tr></table></figure><p>参数 pin 为指定配置的引脚编号；参数 mode 为指定的配置模式，包括：</p><ul><li>INPUT，输入模式</li><li>OUTPUT，输出模式</li><li>INPUT_PULLUP，输入上拉模式</li></ul><h3 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h3><p>配置成输出模式后，还需要使用 <code>digitalWrite()</code> 让其输出高电平或者是低电平。其调用形式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">digitalWrite</span>(pin, value);<br></code></pre></td></tr></table></figure><p>参数 pin 为指定输出的引脚编号；参数 value 为要指定输出的电平，使用 HIGH 指定输出高电平，或是使用 LOW 指定输出低电平。Arduino 中输出的低电平为 0V，输出的高电平为当前 Arduino 的工作电压。例如 Arduino UNO 的工作电压为 3.3V，其高电平输出也是 3.3V；Arduino Uno 工作电压为 5V，所以高电平输出也就是 5V。</p><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Blink</span><br><span class="hljs-comment">等待一秒钟，点亮LED，再等待一秒钟，熄灭LED，如此循环</span><br><span class="hljs-comment">*/</span> <br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ledPin A0     </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span>&#123;                <br>    <span class="hljs-built_in">pinMode</span>(ledPin, OUTPUT);      <span class="hljs-comment">// 初始化A0引脚设置为输出状态</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">digitalWrite</span>(ledPin, HIGH);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">digitalWrite</span>(ledPin, LOW);<br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>数字引脚除了用于输出信号外，还可以用 <code>digitalRead()</code> 函数读取外部输入的数字信号，其调用形式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> value = <span class="hljs-built_in">digitalRead</span>(pin);<br></code></pre></td></tr></table></figure><p>参数 pin 为指定读取状态的引脚编号；返回值 value 为获取到的信号状态，1 为高电平，0 为低电平。</p><p>Arduino Uno 会将大于 1.5V 的输入电压视为高电平，小于 1.3V 的电压视为低电平。所以，即使输入电压不太准确，Arduino Uno 也可以正常识别。</p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino 输入输出模拟信号</title>
    <link href="/2023/08/10/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/"/>
    <url>/2023/08/10/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>在 Arduino UNO 上，除了 14 个数字输入&#x2F;输出引脚，还带有 6 个编号 A 的模拟输入引脚。Arduino 可以读取这些引脚上输入的模拟值，即读取引脚上输入的电压大小。模拟信号是用连续变化的物理量表示的信息，信号随时间作连续变化。</p><p>模拟输入引脚是带有 ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。</p><p>Arduino Uno模拟输入功能有 10 位精度，即可以将0～5V的电压信号转换为 0～1023 的整数形式表示。换句话说，我们可以将 5V 等分成 1024 份。0V 的输入信号对应着数值 0，而 5V 的输入信号对应着 1023。</p><h3 id="输入信号"><a href="#输入信号" class="headerlink" title="输入信号"></a>输入信号</h3><p>模拟输入功能需要使用 <code>analogRead()</code> 函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> value = <span class="hljs-built_in">analogRead</span>(pin)<br></code></pre></td></tr></table></figure><p>参数 pin 是指定要读取模拟值的引脚，被指定的引脚必须是模拟输入引脚。如 <code>analogRead(A0)</code>，即是读取A0引脚上的模拟值。Arduino 读取一次模拟输入需要消耗 100 微秒的时间，最大频率为 10000HZ。</p><p><strong>注意：在模拟输入引脚没有任何连接的情况下，用 <code>analogRead()</code> 读取该引脚，这时获得的返回值为不固定的数值。这个数值可能受到多种因素影响，如将手靠近引脚也可能使得该返回值产生变化。</strong></p><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 传感器数据传输引脚连接在Arduino的A0引脚</span><br><span class="hljs-comment">// 传感器另外两个引脚分别连接在Arduino的5V和GND引脚</span><br><br><span class="hljs-comment">// 变量sensorValue用来存储模拟输入信号</span><br><span class="hljs-type">int</span> sensorValue = <span class="hljs-number">0</span>;           <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// Arduino串口通讯初始化 </span><br>Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 读取引脚A0输入信号</span><br>sensorValue = <span class="hljs-built_in">analogRead</span>(A0);   <br><br><span class="hljs-comment">// 将A0输入信号转换为0-1023之间的数值</span><br><span class="hljs-comment">// 并且通过串口监视器显示 </span><br>Serial.<span class="hljs-built_in">println</span>(sensorValue); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出信号"><a href="#输出信号" class="headerlink" title="输出信号"></a>输出信号</h3><p>与模拟输入功能对应的是模拟输出功能，使用 <code>analogWrite()</code> 函数实现这个功能。但该函数并不是输出真正意义上的模拟值，而是以一种特殊的方式来达到输出近似模拟值的效果，这种方式叫做脉冲宽度调制（PWM，Pulse Width Modulation）。</p><p>在Arduino Uno中，提供PWM功能的引脚为3、5、6、9、10、11。</p><p>当使用 <code>analogWrite()</code> 函数时，指定引脚会通过高低电平的不断转换输出一个周期固定的方波，通过改变高低电平在每个周期中所占的比例（占空比），而得到近似输出不同的电压的效果。</p><p>需要注意的是，这里仅仅是得到了近似模拟值输出的效果，如果要输出真正的模拟值，还需要加上外围滤波电路。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">analogWrite</span>(pin, value)<br></code></pre></td></tr></table></figure><p>参数 pin 是指定要输出 PWM 波的引脚，参数 value 指定是 PWM 的脉冲宽度，范围为 0～255。</p><p>在 <code>analogWrite()</code> 和 <code>analogRead()</code> 函数内部，已经完成了引脚的初始化，因此不用在 <code>setup()</code> 函数中进行初始化操作（数字信号的 <code>pinMode()</code>）。</p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派开启远程桌面并修改分辨率</title>
    <link href="/2023/08/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <url>/2023/08/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h3 id="1-启动树莓派桌面系统自带的-VNC-服务"><a href="#1-启动树莓派桌面系统自带的-VNC-服务" class="headerlink" title="1.启动树莓派桌面系统自带的 VNC 服务"></a>1.启动树莓派桌面系统自带的 VNC 服务</h3><p>首先 ssh 登录树莓派，终端输入 <code>sudo raspi-config</code> 启动自带的配置程序。</p><p>找到「Interfacing Options」选项，进入二级菜单找到「VNC」选项开启。</p><h3 id="2-下载-VNC-Viewer"><a href="#2-下载-VNC-Viewer" class="headerlink" title="2.下载 VNC Viewer"></a>2.下载 VNC Viewer</h3><p><a href="https://www.realvnc.com/en/connect/download/viewer/">下载地址</a></p><h3 id="3-登录远程桌面"><a href="#3-登录远程桌面" class="headerlink" title="3.登录远程桌面"></a>3.登录远程桌面</h3><p>运行 VNC Viewer 之后输入树莓派的 IP 地址，通过 <code>ifconfig</code> 命令可以查看。选择连接之后输入树莓派的登录用户名和密码（烧录系统时初始化）。确认之后即可进入树莓派的远程桌面。</p><h3 id="4-修改分辨率"><a href="#4-修改分辨率" class="headerlink" title="4.修改分辨率"></a>4.修改分辨率</h3><p>终端输入 <code>sudo raspi-config</code> 启动配置程序，操作顺序为「Advanced Options &gt; Resolution」。</p><p>需要注意的是：</p><ol><li>在树莓派没有连接显示器的情况下，上述操作可以调整远程桌面分辨率，但最大为「1920x1080」；</li><li>在树莓派连接显示器的情况下，远程桌面分辨率与显示器分辨率相同，无法通过配置程序进行修改。可以在「Preferences」中修改显示器分辨率，从而修改远程桌面分辨率。这种情况下，可以认为远程桌面为显示器镜像；</li><li>可以采用在终端输入例如 <code>vncserver -geometry 2560x1440 :1</code>（如果不行就 <code>vncserver-virtual -geometry 2560x1440 :1</code>）的方式开启一个新的（临时）桌面，新桌面的分辨率为 2560x1440，端口号为 1。<ol><li>VNC Viewer 连接新桌面输入 IP 时，需要加上端口号，例如 <code>192.168.1.216:1</code>。新桌面开启成功后，终端会返回这个值；</li><li>可以开启多个桌面，只要端口不重复、占用，且每个桌面互相独立；</li><li>如果指令不带端口号，例如 <code>vncserver -geometry 2560x1440</code> 则会默认从端口 1 开启。若端口 1 已被桌面占用，则会开启端口 2，以此类推；</li><li>若新桌面鼠标变成一个「X」，可在终端输入 <code>lxappearance</code> 打开鼠标设置，即可恢复正常；</li><li>通过这种方式开启的桌面，会在树莓派关机后销毁，所以是「临时」的。</li></ol></li></ol><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><p>貌似不在配置程序中开启 VNC 服务，而是直接在终端输入 <code>vncserver</code> 或者 <code>vncserver -geometry 2560x1440</code> 也可开启（临时）远程桌面。</p><p>若在这种情况下运行 VNC Viewer，<strong>必须</strong>输入带端口的 IP。直接输入 IP 会报错：</p><blockquote><p> The connection was refused by the computer</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift Timer 定时器</title>
    <link href="/2023/08/07/Swift-Timer-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2023/08/07/Swift-Timer-%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimerView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count1: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count2: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count3: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-comment">// 创建第一个定时器 timer1 </span><br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> timer1: <span class="hljs-type">Timer</span>?<br>    <span class="hljs-comment">// 创建第二个定时器 timer2</span><br>    <span class="hljs-keyword">let</span> timer2 <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">1.0</span>, on: .main, in: .common).autoconnect()<br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> (spacing: <span class="hljs-number">55</span>) &#123;<br>            <span class="hljs-comment">// 调用 timer1 启动方法</span><br>            <span class="hljs-type">Button</span>(action: &#123;setupTimer()&#125;) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;start&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Button</span>(action: &#123;resetTimer()&#125;) &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;reset&quot;</span>)<br>            &#125;<br>        &#125;<br>        .onAppear &#123;<br>            <span class="hljs-comment">// timer3 创建&amp;启动</span><br>            <span class="hljs-type">Timer</span>.scheduledTimer(withTimeInterval: <span class="hljs-number">1.0</span>,  repeats: <span class="hljs-literal">true</span>)&#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span><br>                count3 <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&gt; timer3 running <span class="hljs-subst">\(count3)</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// timer2 启动！</span><br>        .onReceive(timer2) &#123; input <span class="hljs-keyword">in</span><br>            count2 <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&gt; timer2 running <span class="hljs-subst">\(count2)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">setupTimer</span>() &#123;<br>        <span class="hljs-keyword">guard</span> timer1 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> &#125;<br>        <span class="hljs-comment">// timer1 启动！</span><br>        timer1 <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.scheduledTimer(withTimeInterval: <span class="hljs-number">1.0</span>, repeats: <span class="hljs-literal">true</span>, block: &#123; <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span><br>            count1 <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&gt; timer1 running <span class="hljs-subst">\(count1)</span>&quot;</span>)<br>        &#125;)<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">resetTimer</span>() &#123;<br>        timer1<span class="hljs-operator">?</span>.invalidate()<br>        timer1 <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 关键字 Nonlocal 与 Global</title>
    <link href="/2023/08/07/Python-%E5%85%B3%E9%94%AE%E5%AD%97-Nonlocal-%E4%B8%8E-Global/"/>
    <url>/2023/08/07/Python-%E5%85%B3%E9%94%AE%E5%AD%97-Nonlocal-%E4%B8%8E-Global/</url>
    
    <content type="html"><![CDATA[<p>global 的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">num1 = <span class="hljs-number">0</span><br>num2 = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_num</span>():<br>  <span class="hljs-keyword">global</span> num1<br>  num1 = <span class="hljs-number">1</span><br>  num2 = <span class="hljs-number">1</span><br><br>change_num()<br><span class="hljs-built_in">print</span>(num1, num2)<br><span class="hljs-comment"># output: 1, 0</span><br><span class="hljs-comment"># 不允许直接修改全局变量(数组、字典除外)，需要添加 global 关键字</span><br></code></pre></td></tr></table></figure><p>nonlocal 的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">num1 = <span class="hljs-number">0</span><br>num2 = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_num</span>():<br>  num3 = <span class="hljs-number">1</span><br>  num4 = <span class="hljs-number">1</span><br>  <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">change_num_inner</span>():<br>    <span class="hljs-keyword">nonlocal</span> num3<br>    num3 = <span class="hljs-number">2</span><br>    num4 = <span class="hljs-number">2</span><br>    <br>  change_num_inner()<br>  <br>  <span class="hljs-keyword">return</span> num3, num4<br><br>num1, num2 = change_num()<br><span class="hljs-built_in">print</span>(num1, num2)<br><span class="hljs-comment"># output: 2, 1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 获取数组出现次数最多的元素</title>
    <link href="/2023/08/07/Python-%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <url>/2023/08/07/Python-%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br>max_label = <span class="hljs-built_in">max</span>(a, key=a.count)<br><span class="hljs-built_in">print</span>(max_label)<br><span class="hljs-comment"># output: 2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 猫狗识别深度学习 I 低准确度版本</title>
    <link href="/2023/08/07/PyTorch-%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-I-%E4%BD%8E%E5%87%86%E7%A1%AE%E5%BA%A6%E7%89%88%E6%9C%AC/"/>
    <url>/2023/08/07/PyTorch-%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-I-%E4%BD%8E%E5%87%86%E7%A1%AE%E5%BA%A6%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><p><a href="https://www.kaggle.com/datasets/tongpython/cat-and-dog">Cat and Dog</a></p><p>下载的文件层级为：</p><p>PetImages(doc) - Cat(doc)&#x2F;Dog(doc) - image(jpg)</p><p>需要注意狗的 11702 和猫的 666 这两张图片损坏了。在加载数据集的时候会出现警告。</p><h3 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h3><h4 id="获取猫狗图片的-txt"><a href="#获取猫狗图片的-txt" class="headerlink" title="获取猫狗图片的 txt"></a>获取猫狗图片的 txt</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_txt</span>(<span class="hljs-params">path, file_name, label</span>):<br>    <span class="hljs-comment"># path：dataset的根目录</span><br>    <span class="hljs-comment"># file_path：dataset文件夹</span><br>    file_path = os.path.join(path, file_name)<br>    data = os.listdir(file_path)<br>    <span class="hljs-comment"># &#x27;w&#x27; is mean write</span><br>    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file_name + <span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>        f.write(item + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(label) + <span class="hljs-string">&#x27; &#x27;</span> + file_name + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.close()<br></code></pre></td></tr></table></figure><p>这里是将 PetImages 文件夹下的 Cat 或者 Dog 文件打开，遍历里面的照片，最后输出 txt 文件。</p><p>txt 的内容为（以猫为例）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.jpg <span class="hljs-number">0</span> Cat<br><span class="hljs-attribute">2</span>.jpg <span class="hljs-number">0</span> Cat<br><span class="hljs-attribute">3</span>.jpg <span class="hljs-number">0</span> Cat<br><span class="hljs-attribute">4</span>.jpg <span class="hljs-number">0</span> Cat<br></code></pre></td></tr></table></figure><p>这里，Cat 的 label 为 0，Dog 的 label 为 1。</p><h4 id="混合猫狗图片的-txt"><a href="#混合猫狗图片的-txt" class="headerlink" title="混合猫狗图片的 txt"></a>混合猫狗图片的 txt</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_txt</span>(<span class="hljs-params">path, file1_name, file2_name</span>):<br>    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;DataSet.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-comment"># &#x27;r&#x27; is mean read</span><br>    f1 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file1_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-comment"># readline/readlines</span><br>    data1 = f1.readlines()<br>    <span class="hljs-comment"># PC 上生成的 txt 有 DStore 信息。合并 txt 时需要只读取第一行之后的内容</span><br>    <span class="hljs-comment"># data1 = data1[1:]</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data1:<br>        f.write(item)<br><br>    f2 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file2_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    data2 = f2.readlines()<br>    <span class="hljs-comment"># data2 = data2[1:]</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data2:<br>        f.write(item)<br><br>    f.close()<br>    f1.close()<br>    f2.close()<br></code></pre></td></tr></table></figure><h3 id="构建数据集"><a href="#构建数据集" class="headerlink" title="构建数据集"></a>构建数据集</h3><h4 id="定义数据集类，通过-txt-索引将所有图片变成数据集"><a href="#定义数据集类，通过-txt-索引将所有图片变成数据集" class="headerlink" title="定义数据集类，通过 txt 索引将所有图片变成数据集"></a>定义数据集类，通过 txt 索引将所有图片变成数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path, transform</span>):<br>        <span class="hljs-variable language_">self</span>.path = path<br>        <span class="hljs-variable language_">self</span>.transform = transform<br>        <span class="hljs-variable language_">self</span>.txt_path = <span class="hljs-variable language_">self</span>.path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;Dataset.txt&#x27;</span><br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.txt_path, <span class="hljs-string">&#x27;r&#x27;</span>)<br>        data = f.readlines()<br>        images = []<br>        labels = []<br><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-comment"># 去掉空格，并组成数组</span><br>            word = item.split()<br>            images.append(os.path.join(<span class="hljs-variable language_">self</span>.path, word[<span class="hljs-number">2</span>], word[<span class="hljs-number">0</span>]))<br>            labels.append(<span class="hljs-built_in">int</span>(word[<span class="hljs-number">1</span>]))<br><br>        <span class="hljs-comment"># 张量化</span><br>        labels = torch.LongTensor(labels)<br>        <span class="hljs-variable language_">self</span>.images = images<br>        <span class="hljs-variable language_">self</span>.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        image = <span class="hljs-variable language_">self</span>.images[index]<br>        label = <span class="hljs-variable language_">self</span>.labels[index]<br>        image = Image.<span class="hljs-built_in">open</span>(image).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>        image = <span class="hljs-variable language_">self</span>.transform(image)<br>        <span class="hljs-keyword">return</span> image, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.labels)<br></code></pre></td></tr></table></figure><h4 id="初始化数据集，并切割"><a href="#初始化数据集，并切割" class="headerlink" title="初始化数据集，并切割"></a>初始化数据集，并切割</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataset</span>(<span class="hljs-params">path, transform</span>):<br>    tic = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Dataset...&#x27;</span>)<br>    dataset = ImageDataset(path, transform)<br>    train, test = train_test_split(dataset, test_size=<span class="hljs-number">0.2</span>)<br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Over, Cost Time: &#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> train, test<br></code></pre></td></tr></table></figure><h3 id="MODEL"><a href="#MODEL" class="headerlink" title="MODEL"></a>MODEL</h3><h4 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h4><p>不负责的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(nn.Module):<br>    <span class="hljs-comment"># ValueError:optimizer got an empty parameter list</span><br>    <span class="hljs-comment"># init写错（int），没有__，没有super都会报错</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Model, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 卷积层</span><br>        <span class="hljs-comment"># original 3 x 256 x 256</span><br>        <span class="hljs-comment"># conv1 -&gt; 8 x 256 x 256</span><br>        <span class="hljs-variable language_">self</span>.conv1 = nn.Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">8</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># pool1 -&gt; 8 x 128 x 128</span><br>        <span class="hljs-variable language_">self</span>.pool1 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># conv2 -&gt; 16 x 128 x 128</span><br>        <span class="hljs-variable language_">self</span>.conv2 = nn.Conv2d(in_channels=<span class="hljs-number">8</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># pool2 -&gt; 16 x 64 x 64</span><br>        <span class="hljs-variable language_">self</span>.pool2 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># conv3 -&gt; 32 x 64 x 64</span><br>        <span class="hljs-variable language_">self</span>.conv3 = nn.Conv2d(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># pool3 -&gt; 32 x 32 x 32</span><br>        <span class="hljs-variable language_">self</span>.pool3 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 全连接层</span><br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(<span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>, <span class="hljs-number">256</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">64</span>)<br>        <span class="hljs-variable language_">self</span>.fc3 = nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.conv1(x)<br>        x = nn.functional.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.pool1(x)<br><br>        x = <span class="hljs-variable language_">self</span>.conv2(x)<br>        x = nn.functional.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.pool2(x)<br><br>        x = <span class="hljs-variable language_">self</span>.conv3(x)<br>        x = nn.functional.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.pool3(x)<br><br>        <span class="hljs-comment"># x = x.view(32 * 32 * 32, -1)</span><br>        <span class="hljs-comment"># mat1 and mat2 shapes cannot be multiplied (32768x50 and 32768x256)</span><br>        <span class="hljs-comment"># batch_size = 50</span><br>        <span class="hljs-comment"># 要改成 50x32768 and 32768x256</span><br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>)<br>        x = <span class="hljs-variable language_">self</span>.fc1(x)<br>        x = nn.functional.relu(x)<br><br>        x = <span class="hljs-variable language_">self</span>.fc2(x)<br>        x = nn.functional.relu(x)<br><br>        x = <span class="hljs-variable language_">self</span>.fc3(x)<br>        x = nn.functional.softmax(x, dim=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><p>注意两个点：</p><ol><li>init 写错（int），没有__，没有 super 都会报错 ValueError:optimizer got an empty parameter list；</li><li>x &#x3D; x.view(32 * 32 * 32, -1) 会报错 mat1 and mat2 shapes cannot be multiplied (32768x50 and 32768x256)，要行对列。</li></ol><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_model</span>(<span class="hljs-params">train, test, batch_size, gpu, lr, epochs</span>):<br>    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>    model = Model()<br>    <span class="hljs-comment"># SGD</span><br>    optimizer = torch.optim.Adam(model.parameters(), lr=lr)<br>    <span class="hljs-comment"># RuntimeError: Boolean value of Tensor with more than one value is ambiguous</span><br>    <span class="hljs-comment"># 初始化的时候，后面加个()</span><br>    loss_func = nn.CrossEntropyLoss()<br><br>    <span class="hljs-keyword">if</span> gpu:<br>        <span class="hljs-comment"># Input type (torch.FloatTensor) and weight type (torch.cuda.FloatTensor) should be the same</span><br>        <span class="hljs-comment"># 要model = model.to(device)，不能写model.to(device)</span><br>        model = model.to(device)<br>        loss_func = loss_func.to(device)<br><br>    train_dataloader = DataLoader(train,<br>                                  batch_size=batch_size,<br>                                  shuffle=<span class="hljs-literal">True</span>,<br>                                  num_workers=<span class="hljs-number">0</span>,<br>                                  pin_memory=<span class="hljs-literal">True</span>)<br><br>    test_dataloader = DataLoader(test,<br>                                 batch_size=batch_size,<br>                                 shuffle=<span class="hljs-literal">True</span>,<br>                                 num_workers=<span class="hljs-number">0</span>,<br>                                 pin_memory=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        tic = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Training&#x27;</span>)<br>        <span class="hljs-keyword">for</span> step, (train_images, train_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br><br>            <span class="hljs-keyword">if</span> gpu:<br>                train_images = train_images.to(device)<br>                train_labels = train_labels.to(device)<br><br>            prediction = model(train_images)<br>            loss = loss_func(prediction, train_labels)<br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br>            <span class="hljs-comment"># print(&#x27;Epoch: &#x27;, epoch + 1, &#x27;| Step: &#x27;, step + 1, &#x27;| Loss: &#x27;, loss.item())</span><br><br>        toc = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train&#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Over&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset Loading...&#x27;</span>)<br><br>        correct = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> step, (test_images, test_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_dataloader):<br><br>            <span class="hljs-keyword">if</span> gpu:<br>                test_images = test_images.to(device)<br>                test_labels = test_labels.to(device)<br><br>            result = model(test_images)<br>            prediction = torch.argmax(result, <span class="hljs-number">1</span>)<br>            correct += (prediction == test_labels).<span class="hljs-built_in">sum</span>().item()<br>        accuracy = correct / <span class="hljs-built_in">len</span>(test_dataset)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset:&#x27;</span>, <span class="hljs-built_in">len</span>(test_dataset), <span class="hljs-string">&#x27;| Correct:&#x27;</span>, correct, <span class="hljs-string">&#x27;| Accuracy:&#x27;</span>, accuracy)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        time.sleep(<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">return</span> model<br></code></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path, transform</span>):<br>        <span class="hljs-variable language_">self</span>.path = path<br>        <span class="hljs-variable language_">self</span>.transform = transform<br>        <span class="hljs-variable language_">self</span>.txt_path = <span class="hljs-variable language_">self</span>.path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;Dataset.txt&#x27;</span><br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.txt_path, <span class="hljs-string">&#x27;r&#x27;</span>)<br>        data = f.readlines()<br>        images = []<br>        labels = []<br><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-comment"># 去掉空格，并组成数组</span><br>            word = item.split()<br>            images.append(os.path.join(<span class="hljs-variable language_">self</span>.path, word[<span class="hljs-number">2</span>], word[<span class="hljs-number">0</span>]))<br>            labels.append(<span class="hljs-built_in">int</span>(word[<span class="hljs-number">1</span>]))<br><br>        <span class="hljs-comment"># 张量化</span><br>        labels = torch.LongTensor(labels)<br>        <span class="hljs-variable language_">self</span>.images = images<br>        <span class="hljs-variable language_">self</span>.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        image = <span class="hljs-variable language_">self</span>.images[index]<br>        label = <span class="hljs-variable language_">self</span>.labels[index]<br>        image = Image.<span class="hljs-built_in">open</span>(image).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>        image = <span class="hljs-variable language_">self</span>.transform(image)<br>        <span class="hljs-keyword">return</span> image, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.labels)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(nn.Module):<br>    <span class="hljs-comment"># ValueError:optimizer got an empty parameter list</span><br>    <span class="hljs-comment"># init写错（int），没有__，没有super都会报错</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Model, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 卷积层</span><br>        <span class="hljs-comment"># original 3 x 256 x 256</span><br>        <span class="hljs-comment"># conv1 -&gt; 8 x 256 x 256</span><br>        <span class="hljs-variable language_">self</span>.conv1 = nn.Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">8</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># pool1 -&gt; 8 x 128 x 128</span><br>        <span class="hljs-variable language_">self</span>.pool1 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># conv2 -&gt; 16 x 128 x 128</span><br>        <span class="hljs-variable language_">self</span>.conv2 = nn.Conv2d(in_channels=<span class="hljs-number">8</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># pool2 -&gt; 16 x 64 x 64</span><br>        <span class="hljs-variable language_">self</span>.pool2 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># conv3 -&gt; 32 x 64 x 64</span><br>        <span class="hljs-variable language_">self</span>.conv3 = nn.Conv2d(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># pool3 -&gt; 32 x 32 x 32</span><br>        <span class="hljs-variable language_">self</span>.pool3 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 全连接层</span><br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(<span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>, <span class="hljs-number">256</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">64</span>)<br>        <span class="hljs-variable language_">self</span>.fc3 = nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.conv1(x)<br>        x = nn.functional.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.pool1(x)<br><br>        x = <span class="hljs-variable language_">self</span>.conv2(x)<br>        x = nn.functional.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.pool2(x)<br><br>        x = <span class="hljs-variable language_">self</span>.conv3(x)<br>        x = nn.functional.relu(x)<br>        x = <span class="hljs-variable language_">self</span>.pool3(x)<br><br>        <span class="hljs-comment"># x = x.view(32 * 32 * 32, -1)</span><br>        <span class="hljs-comment"># mat1 and mat2 shapes cannot be multiplied (32768x50 and 32768x256)</span><br>        <span class="hljs-comment"># batch_size = 50</span><br>        <span class="hljs-comment"># 要改成 50x32768 and 32768x256</span><br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>)<br>        x = <span class="hljs-variable language_">self</span>.fc1(x)<br>        x = nn.functional.relu(x)<br><br>        x = <span class="hljs-variable language_">self</span>.fc2(x)<br>        x = nn.functional.relu(x)<br><br>        x = <span class="hljs-variable language_">self</span>.fc3(x)<br>        x = nn.functional.softmax(x, dim=<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_txt</span>(<span class="hljs-params">path, file_name, label</span>):<br>    <span class="hljs-comment"># path：dataset的根目录</span><br>    <span class="hljs-comment"># file_path：dataset文件夹</span><br>    file_path = os.path.join(path, file_name)<br>    data = os.listdir(file_path)<br>    <span class="hljs-comment"># &#x27;w&#x27; is mean write</span><br>    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>        f.write(item + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(label) + <span class="hljs-string">&#x27; &#x27;</span> + file_name + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_txt</span>(<span class="hljs-params">path, file1_name, file2_name</span>):<br>    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;DataSet.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-comment"># &#x27;r&#x27; is mean read</span><br>    f1 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file1_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-comment"># readline/readlines</span><br>    data1 = f1.readlines()<br>    <span class="hljs-comment"># PC 上生成的 txt 有 DStore 信息。合并 txt 时需要只读取第一行之后的内容</span><br>    <span class="hljs-comment"># data1 = data1[1:]</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data1:<br>        f.write(item)<br><br>    f2 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file2_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    data2 = f2.readlines()<br>    <span class="hljs-comment"># data2 = data2[1:]</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data2:<br>        f.write(item)<br><br>    f.close()<br>    f1.close()<br>    f2.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataset</span>(<span class="hljs-params">path, transform</span>):<br>    tic = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Dataset...&#x27;</span>)<br>    dataset = ImageDataset(path, transform)<br>    train, test = train_test_split(dataset, test_size=<span class="hljs-number">0.2</span>)<br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Over, Cost Time: &#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> train, test<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_model</span>(<span class="hljs-params">train, test, batch_size, gpu, lr, epochs</span>):<br>    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>    model = Model()<br>    <span class="hljs-comment"># SGD</span><br>    optimizer = torch.optim.Adam(model.parameters(), lr=lr)<br>    <span class="hljs-comment"># RuntimeError: Boolean value of Tensor with more than one value is ambiguous</span><br>    <span class="hljs-comment"># 初始化的时候，后面加个()</span><br>    loss_func = nn.CrossEntropyLoss()<br><br>    <span class="hljs-keyword">if</span> gpu:<br>        <span class="hljs-comment"># Input type (torch.FloatTensor) and weight type (torch.cuda.FloatTensor) should be the same</span><br>        <span class="hljs-comment"># 要model = model.to(device)，不能写model.to(device)</span><br>        model = model.to(device)<br>        loss_func = loss_func.to(device)<br><br>    train_dataloader = DataLoader(train,<br>                                  batch_size=batch_size,<br>                                  shuffle=<span class="hljs-literal">True</span>,<br>                                  num_workers=<span class="hljs-number">0</span>,<br>                                  pin_memory=<span class="hljs-literal">True</span>)<br><br>    test_dataloader = DataLoader(test,<br>                                 batch_size=batch_size,<br>                                 shuffle=<span class="hljs-literal">True</span>,<br>                                 num_workers=<span class="hljs-number">0</span>,<br>                                 pin_memory=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        tic = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Training&#x27;</span>)<br>        <span class="hljs-keyword">for</span> step, (train_images, train_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br><br>            <span class="hljs-keyword">if</span> gpu:<br>                train_images = train_images.to(device)<br>                train_labels = train_labels.to(device)<br><br>            prediction = model(train_images)<br>            loss = loss_func(prediction, train_labels)<br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br>            <span class="hljs-comment"># print(&#x27;Epoch: &#x27;, epoch + 1, &#x27;| Step: &#x27;, step + 1, &#x27;| Loss: &#x27;, loss.item())</span><br><br>        toc = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train&#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Over&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset Loading...&#x27;</span>)<br><br>        correct = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> step, (test_images, test_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_dataloader):<br><br>            <span class="hljs-keyword">if</span> gpu:<br>                test_images = test_images.to(device)<br>                test_labels = test_labels.to(device)<br><br>            result = model(test_images)<br>            prediction = torch.argmax(result, <span class="hljs-number">1</span>)<br>            correct += (prediction == test_labels).<span class="hljs-built_in">sum</span>().item()<br>        accuracy = correct / <span class="hljs-built_in">len</span>(test_dataset)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset:&#x27;</span>, <span class="hljs-built_in">len</span>(test_dataset), <span class="hljs-string">&#x27;| Correct:&#x27;</span>, correct, <span class="hljs-string">&#x27;| Accuracy:&#x27;</span>, accuracy)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>        time.sleep(<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">return</span> model<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># root_path = &#x27;E:/Mac/PetImages&#x27;</span><br>    root_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/PetImages&#x27;</span><br>    get_txt(root_path, file_name=<span class="hljs-string">&#x27;Cat&#x27;</span>, label=<span class="hljs-number">0</span>)<br>    get_txt(root_path, file_name=<span class="hljs-string">&#x27;Dog&#x27;</span>, label=<span class="hljs-number">1</span>)<br>    mix_txt(root_path, file1_name=<span class="hljs-string">&#x27;Cat&#x27;</span>, file2_name=<span class="hljs-string">&#x27;Dog&#x27;</span>)<br>    custom_transform = transforms.Compose([<br>        transforms.Resize(<span class="hljs-number">288</span>),<br>        transforms.CenterCrop(<span class="hljs-number">256</span>),<br>        transforms.ToTensor()<br>    ])<br><br>    <span class="hljs-comment"># batch_size</span><br>    <span class="hljs-comment"># https://blog.51cto.com/u_15127688/4678771</span><br>    <span class="hljs-comment"># 这相比于全数据集训练，相当于是在寻找最优时人为增加了一些随机噪声，来修正由局部数据得到的梯度，尽量避免因 batch size 过大陷入局部最优</span><br>    <span class="hljs-comment"># 吃内存</span><br><br>    train_dataset, test_dataset = get_dataset(root_path, custom_transform)<br>    cat_vs_dog_model = get_model(train=train_dataset, test=test_dataset,<br>                                 batch_size=<span class="hljs-number">25</span>,<br>                                 gpu=<span class="hljs-literal">False</span>,<br>                                 lr=<span class="hljs-number">0.0001</span>,<br>                                 epochs=<span class="hljs-number">30</span>)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 报错 Failed to register bundle identifier</title>
    <link href="/2023/08/07/Xcode-%E6%8A%A5%E9%94%99-Failed-to-register-bundle-identifier/"/>
    <url>/2023/08/07/Xcode-%E6%8A%A5%E9%94%99-Failed-to-register-bundle-identifier/</url>
    
    <content type="html"><![CDATA[<p>大概率是注册 Bundle Identifier 的时候 <code>edu.self.AppName</code> 被人注册了</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传感器的响应时间</title>
    <link href="/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/"/>
    <url>/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>关于响应时间，例如热电偶测量水温的实验过程：</p><ol><li>用恒温水槽，水温 $T$，环境温度 $T_0$ ，热电偶首先处于外部环境中，稳定后，反映环境温度 $T_0$；</li><li>将热电偶迅速插入到恒温水槽中，这时候热电偶感受的温度参数发生突变，由 $T_0$ 到 $T$。</li></ol><p>那么此时，热电偶输出反映的温度就是 $T$ 吗？答案通常情况之下是否定的，通常可以看到热电偶反映的温度有一个逐渐上升的过程，最终会达到 $T$。而这样的一个过程就是热电偶动态特性的一个体现，如图所示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B41.png"></p><p>温度的突变是阶跃输入。如果传感器的动态特性足够好的话，那么传感器的输出也应该是一个阶跃输出，但上面的例子中热电偶总是需要一定的时间才能够指示出正确的温度，动态特性越好的热电偶，需要的时间会越短；而在特定时刻，热电偶示出的温度与真实的恒温水槽温度之间的差别就是某时刻的动态误差，这是与时间因素相关的误差。</p><p>响应时间是指从输入量开始起作用到输出指示值进入稳定值所规定的范围内所需要的时间。这个时间与规定的范围有关，这个时间意味着，从这个时间之后输出指示值将全部落在规定的范围之内。</p><p>对于一般情况，当传感器输入一个单位阶跃信号时，其输出信号称为阶跃响应。传感器常见的一阶及二阶阶跃响应曲线如图所示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B42.png"></p><p>主要的特性指标如下：</p><ol><li>时间常数 $τ$ 为一阶传感器输出值上升到稳态值的 63.2% 所需的时间。它是描述一阶传感器动态特性的重要参数，$τ$ 越小，响应速度越快；</li><li>上升时间 $T_r$ 为传感器输出值由稳态值的 10% 上升到 90% 所需的时间，但有时也规定其他百分数；</li><li>响应时间 $T_s$ 为系统从阶跃输入开始到输出值进入稳态值所规定的范围内所需的时间。一般在稳态响应值 $y_0$ 的上下规定一个 $\pm\Delta%$ 的公差带，当响应曲线开始全部进入这个公差带的时刻就是响应时间 $T_s$。为了明确起见，往往说“百分之 $\Delta$ 响应时间”。</li></ol><p>通常使用两个不同指标来定义响应时间：$T_{63}$ 和 $T_{90}$。当被测参数量值有瞬时变化时，测量值需要多长时间达到最终值的 63% 或 90%。</p><p>以下是为什么选择 63% 来定义响应时间的原因：$T_{63}$ 在一阶线性时域不变系统中等于时间常数 $τ$。这个一阶线性时域不变系统的数学模型描述了某一物理系统对阶跃变化呈指数曲线的反应，如图。这意味着系统将在一个时间常数内达到最终值的 63%，在三个时间常数内达到最终值的 95%，在四个时间常数内达到最终值的 98%。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B43.png"></p><p>一般认为，阶跃输入对于一个传感器来说是最严峻的工作状态。如果在阶跃函数的作用下，传感器能满足动态性能指标，那么在其他函数作用下，其动态性能指标也必定会令人满意。</p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sensor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>气体流量传感器 AFM3000/SFM3000 驱动</title>
    <link href="/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>之前买入了奥松电子的气体流量传感器，型号为 <a href="http://www.aosong.com/products-63.html">AFM3000</a>。到手后发现没有 Arduino 的驱动代码，调试不了。</p><p>离谱的是，我在 Arduino 论坛逛的时候，发现了这个问题：<a href="https://forum.arduino.cc/t/i2c-communication-with-sfm3000-series-flow-sensor-from-sensirion/448085">I2C communication with SFM3000 series flow sensor from Sensirion</a>。问题中用到的气体流量传感器为 <a href="https://www.sensirion.com/products/catalog/SFM3000-200">SFM3000</a>，看了说明书后，只能说两款传感器基本一样。</p><p>于是我又去 git 上找了找，看是不是有现成的驱动，结果还真有 <a href="https://github.com/Sensirion/arduino-i2c-sfm3000">Sensirion I2C SFM3000 Arduino Library</a>。之后在 Arduino IDE 的 Library 中搜索「Sensirion I2C SFM3000」下载即可。</p><p>这是 AFM3000&#x2F;SFM3000 的驱动代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * I2C-Generator: 0.2.0</span><br><span class="hljs-comment"> * Yaml Version: 0.1.0</span><br><span class="hljs-comment"> * Template Version: 0.7.0-38-g217adaf</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c) 2021, Sensirion AG</span><br><span class="hljs-comment"> * All rights reserved.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Redistribution and use in source and binary forms, with or without</span><br><span class="hljs-comment"> * modification, are permitted provided that the following conditions are met:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * * Redistributions of source code must retain the above copyright notice, this</span><br><span class="hljs-comment"> *   list of conditions and the following disclaimer.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * * Redistributions in binary form must reproduce the above copyright notice,</span><br><span class="hljs-comment"> *   this list of conditions and the following disclaimer in the documentation</span><br><span class="hljs-comment"> *   and/or other materials provided with the distribution.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * * Neither the name of Sensirion AG nor the names of its</span><br><span class="hljs-comment"> *   contributors may be used to endorse or promote products derived from</span><br><span class="hljs-comment"> *   this software without specific prior written permission.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</span><br><span class="hljs-comment"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span><br><span class="hljs-comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span><br><span class="hljs-comment"> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE</span><br><span class="hljs-comment"> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</span><br><span class="hljs-comment"> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span><br><span class="hljs-comment"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span><br><span class="hljs-comment"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</span><br><span class="hljs-comment"> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</span><br><span class="hljs-comment"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span><br><span class="hljs-comment"> * POSSIBILITY OF SUCH DAMAGE.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Arduino.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SensirionI2CSfm3000.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span><br><br>SensirionI2CSfm3000 sfm;<br><br><br><span class="hljs-type">float</span> scalingFactor = <span class="hljs-number">140.0</span>;<br><span class="hljs-type">float</span> offset = <span class="hljs-number">32000</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br><br>    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>    <span class="hljs-keyword">while</span> (!Serial) &#123;<br>        <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);<br>    &#125;<br><br>    Wire.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-type">uint16_t</span> error;<br>    <span class="hljs-type">char</span> errorMessage[<span class="hljs-number">64</span>];<br><br>    sfm.<span class="hljs-built_in">begin</span>(Wire, SFM300_I2C_ADDRESS_0);<br><br>    <span class="hljs-type">uint32_t</span> serialNumber;<br><br>    error = sfm.<span class="hljs-built_in">readSerialNumber</span>(serialNumber);<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error trying to execute serialNumber(): &quot;</span>);<br>        <span class="hljs-built_in">errorToString</span>(error, errorMessage, <span class="hljs-number">64</span>);<br>        Serial.<span class="hljs-built_in">println</span>(errorMessage);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SerialNumber:&quot;</span>);<br>        Serial.<span class="hljs-built_in">print</span>(serialNumber);<br>        Serial.<span class="hljs-built_in">println</span>();<br>    &#125;<br><br>    error = sfm.<span class="hljs-built_in">startContinuousMeasurement</span>();<br>    <br>    <span class="hljs-keyword">if</span> (error) &#123;<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error trying to execute startContinuousMeasurement(): &quot;</span>);<br>        <span class="hljs-built_in">errorToString</span>(error, errorMessage, <span class="hljs-number">64</span>);<br>        Serial.<span class="hljs-built_in">println</span>(errorMessage);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint16_t</span> error;<br>    <span class="hljs-type">char</span> errorMessage[<span class="hljs-number">64</span>];<br><br>    <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// Read Measurement</span><br>    <span class="hljs-type">float</span> flow;<br><br>    error = sfm.<span class="hljs-built_in">readMeasurement</span>(flow, scalingFactor, offset);<br><br>    <span class="hljs-keyword">if</span> (error) &#123;<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error trying to execute readMeasurement(): &quot;</span>);<br>        <span class="hljs-built_in">errorToString</span>(error, errorMessage, <span class="hljs-number">64</span>);<br>        Serial.<span class="hljs-built_in">println</span>(errorMessage);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flow:&quot;</span>);<br>        Serial.<span class="hljs-built_in">print</span>(flow);<br>        Serial.<span class="hljs-built_in">println</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>烧录到 Arduino 即可。</p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>传感器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>Sensor</tag>
      
      <tag>VO2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Swift 三元（目）运算</title>
    <link href="/2023/08/03/Python-Swift-%E4%B8%89%E5%85%83%EF%BC%88%E7%9B%AE%EF%BC%89%E8%BF%90%E7%AE%97/"/>
    <url>/2023/08/03/Python-Swift-%E4%B8%89%E5%85%83%EF%BC%88%E7%9B%AE%EF%BC%89%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>Python的三元运算写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">is_true = <span class="hljs-literal">True</span><br>result = <span class="hljs-string">&#x27;TRUE&#x27;</span> <span class="hljs-keyword">if</span> is_true <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;FALSE&#x27;</span><br><span class="hljs-comment"># output: TRUE</span><br></code></pre></td></tr></table></figure><p>Swift的三元运算写法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">isTrue <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>result <span class="hljs-operator">=</span> isTrue <span class="hljs-operator">?</span> <span class="hljs-string">&quot;TRUE&quot;</span> : <span class="hljs-string">&quot;FALSE&quot;</span><br><span class="hljs-comment">// output: TRUE</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 导出传感器数据到 .csv 文件</title>
    <link href="/2023/08/03/Python-%E5%AF%BC%E5%87%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%88%B0-csv-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/08/03/Python-%E5%AF%BC%E5%87%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%88%B0-csv-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>导出传感器的数据一共分为两步：</p><ol><li>构建数据结构；</li><li>导出数据到 .csv 文件。</li></ol><h3 id="1-构建数据结构"><a href="#1-构建数据结构" class="headerlink" title="1.构建数据结构"></a>1.构建数据结构</h3><p>一般来说，传感器采集的数据为时间序列数据。需要导出的数据一般为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">times = [t1, t2, t3 ... tn]<br>value_A = [a1, a2, a3 ... an]<br>value_B = [b1, b2, b3 ... bn]<br>value_C = [c1, c2, c3 ... cn]<br></code></pre></td></tr></table></figure><p>需要构建一个二维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>export_data = np.zeros(n, <span class="hljs-number">4</span>)<span class="hljs-comment"># 构建一个 shape = (数据长度, 数据种类) 的 numpy 数组</span><br>export_data[::, <span class="hljs-number">0</span>] = times    <span class="hljs-comment"># times 替换第 0 列。[0, ::]就是行</span><br>export_data[::, <span class="hljs-number">1</span>] = value_A<br>export_data[::, <span class="hljs-number">2</span>] = value_B<br>export_data[::, <span class="hljs-number">3</span>] = value_C<br><br><span class="hljs-comment"># 多此一举的操作</span><br><span class="hljs-comment"># export_data[0, ::] = times</span><br><span class="hljs-comment"># export_data[1, ::] = value_A</span><br><span class="hljs-comment"># export_data[2, ::] = value_B</span><br><span class="hljs-comment"># export_data[3, ::] = value_C</span><br><span class="hljs-comment"># export_data = export_data.T# 将矩阵的行列转置</span><br></code></pre></td></tr></table></figure><p>此时 export_data 的结构是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">[ t1 a1 b1 c1<br>  t2 a2 b2 c2<br>  t3 a3 b3 c3<br>     .....<br>  tn an bn cn ]<br></code></pre></td></tr></table></figure><h3 id="2-导出数据"><a href="#2-导出数据" class="headerlink" title="2.导出数据"></a>2.导出数据</h3><p>导出 .csv 需要用到 pandas 库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>column = [<span class="hljs-string">&#x27;Time&#x27;</span>, <span class="hljs-string">&#x27;ValueA&#x27;</span>, <span class="hljs-string">&#x27;ValueB&#x27;</span>, <span class="hljs-string">&#x27;ValueC&#x27;</span>]    <span class="hljs-comment"># 表头</span><br>dataFrame = pd.DataFrame(columns=column, data=export_data)<br>dataFrame.to_csv(<span class="hljs-string">&#x27;path/name.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)    <span class="hljs-comment"># index=Ture 的话，会默认生成一列 index 索引列。记住文件名后面要带.csv</span><br><br><span class="hljs-comment"># 不需要表头</span><br><span class="hljs-comment"># export_csv = pd.DataFrame(data=export_data)</span><br><span class="hljs-comment"># export_csv.to_csv(&#x27;path/name.csv&#x27;, header=None, index=False)</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>dataFrame = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Time&#x27;</span>: times, <span class="hljs-string">&#x27;ValueA&#x27;</span>: value_A, <span class="hljs-string">&#x27;ValueB&#x27;</span>: value_B, <span class="hljs-string">&#x27;ValueC&#x27;</span>: value_C&#125;)<br>dataFrame.to_csv(<span class="hljs-string">&#x27;path/name.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 绘制数据移动窗口</title>
    <link href="/2023/08/03/Python-%E7%BB%98%E5%88%B6%E6%95%B0%E6%8D%AE%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2023/08/03/Python-%E7%BB%98%E5%88%B6%E6%95%B0%E6%8D%AE%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>当传感器数据采集需要持续足够长的时间，用 list 保存数据会出现卡顿的情况。所以需要抛掉之前的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>win_size = <span class="hljs-number">500</span>                          <span class="hljs-comment"># 窗口大小为500</span><br>x_data = np.zeros(win_size)<br>y1_data = np.zeros(win_size)<br>y2_data = np.zeros(win_size)<br>y3_data = np.zeros(win_size)<br><br>...<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_data</span>(): <br><span class="hljs-comment"># 只展示x轴数据平移过程，y轴同理</span><br>x_data[:-<span class="hljs-number">1</span>] = x_data[<span class="hljs-number">1</span>:]                <span class="hljs-comment"># 移动</span><br>x_data[-<span class="hljs-number">1</span>] = new_value                  <span class="hljs-comment"># 将新值写入</span><br>...<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    update_data()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 IMU 绘制物体移动的空间轨迹</title>
    <link href="/2023/08/03/%E9%80%9A%E8%BF%87-IMU-%E7%BB%98%E5%88%B6%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9/"/>
    <url>/2023/08/03/%E9%80%9A%E8%BF%87-IMU-%E7%BB%98%E5%88%B6%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9/</url>
    
    <content type="html"><![CDATA[<p>一般 IMU 由加速度传感器、陀螺仪组成，也叫 6 轴 IMU。还可以外加一个磁力计，构成 9 轴 IMU。关于加速度传感器和陀螺仪的工作原理，可以参考：</p><ol><li><a href="https://blog.csdn.net/yueqian_scut/article/details/50708073">加速度传感器的原理和应用-手机翻转、失重检测、运动检测、位置识别</a>；</li><li><a href="https://blog.csdn.net/KYJL888/article/details/112802532">MEMS 三轴加速计、三轴陀螺仪、三轴磁力计）6轴IMU+磁力计，9轴传感器讲解</a>；</li><li><a href="https://xiaotaoguo.com/p/imu-model/">IMU 测量模型</a>。</li></ol><p>加速度传感器测得加速度（acc）积分得到速度，再积分得到位移：</p><ol><li><a href="https://makersportal.com/blog/calibration-of-an-inertial-measurement-unit-imu-with-raspberry-pi-part-ii">Gyroscope and Accelerometer Calibration with Raspberry Pi</a>；</li><li><a href="https://www.cnblogs.com/cposture/p/4378922.html">【翻译】利用加速度求解位置的算法——三轴传感器</a>。</li></ol><p>陀螺仪测得角速度（gyr）积分得到姿态：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/45404840">三维旋转：欧拉角、四元数、旋转矩阵、轴角之间的转换</a>；</li><li><a href="https://zhuanlan.zhihu.com/p/103623879">四元数微分方程的推导和解算实现</a>；</li><li><a href="https://www.zhoulujun.cn/html/theory/Mathematics/Geometry/8149.html">三维旋转笔记:欧拉角&#x2F;四元数&#x2F;旋转矩阵&#x2F;轴角-记忆点整理</a>；</li><li><a href="https://www.cnblogs.com/TIANHUAHUA/p/8031606.html">四元数及姿态解算 Mahony 算法</a>。</li></ol><p>所以可以通过加速度传感器+陀螺仪的组合得到比较准确姿态，在去除重力加速度分量影响下二次积分可以得到位置。这种基于 IMU 测量数据进行位置、速度解算的方法可简称惯性导航（惯导）解算：</p><ol><li><a href="https://zhaoxuhui.top/blog/2022/02/11/basic-notes-on-imu-and-inertial-navigation.html#32-mems%E5%8A%A0%E9%80%9F%E5%BA%A6%E8%AE%A1%E7%9A%84%E8%AF%AF%E5%B7%AE%E7%89%B9%E6%80%A7">IMU与惯性导航基础知识介绍</a>；</li><li><a href="https://zhuanlan.zhihu.com/p/131342530">多传感器融合定位理论基础（五）：惯性导航解算</a>；</li><li><a href="https://xiaotaoguo.com/p/imu-pose-update/">基于 IMU 的惯性导航解算及误差分析</a>。</li></ol><p>其中的难点在于：</p><ol><li>姿态不准导致重力影响去除不了；</li><li>MEMS 器件本身的零点漂移不能去除。</li></ol><p>这导致使用 IMU 定位时，始终存在不可避免的漂移，且漂移会随着积分越来越大。所以需针对具体应用设计相应的处理算法。目前使用较多的<strong>步态定位</strong>。</p><ol><li><a href="https://github.com/xioTechnologies/Oscillatory-Motion-Tracking-With-x-IMU">Oscillatory-Motion-Tracking-With-x-IMU</a>，Matlab开源项目；</li><li><a href="https://github.com/xioTechnologies/Gait-Tracking-With-x-IMU">Gait-Tracking-With-x-IMU</a>，Matlab开源项目；</li><li><a href="https://github.com/italogsfernandes/Gait-Tracking-With-x-IMU">Gait-Tracking-With-x-IMU</a>，Python开源项目；</li><li><a href="https://github.com/daehwa/Gait-Tracking-With-x-IMU-Python">Gait Tracking with x-imu Python</a>，Python开源项目；</li><li><a href="https://github.com/xioTechnologies/Gait-Tracking">Gait-Tracking</a>，Python开源项目。</li></ol><p>就目前来说，第 1 个项目的算法效果最好，这是 <a href="https://www.zhihu.com/zvideo/1361803858457579522">效果展示</a>。但需要注意的是：</p><ol><li>Script 中 samplePeriod 需要与传感器采样频率一致；</li><li>注意单位转换（参考：<a href="https://github.com/xioTechnologies/Gait-Tracking-With-x-IMU/issues/11">About the time data</a>），我这里传感器采集的角速度单位为 rad&#x2F;s，但是项目中角速度的单位为 deg&#x2F;s。两者的转化关系为：<br>$$<br>π&#x2F;180*deg &#x3D; rad<br>$$</li><li>算法对于 IMU 的放置和运动模式都做了要求。事实上，对于简单、低频的动作，算法都能够绘制出较为精准的空间运动轨迹。但是对于复杂、高频的动作，算法没有表现出很好的兼容性，数据漂移很严重。</li></ol>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
      <category>轨迹计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 串口查询之 /dev/cu. 与 /dev/tty. 记录</title>
    <link href="/2023/07/28/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/07/28/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>输入指令<code>ls /dev/cu.*</code>，可获得 Mac 的串口信息。内容如下</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%951.png"></p><p>输入指令<code>cd /dev</code>回车，再输入指令<code>ls *tty</code>，也可查询串口信息。内容如下</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%952.png"></p><p>之前 Mac 与 Arduino 通信的时候，串口的格式为<code>/dev/tty.Arduino</code>。最近在调试 N100 九轴传感器，发现用「&#x2F;tty.」格式的话识别不到传感器，即<code>/dev/tty.N100</code>不行，必须使用<code>/dev/cu.N100</code>。不知道为什么。</p><p>另外我在想，Arduino 用<code>/dev/cu.Arduino</code>这个格式能行吗…</p>]]></content>
    
    
    <categories>
      
      <category>呼吸代谢 Project</category>
      
      <category>数据采集</category>
      
      <category>上位机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 突然卡顿的解决办法</title>
    <link href="/2023/07/27/Mac-%E7%AA%81%E7%84%B6%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/27/Mac-%E7%AA%81%E7%84%B6%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>以我目前的经验来说，是「中文简体输入方式」的锅。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Mac-%E7%AA%81%E7%84%B6%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%951.png" alt="我tm卡爆"></p><p>解决办法很简单，在「活动监视器」中找到中文简体输入方式，然后「强制」结束进程即可。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>M1 Mac Parallels Desktop Windows11 安装 CP210x 串口驱动</title>
    <link href="/2023/07/27/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/07/27/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>设备作为虚拟 COM 端口工作时，需要 CP210x USB 至 UART 桥虚拟 COM 端口 (VCP) 驱动器以促进与 CP210x 产品的主机通信。也可使用直接存取驱动器将这些设备连接至主机。</p></blockquote><p>我需要在 Windows 系统下调试 WHEELTEC 的 9 轴传感器 N100。由于办公电脑是 M1 的 Mac Air，所以只能在 Parallels Desktop 上进行（虚拟机系统为 Windows11）。</p><p>插上 USB 后系统可以识别到串口设备，但是在设备管理器中错误代码 28，说明无驱动。之前问店家要了一份相关资料，内有 CP2102 的驱动安装包。安装了，但没用。大概率是 ARM 架构的问题。</p><p>于是跑 silicon lab 官网找最新驱动，这是驱动下载<a href="https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads">地址</a>。</p><p>下载第一个「CP210x Universal Windwos Driver」即可。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A81.png" alt="网页是这样的"></p><p>解压出来的文件内容是这样的：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A82.png" alt="可以注意到arm和arm64"></p><p>接下来只需要右键 silabser.inf 安装即可。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A83.png" alt="需要点击「显示更多选项」"></p><p>打开设备管理器，代码28搞定，驱动打上了。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A84.png" alt="开心的调试吧!"></p><p>如果要在 Mac 系统下与 N100 通信，下载「CP210x VCP Mac OSX Driver」，内有一个DMG格式的文件，打开安装即可。树莓派（Linux）则不需要安装驱动就能与 N100 进行通信。</p>]]></content>
    
    
    <categories>
      
      <category>空间轨迹 Project</category>
      
      <category>数据采集</category>
      
      <category>WHEELTEC N100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 触控板手势失效的解决办法</title>
    <link href="/2023/07/27/Mac-%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%89%8B%E5%8A%BF%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/27/Mac-%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%89%8B%E5%8A%BF%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li>用活动监视器关闭Dock（程序坞）；</li><li>在终端输入<code>killall Dock</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 获取 Conda 环境列表失败，报错 error code 1 的解决办法</title>
    <link href="/2023/07/27/PyCharm-%E8%8E%B7%E5%8F%96-Conda-%E7%8E%AF%E5%A2%83%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8A%A5%E9%94%99-error-code-1-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/27/PyCharm-%E8%8E%B7%E5%8F%96-Conda-%E7%8E%AF%E5%A2%83%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8A%A5%E9%94%99-error-code-1-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>通常来说，在设置 Python Interpreter 时，Conda executable 的路径为<code>anaconda\Scripts\conda.exe</code>。但是我在给同事部署环境填入该路径，且路径下也确实有对应文件存在，却报错<code>error code 1</code>。</p><p><strong>解决方案：用这个路径<code>anaconda\Library\bin\conda.bat</code>可解决问题。</strong></p><p>这让我想起第一次在 Windows 上部署 Conda 时，默认可执行文件是自动探测的，刚刚好是<code>anaconda\Library\bin\conda.bat</code>。不过那个时候教程让我用<code>anaconda\Scripts\conda.exe</code>，我选择了相信教程。当然教程没问题，我也成功部署了。只是没想到给同事部署时，教程的方法会报错。</p><p>另外 Mac 的可执行文件是自动探测、默认填写好的，不需要自己手动填写。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
      <tag>Anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 鸢尾花深度学习</title>
    <link href="/2023/06/23/PyTorch-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/06/23/PyTorch-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="鸢尾花数据"><a href="#鸢尾花数据" class="headerlink" title="鸢尾花数据"></a>鸢尾花数据</h3><p><a href="https://www.kaggle.com/datasets/uciml/iris">Iris Species</a></p><h3 id="定义鸢尾花类"><a href="#定义鸢尾花类" class="headerlink" title="定义鸢尾花类"></a>定义鸢尾花类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Iris</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sepal_length, sepal_width, petal_length, petal_width, species</span>):<br>        <span class="hljs-variable language_">self</span>.sepal_length = sepal_length<br>        <span class="hljs-variable language_">self</span>.sepal_width = sepal_width<br>        <span class="hljs-variable language_">self</span>.petal_length = petal_length<br>        <span class="hljs-variable language_">self</span>.petal_width = petal_width<br>        <span class="hljs-variable language_">self</span>.species = species<br><br>    <span class="hljs-comment"># 返回 feature</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">feature</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable language_">self</span>.sepal_length, <span class="hljs-variable language_">self</span>.sepal_width, <span class="hljs-variable language_">self</span>.petal_length, <span class="hljs-variable language_">self</span>.petal_width]<br><br>    <span class="hljs-comment"># 返回 label</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">label</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.species == <span class="hljs-string">&#x27;Iris-setosa&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.species == <span class="hljs-string">&#x27;Iris-versicolor&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.species == <span class="hljs-string">&#x27;Iris-virginica&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="定义鸢尾花数据集"><a href="#定义鸢尾花数据集" class="headerlink" title="定义鸢尾花数据集"></a>定义鸢尾花数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IrisDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, labels</span>):<br>        <span class="hljs-variable language_">self</span>.features = features<br>        <span class="hljs-variable language_">self</span>.labels = labels<br><br>    <span class="hljs-comment"># 返回数据集长度</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.features)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        item_feature = <span class="hljs-variable language_">self</span>.features[index]<br>        item_label = <span class="hljs-variable language_">self</span>.labels[index]<br>        <span class="hljs-keyword">return</span> item_feature, item_label<br></code></pre></td></tr></table></figure><h3 id="读取-csv-数据构建数据集"><a href="#读取-csv-数据构建数据集" class="headerlink" title="读取 csv 数据构建数据集"></a>读取 csv 数据构建数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    tic = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取cvs文件&#x27;</span>)<br>    csv_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/archive/Iris.csv&#x27;</span><br>    datasource = pd.read_csv(csv_path)<br>    datasource_len = <span class="hljs-built_in">len</span>(datasource)<br><br>    <span class="hljs-comment"># 构建数据集矩阵 n 行，4 列</span><br><br>    <span class="hljs-comment"># [[0. 0. 0. 0.]</span><br>    <span class="hljs-comment">#       ...</span><br>    <span class="hljs-comment">#  [0. 0. 0. 0.]]</span><br>    iris_features = np.zeros((datasource_len, <span class="hljs-number">4</span>), dtype=<span class="hljs-built_in">float</span>)<br>    iris_labels = []<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造数据结构&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(datasource_len):<br>        <span class="hljs-comment"># 创建 iris 对象</span><br>        iris = Iris(datasource.SepalLengthCm[i], datasource.SepalWidthCm[i],<br>                    datasource.PetalLengthCm[i], datasource.PetalWidthCm[i],<br>                    datasource.Species[i])<br><br>        <span class="hljs-comment"># iris = Iris(datasource[&#x27;SepalLengthCm&#x27;][i], datasource[&#x27;SepalWidthCm&#x27;][i],</span><br>        <span class="hljs-comment">#             datasource[&#x27;PetalLengthCm&#x27;][i], datasource[&#x27;PetalWidthCm&#x27;][i],</span><br>        <span class="hljs-comment">#             datasource[&#x27;Species&#x27;][i])</span><br><br>        <span class="hljs-comment"># [[0. 0. 0. 0.]  &lt;- 将元素一行一行进行替换</span><br>        <span class="hljs-comment">#       ...</span><br>        <span class="hljs-comment">#  [0. 0. 0. 0.]]</span><br>        iris_features[[i], :] = iris.feature()<br>        iris_labels.append(iris.label())<br><br>    <span class="hljs-comment"># 把数据集按照 8:2 的比例来划分为训练集和测试集</span><br>    train_features, \<br>        test_features, \<br>        train_labels, \<br>        test_labels = train_test_split(iris_features, iris_labels, test_size=<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造训练集&#x27;</span>)<br>    <span class="hljs-comment"># 将训练集和测试集转换为PyTorch的张量对象并设置数据类型，加上to(device)可以运行在GPU上</span><br>    train_dataset = IrisDataset(torch.FloatTensor(train_features),<br>                                torch.LongTensor(train_labels))<br>    test_features = torch.FloatTensor(test_features)<br>    test_labels = torch.LongTensor(test_labels)<br><br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Time: &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> train_dataset, test_features, test_labels<br></code></pre></td></tr></table></figure><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">dataset, epochs, gpu</span>):<br>    tic = time.time()<br>    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>    model = Model(n_feature=<span class="hljs-number">4</span>, n_hidden=<span class="hljs-number">40</span>, n_label=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">if</span> gpu:<br>        model.to(device)<br><br>    optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.02</span>)<br>    loss_func = torch.nn.CrossEntropyLoss()<br>    batch_size = <span class="hljs-number">5</span>  <span class="hljs-comment"># 每次训练 5 个样本</span><br>    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, pin_memory=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># epoch 为训练次数</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        <span class="hljs-comment"># 分 120/5 = 24 次训练</span><br>        <span class="hljs-keyword">for</span> step, (features, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>            <span class="hljs-keyword">if</span> gpu:<br>                features = features.to(device)<br>                labels = labels.to(device)<br><br>            <span class="hljs-comment"># 前向传播计算输出结果</span><br>            output = model(features)<br>            loss = loss_func(output, labels)<br>            <span class="hljs-comment"># 注意 labels 的结构应该是 [0. 0. 0.]，而不是[[0.], [0.], [0.]]</span><br>            <span class="hljs-comment"># loss 必须是[x, x, x] -&gt; y，而不是[x, x, x] -&gt; [y]</span><br>            <span class="hljs-comment"># 否则会报错：0D or 1D target tensor expected, multi-target not supported</span><br>            <span class="hljs-comment"># 如果出现这种情况，可以进行降维 labels = labels.squeeze(1)</span><br><br>            <span class="hljs-comment"># 反向传播，更新梯度并优化模型参数</span><br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch: &#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Step: &#x27;</span>, step + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Loss: &#x27;</span>, loss.item())<br><br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练结束&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> model<br></code></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-comment"># 定义鸢尾花类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Iris</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sepal_length, sepal_width, petal_length, petal_width, species</span>):<br>        <span class="hljs-variable language_">self</span>.sepal_length = sepal_length<br>        <span class="hljs-variable language_">self</span>.sepal_width = sepal_width<br>        <span class="hljs-variable language_">self</span>.petal_length = petal_length<br>        <span class="hljs-variable language_">self</span>.petal_width = petal_width<br>        <span class="hljs-variable language_">self</span>.species = species<br><br>    <span class="hljs-comment"># 返回 feature</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">feature</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable language_">self</span>.sepal_length, <span class="hljs-variable language_">self</span>.sepal_width, <span class="hljs-variable language_">self</span>.petal_length, <span class="hljs-variable language_">self</span>.petal_width]<br><br>    <span class="hljs-comment"># 返回 label</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">label</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.species == <span class="hljs-string">&#x27;Iris-setosa&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.species == <span class="hljs-string">&#x27;Iris-versicolor&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.species == <span class="hljs-string">&#x27;Iris-virginica&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><br><br><span class="hljs-comment"># 定义数据集</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IrisDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, labels</span>):<br>        <span class="hljs-variable language_">self</span>.features = features<br>        <span class="hljs-variable language_">self</span>.labels = labels<br><br>    <span class="hljs-comment"># 返回数据集长度</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.features)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        item_feature = <span class="hljs-variable language_">self</span>.features[index]<br>        item_label = <span class="hljs-variable language_">self</span>.labels[index]<br>        <span class="hljs-keyword">return</span> item_feature, item_label<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_feature, n_hidden, n_label</span>):<br>        <span class="hljs-built_in">super</span>(Model, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.hidden = torch.nn.Linear(n_feature, n_hidden)      <span class="hljs-comment"># 定义隐藏层网络</span><br>        <span class="hljs-variable language_">self</span>.output = torch.nn.Linear(n_hidden, n_label)        <span class="hljs-comment"># 定义输出层网络</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.nn.functional.relu(<span class="hljs-variable language_">self</span>.hidden(x))            <span class="hljs-comment"># 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh</span><br>        x = torch.nn.functional.softmax(<span class="hljs-variable language_">self</span>.output(x), dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 输出层softmax</span><br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    tic = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取cvs文件&#x27;</span>)<br>    csv_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/archive/Iris.csv&#x27;</span><br>    datasource = pd.read_csv(csv_path)<br>    datasource_len = <span class="hljs-built_in">len</span>(datasource)<br><br>    <span class="hljs-comment"># 构建数据集矩阵 n 行，4 列</span><br><br>    <span class="hljs-comment"># [[0. 0. 0. 0.]</span><br>    <span class="hljs-comment">#       ...</span><br>    <span class="hljs-comment">#  [0. 0. 0. 0.]]</span><br>    iris_features = np.zeros((datasource_len, <span class="hljs-number">4</span>), dtype=<span class="hljs-built_in">float</span>)<br>    iris_labels = []<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造数据结构&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(datasource_len):<br>        <span class="hljs-comment"># 创建 iris 对象</span><br>        iris = Iris(datasource.SepalLengthCm[i], datasource.SepalWidthCm[i],<br>                    datasource.PetalLengthCm[i], datasource.PetalWidthCm[i],<br>                    datasource.Species[i])<br><br>        <span class="hljs-comment"># iris = Iris(datasource[&#x27;SepalLengthCm&#x27;][i], datasource[&#x27;SepalWidthCm&#x27;][i],</span><br>        <span class="hljs-comment">#             datasource[&#x27;PetalLengthCm&#x27;][i], datasource[&#x27;PetalWidthCm&#x27;][i],</span><br>        <span class="hljs-comment">#             datasource[&#x27;Species&#x27;][i])</span><br><br>        <span class="hljs-comment"># [[0. 0. 0. 0.]  &lt;- 将元素一行一行进行替换</span><br>        <span class="hljs-comment">#       ...</span><br>        <span class="hljs-comment">#  [0. 0. 0. 0.]]</span><br>        iris_features[[i], :] = iris.feature()<br>        iris_labels.append(iris.label())<br><br>    <span class="hljs-comment"># 把数据集按照 8:2 的比例来划分为训练集和测试集</span><br>    train_features, \<br>        test_features, \<br>        train_labels, \<br>        test_labels = train_test_split(iris_features, iris_labels, test_size=<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造训练集&#x27;</span>)<br>    <span class="hljs-comment"># 将训练集和测试集转换为PyTorch的张量对象并设置数据类型，加上to(device)可以运行在GPU上</span><br>    train_dataset = IrisDataset(torch.FloatTensor(train_features),<br>                                torch.LongTensor(train_labels))<br>    test_features = torch.FloatTensor(test_features)<br>    test_labels = torch.LongTensor(test_labels)<br><br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Time: &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> train_dataset, test_features, test_labels<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">dataset, epochs, gpu</span>):<br>    tic = time.time()<br>    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br>    model = Model(n_feature=<span class="hljs-number">4</span>, n_hidden=<span class="hljs-number">40</span>, n_label=<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">if</span> gpu:<br>        model.to(device)<br><br>    optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.02</span>)<br>    loss_func = torch.nn.CrossEntropyLoss()<br>    batch_size = <span class="hljs-number">5</span>  <span class="hljs-comment"># 每次训练 5 个样本</span><br>    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, pin_memory=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># epoch 为训练次数</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>        <span class="hljs-comment"># 分 120/5 = 24 次训练</span><br>        <span class="hljs-keyword">for</span> step, (features, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):<br>            <span class="hljs-keyword">if</span> gpu:<br>                features = features.to(device)<br>                labels = labels.to(device)<br><br>            <span class="hljs-comment"># 前向传播计算输出结果</span><br>            output = model(features)<br>            loss = loss_func(output, labels)<br>            <span class="hljs-comment"># 注意 labels 的结构应该是 [0. 0. 0.]，而不是[[0.], [0.], [0.]]</span><br>            <span class="hljs-comment"># loss 必须是[x, x, x] -&gt; y，而不是[x, x, x] -&gt; [y]</span><br>            <span class="hljs-comment"># 否则会报错：0D or 1D target tensor expected, multi-target not supported</span><br>            <span class="hljs-comment"># 如果出现这种情况，可以进行降维 labels = labels.squeeze(1)</span><br><br>            <span class="hljs-comment"># 反向传播，更新梯度并优化模型参数</span><br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch: &#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Step: &#x27;</span>, step + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Loss: &#x27;</span>, loss.item())<br><br>    toc = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练结束&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> model<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    gpu = <span class="hljs-literal">False</span><br>    train_dataset, test_features, test_labels = get_data()<br>    model = train_model(train_dataset, <span class="hljs-number">100</span>, gpu)<br>    result = model(test_features)<br>    <span class="hljs-comment"># prediction = torch.argmax(result, 1)  # 求最大值的索引</span><br>    prediction = torch.<span class="hljs-built_in">max</span>(result, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]    <span class="hljs-comment"># 这里第一个1表示求三个结果里的最大值，第二1表示我们只要索引(1返回index, 0返回原值)</span><br>    correct = (prediction == test_labels).<span class="hljs-built_in">sum</span>().item()<br>    accuracy = <span class="hljs-built_in">float</span>(correct) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(test_features))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;莺尾花预测准确率:&quot;</span>, accuracy)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几大界面设计语言</title>
    <link href="/2023/06/14/%E5%87%A0%E5%A4%A7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/06/14/%E5%87%A0%E5%A4%A7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Apple 的 <a href="https://developer.apple.com/design/">HIG</a></p></li><li><p>Android 的 <a href="https://m3.material.io/">Material Design</a></p></li><li><p>阿里的 <a href="https://012x.ant.design/docs/spec/introduce">Ant Design</a></p></li><li><p>IBM 的 <a href="https://carbondesignsystem.com/">Carbon Design</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产力</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm 代码格式化快捷键</title>
    <link href="/2023/05/11/Pycharm-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2023/05/11/Pycharm-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>windows：Ctrl+Alt+L</p><p>mac：Cmd+Option+L</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI Disabled 与 AllowsHitTesting</title>
    <link href="/2023/04/18/SwiftUI-Disabled-%E4%B8%8E-AllowsHitTesting/"/>
    <url>/2023/04/18/SwiftUI-Disabled-%E4%B8%8E-AllowsHitTesting/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Button</span>(action: &#123;<br><br>&#125;) &#123;<br>    <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Button&quot;</span>)<br>&#125;<br>.disabled(<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><p>此时按钮不可点击。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Button</span>(action: &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pressed&quot;</span>)<br>&#125;) &#123;<br><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Press me&quot;</span>)<br>&#125;<br>.disabled(<span class="hljs-literal">false</span>)<br>.overlay(<br><span class="hljs-type">Color</span>.clear<br>)<br></code></pre></td></tr></table></figure><p>此时按钮仍然不可点击，因为 overlay 覆盖住了按钮。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Button</span>(action: &#123;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pressed&quot;</span>)<br>&#125;) &#123;<br><span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Press me&quot;</span>)<br>&#125;<br>.disabled(<span class="hljs-literal">false</span>)<br>.overlay(<br><span class="hljs-type">Color</span>.clear<br>.allowsHitTesting(<span class="hljs-literal">false</span>)<br>)<br></code></pre></td></tr></table></figure><p>此时按钮可以点击。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SwiftUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的 conda 指令</title>
    <link href="/2023/04/09/%E5%B8%B8%E7%94%A8%E7%9A%84-conda-%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/04/09/%E5%B8%B8%E7%94%A8%E7%9A%84-conda-%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cmd">查看环境<br>conda env list<br>查看安装包<br>conda list<br><br>创建新环境<br>conda create -n tensorflow python=<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span><br>激活<br>conda activate tensorflow<br>删除<br>conda remove -n tensorflow --all<br><br>显示指定环境的修改记录<br>conda list -n tensorflow -r<br>或者激活环境后<br>conda list --revision<br>选择想回退记录后的编号<br>conda install --revision <span class="hljs-number">0</span>/<span class="hljs-number">1</span>/<span class="hljs-number">2</span>…<br><br>关于 Python 升降级<br>查看可选择的 Python 版本<br>conda search --full --name python<br>conda install python==version<br></code></pre></td></tr></table></figure><p>重命名。conda 其实没有重命名指令，实现重命名是通过克隆完成的，分两步：<br>1、先克隆一份旧环境，克隆过程中重新命名<br>2、删除旧环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 第一步：<br>conda create -n pytorch --clone tensorflow<br># 第二步：<br>conda remove -n tensorflow --all<br></code></pre></td></tr></table></figure><p>base 环境也能删除，回退</p><ol><li><a href="https://blog.csdn.net/m0_46114594/article/details/110696046">如何删除、关闭anaconda的base环境</a></li><li><a href="https://blog.csdn.net/m0_46825740/article/details/120932098">conda篇—base环境重置</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm 项目文件名是红色的原因</title>
    <link href="/2023/02/10/Pycharm-%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%90%8D%E6%98%AF%E7%BA%A2%E8%89%B2%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <url>/2023/02/10/Pycharm-%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%90%8D%E6%98%AF%E7%BA%A2%E8%89%B2%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    
    <content type="html"><![CDATA[<p>将项目设置成了 Git 仓库，但是文件没有添加到 Git 里，就会显示为红色。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cocoapods 更新失败的解决办法</title>
    <link href="/2023/01/09/cocoapods-%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/01/09/cocoapods-%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>需要通过 Polar H10 心率带采集 ECG 信号，所以得用到 Polar 的第三方库，也就要更新 cocoapods。</p><p>输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> gem install cocoapods<br></code></pre></td></tr></table></figure><p>更新失败，出现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0<br>Fetching rexml-3.2.6.gem<br>Fetching xcodeproj-1.23.0.gem<br>Fetching ruby-macho-2.5.1.gem<br>Fetching molinillo-0.8.0.gem<br>Fetching cocoapods-trunk-1.6.0.gem<br>Fetching cocoapods-downloader-2.1.gem<br>Fetching public_suffix-4.0.7.gem<br>Fetching concurrent-ruby-1.2.2.gem<br>Fetching addressable-2.8.6.gem<br>Fetching cocoapods-core-1.14.3.gem<br>Fetching cocoapods-1.14.3.gem<br>Successfully installed rexml-3.2.6<br>ERROR:  While executing gem ... (Gem::FilePermissionError)<br>    You don<span class="hljs-string">&#x27;t have write permissions for the /usr/bin directory.</span><br></code></pre></td></tr></table></figure><p>此时我以为是 gem 版本太低，随即更新 gem，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> gem update --system -n /usr/local/bin<br></code></pre></td></tr></table></figure><p>更新失败，出现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0<br>Updating rubygems-update<br>ERROR:  Error installing rubygems-update:<br>rubygems-update-3.5.4 requires Ruby version &gt;= 3.0.0. The current ruby version is 2.6.10.210.<br>Installing RubyGems 3.2.15<br>Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0<br>ERROR:  While executing gem ... (Errno::EPERM)<br>    Operation not permitted @ rb_sysopen - /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/bin/gem<br></code></pre></td></tr></table></figure><p>我以为是 Ruby 版本过低，于是更新 Ruby，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install ruby<br></code></pre></td></tr></table></figure><p>更新成功，但是 <code>sudo gem install cocoapods</code> 或 <code>sudo gem update --system -n /usr/local/bin</code> 时，报错不变。</p><p>我又输入提示指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gem pristine ffi --version 1.15.0<br></code></pre></td></tr></table></figure><p>但是不生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0<br>Restoring gems to pristine condition...<br>ERROR:  While executing gem ... (Gem::FilePermissionError)<br>    You don<span class="hljs-string">&#x27;t have write permissions for the /Library/Ruby/Gems/2.6.0 directory.</span><br></code></pre></td></tr></table></figure><p>最后在</p><p><a href="https://stackoverflow.com/questions/64698820/ignoring-ffi-1-13-1-because-its-extensions-are-not-built-try-gem-pristine-ffi">Ignoring ffi-1.13.1 because its extensions are not built. Try: gem pristine ffi –version 1.13.1</a></p><p>中找到解决办法。按照高赞回答说的，我先输入了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install cocoapods<br></code></pre></td></tr></table></figure><p>但是提示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">Error: The `brew <span class="hljs-built_in">link</span>` step did not complete successfully<br>The formula built, but is not symlinked into /usr/local<br>Could not symlink bin/pod<br>Target /usr/local/bin/pod<br>already exists. You may want to remove it:<br>  <span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;/usr/local/bin/pod&#x27;</span><br><br>To force the <span class="hljs-built_in">link</span> and overwrite all conflicting files:<br>  brew <span class="hljs-built_in">link</span> --overwrite cocoapods<br><br>To list all files that would be deleted:<br>  brew <span class="hljs-built_in">link</span> --overwrite --dry-run cocoapods<br><br>Possible conflicting files are:<br>/usr/local/bin/pod<br>/usr/local/bin/xcodeproj<br>==&gt; Summary<br>🍺  /usr/local/Cellar/cocoapods/1.14.3: 13,791 files, 28.8MB<br>==&gt; Running `brew cleanup cocoapods`...<br>Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.<br>Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).<br></code></pre></td></tr></table></figure><p>所以按照回答以及提示，我输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew <span class="hljs-built_in">link</span> --overwrite cocoapods<br></code></pre></td></tr></table></figure><p>之后再输入 <code>brew install cocoapods</code> 自此，cocoapods 更新成功</p>]]></content>
    
    
    <categories>
      
      <category>ECG Project</category>
      
      <category>数据采集</category>
      
      <category>ECG 采集</category>
      
      <category>Polar H10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CocoaPods</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装 Cocoapods</title>
    <link href="/2023/01/08/%E5%AE%89%E8%A3%85-Cocoapods/"/>
    <url>/2023/01/08/%E5%AE%89%E8%A3%85-Cocoapods/</url>
    
    <content type="html"><![CDATA[<p><a href="https://brew.sh/">Homebrew</a> 安装指令查看官网</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">brew <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>安装 CocoaPods</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>cocoapods<br></code></pre></td></tr></table></figure><p>验证是否安装成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pod <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>关于 cocoapods 的其他操作：<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E4%BD%BF%E7%94%A8-cocoapods-%E7%AE%A1%E7%90%86%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A5%97%E4%BB%B6-6e6135b62814">使用 CocoaPods 管理第三方套件</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CocoaPods</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
