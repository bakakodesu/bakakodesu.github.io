<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Xcode 真机调试 iWatch 的坑</title>
    <link href="/2024/01/19/Xcode-%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-iWatch-%E7%9A%84%E5%9D%91/"/>
    <url>/2024/01/19/Xcode-%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95-iWatch-%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>总之而言，不要在 Xcode 上直接选择真机来运行 Watch App 工程。</p><p>由于 Watch App 不能从电脑直接安装，Xcode 需要首先把 swift 的运行时和一系列安装脚本先传到手机上，再由手机完成安装过程。之后 Xcode 还需要通过手机来和 Watch 建立连接才能调试。</p><p>这样的结果就是 Xcode 不停地提示正在连接手表以及正在重新连接手表。</p><p>最好的办法是，选择 iOS App，直接在 iPhone 上运行。</p><p>因为 iOS App 在安装的时候会把 Watch App 同样编译安装，之后只要手动在「手表」应用中重新安装 Watch App 即可。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 的声音和振动</title>
    <link href="/2024/01/19/Swift-%E7%9A%84%E5%A3%B0%E9%9F%B3%E5%92%8C%E6%8C%AF%E5%8A%A8/"/>
    <url>/2024/01/19/Swift-%E7%9A%84%E5%A3%B0%E9%9F%B3%E5%92%8C%E6%8C%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> AVFoundation<span class="hljs-keyword">class</span> <span class="hljs-title class_">SoundPlayer</span> &#123;    <span class="hljs-keyword">var</span> soundIdIndex <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">playSound</span>() &#123;        <span class="hljs-keyword">let</span> soundID <span class="hljs-operator">=</span> <span class="hljs-type">SystemSoundID</span>(soundIdIndex)        <span class="hljs-type">AudioServicesPlaySystemSound</span>(soundID)    &#125;&#125;</code></pre></div><p>使用方法为</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> player <span class="hljs-operator">=</span> <span class="hljs-type">SoundPlayer</span>()player.playSound()</code></pre></div><p>声音 id 可参考 <a href="https://github.com/TUNER88/iOSSystemSoundsLibrary">iOSSystemSoundsLibrary</a></p><h3 id="振动"><a href="#振动" class="headerlink" title="振动"></a>振动</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> AVFoundation<span class="hljs-keyword">enum</span> <span class="hljs-title class_">Vibration</span> &#123;        <span class="hljs-keyword">case</span> error    <span class="hljs-keyword">case</span> success    <span class="hljs-keyword">case</span> warning    <span class="hljs-keyword">case</span> light    <span class="hljs-keyword">case</span> medium    <span class="hljs-keyword">case</span> heavy    <span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)    <span class="hljs-keyword">case</span> soft    <span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>)    <span class="hljs-keyword">case</span> rigid    <span class="hljs-keyword">case</span> selection        <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">vibrate</span>() &#123;        <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;        <span class="hljs-keyword">case</span> .error:            <span class="hljs-type">UINotificationFeedbackGenerator</span>().notificationOccurred(.error)        <span class="hljs-keyword">case</span> .success:            <span class="hljs-type">UINotificationFeedbackGenerator</span>().notificationOccurred(.success)        <span class="hljs-keyword">case</span> .warning:            <span class="hljs-type">UINotificationFeedbackGenerator</span>().notificationOccurred(.warning)        <span class="hljs-keyword">case</span> .light:            <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .light).impactOccurred()        <span class="hljs-keyword">case</span> .medium:            <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .medium).impactOccurred()        <span class="hljs-keyword">case</span> .heavy:            <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .heavy).impactOccurred()        <span class="hljs-keyword">case</span> .soft:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">#available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>) &#123;                <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .soft).impactOccurred()            &#125;        <span class="hljs-keyword">case</span> .rigid:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">#available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">13.0</span>, <span class="hljs-operator">*</span>) &#123;                <span class="hljs-type">UIImpactFeedbackGenerator</span>(style: .rigid).impactOccurred()            &#125;        <span class="hljs-keyword">case</span> .selection:            <span class="hljs-type">UISelectionFeedbackGenerator</span>().selectionChanged()                &#125;    &#125;&#125;</code></pre></div><p>使用方法</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-type">Vibration</span>.rigid.vibrate()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift String format 的相关使用方法</title>
    <link href="/2024/01/19/Swift-String-format-%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2024/01/19/Swift-String-format-%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h3><p>字符串中包裹着 <code>\()</code></p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> age <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-keyword">let</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxx&quot;</span><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%@ Age Is %d&quot;</span>, name, age)<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(name)</span> Age Is <span class="hljs-subst">\(age)</span>&quot;</span>)<span class="hljs-type">Text</span>(name <span class="hljs-operator">+</span> <span class="hljs-string">&quot;Age Is&quot;</span> <span class="hljs-operator">+</span> <span class="hljs-type">String</span>(age))<span class="hljs-type">Text</span>(string)</code></pre></div><h3 id="整数与小数"><a href="#整数与小数" class="headerlink" title="整数与小数"></a>整数与小数</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">123892674027</span>)<span class="hljs-type">Text</span>(string)<span class="hljs-comment">// 结果却是：&quot;-661377557&quot;</span><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%ld&quot;</span>, <span class="hljs-number">123892674027</span>)</code></pre></div><p>如果数据大，可能大于 2147483647（10 位），使用 <code>&quot;%ld&quot;</code>，否则使用 <code>&quot;%d&quot;</code> 即可。</p><p>长度修饰符</p><ul><li>h，代表 shor t或者 unsigned short</li><li>l，代表 long 或者 unsiged long  (ll 表示 long long 或者 unsigned long long) Int</li><li>L，代表 Long double</li></ul><h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> i <span class="hljs-operator">=</span> <span class="hljs-number">1.1111</span><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%f&quot;</span>, i)<span class="hljs-comment">// 1.1111，默认保留 6 位小数</span><span class="hljs-keyword">let</span> string <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%.2f&quot;</span>, i)<span class="hljs-comment">// 1.11，输入几保留几位小数</span></code></pre></div><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> minutes: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span><span class="hljs-keyword">let</span> seconds: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%02d:%02d&quot;</span>, minutes, seconds) <span class="hljs-comment">//08:09</span><span class="hljs-keyword">let</span> i: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">36</span><span class="hljs-keyword">let</span> i2: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">350087</span><span class="hljs-comment">// 固定四位显示</span><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%4d&quot;</span>, i) <span class="hljs-comment">// &quot;  36&quot; （注意有两个空格）</span><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%4d&quot;</span>, i2) <span class="hljs-comment">// &quot;350087&quot; (位数大于，则全部显示)</span> <span class="hljs-comment">// 固定四位显示，不足补0</span><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%04d&quot;</span>, i) <span class="hljs-comment">// &quot;0036&quot;</span><span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%04d&quot;</span>, i2) <span class="hljs-comment">// &quot;350087&quot; (位数大于，则全部显示)</span></code></pre></div><p>参考</p><ol><li><a href="https://blog.csdn.net/qq_14920635/article/details/96479691">Swift 数字字符串格式化</a></li><li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/swift-%E9%80%8F%E9%81%8E-string-%E8%AE%93%E6%95%B8%E5%80%BC%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%91%88%E7%8F%BE-%E6%95%B4%E6%95%B8%E8%A3%9C%E9%9B%B6-%E5%B0%8F%E6%95%B8%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5%E8%87%B3%E7%AC%AC%E5%B9%BE%E4%BD%8D%E6%95%B8-eefb15b998b6">透過 String 讓數值格式化呈現(整數補零、小數四捨五入至第幾位數)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 整除运算</title>
    <link href="/2024/01/19/Swift-%E6%95%B4%E9%99%A4%E8%BF%90%E7%AE%97/"/>
    <url>/2024/01/19/Swift-%E6%95%B4%E9%99%A4%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> number <span class="hljs-operator">=</span> <span class="hljs-number">8</span><span class="hljs-keyword">if</span> number <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个整数可以被2整除&quot;</span>)&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个整数不能被2整除&quot;</span>)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 截取字符串</title>
    <link href="/2024/01/19/Swift-%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/01/19/Swift-%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-comment">// 头部截取 </span><span class="hljs-keyword">let</span> str <span class="hljs-operator">=</span> <span class="hljs-string">&quot;asdfghjkl;&#x27;&quot;</span> <span class="hljs-keyword">let</span> str1 <span class="hljs-operator">=</span> str.prefix(<span class="hljs-number">2</span>); <span class="hljs-built_in">print</span>(str1) <span class="hljs-comment">// 结果: as </span>   <span class="hljs-comment">// 尾部截取   </span><span class="hljs-keyword">let</span> str2 <span class="hljs-operator">=</span> str.suffix(<span class="hljs-number">3</span>); <span class="hljs-built_in">print</span>(str2) <span class="hljs-comment">// 结果: l;&#x27; </span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>报错 &#39;async&#39; call in a function that does not support concurrency</title>
    <link href="/2024/01/18/%E6%8A%A5%E9%94%99-async-call-in-a-function-that-does-not-support-concurrency/"/>
    <url>/2024/01/18/%E6%8A%A5%E9%94%99-async-call-in-a-function-that-does-not-support-concurrency/</url>
    
    <content type="html"><![CDATA[<p>异步函数的调用方式是</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-type">Task</span> &#123;<span class="hljs-keyword">await</span> yourFunction()&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发 Polar H10 心率带遇到的时间戳问题</title>
    <link href="/2024/01/18/%E5%BC%80%E5%8F%91-Polar-H10-%E5%BF%83%E7%8E%87%E5%B8%A6%E9%81%87%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/18/%E5%BC%80%E5%8F%91-Polar-H10-%E5%BF%83%E7%8E%87%E5%B8%A6%E9%81%87%E5%88%B0%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>可参考的内容包括：</p><ol><li><a href="https://github.com/polarofficial/polar-ble-sdk/issues/192">How to check currently-set epoch for timestamp</a></li><li><a href="https://github.com/polarofficial/polar-ble-sdk/issues/165">setLocalTime sets incorrect time and date</a></li><li><a href="https://github.com/polarofficial/polar-ble-sdk/issues/221">What is the zero date for the H10 timestamp?</a></li></ol><h3 id="时间戳的基准问题"><a href="#时间戳的基准问题" class="headerlink" title="时间戳的基准问题"></a>时间戳的基准问题</h3><p>首先需要明确的一点是，Polar H10 的基准时间并不是 1970-01-01 00:00:00（GMT）。而是 2000-01-01 00:00:00（GMT）。</p><p>这意味着 Polar H10 产生的时间戳，要比标准时间戳少了 946684800000 毫秒。</p><blockquote><p>you may use the epoch time to human readable time converters in your code, which are usually based on the unix epoch of Jan 01 1970 00:00:00. Then you shall add the offset between Jan 01 1970 00:00:00 and Jan 01 2000 00:00:00 to timestamp before passing the timestamp to converter. Offset in nanoseconds is 946684800000000000</p></blockquote><p>也就是说，处理后续时间戳时，需要加上 1970-01-01 到 2000-01-01 这 30 年的 946684800000 毫秒。</p><h3 id="传感器重启问题"><a href="#传感器重启问题" class="headerlink" title="传感器重启问题"></a>传感器重启问题</h3><p>Polar H10 在非佩戴时间会自动关机，也就是断电。等到重启后，传感器的时间芯片会默认从 2019-01-01 00:00:00 (GMT) 开始计时。</p><p><em>纳秒为 599616000000000000 ns</em></p><blockquote><p>the time of the sensor is set to default value when sensor resets or battery runs out. For the Polar H10 (v.3.1.1) the default time is Jan 01 2019 00:00:00 (GMT), which in nanosecond format is 599616000000000000</p></blockquote><p>所以可以看到 <em>599616067917010444</em> 这样的时间戳。</p><div class="code-wrapper"><pre><code class="hljs subunit">举个例子我在 2024<span class="hljs-string">-01</span><span class="hljs-string">-18</span> 11:29:15 启动传感器并打印时间，得到的时间为 2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span> 00:00:00</code></pre></div><p>这样显然是不可以使用的，所以需要设置传感器的时间与现在同步。即：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-type">Task</span> &#123;<span class="hljs-keyword">await</span> bleSdkManager.setTime()&#125;</code></pre></div><h3 id="设置传感器时间问题"><a href="#设置传感器时间问题" class="headerlink" title="设置传感器时间问题"></a>设置传感器时间问题</h3><p>SDK 自带的 setTime() API 存在一个问题——</p><p><strong>它会将本地时间设置成 GMT 时间</strong></p><div class="code-wrapper"><pre><code class="hljs subunit">按理说，如果本地（北京 UTC<span class="hljs-string">+8</span>）时间为 15:00，那么 GMT 的时间应该为 07:00。当设置好传感器时间后，传感器打印出来的时间戳对应的 GMT 时间也应该是 07:00 才对。</code></pre></div><p>但现在的问题是</p><div class="code-wrapper"><pre><code class="hljs subunit">我在 15:00（北京 UTC<span class="hljs-string">+8</span>）设置传感器的时间并打印时间戳。传感器打印出来的时间戳对应的时间是 15:00（GMT）或者说 23:00（北京 UTC<span class="hljs-string">+8</span>）。而不是 07:00（GMT）或者说 15:00（北京 UTC<span class="hljs-string">+8</span>）。也就是说，在 setTime() 后传感器的时间要快了 8 小时。</code></pre></div><h3 id="传感器时间戳处理的具体流程"><a href="#传感器时间戳处理的具体流程" class="headerlink" title="传感器时间戳处理的具体流程"></a>传感器时间戳处理的具体流程</h3><ol><li>每次佩戴 Polar H10 后，需要通过 setTime() 初始化传感器时间，让传感器不再以 2019-01-01 00:00:00 (GMT) 起始开始计时；</li><li>在获得时间戳后，需要先加上 <em>946684800000000000 ns</em>，以补充 1970-01-01 00:00:00（GMT）到 2000-01-01 00:00:00（GMT）这段时间；</li><li>之后，再<strong>减去</strong> <em>28800000000000 ns</em> 以修正 setTime() 函数将本地时间设置成 GMT 时间所造成的误差。具体数值视 UTC 时区而定，这里用的是北京东八区，也就是 UTC+8，所以是减去 <em>8x60x60 s</em>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心率</tag>
      
      <tag>Swift</tag>
      
      <tag>传感器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 在 WatchOS 中的 List 与 ForEach 奇怪的地方</title>
    <link href="/2024/01/17/SwiftUI-%E5%9C%A8-WatchOS-%E4%B8%AD%E7%9A%84-List-%E4%B8%8E-ForEach-%E5%A5%87%E6%80%AA%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <url>/2024/01/17/SwiftUI-%E5%9C%A8-WatchOS-%E4%B8%AD%E7%9A%84-List-%E4%B8%8E-ForEach-%E5%A5%87%E6%80%AA%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift 时间相关的方法</title>
    <link href="/2024/01/13/Swift-%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2024/01/13/Swift-%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a><strong>时间格式</strong></h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">getDate</span>() -&gt; <span class="hljs-type">String</span> &#123;    <span class="hljs-comment">//系统时间</span>    <span class="hljs-keyword">let</span> now <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>()    <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()    dformatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;M月d日&quot;</span>    <span class="hljs-keyword">return</span> dformatter.string(from: now)&#125;<span class="hljs-keyword">func</span> <span class="hljs-title function_">stringToData</span>(<span class="hljs-params">string</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Date</span> &#123;    <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()    dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span>    <span class="hljs-keyword">let</span> date <span class="hljs-operator">=</span> dateFormatter.date(from: string)<span class="hljs-operator">!</span>    <span class="hljs-keyword">return</span> date&#125;</code></pre></div><h3 id="获取当前小时、星期几等"><a href="#获取当前小时、星期几等" class="headerlink" title="获取当前小时、星期几等"></a>获取当前小时、星期几等</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-comment">// 获取当前小时</span><span class="hljs-keyword">func</span> <span class="hljs-title function_">getCurrentHour</span>() -&gt; <span class="hljs-type">Int</span> &#123;    <span class="hljs-keyword">let</span> calendar <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.current    <span class="hljs-keyword">let</span> dateComponets <span class="hljs-operator">=</span> calendar.dateComponents([<span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.year, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.month, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.day, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.hour, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.weekday], from: <span class="hljs-type">Date</span>())    <span class="hljs-keyword">return</span> (dateComponets.hour<span class="hljs-operator">!</span>)&#125;<span class="hljs-comment">//获取星期几</span><span class="hljs-keyword">func</span> <span class="hljs-title function_">getCurrentWeekday</span>() -&gt; <span class="hljs-type">Int</span> &#123;    <span class="hljs-keyword">let</span> calendar <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.current    <span class="hljs-keyword">let</span> dateComponets <span class="hljs-operator">=</span> calendar.dateComponents([<span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.year, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.month, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.day, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.hour, <span class="hljs-type">Calendar</span>.<span class="hljs-type">Component</span>.weekday], from: <span class="hljs-type">Date</span>())    <span class="hljs-keyword">return</span> (dateComponets.weekday<span class="hljs-operator">!</span> <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)&#125;</code></pre></div><h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">dateInterval</span>(<span class="hljs-params">startTime</span>: <span class="hljs-type">String</span>, <span class="hljs-params">endTime</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Int</span>&#123;    <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()    dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span>    <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> date1 <span class="hljs-operator">=</span> dateFormatter.date(from: startTime),          <span class="hljs-keyword">let</span> date2 <span class="hljs-operator">=</span> dateFormatter.date(from: endTime) <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span>    &#125;    <span class="hljs-keyword">let</span> components <span class="hljs-operator">=</span> <span class="hljs-type">NSCalendar</span>.current.dateComponents([.minute], from: date1, to: date2)    <span class="hljs-comment">//如果需要返回月份间隔，分钟间隔等等，只需要在dateComponents第一个参数后面加上相应的参数即可，示例如下：</span>    <span class="hljs-comment">//let components = NSCalendar.current.dateComponents([.month,.day,.hour,.minute], from: date1, to: date2)</span>    <span class="hljs-keyword">return</span> components.minute<span class="hljs-operator">!</span>&#125;</code></pre></div><p>如果是 <code>date</code> 格式则可以直接使用</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> components <span class="hljs-operator">=</span> <span class="hljs-type">NSCalendar</span>.current.dateComponents([.minute, .second], from: tic, to: toc)dateInterval <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(components.minute<span class="hljs-operator">!</span>)</span>:<span class="hljs-subst">\(components.second<span class="hljs-operator">!</span>)</span>&quot;</span></code></pre></div><h3 id="星期几显示成中文"><a href="#星期几显示成中文" class="headerlink" title="星期几显示成中文"></a>星期几显示成中文</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">String</span> &#123;        <span class="hljs-keyword">func</span> <span class="hljs-title function_">featureWeekday</span>() -&gt; <span class="hljs-type">String</span> &#123;        <span class="hljs-keyword">let</span> dateFormatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()        dateFormatter.locale <span class="hljs-operator">=</span> <span class="hljs-type">Locale</span>.current        dateFormatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> formatDate <span class="hljs-operator">=</span> dateFormatter.date(from: <span class="hljs-keyword">self</span>) <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> &#125;        <span class="hljs-keyword">let</span> calendar <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.current        <span class="hljs-keyword">let</span> weekDay <span class="hljs-operator">=</span> calendar.component(.weekday, from: formatDate)        <span class="hljs-keyword">switch</span> weekDay &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期日&quot;</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期一&quot;</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期二&quot;</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期三&quot;</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期四&quot;</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期五&quot;</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;星期六&quot;</span>        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>        &#125;    &#125;&#125;</code></pre></div><h3 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title="获取时间戳"></a>获取时间戳</h3><div class="code-wrapper"><pre><code class="hljs Swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Date</span> &#123;    <span class="hljs-comment">/// 获取当前 秒级 时间戳 - 10位</span>    <span class="hljs-keyword">var</span> timeStamp : <span class="hljs-type">String</span> &#123;        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970        <span class="hljs-keyword">let</span> timeStamp <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(timeInterval)        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(timeStamp)</span>&quot;</span>    &#125;    <span class="hljs-comment">/// 获取当前 毫秒级 时间戳 - 13位</span>    <span class="hljs-keyword">var</span> milliStamp : <span class="hljs-type">String</span> &#123;        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970        <span class="hljs-keyword">let</span> millisecond <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>(round(timeInterval<span class="hljs-operator">*</span><span class="hljs-number">1000</span>))        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(millisecond)</span>&quot;</span>    &#125;&#125;</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> currentDate <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>()<span class="hljs-keyword">let</span> timeInterval <span class="hljs-operator">=</span> currentDate.timeIntervalSince1970<span class="hljs-keyword">let</span> milliseconds <span class="hljs-operator">=</span> timeInterval <span class="hljs-operator">*</span> <span class="hljs-number">1000</span><span class="hljs-keyword">let</span> timeStamp <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>(milliseconds)</code></pre></div><h3 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">timeStampToString</span>(<span class="hljs-params">timeStamp</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">String</span>&#123;    <span class="hljs-keyword">let</span> interval:<span class="hljs-type">TimeInterval</span><span class="hljs-operator">=</span><span class="hljs-type">TimeInterval</span>.<span class="hljs-keyword">init</span>(timeStamp)<span class="hljs-operator">!</span>    <span class="hljs-keyword">let</span> date <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>(timeIntervalSince1970: interval)    <span class="hljs-keyword">let</span> dateformatter <span class="hljs-operator">=</span> <span class="hljs-type">DateFormatter</span>()    dateformatter.dateFormat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>    <span class="hljs-keyword">return</span> dateformatter.string(from: date)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 获取工程版本号</title>
    <link href="/2024/01/13/Swift-%E8%8E%B7%E5%8F%96%E5%B7%A5%E7%A8%8B%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <url>/2024/01/13/Swift-%E8%8E%B7%E5%8F%96%E5%B7%A5%E7%A8%8B%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>关于版本号具体可看 <a href="https://kangzubin.com/xcode-buildversion-increase/">Xcode 工程设置构建版本号自动递增</a></p><p>我们这里取的是 <code>Verson</code> 而不是 <code>Build</code>，所以可以参考 <a href="https://stackoverflow.com/questions/25965239/how-do-i-get-the-app-version-and-build-number-using-swift">How do I get the App version and build number using Swift?</a> 中的：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> appVersion <span class="hljs-operator">=</span> <span class="hljs-type">Bundle</span>.main.infoDictionary<span class="hljs-operator">?</span>[<span class="hljs-string">&quot;CFBundleShortVersionString&quot;</span>] <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span></code></pre></div><p>关于使用</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-type">Text</span>(appVersion <span class="hljs-operator">??</span> <span class="hljs-string">&quot;-.-.-&quot;</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Xocde</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>iOS Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 下 WatchOS 与 iOS 通信</title>
    <link href="/2024/01/13/SwiftUI-%E4%B8%8B-WatchOS-%E4%B8%8E-iOS-%E9%80%9A%E4%BF%A1/"/>
    <url>/2024/01/13/SwiftUI-%E4%B8%8B-WatchOS-%E4%B8%8E-iOS-%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p>关于 WatchOS 的工程文件创建，可参考 <a href="https://developer.apple.com/tutorials/swiftui/creating-a-watchos-app#Share-files-between-targets">Creating a watchOS app</a></p><p>关于具体的代码，可参考 <a href="https://github.com/MilanistaDev/WatchConnectivitySampleForSwiftUI/tree/main">WatchConnectivitySampleForSwiftUI</a></p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 工程 Bluetooth Always Usage Description 设置问题</title>
    <link href="/2024/01/10/Xcode-%E5%B7%A5%E7%A8%8B-Bluetooth-Always-Usage-Description-%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/10/Xcode-%E5%B7%A5%E7%A8%8B-Bluetooth-Always-Usage-Description-%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在进行蓝牙开发时，如果没有设置 Bluetooth Always Usage Description，则会提示：</p><div class="code-wrapper"><pre><code class="hljs markdown">This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app&#x27;s Info.plist must contain an NSBluetoothAlwaysUsageDescription key with a string value explaining to the user how the app uses this data.</code></pre></div><p><strong>类似于请求网络、请求定位一样。</strong></p><p>但是在 Xcode 13 后，传统的 info.plist 文件已经消失了。</p><p>苹果在<a href="https://link.juejin.cn/?target=https://developer.apple.com/documentation/xcode-release-notes/xcode-13-release-notes">《Xcode13 Release Notes》</a>中写道：</p><blockquote><p>“Projects created from several templates no longer require configuration files such as entitlements and <strong>Info.plist</strong> files. Configure common fields in the <strong>target’s Info tab, and build settings</strong> in the project editor. These files are added to the project when additional fields are used. (68254857)”</p></blockquote><p><strong>意思是说，从 Xcode13 开始，新建的工程不再要求使用配置文件（Info.plist、entitlements）。如果需要修改 Xcode 的配置，请直接在 Xcode 面板「target - Info - Custom iOS Target Properties 和 build settings」中设置</strong>。</p><p>其实，早在 Xcode13 之前，Custom iOS Target Properties 这个面板就有了，只是 Xcode 会自动同步 Cusutom iOS Target Properties 和 Info.plist 文件。而现在，Xcode13 默认删除了 Info.plist 文件中的大部分属性，保留在 Cusutom iOS Target Properties 中。</p><p>具体的做法：</p><p>找到 TARGETS，选中 Build Settings，「All」与「Combined」，找到 info.plist Values，其中有一个选项是 <strong>Privacy - Bluetooth Always Usage Description</strong>，找到并填写内容，例如「需要打开的蓝牙」。</p><p>设置完成后，在第一次运行 App 时，程序会向用户请求蓝牙使用权限，请求操作显示的内容便是「需要打开的蓝牙」。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Xocde</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Cocoapods 时报错 Sandbox: rsync.samba(62830) deny(1)</title>
    <link href="/2024/01/10/%E4%BD%BF%E7%94%A8-Cocoapods-%E6%97%B6%E6%8A%A5%E9%94%99-Sandbox-rsync-samba-62830-deny-1/"/>
    <url>/2024/01/10/%E4%BD%BF%E7%94%A8-Cocoapods-%E6%97%B6%E6%8A%A5%E9%94%99-Sandbox-rsync-samba-62830-deny-1/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在 Xcode 新建项目并 pod install 后，run 的时候，遇到了如下的问题：</p><p>沙盒报错</p><div class="code-wrapper"><pre><code class="hljs sh">Sandbox: rsync.samba(62830) deny(1)</code></pre></div><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在 TARGETS 的 Build Settings 中选择「All」与「Combined」之后搜索：</p><div class="code-wrapper"><pre><code class="hljs sh">User Script Sandboxing</code></pre></div><p>将其改为 NO 即可解决。</p><p>参考 <a href="https://blog.csdn.net/lyz0925/article/details/133944802">iOS Xcode 15 Sandbox: rsync(xxxx) deny(1) file-write-create</a></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Xcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 CNN 对 ECG 心电信号进行心拍分类（pytorch）</title>
    <link href="/2024/01/09/%E5%88%A9%E7%94%A8-CNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/"/>
    <url>/2024/01/09/%E5%88%A9%E7%94%A8-CNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> math<span class="hljs-keyword">import</span> torch.utils.data<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">import</span> torch.utils.data<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn, optim<span class="hljs-keyword">from</span> torch.utils.data.dataset <span class="hljs-keyword">import</span> Dataset<span class="hljs-keyword">import</span> wfdb<span class="hljs-keyword">import</span> pywt<span class="hljs-keyword">import</span> seaborn<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrixtorch.set_default_tensor_type(torch.DoubleTensor)<span class="hljs-comment"># 是否用</span>is_cuda = <span class="hljs-literal">False</span>num_epochs = <span class="hljs-number">100</span>batch_size = <span class="hljs-number">10</span>torch.manual_seed(<span class="hljs-number">123</span>)in_channels_ = <span class="hljs-number">1</span>num_classes = <span class="hljs-number">12</span>allow_label_leakage = <span class="hljs-literal">True</span>device = torch.device(<span class="hljs-string">&quot;cuda:2&quot;</span> <span class="hljs-keyword">if</span> is_cuda <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)list_target = []<span class="hljs-comment"># 测试集在数据集中所占的比例</span>RATIO = <span class="hljs-number">0.3</span>data_path = <span class="hljs-string">&quot;data/mit-bih-arrhythmia-database-1.0.0&quot;</span>ecg_all_class_set = []count_number_of_class = &#123;<span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;~&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;|&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-number">0</span>&#125;<span class="hljs-comment"># 读取心电数据和对应标签,并对数据进行小波去噪</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDataSet</span>(<span class="hljs-params">number, X_data, Y_data</span>):    ecgClassSet = [<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>]    <span class="hljs-comment"># 读取心电数据记录</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在读取 &quot;</span> + number + <span class="hljs-string">&quot; 号心电数据...&quot;</span>)    record = wfdb.rdrecord(<span class="hljs-string">&#x27;data/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, channel_names=[<span class="hljs-string">&#x27;MLII&#x27;</span>])    data = record.p_signal.flatten()    rdata = denoise(data=data)    <span class="hljs-comment"># 获取心电数据记录中R波的位置和对应的标签</span>    annotation = wfdb.rdann(<span class="hljs-string">&#x27;data/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, <span class="hljs-string">&#x27;atr&#x27;</span>)    Rlocation = annotation.sample    Rclass = annotation.symbol    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> Rclass:        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ecg_all_class_set:            ecg_all_class_set.append(c)    <span class="hljs-comment"># 去掉前后的不稳定数据</span>    start = <span class="hljs-number">10</span>    end = <span class="hljs-number">5</span>    i = start    j = <span class="hljs-built_in">len</span>(annotation.symbol) - end    <span class="hljs-comment"># 因为只选择NAVLR五种心电类型,所以要选出该条记录中所需要的那些带有特定标签的数据,舍弃其余标签的点</span>    <span class="hljs-comment"># X_data在R波前后截取长度为300的数据点</span>    <span class="hljs-comment"># Y_data将NAVLR按顺序转换为01234</span>    <span class="hljs-keyword">while</span> i &lt; j:        <span class="hljs-keyword">try</span>:            lable = ecgClassSet.index(Rclass[i])            <span class="hljs-keyword">if</span> Rlocation[i] - <span class="hljs-number">1199</span> &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> Rlocation[i] + <span class="hljs-number">2401</span> &gt; Rlocation[<span class="hljs-built_in">len</span>(Rlocation) - <span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> Rclass[                i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ecgClassSet:                i += <span class="hljs-number">1</span>                <span class="hljs-keyword">continue</span>            x_train = rdata[Rlocation[i] - <span class="hljs-number">1199</span>:Rlocation[i] + <span class="hljs-number">2401</span>]            X_data.append(x_train)            Y_data.append(lable)            temp_class = Rclass[i]            <span class="hljs-built_in">print</span>(count_number_of_class[temp_class])            count_number_of_class[temp_class] = count_number_of_class[temp_class] + <span class="hljs-number">1</span>            i += <span class="hljs-number">1</span>        <span class="hljs-keyword">except</span> ValueError:            i += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span><span class="hljs-comment"># 小波去噪预处理</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">denoise</span>(<span class="hljs-params">data</span>):    <span class="hljs-comment"># 小波变换</span>    coeffs = pywt.wavedec(data=data, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>, level=<span class="hljs-number">9</span>)    cA9, cD9, cD8, cD7, cD6, cD5, cD4, cD3, cD2, cD1 = coeffs    <span class="hljs-comment"># 阈值去噪</span>    threshold = (np.median(np.<span class="hljs-built_in">abs</span>(cD1)) / <span class="hljs-number">0.6745</span>) * (np.sqrt(<span class="hljs-number">2</span> * np.log(<span class="hljs-built_in">len</span>(cD1))))    cD1.fill(<span class="hljs-number">0</span>)    cD2.fill(<span class="hljs-number">0</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(coeffs) - <span class="hljs-number">2</span>):        coeffs[i] = pywt.threshold(coeffs[i], threshold)    <span class="hljs-comment"># 小波反变换,获取去噪后的信号</span>    rdata = pywt.waverec(coeffs=coeffs, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>)    <span class="hljs-keyword">return</span> rdata<span class="hljs-comment"># 加载数据集并进行预处理</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadData</span>():    numberSet = [<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;101&#x27;</span>]    dataSet = []    lableSet = []    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numberSet:        getDataSet(n, dataSet, lableSet)    <span class="hljs-comment"># 转numpy数组,打乱顺序</span>    dataSet = np.array(dataSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">3600</span>)    lableSet = np.array(lableSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)    <span class="hljs-built_in">print</span>(dataSet.shape)    <span class="hljs-built_in">print</span>(lableSet.shape)    train_ds = np.hstack((dataSet, lableSet))    np.random.shuffle(train_ds)    <span class="hljs-comment"># 数据集及其标签集</span>    X = train_ds[:, :<span class="hljs-number">3600</span>].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3600</span>)    Y = train_ds[:, <span class="hljs-number">3600</span>]    <span class="hljs-comment"># 测试集及其标签集</span>    shuffle_index = np.random.permutation(<span class="hljs-built_in">len</span>(X))    test_length = <span class="hljs-built_in">int</span>(RATIO * <span class="hljs-built_in">len</span>(shuffle_index))    test_index = shuffle_index[:test_length]    train_index = shuffle_index[test_length:]    X_test, Y_test = X[test_index], Y[test_index]    X_train, Y_train = X[train_index], Y[train_index]    <span class="hljs-keyword">return</span> X_train, Y_train, X_test, Y_test<span class="hljs-keyword">def</span> <span class="hljs-title function_">basic_layer</span>(<span class="hljs-params">in_channels, out_channels, kernel_size, batch_norm=<span class="hljs-literal">False</span>, max_pool=<span class="hljs-literal">True</span>, conv_stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span></span><span class="hljs-params">                , pool_stride=<span class="hljs-number">2</span>, pool_size=<span class="hljs-number">2</span></span>):    layer = nn.Sequential(        nn.Conv1d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=conv_stride,                  padding=padding),        nn.ReLU()    )    <span class="hljs-keyword">if</span> batch_norm:        layer = nn.Sequential(            layer,            nn.BatchNorm1d(num_features=out_channels)        )    <span class="hljs-keyword">if</span> max_pool:        layer = nn.Sequential(            layer,            nn.MaxPool1d(kernel_size=pool_size, stride=pool_stride)        )    <span class="hljs-keyword">return</span> layer<span class="hljs-keyword">class</span> <span class="hljs-title class_">mit_bih_classifier</span>(nn.Module):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels=in_channels_</span>):        <span class="hljs-built_in">super</span>(mit_bih_classifier, self).__init__()        self.cnn = nn.Sequential(            basic_layer(in_channels=in_channels, out_channels=<span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">50</span>, batch_norm=<span class="hljs-literal">True</span>,                        max_pool=<span class="hljs-literal">True</span>, conv_stride=<span class="hljs-number">3</span>, pool_stride=<span class="hljs-number">3</span>, pool_size=<span class="hljs-number">2</span>),            basic_layer(in_channels=<span class="hljs-number">128</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">7</span>, batch_norm=<span class="hljs-literal">True</span>,                        max_pool=<span class="hljs-literal">True</span>, conv_stride=<span class="hljs-number">1</span>, pool_stride=<span class="hljs-number">2</span>, pool_size=<span class="hljs-number">2</span>),            basic_layer(in_channels=<span class="hljs-number">32</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">10</span>, batch_norm=<span class="hljs-literal">False</span>,                        max_pool=<span class="hljs-literal">False</span>, conv_stride=<span class="hljs-number">1</span>),            basic_layer(in_channels=<span class="hljs-number">32</span>, out_channels=<span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">5</span>, conv_stride=<span class="hljs-number">2</span>, pool_stride=<span class="hljs-number">2</span>,                        max_pool=<span class="hljs-literal">True</span>, batch_norm=<span class="hljs-literal">False</span>),            basic_layer(in_channels=<span class="hljs-number">128</span>, out_channels=<span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">15</span>, conv_stride=<span class="hljs-number">1</span>, pool_size=<span class="hljs-number">2</span>,                        max_pool=<span class="hljs-literal">True</span>, batch_norm=<span class="hljs-literal">False</span>),            basic_layer(in_channels=<span class="hljs-number">256</span>, out_channels=<span class="hljs-number">512</span>, kernel_size=<span class="hljs-number">5</span>, conv_stride=<span class="hljs-number">1</span>,                        max_pool=<span class="hljs-literal">False</span>, batch_norm=<span class="hljs-literal">False</span>),            basic_layer(in_channels=<span class="hljs-number">512</span>, out_channels=<span class="hljs-number">128</span>, kernel_size=<span class="hljs-number">3</span>, conv_stride=<span class="hljs-number">1</span>,                        max_pool=<span class="hljs-literal">False</span>, batch_norm=<span class="hljs-literal">False</span>),            nn.Flatten(),            nn.Linear(in_features=<span class="hljs-number">128</span> * <span class="hljs-number">3</span> * <span class="hljs-number">3</span>, out_features=<span class="hljs-number">512</span>),            nn.ReLU(),            nn.Dropout(p=<span class="hljs-number">.1</span>),            nn.Linear(<span class="hljs-number">512</span>, out_features=num_classes),            nn.Softmax(dim=<span class="hljs-number">1</span>)        )    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):        <span class="hljs-keyword">return</span> self.cnn(x)<span class="hljs-keyword">class</span> <span class="hljs-title class_">get_pytorch_dataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data, target, transforms_=<span class="hljs-literal">None</span>, </span>):        self.data = data        self.target = target        self.transforms = transforms_    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):        <span class="hljs-keyword">return</span> self.data[item], self.target[item]    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> self.data.shape[<span class="hljs-number">0</span>]device = torch.device(<span class="hljs-string">&quot;cuda:2&quot;</span> <span class="hljs-keyword">if</span> is_cuda <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)model = mit_bih_classifier().to(device).double()lr = <span class="hljs-number">0.0003</span>optimizer = optim.Adam(model.parameters(), lr=lr, weight_decay=<span class="hljs-number">1e-3</span>)loss_fn = nn.CrossEntropyLoss()X_train, Y_train, X_test, Y_test = loadData()train_dataset = get_pytorch_dataset(X_train, Y_train)test_dataset = get_pytorch_dataset(X_train, Y_train)train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<span class="hljs-comment"># test_dataset = CustomDatasetFromCSV(&#x27;./data/Arrhythmia_dataset.pkl&#x27;)</span>test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">epoch</span>):    model.train()    train_loss = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> batch_idx, (data, target) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):        data, target = data.to(device), target.to(device)        output = model(data)        loss = loss_fn(output.double(), target.long())        optimizer.zero_grad()        loss.backward()        optimizer.step()        train_loss += loss.item()        <span class="hljs-keyword">if</span> batch_idx % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练回合: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\t损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(                epoch, batch_idx * <span class="hljs-built_in">len</span>(data), <span class="hljs-built_in">len</span>(train_loader.dataset),                       <span class="hljs-number">100</span> * batch_idx / <span class="hljs-built_in">len</span>(train_loader),                loss.item()))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;====&gt; 训练回合: &#123;&#125; 平均损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(        epoch, train_loss / <span class="hljs-built_in">len</span>(train_loader.dataset)))<span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">epoch</span>):    model.<span class="hljs-built_in">eval</span>()    test_loss = <span class="hljs-number">0</span>    total_accuracy = <span class="hljs-number">0.00000</span>    <span class="hljs-keyword">with</span> torch.no_grad():        <span class="hljs-keyword">for</span> batch_idx, (data, target) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_loader):            data, target = data.to(device), target.to(device)            output = model(data)            loss = loss_fn(output, target.long())            test_loss += loss.item()            <span class="hljs-comment"># 准确率</span>            prediction = torch.argmax(output, dim=<span class="hljs-number">1</span>)            accuracy = (prediction == target).<span class="hljs-built_in">sum</span>().<span class="hljs-built_in">float</span>()            total_accuracy = total_accuracy + accuracy            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;========&gt;predicted:&quot;</span>, prediction)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;========&gt;target:&quot;</span>, target)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;整体测试集上的损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(test_loss))    test_loss /= <span class="hljs-built_in">len</span>(test_loader.dataset)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;整体测试集上的平均损失: &#123;:.10f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(test_loss))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;:.10f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / <span class="hljs-built_in">len</span>(test_dataset)))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-built_in">print</span>(count_number_of_class)    <span class="hljs-built_in">print</span>(ecg_all_class_set)    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num_epochs + <span class="hljs-number">1</span>):        train(epoch)        test(epoch)        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list_target))</code></pre></div><p><a href="https://github.com/Yggkk2021/mit_bih_ecg_cnn/blob/master/mit_bit_cnn_impl.py">Code</a></p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>心率</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 RNN 对 ECG 心电信号进行心拍分类（pytorch）</title>
    <link href="/2024/01/09/%E5%88%A9%E7%94%A8-RNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/"/>
    <url>/2024/01/09/%E5%88%A9%E7%94%A8-RNN-%E5%AF%B9-ECG-%E5%BF%83%E7%94%B5%E4%BF%A1%E5%8F%B7%E8%BF%9B%E8%A1%8C%E5%BF%83%E6%8B%8D%E5%88%86%E7%B1%BB%EF%BC%88pytorch%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">导入相关包</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-keyword">import</span> wfdb<span class="hljs-keyword">import</span> pywt<span class="hljs-keyword">import</span> seaborn<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">加载数据集</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-comment"># 测试集在数据集中所占的比例</span>RATIO = <span class="hljs-number">0.2</span><span class="hljs-comment"># 小波去噪预处理</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">denoise</span>(<span class="hljs-params">data</span>):    <span class="hljs-comment"># 小波变换</span>    coeffs = pywt.wavedec(data=data, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>, level=<span class="hljs-number">9</span>)    cA9, cD9, cD8, cD7, cD6, cD5, cD4, cD3, cD2, cD1 = coeffs    <span class="hljs-comment"># 阈值去噪</span>    threshold = (np.median(np.<span class="hljs-built_in">abs</span>(cD1)) / <span class="hljs-number">0.6745</span>) * (np.sqrt(<span class="hljs-number">2</span> * np.log(<span class="hljs-built_in">len</span>(cD1))))    cD1.fill(<span class="hljs-number">0</span>)    cD2.fill(<span class="hljs-number">0</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(coeffs) - <span class="hljs-number">2</span>):        coeffs[i] = pywt.threshold(coeffs[i], threshold)    <span class="hljs-comment"># 小波反变换,获取去噪后的信号</span>    rdata = pywt.waverec(coeffs=coeffs, wavelet=<span class="hljs-string">&#x27;db5&#x27;</span>)    <span class="hljs-keyword">return</span> rdata<span class="hljs-comment"># 读取心电数据和对应标签,并对数据进行小波去噪</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">getDataSet</span>(<span class="hljs-params">number, X_data, Y_data</span>):    ecgClassSet = [<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>]    <span class="hljs-comment"># 读取心电数据记录</span>    <span class="hljs-comment"># print(&quot;正在读取 &quot; + number + &quot; 号心电数据...&quot;)</span>    <span class="hljs-comment"># 读取MLII导联的数据</span>    record = wfdb.rdrecord(<span class="hljs-string">&#x27;C:/mycode/dataset_make/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, channel_names=[<span class="hljs-string">&#x27;MLII&#x27;</span>])    data = record.p_signal.flatten()    rdata = denoise(data=data)    <span class="hljs-comment"># 获取心电数据记录中R波的位置和对应的标签</span>    annotation = wfdb.rdann(<span class="hljs-string">&#x27;C:/mycode/dataset_make/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + number, <span class="hljs-string">&#x27;atr&#x27;</span>)    Rlocation = annotation.sample    Rclass = annotation.symbol    <span class="hljs-comment"># 去掉前后的不稳定数据</span>    start = <span class="hljs-number">10</span>    end = <span class="hljs-number">5</span>    i = start    j = <span class="hljs-built_in">len</span>(annotation.symbol) - end    <span class="hljs-comment"># 因为只选择NAVLR五种心电类型,所以要选出该条记录中所需要的那些带有特定标签的数据,舍弃其余标签的点</span>    <span class="hljs-comment"># X_data在R波前后截取长度为300的数据点</span>    <span class="hljs-comment"># Y_data将NAVLR按顺序转换为01234</span>    <span class="hljs-keyword">while</span> i &lt; j:        <span class="hljs-keyword">try</span>:            <span class="hljs-comment"># Rclass[i] 是标签</span>            lable = ecgClassSet.index(Rclass[i])  <span class="hljs-comment"># 这一步就是相当于抛弃了不在ecgClassSet的索引</span>            <span class="hljs-comment"># 基于经验值，基于R峰向前取100个点，向后取200个点</span>            x_train = rdata[Rlocation[i] - <span class="hljs-number">100</span>:Rlocation[i] + <span class="hljs-number">200</span>]            X_data.append(x_train)            Y_data.append(lable)            i += <span class="hljs-number">1</span>        <span class="hljs-keyword">except</span> ValueError:            i += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span><span class="hljs-comment"># 加载数据集并进行预处理</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadData</span>():    numberSet = [<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;103&#x27;</span>, <span class="hljs-string">&#x27;105&#x27;</span>, <span class="hljs-string">&#x27;106&#x27;</span>, <span class="hljs-string">&#x27;107&#x27;</span>, <span class="hljs-string">&#x27;108&#x27;</span>, <span class="hljs-string">&#x27;109&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>, <span class="hljs-string">&#x27;113&#x27;</span>, <span class="hljs-string">&#x27;114&#x27;</span>, <span class="hljs-string">&#x27;115&#x27;</span>,                 <span class="hljs-string">&#x27;116&#x27;</span>, <span class="hljs-string">&#x27;117&#x27;</span>, <span class="hljs-string">&#x27;119&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>, <span class="hljs-string">&#x27;122&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;124&#x27;</span>, <span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;201&#x27;</span>, <span class="hljs-string">&#x27;202&#x27;</span>, <span class="hljs-string">&#x27;203&#x27;</span>, <span class="hljs-string">&#x27;205&#x27;</span>, <span class="hljs-string">&#x27;208&#x27;</span>,                 <span class="hljs-string">&#x27;210&#x27;</span>, <span class="hljs-string">&#x27;212&#x27;</span>, <span class="hljs-string">&#x27;213&#x27;</span>, <span class="hljs-string">&#x27;214&#x27;</span>, <span class="hljs-string">&#x27;215&#x27;</span>, <span class="hljs-string">&#x27;217&#x27;</span>, <span class="hljs-string">&#x27;219&#x27;</span>, <span class="hljs-string">&#x27;220&#x27;</span>, <span class="hljs-string">&#x27;221&#x27;</span>, <span class="hljs-string">&#x27;222&#x27;</span>, <span class="hljs-string">&#x27;223&#x27;</span>, <span class="hljs-string">&#x27;228&#x27;</span>, <span class="hljs-string">&#x27;230&#x27;</span>,                 <span class="hljs-string">&#x27;231&#x27;</span>, <span class="hljs-string">&#x27;232&#x27;</span>, <span class="hljs-string">&#x27;233&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>]    dataSet = []    lableSet = []    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> numberSet:        getDataSet(n, dataSet, lableSet)    <span class="hljs-comment"># 转numpy数组,打乱顺序</span>    dataSet = np.array(dataSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">300</span>)  <span class="hljs-comment"># 转化为二维，一行有 300 个，行数需要计算</span>    lableSet = np.array(lableSet).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 转化为二维，一行有   1 个，行数需要计算</span>    train_ds = np.hstack((dataSet, lableSet))  <span class="hljs-comment"># 将数据集和标签集水平堆叠在一起,(92192, 300) (92192, 1) (92192, 301)</span>    <span class="hljs-comment"># print(dataSet.shape, lableSet.shape, train_ds.shape)  # (92192, 300) (92192, 1) (92192, 301)</span>    np.random.shuffle(train_ds)    <span class="hljs-comment"># 数据集及其标签集</span>    X = train_ds[:, :<span class="hljs-number">300</span>].reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">300</span>)  <span class="hljs-comment"># (92192, 1, 300)</span>    Y = train_ds[:, <span class="hljs-number">300</span>]  <span class="hljs-comment"># (92192)</span>    <span class="hljs-comment"># 测试集及其标签集</span>    shuffle_index = np.random.permutation(<span class="hljs-built_in">len</span>(X))  <span class="hljs-comment"># 生成0-(X-1)的随机索引数组</span>    <span class="hljs-comment"># 设定测试集的大小 RATIO是测试集在数据集中所占的比例</span>    test_length = <span class="hljs-built_in">int</span>(RATIO * <span class="hljs-built_in">len</span>(shuffle_index))    <span class="hljs-comment"># 测试集的长度</span>    test_index = shuffle_index[:test_length]    <span class="hljs-comment"># 训练集的长度</span>    train_index = shuffle_index[test_length:]    X_test, Y_test = X[test_index], Y[test_index]    X_train, Y_train = X[train_index], Y[train_index]    <span class="hljs-keyword">return</span> X_train, Y_train, X_test, Y_testX_train, Y_train, X_test, Y_test = loadData()<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">数据处理</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>train_Data = Data.TensorDataset(torch.Tensor(X_train), torch.Tensor(Y_train)) <span class="hljs-comment"># 返回结果为一个个元组，每一个元组存放数据和标签</span>train_loader = Data.DataLoader(dataset=train_Data, batch_size=<span class="hljs-number">128</span>)test_Data = Data.TensorDataset(torch.Tensor(X_test), torch.Tensor(Y_test)) <span class="hljs-comment"># 返回结果为一个个元组，每一个元组存放数据和标签</span>test_loader = Data.DataLoader(dataset=test_Data, batch_size=<span class="hljs-number">128</span>)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">模型搭建</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">RnnModel</span>(nn.Module):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">super</span>(RnnModel, self).__init__()        <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">        参数解释：(输入维度，隐藏层维度，网络层数)</span><span class="hljs-string">        &#x27;&#x27;&#x27;</span>        self.rnn = nn.RNN(<span class="hljs-number">300</span>, <span class="hljs-number">50</span>, <span class="hljs-number">3</span>, nonlinearity=<span class="hljs-string">&#x27;tanh&#x27;</span>)        self.linear = nn.Linear(<span class="hljs-number">50</span>, <span class="hljs-number">5</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):        r_out, h_state = self.rnn(x)        output = self.linear(r_out[:,-<span class="hljs-number">1</span>,:])  <span class="hljs-comment"># 将 RNN 层的输出 r_out 在最后一个时间步上的输出（隐藏状态）传递给线性层</span>        <span class="hljs-keyword">return</span> outputmodel = RnnModel()<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">设置损失函数和参数优化方法</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>criterion = torch.nn.CrossEntropyLoss()optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.01</span>)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">模型训练</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>EPOCHS = <span class="hljs-number">5</span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCHS):    running_loss = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):        inputs, label = data        y_predict = model(inputs)        loss = criterion(y_predict, label.long())        optimizer.zero_grad()        loss.backward()        optimizer.step()        running_loss += loss.item()    <span class="hljs-comment"># 预测</span>    correct = <span class="hljs-number">0</span>    total = <span class="hljs-number">0</span>    <span class="hljs-keyword">with</span> torch.no_grad():        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:            inputs, label = data            y_pred = model(inputs)            _, predicted = torch.<span class="hljs-built_in">max</span>(y_pred.data, dim=<span class="hljs-number">1</span>)            total += label.size(<span class="hljs-number">0</span>)            correct += (predicted == label).<span class="hljs-built_in">sum</span>().item()    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Epoch: <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, ACC on test: <span class="hljs-subst">&#123;correct / total&#125;</span>&#x27;</span>)</code></pre></div><p><a href="https://blog.csdn.net/LQ_001/article/details/132339515">Code</a></p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>心率</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 使用 wfdb 库处理 MIT-BIH 心律失常数据</title>
    <link href="/2024/01/04/Python-%E4%BD%BF%E7%94%A8-wfdb-%E5%BA%93%E5%A4%84%E7%90%86-MIT-BIH-%E5%BF%83%E5%BE%8B%E5%A4%B1%E5%B8%B8%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/01/04/Python-%E4%BD%BF%E7%94%A8-wfdb-%E5%BA%93%E5%A4%84%E7%90%86-MIT-BIH-%E5%BF%83%E5%BE%8B%E5%A4%B1%E5%B8%B8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>数据源</p><ul><li><p>原始网页 <a href="https://www.physionet.org/content/mitdb/1.0.0/#files-panel">MIT-BIH Arrhythmia Database</a></p></li><li><p>kaggle <a href="https://www.kaggle.com/datasets/mondejar/mitbih-database/data?select=101.csv">MIT-BIH Arrhythmia Database</a></p></li></ul><h3 id="数据解读"><a href="#数据解读" class="headerlink" title="数据解读"></a>数据解读</h3><p>主要内容来自<a href="https://blog.csdn.net/Mrm_cong/article/details/104668271">MIT-BIH心律失常数据库详解</a></p><p>心律失常数据库每一个数据记录都包含三个文件，“.hea”、“.dat”和“.atr”<br><strong>.hea</strong> 为头文件，记录文件名、导联数、采样率、数据点数<br><strong>.dat</strong> 为数据文件，采用212格式进行存储。<br><strong>.atr</strong> 为注释文件，记录了心电专家对相应的心电信号的诊断信息。</p><p>在大多数记录中，第一条信号是MLII型（通过将电极置于胸部而获得），第二条信号通常是V1（偶尔是V2或V5，在一个实例中是V4）。现将各记录中导联类型统计如下：</p><ol><li>MLII、V1 : 101、105、106、107、108、109、111、112、113、115、116、118、119、121、122、200、201、202、214、215、217、219、220、221、222、223、228、230、231、232、233、234</li><li>MLII、V2 ： 103、117</li><li>MLII、V4 ： 124</li><li>MLII、V5 ： 100、123</li><li>V5、MLII ： 114</li><li>V5、V2 ：102、104</li></ol><p>具体可看 <a href="https://www.physionet.org/physiobank/database/html/mitdbdir/tables.htm">Tables of beats and rhythms</a></p><h3 id="wfdb"><a href="#wfdb" class="headerlink" title="wfdb"></a>wfdb</h3><p>主要内容来自 <a href="https://blog.csdn.net/m0_55245520/article/details/130115513">基于窦性心律的阵发性房颤预测算法研究</a></p><p>原生 python 波形数据库（wfdb）包。用于读取、写入和处理 WFDB 信号和注释的工具库。</p><p>此包的核心组件基于原始 wfdb 规范。此包不包含与原始 wfdb 包完全相同的功能。它的目标是用用户友好的 api 实现尽可能多的核心功能。随着时间的推移，还增加了其他有用的生理信号处理工具。</p><h4 id="读取-hea-文件"><a href="#读取-hea-文件" class="headerlink" title="读取 .hea 文件"></a>读取 .hea 文件</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wfdbrecord = wfdb.rdheader(<span class="hljs-string">&#x27;../data/abnormal/04015&#x27;</span>)display(record.__dict__)</code></pre></div><p>结果</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&#123;&#x27;record_name&#x27;: &#x27;04015&#x27;, </span><span class="hljs-string">&#x27;n_sig&#x27;: 2, </span><span class="hljs-string">&#x27;fs&#x27;: 250,</span><span class="hljs-string">&#x27;counter_freq&#x27;: None, </span><span class="hljs-string">&#x27;base_counter&#x27;: None, </span><span class="hljs-string">&#x27;sig_len&#x27;: 9205760, </span><span class="hljs-string">&#x27;base_time&#x27;: datetime.time(9, 0), </span><span class="hljs-string">&#x27;base_date&#x27;: None, </span><span class="hljs-string">&#x27;comments&#x27;: [], </span><span class="hljs-string">&#x27;sig_name&#x27;: [&#x27;ECG1&#x27;, &#x27;ECG2&#x27;], </span><span class="hljs-string">&#x27;p_signal&#x27;: None, </span><span class="hljs-string">&#x27;d_signal&#x27;: None, </span><span class="hljs-string">&#x27;e_p_signal&#x27;: None, </span><span class="hljs-string">&#x27;e_d_signal&#x27;: None, </span><span class="hljs-string">&#x27;file_name&#x27;: [&#x27;04015.dat&#x27;, &#x27;04015.dat&#x27;], </span><span class="hljs-string">&#x27;fmt&#x27;: [&#x27;212&#x27;, &#x27;212&#x27;], </span><span class="hljs-string">&#x27;samps_per_frame&#x27;: [1, 1], </span><span class="hljs-string">&#x27;skew&#x27;: [None, None], </span><span class="hljs-string">&#x27;byte_offset&#x27;: [None, None], </span><span class="hljs-string">&#x27;adc_gain&#x27;: [200.0, 200.0], </span><span class="hljs-string">&#x27;baseline&#x27;: [0, 0], </span><span class="hljs-string">&#x27;units&#x27;: [&#x27;mV&#x27;, &#x27;mV&#x27;], </span><span class="hljs-string">&#x27;adc_res&#x27;: [12, 12], </span><span class="hljs-string">&#x27;adc_zero&#x27;: [0, 0], </span><span class="hljs-string">&#x27;init_value&#x27;: [-55, -42], </span><span class="hljs-string">&#x27;checksum&#x27;: [-27172, -28460], </span><span class="hljs-string">&#x27;block_size&#x27;: [0, 0]&#125;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre></div><p>比较有用的部分：</p><ul><li>fs：采样频率；</li><li>n_sig：信号通道数；</li><li>sig_len：信号长度；</li><li>p_signal：模拟信号值，储存形式为ndarray或者是list；</li><li>d_signal：数字信号值，储存形式为ndarray或者是list。</li></ul><h4 id="读取标注-atr-qrs-qrsc"><a href="#读取标注-atr-qrs-qrsc" class="headerlink" title="读取标注 .atr&#x2F;.qrs&#x2F;.qrsc"></a>读取标注 .atr&#x2F;.qrs&#x2F;.qrsc</h4><div class="code-wrapper"><pre><code class="hljs python">record=wfdb.rdann(<span class="hljs-string">&#x27;../data/abnormal/04015&#x27;</span>, <span class="hljs-string">&#x27;atr&#x27;</span> ) <span class="hljs-built_in">print</span>(record.__dict__)</code></pre></div><p>结果：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&#123;</span><span class="hljs-string">&#x27;record_name&#x27;: &#x27;04015&#x27;, </span><span class="hljs-string">&#x27;extension&#x27;: &#x27;atr&#x27;, </span><span class="hljs-string">&#x27;sample&#x27;: array([30, 102584, 119604, 121773, 122194, 133348, 166857, 1096245, 1098054, 1135296, 1139595, 1422436, 1423548, 1459277, 1460416], dtype=int64), </span><span class="hljs-string">&#x27;symbol&#x27;: [&#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;+&#x27;], </span><span class="hljs-string">&#x27;subtype&#x27;: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), </span><span class="hljs-string">&#x27;chan&#x27;: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), &#x27;num&#x27;: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), </span><span class="hljs-string">&#x27;aux_note&#x27;: [&#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;, &#x27;(AFIB&#x27;, &#x27;(N&#x27;], </span><span class="hljs-string">&#x27;fs&#x27;: 250, </span><span class="hljs-string">&#x27;label_store&#x27;: None, </span><span class="hljs-string">&#x27;description&#x27;: None, </span><span class="hljs-string">&#x27;custom_labels&#x27;: None,</span><span class="hljs-string">&#x27;contained_labels&#x27;: None, </span><span class="hljs-string">&#x27;ann_len&#x27;: 15&#125;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre></div><p>常用到的部分:</p><ul><li>sample：专家标注的信号发生变化的位置</li><li>symbol：信号发生变化的原因</li></ul><h3 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> wfdb<span class="hljs-keyword">def</span> <span class="hljs-title function_">read_db</span>(<span class="hljs-params">n, x, y</span>):    record = wfdb.rdrecord(<span class="hljs-string">&#x27;/Users/bakako/Downloads/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + n, channel_names=[<span class="hljs-string">&#x27;MLII&#x27;</span>])    <span class="hljs-comment"># print(record.__dict__)</span>    data = record.p_signal   <span class="hljs-comment"># p_signal 为模拟信号，d_signal 为数字信号</span>    data = data.flatten()    <span class="hljs-comment"># 降维</span>    annotation = wfdb.rdann(<span class="hljs-string">&#x27;/Users/bakako/Downloads/mit-bih-arrhythmia-database-1.0.0/&#x27;</span> + n, extension=<span class="hljs-string">&#x27;atr&#x27;</span>)    R_location = annotation.sample  <span class="hljs-comment"># R 波所在的采样点, 专家标注的信号发生变化的位置</span>    R_type = annotation.symbol      <span class="hljs-comment"># R 波的 type, 信号发生变化的原因</span>    <span class="hljs-comment"># print(R_location)</span>    <span class="hljs-comment"># print(R_type)</span>    <span class="hljs-comment"># 抛掉一些心拍，保证构建数据集时不会超出数组边界</span>    i = <span class="hljs-number">5</span>    j = <span class="hljs-built_in">len</span>(R_type) - <span class="hljs-number">5</span>    <span class="hljs-keyword">while</span> i &lt; j:        <span class="hljs-keyword">try</span>:            label = R_type[i]            <span class="hljs-comment"># 基于经验值，基于 R 峰向前取 100 个点，向后取 200 个点</span>            <span class="hljs-comment"># 如果不抛掉前 5 和后 5 心拍，取 feature 时可能会超出数组边界</span>            feature = data[R_location[i] - <span class="hljs-number">100</span>:R_location[i] + <span class="hljs-number">200</span>]            x.append(feature)            y.append(label)            i += <span class="hljs-number">1</span>        <span class="hljs-keyword">except</span> ValueError:            i += <span class="hljs-number">1</span>    <span class="hljs-built_in">print</span>(n + <span class="hljs-string">&#x27;over&#x27;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">load_dataset</span>():    number = [<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;103&#x27;</span>, <span class="hljs-string">&#x27;105&#x27;</span>, <span class="hljs-string">&#x27;106&#x27;</span>, <span class="hljs-string">&#x27;107&#x27;</span>, <span class="hljs-string">&#x27;108&#x27;</span>, <span class="hljs-string">&#x27;109&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>, <span class="hljs-string">&#x27;113&#x27;</span>, <span class="hljs-string">&#x27;114&#x27;</span>, <span class="hljs-string">&#x27;115&#x27;</span>,              <span class="hljs-string">&#x27;116&#x27;</span>, <span class="hljs-string">&#x27;117&#x27;</span>, <span class="hljs-string">&#x27;119&#x27;</span>, <span class="hljs-string">&#x27;121&#x27;</span>, <span class="hljs-string">&#x27;122&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;124&#x27;</span>, <span class="hljs-string">&#x27;200&#x27;</span>, <span class="hljs-string">&#x27;201&#x27;</span>, <span class="hljs-string">&#x27;202&#x27;</span>, <span class="hljs-string">&#x27;203&#x27;</span>, <span class="hljs-string">&#x27;205&#x27;</span>, <span class="hljs-string">&#x27;208&#x27;</span>,              <span class="hljs-string">&#x27;210&#x27;</span>, <span class="hljs-string">&#x27;212&#x27;</span>, <span class="hljs-string">&#x27;213&#x27;</span>, <span class="hljs-string">&#x27;214&#x27;</span>, <span class="hljs-string">&#x27;215&#x27;</span>, <span class="hljs-string">&#x27;217&#x27;</span>, <span class="hljs-string">&#x27;219&#x27;</span>, <span class="hljs-string">&#x27;220&#x27;</span>, <span class="hljs-string">&#x27;221&#x27;</span>, <span class="hljs-string">&#x27;222&#x27;</span>, <span class="hljs-string">&#x27;223&#x27;</span>, <span class="hljs-string">&#x27;228&#x27;</span>, <span class="hljs-string">&#x27;230&#x27;</span>,              <span class="hljs-string">&#x27;231&#x27;</span>, <span class="hljs-string">&#x27;232&#x27;</span>, <span class="hljs-string">&#x27;233&#x27;</span>, <span class="hljs-string">&#x27;234&#x27;</span>]    features = []    labels = []    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> number:        read_db(n, features, labels)    <span class="hljs-comment"># row 行</span>    <span class="hljs-comment"># column 列</span>    row = <span class="hljs-built_in">len</span>(features)    <span class="hljs-built_in">print</span>(row)    features = np.array(features)    features = features.reshape(row, <span class="hljs-number">300</span>)    <span class="hljs-built_in">print</span>(features.shape)    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(labels))    <span class="hljs-comment"># features 是二维 numpy 数组，labels 是 list</span>load_dataset()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心率</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI ForEach 与 Identifiable 协议</title>
    <link href="/2024/01/04/SwiftUI-ForEach-%E4%B8%8E-Identifiable-%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/01/04/SwiftUI-ForEach-%E4%B8%8E-Identifiable-%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://oldbird.run/swift/swiftui/ForEach.html#todoitem-%E4%B8%BA%E5%95%A5%E8%A6%81%E5%AE%9E%E7%8E%B0-identifiable">原文地址</a></p><h3 id="ForEach-的初始化方法"><a href="#ForEach-的初始化方法" class="headerlink" title="ForEach 的初始化方法"></a>ForEach 的初始化方法</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ForEach</span>&lt;<span class="hljs-title class_">Data</span>, <span class="hljs-title class_">ID</span>, <span class="hljs-title class_">Content</span>&gt; <span class="hljs-title class_">where</span> <span class="hljs-title class_">Data</span> : <span class="hljs-title class_">RandomAccessCollection</span>, <span class="hljs-title class_">ID</span> : <span class="hljs-title class_">Hashable</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> data: <span class="hljs-type">Data</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> content: (<span class="hljs-type">Data</span>.<span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">Content</span>&#125;</code></pre></div><p>在待办清单案例中，我们有用到<code>ForEach</code>这个视图。ForEach 将集合的东西生成一个个 View，然后再组合成一个 View。大大简化了相似代码，同时也解决了<code>ViewBuilder</code>参数个数限制问题。它在<code>SwiftUI</code>开发中非常常见，所以今天一起深入挖掘下 <code>ForEach</code> 相关知识。</p><p>待办清单案例中涉及<code>ForEach</code>使用的代码如下：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-comment">/// 需要实现 Identifiable 协议</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span>: <span class="hljs-title class_">Identifiable</span> &#123;    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span> <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span>&#125;<span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)        ]        <span class="hljs-type">NavigationView</span> &#123;        <span class="hljs-type">List</span> &#123;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;                <span class="hljs-type">ForEach</span>(listData) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">HStack</span>&#123;                        <span class="hljs-type">Image</span>(systemName: item.imgName)                        <span class="hljs-type">Text</span>(item.task)                    &#125;                &#125;                .onDelete(perform: deleteItem)                .onMove(perform: moveItem)            &#125;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)            &#125;        &#125;        .listStyle(<span class="hljs-type">GroupedListStyle</span>())        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))    &#125;&#125;</code></pre></div><p>我们将围绕下面两个问题，进行对 <code>ForEach</code> 的深入了解：</p><ol><li><code>ForEach</code> 有哪些初始化方法？</li><li><code>TodoItem</code> 为什么要实现<code>Identifiable</code> 协议？</li></ol><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>这个初始化器是 <code>ForEach</code> 中最简单的。它类似于常见的<code>for</code>循环：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,                <span class="hljs-string">&quot;看WWDC视频&quot;</span>,                <span class="hljs-string">&quot;订外卖&quot;</span>,                <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,                <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">List</span> &#123;            <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>data.count) &#123; index <span class="hljs-keyword">in</span>                <span class="hljs-type">Text</span>(data[index])            &#125;        &#125;    &#125;&#125;</code></pre></div><p>但是请注意，此视图仅呈现一次。因此，如果<code>data.count</code>更改，视图将不会更新。例如，单击以下代码中的<code>添加待办事项</code>会返回错误：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,                       <span class="hljs-string">&quot;看WWDC视频&quot;</span>,                       <span class="hljs-string">&quot;订外卖&quot;</span>,                       <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,                       <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> &#123;            <span class="hljs-type">List</span> &#123;                <span class="hljs-type">ForEach</span>(<span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>data.count) &#123; index <span class="hljs-keyword">in</span>                    <span class="hljs-type">Text</span>(data[index])                &#125;            &#125;            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;                addTodo()            &#125;.padding()        &#125;    &#125;    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;        data.append(<span class="hljs-string">&quot;Hello SwiftUI&quot;</span>)    &#125;&#125;</code></pre></div><p>点击按钮，列表没有反应。我们然后将代码运行到模拟器，点击按钮，在控制台输出如下错误：</p><div class="code-wrapper"><pre><code class="hljs sh">ForEach&lt;Range&lt;Int&gt;, Int, Text&gt; count (6) != its initial count (5). `ForEach(_:content:)` should only be used <span class="hljs-keyword">for</span> *constant* data. Instead conform data to `Identifiable` or use `ForEach(_:<span class="hljs-built_in">id</span>:content:)` and provide an explicit `<span class="hljs-built_in">id</span>`!</code></pre></div><p>从报错中，我们知道**<code>ForEach(_:content:)</code>只能使用常量数据**。</p><h4 id="Identifiable"><a href="#Identifiable" class="headerlink" title="Identifiable"></a>Identifiable</h4><p>在待办清单案例中，我们直接传递数组 listData 就可以了。</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-comment">/// 需要实现 Identifiable 协议</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span>: <span class="hljs-title class_">Identifiable</span> &#123;    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span> <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span>&#125;<span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)        ]        <span class="hljs-type">NavigationView</span> &#123;        <span class="hljs-type">List</span> &#123;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;                <span class="hljs-type">ForEach</span>(listData) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">HStack</span>&#123;                        <span class="hljs-type">Image</span>(systemName: item.imgName)                        <span class="hljs-type">Text</span>(item.task)                    &#125;                &#125;                .onDelete(perform: deleteItem)                .onMove(perform: moveItem)            &#125;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)            &#125;        &#125;        .listStyle(<span class="hljs-type">GroupedListStyle</span>())        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))    &#125;&#125;</code></pre></div><p>如果我们将<code>TodoItem</code>不实现<code>Identifiable</code>，看看会发生什么？</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span>/*: <span class="hljs-title class_">Identifiable</span>*/ &#123;    <span class="hljs-keyword">var</span> id: <span class="hljs-type">UUID</span> <span class="hljs-operator">=</span> <span class="hljs-type">UUID</span>()    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span>&#125;<span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)        ]        <span class="hljs-type">NavigationView</span> &#123;        <span class="hljs-type">List</span> &#123;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;                <span class="hljs-type">ForEach</span>(listData) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">HStack</span>&#123;                        <span class="hljs-type">Image</span>(systemName: item.imgName)                        <span class="hljs-type">Text</span>(item.task)                    &#125;                &#125;                .onDelete(perform: deleteItem)                .onMove(perform: moveItem)            &#125;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)            &#125;        &#125;        .listStyle(<span class="hljs-type">GroupedListStyle</span>())        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))    &#125;&#125;</code></pre></div><p>会报错：</p><div class="code-wrapper"><pre><code class="hljs sh">Referencing initializer <span class="hljs-string">&#x27;init (_:content:)&#x27;</span> on <span class="hljs-string">&#x27;ForEach&#x27;</span> requires that <span class="hljs-string">&#x27;TodoItem&#x27;</span> conform to <span class="hljs-string">&#x27;Identifiable&#x27;</span></code></pre></div><p>从报错信息可知，我们必须要将数组的元素实现<code>Identifiable</code>协议。</p><p>数组的元素如果是普通类型，比如<code>String</code>也会报错：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,                       <span class="hljs-string">&quot;看WWDC视频&quot;</span>,                       <span class="hljs-string">&quot;订外卖&quot;</span>,                       <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,                       <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> &#123;            <span class="hljs-type">List</span> &#123;                <span class="hljs-type">ForEach</span>(data) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">Text</span>(item)                &#125;            &#125;            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;                addTodo()            &#125;.padding()        &#125;    &#125;    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;        data.append(<span class="hljs-string">&quot;Hello SwiftUI&quot;</span>)    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">Referencing initializer <span class="hljs-string">&#x27;init (_:content:)&#x27;</span> on <span class="hljs-string">&#x27;ForEach&#x27;</span> requires that <span class="hljs-string">&#x27;String&#x27;</span> conform to <span class="hljs-string">&#x27;Identifiable&#x27;</span></code></pre></div><p>需要通过指定<code>id: \.self</code>即可，因为它们本身可以作为可识别的对象。</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>,                       <span class="hljs-string">&quot;看WWDC视频&quot;</span>,                       <span class="hljs-string">&quot;订外卖&quot;</span>,                       <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>,                       <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>,]    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> &#123;            <span class="hljs-type">List</span> &#123;                <span class="hljs-type">ForEach</span>(data, id: \.<span class="hljs-keyword">self</span>) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">Text</span>(item)                &#125;            &#125;            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;                addTodo()            &#125;.padding()        &#125;    &#125;    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;        data.append(<span class="hljs-string">&quot;Hello SwiftUI&quot;</span>)    &#125;&#125;</code></pre></div><h4 id="id-Hashable"><a href="#id-Hashable" class="headerlink" title="id&amp;Hashable"></a>id&amp;Hashable</h4><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">data</span>: <span class="hljs-type">Data</span>, <span class="hljs-params">id</span>: <span class="hljs-type">KeyPath</span>&lt;<span class="hljs-type">Data</span>.<span class="hljs-type">Element</span>, <span class="hljs-type">ID</span>&gt;, <span class="hljs-meta">@ViewBuilder</span> <span class="hljs-params">content</span>: <span class="hljs-keyword">@escaping</span> (<span class="hljs-type">Data</span>.<span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">Content</span>)</code></pre></div><p>id 要求我们传入的是一个 <code>KeyPath</code>，且<code>ID</code>必须实现<code>Hashable</code>。而我们常见的数据类型 <code>Int/String/...</code>都默认实现<code>Hashable</code>。</p><p>通过指定 <code>id</code> 的初始化方式适用于元素没有实现 <code>Identifiable</code> 的场景。</p><p>如果<code>TodoItem</code>没有实现<code>Identifiable</code>，我们也可以这样做：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span>/*: <span class="hljs-title class_">Identifiable</span>*/ &#123;    <span class="hljs-comment">// var id: UUID = UUID()</span>    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span>&#125;<span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>)        ]        <span class="hljs-type">NavigationView</span> &#123;        <span class="hljs-type">List</span> &#123;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办事项&quot;</span>)) &#123;                <span class="hljs-type">ForEach</span>(listData, id: \.task) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">HStack</span>&#123;                        <span class="hljs-type">Image</span>(systemName: item.imgName)                        <span class="hljs-type">Text</span>(item.task)                    &#125;                &#125;                .onDelete(perform: deleteItem)                .onMove(perform: moveItem)            &#125;            <span class="hljs-type">Section</span>(header: <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;其他内容&quot;</span>)) &#123;                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)            &#125;        &#125;        .listStyle(<span class="hljs-type">GroupedListStyle</span>())        .navigationTitle(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;待办清单&quot;</span>))    &#125;&#125;</code></pre></div><p>但是我们得确保 task 的唯一性，为什么呢？</p><h3 id="TodoItem-为啥要实现-Identifiable"><a href="#TodoItem-为啥要实现-Identifiable" class="headerlink" title="TodoItem 为啥要实现 Identifiable?"></a><code>TodoItem</code> 为啥要实现 Identifiable?</h3><p>实现<code>Identifiable</code>的目的是为了要区分数组的成员，这样可以更有效率地管理 List 里的视图。</p><p>我们简单通过样例来说明下其中的原理：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TodoItem</span> &#123;    <span class="hljs-keyword">var</span> task: <span class="hljs-type">String</span>    <span class="hljs-keyword">var</span> imgName: <span class="hljs-type">String</span>&#125;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> listData: [<span class="hljs-type">TodoItem</span>] <span class="hljs-operator">=</span> [        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;pencil.circle&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;看WWDC视频&quot;</span>, imgName: <span class="hljs-string">&quot;square.and.pencil&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;定外卖&quot;</span>, imgName: <span class="hljs-string">&quot;folder&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;关注OldBirds公众号&quot;</span>, imgName: <span class="hljs-string">&quot;link&quot;</span>),        <span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;6点半跑步2公里&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>),    ]    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> &#123;            <span class="hljs-type">List</span> &#123;                <span class="hljs-type">ForEach</span>(listData, id: \.task) &#123; item <span class="hljs-keyword">in</span>                    <span class="hljs-type">HStack</span>&#123;                        <span class="hljs-type">Image</span>(systemName: item.imgName)                        <span class="hljs-type">Text</span>(item.task)                    &#125;                &#125;            &#125;            <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;添加待办事项&quot;</span>) &#123;                addTodo()            &#125;.padding()        &#125;    &#125;    <span class="hljs-keyword">func</span> <span class="hljs-title function_">addTodo</span>() &#123;        listData.append(<span class="hljs-type">TodoItem</span>(task: <span class="hljs-string">&quot;写一篇SwiftUI文章&quot;</span>, imgName: <span class="hljs-string">&quot;moon&quot;</span>))    &#125;&#125;</code></pre></div><p>我们让<code>TodoItem</code>不实现<code>Identifiable</code>, 用<code>\.task</code>传递给 id。我们希望点击添加按钮的时候，列表会同步刷新，且新增的图标是个<code>月亮</code>。</p><p>但是事情并没有顺从你的心意，会发现，新增的视图的 icon 并不是月亮。</p><p>而是用了第一个<code>TodoItem(task: &quot;写一篇SwiftUI文章&quot;, imgName: &quot;pencil.circle&quot;)</code>的 <code>pencil.circle</code>，其实不仅仅是图标，整个显示都跟第一个视图一样的。</p><p>因为无法区分这两个 TodoItem，所以就以最开始出现的视图重复，发生了错乱。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ForEach 的使用还是比较简单的，有三种初始化方式，通过 range 迭代的时候，记得保证集合是个常量。第二种通过 Identifiable 保证元素唯一，通常做法用 UUID 作为 id。第三种，通过指定 KeyPath，需要保证实现了 Hashable，且最好做到唯一，不然显示会错乱。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ANN、RNN 与 CNN 在运动信号方面的研究</title>
    <link href="/2023/12/29/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/12/29/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="ANN（MLP）"><a href="#ANN（MLP）" class="headerlink" title="ANN（MLP）"></a>ANN（MLP）</h3><p>这里将 SVM 和 Random Forest 也包含在内。</p><h4 id="1-《Influence-mechanism-of-running-sportswear-fatigue-based-on-BP-neural-network》"><a href="#1-《Influence-mechanism-of-running-sportswear-fatigue-based-on-BP-neural-network》" class="headerlink" title="1.《Influence mechanism of running sportswear fatigue based on BP neural network》"></a>1.《Influence mechanism of running sportswear fatigue based on BP neural network》</h4><p>ANN，手动提取 EMG 信号特征预测疲劳。</p><h4 id="2-《A-Novel-Method-for-Classification-of-Running-Fatigue-Using-Change-Point-Segmentation》"><a href="#2-《A-Novel-Method-for-Classification-of-Running-Fatigue-Using-Change-Point-Segmentation》" class="headerlink" title="2.《A Novel Method for Classification of Running Fatigue Using Change-Point Segmentation》"></a>2.《A Novel Method for Classification of Running Fatigue Using Change-Point Segmentation》</h4><p>Random Forest，手动提取 EMG 信号特征预测疲劳。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B612.png"></p><h4 id="3-《Sport-induced-fatigue-detection-in-gait-parameters-using-inertial-sensors-and-support-vector-machines》"><a href="#3-《Sport-induced-fatigue-detection-in-gait-parameters-using-inertial-sensors-and-support-vector-machines》" class="headerlink" title="3.《Sport-induced fatigue detection in gait parameters using inertial sensors and support vector machines》"></a>3.《Sport-induced fatigue detection in gait parameters using inertial sensors and support vector machines》</h4><p>SVM，手动提取 IMU 信号特征预测疲劳。</p><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h3><h4 id="1-《Sports-fatigue-detection-based-on-deep-learning》"><a href="#1-《Sports-fatigue-detection-based-on-deep-learning》" class="headerlink" title="1.《Sports fatigue detection based on deep learning》"></a>1.《Sports fatigue detection based on deep learning》</h4><p>BiLSTM，手动提取 ECG 信号特征预测 RPE。</p><p>该文献不是直接采用原始 ECG 信号进行模型训练，而是先手动提取了 ECG 信号特征（HRV）。</p><p>可以看到原始信号和提取特征后的准确率：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B69.png"></p><p>文献还对比了 Random Forest、SVM 与 ANN 下面为准确率：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B610.png"></p><h4 id="2-《Heart-Rate-Variability-Based-Subjective-Physical-Fatigue-Assessment》"><a href="#2-《Heart-Rate-Variability-Based-Subjective-Physical-Fatigue-Assessment》" class="headerlink" title="2.《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》"></a>2.《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》</h4><p>LightGBM，手动提取 ECG 信号特征预测 RPE。</p><p>这篇文献是采用 LightGBM 处理时间序列，所以放在了 RNN 这里。本篇文献除了采用 LightGBM 外，还对比了 DT、KNN 与 SVM 的准确率：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B611.png"></p><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><h4 id="1-《Real-Time-Detection-of-Acute-Cognitive-Stress-Using-a-Convolutional-Neural-Network-From-Electrocardiographic-Signal》"><a href="#1-《Real-Time-Detection-of-Acute-Cognitive-Stress-Using-a-Convolutional-Neural-Network-From-Electrocardiographic-Signal》" class="headerlink" title="1.《Real-Time Detection of Acute Cognitive Stress Using a Convolutional Neural Network From Electrocardiographic Signal》"></a>1.《Real-Time Detection of Acute Cognitive Stress Using a Convolutional Neural Network From Electrocardiographic Signal》</h4><p>CNN，通过 CNN 提取 ECG 信号特征预测急性认知压力。</p><p>文献使用了十层的简单 CNN 结构。</p><ul><li>第一层是图像输入层。其大小为799×1×1，等于输入频带的大小；</li><li>第二层是卷积层，由六个 4×1×1 的滤波器组成，步幅为 1×1；</li><li>接下来是批量归一化层、ReLU 层和概率为 0.5 的 dropout 层；</li><li>接下来的三层是两个全连接层和它们之间的批量归一化层。两个全连接层的单元数量分别为十个和两个；</li><li>最后两层是 softmax 层和分类输出层，它们都有两个单元。</li></ul><h4 id="2-《Cardiologist-Level-Arrhythmia-Detection-with-Convolutional-Neural-Networks》"><a href="#2-《Cardiologist-Level-Arrhythmia-Detection-with-Convolutional-Neural-Networks》" class="headerlink" title="2.《Cardiologist-Level Arrhythmia Detection with Convolutional Neural Networks》"></a>2.《Cardiologist-Level Arrhythmia Detection with Convolutional Neural Networks》</h4><p>CNN，通过 CNN 提取 ECG 信号特征预测心律失常。</p><p>CNN 网络大致的结构都可以用下面图片展示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B68.png"></p><h4 id="3-《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》"><a href="#3-《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》" class="headerlink" title="3.《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》"></a>3.《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》</h4><p>CNN，通过 CNN 提取 EMG 信号特征预测手势。</p><h3 id="组合模型"><a href="#组合模型" class="headerlink" title="组合模型"></a>组合模型</h3><h4 id="1-《A-Deep-Learning-Approach-for-Fatigue-Prediction-in-Sports-Using-GPS-Data-and-Rate-of-Perceived-Exertion》"><a href="#1-《A-Deep-Learning-Approach-for-Fatigue-Prediction-in-Sports-Using-GPS-Data-and-Rate-of-Perceived-Exertion》" class="headerlink" title="1.《A Deep Learning Approach for Fatigue Prediction in Sports Using GPS Data and Rate of Perceived Exertion》"></a>1.《A Deep Learning Approach for Fatigue Prediction in Sports Using GPS Data and Rate of Perceived Exertion》</h4><p>CNN-GRU，通过 CNN 提取 IMU 信号特征，然后通过 GRU 训练预测 RPE。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B67.png"></p><h4 id="2-《基于卷积长短时记忆网络的心律失常分类方法》"><a href="#2-《基于卷积长短时记忆网络的心律失常分类方法》" class="headerlink" title="2.《基于卷积长短时记忆网络的心律失常分类方法》"></a>2.《基于卷积长短时记忆网络的心律失常分类方法》</h4><p>CNN-LSTM，该文献通过 CNN 提取 ECG 特征后，并不是直接交给 FC 层进行分类，而是再经过 LSTM 后再交给 FC 层进行 Softmax 分类。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B61.png"></p><h4 id="3-《Dynamic-gesture-recognition-based-on-LSTM-CNN》"><a href="#3-《Dynamic-gesture-recognition-based-on-LSTM-CNN》" class="headerlink" title="3.《Dynamic gesture recognition based on LSTM-CNN》"></a>3.《Dynamic gesture recognition based on LSTM-CNN》</h4><p>与上面文献恰好相反，该文献的组合为 LSTM-CNN 识别 EMG 信号对应的手势。</p><p>模型由 2 个 LSTM 层、2 个一维卷积层和 1 个输出层组成。首先，通过 LSTM 层传递输入信号来提取时间信息。使用 2 个 LSTM 层，每个 LSTM 层有 52 个单元，每个单元有 64 个隐藏层。LSTM层的输出信号被输入到擅长特征提取的CNN层。具体来说，使用 2 个卷积层，第一层使用 65 个 3·1 卷积核，第二层卷积层使用 30 个 3·1 滤波器。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B66.png"></p><h4 id="4-《基于深度学习并行网络模型的心律失常分类方法》"><a href="#4-《基于深度学习并行网络模型的心律失常分类方法》" class="headerlink" title="4.《基于深度学习并行网络模型的心律失常分类方法》"></a>4.《基于深度学习并行网络模型的心律失常分类方法》</h4><p>这篇文献的网络比较复杂。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B62.png"></p><p>一共采用了 3 种网络 DenseNet+BiLSTM+ECANet，最后采用 Softmax 对 ECG 信号进行分类。</p><h5 id="DenseNet（CNN）"><a href="#DenseNet（CNN）" class="headerlink" title="DenseNet（CNN）"></a>DenseNet（CNN）</h5><p>密集连接卷积神经网络，Densely connected convolutional network</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B63.png"></p><h5 id="BiLSTM（RNN）"><a href="#BiLSTM（RNN）" class="headerlink" title="BiLSTM（RNN）"></a>BiLSTM（RNN）</h5><p>双向长短时记忆网络，Bidirectional long short-term memory network</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B64.png"></p><h5 id="ECANet"><a href="#ECANet" class="headerlink" title="ECANet"></a>ECANet</h5><p>高效通道注意力网络，Efficient channel attention network</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B65.png"></p><h4 id="5-《融合-CNN-和-BiLSTM-的心律失常心拍分类模型》"><a href="#5-《融合-CNN-和-BiLSTM-的心律失常心拍分类模型》" class="headerlink" title="5.《融合 CNN 和 BiLSTM 的心律失常心拍分类模型》"></a>5.《融合 CNN 和 BiLSTM 的心律失常心拍分类模型》</h4><p>本文献融合了 CNN 和 BiLSTM 的神经网络。将经过正则化的大尺度心拍输入 Muti-BiLSTM 网络中，提取一维时序数据的全局特征；将经过正则化的小尺度心拍输入 CNN 网络提取心拍的局部特征。将大尺度特征和局部特征经过拼接后的向量输入到 3 层全连接网络中。全连接层的激活函数都是指数线性单元(exponential linear units, ELU)，最后通过 softmax 的激活函数实现心拍的分类。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B615.png"></p><p>这篇文献倒是没有上篇文献那么复杂。虽然同样是分成了 2 个网络：</p><h5 id="CNN-1"><a href="#CNN-1" class="headerlink" title="CNN"></a>CNN</h5><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B613.png"></p><h5 id="BiLSTM"><a href="#BiLSTM" class="headerlink" title="BiLSTM"></a>BiLSTM</h5><p>利用多层的 BiLSTM（Multi-BiLSTM）网络构成一个全局特征提取器。其中每一层都包括一个前向的 LSTM 和后向的 LSTM 层，最后一个双边 LSTM 紧跟着一个全连接层。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ANN%E3%80%81RNN-%E4%B8%8E-CNN-%E5%9C%A8%E8%BF%90%E5%8A%A8%E4%BF%A1%E5%8F%B7%E6%96%B9%E9%9D%A2%E7%9A%84%E7%A0%94%E7%A9%B614.png"></p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>运动科学</tag>
      
      <tag>心率</tag>
      
      <tag>IMU</tag>
      
      <tag>EMG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RNN 与 LSTM 网络</title>
    <link href="/2023/12/29/RNN-%E4%B8%8E-LSTM-%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/12/29/RNN-%E4%B8%8E-LSTM-%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<ol><li><p><a href="https://www.cnblogs.com/wuliytTaotao/p/9512963.html">循环神经网络（Recurrent Neural Network，RNN）</a></p></li><li><p><a href="https://www.jiqizhixin.com/articles/2018-12-14-4">RNN 结构详解</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/139617364">LSTM模型结构的可视化</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多层感知器 MLP，全连接网络，DNN 三者的关系</title>
    <link href="/2023/12/29/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8-MLP%EF%BC%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%EF%BC%8CDNN-%E4%B8%89%E8%80%85%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2023/12/29/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8-MLP%EF%BC%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C%EF%BC%8CDNN-%E4%B8%89%E8%80%85%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>不确定全连接网络对应的英文，先做这个解释: </p><p>FullyConnected(FC) Layer &#x3D; 一层 layer</p><p>MLP &#x3D; 多层 FC layer 构成的 NN</p><p>DNN &#x3D; MLP 和 CNN 的集合相并，通常包括多个卷积 layer 和 FC layer</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸢尾花的非监督学习</title>
    <link href="/2023/12/22/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E7%9A%84%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/22/%E9%B8%A2%E5%B0%BE%E8%8A%B1%E7%9A%84%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><ol><li><a href="https://cloud.tencent.com/developer/article/1020155">【Scikit-Learn 中文文档】聚类 - 无监督学习 - 用户指南 | ApacheCN</a></li><li><a href="https://www.flyai.com/article/516">机器学习（二）之无监督学习：数据变换、聚类分析</a></li></ol><p>代码：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, adjusted_rand_scorecsv_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/archive/Iris.csv&#x27;</span>df = pd.read_csv(csv_path)<span class="hljs-comment"># 将 dataframe 转为 numpy</span>dataset = df.values<span class="hljs-comment"># delete index</span>dataset = np.delete(dataset, <span class="hljs-number">0</span>, axis=<span class="hljs-number">1</span>)<span class="hljs-comment"># delete label</span>features = np.delete(dataset, -<span class="hljs-number">1</span>, axis=<span class="hljs-number">1</span>)<span class="hljs-comment"># delete feature</span>labels = np.delete(dataset, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], axis=<span class="hljs-number">1</span>)<span class="hljs-comment"># 分割训练集和测试集</span>train_features, \        test_features, \        train_labels, \        test_labels = train_test_split(features, labels, test_size=<span class="hljs-number">0.2</span>)X = train_featuresmodel = KMeans(n_clusters=<span class="hljs-number">3</span>)model.fit(X)label_predict = model.labels_x0 = X[label_predict == <span class="hljs-number">0</span>]x1 = X[label_predict == <span class="hljs-number">1</span>]x2 = X[label_predict == <span class="hljs-number">2</span>]fig, axes = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, figsize=(<span class="hljs-number">32</span>, <span class="hljs-number">6</span>))<span class="hljs-comment"># 按花萼长度查看分布情况</span>axes[<span class="hljs-number">0</span>].scatter(X[:, <span class="hljs-number">0</span>], X[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;see&#x27;</span>)axes[<span class="hljs-number">0</span>].set_xlabel(<span class="hljs-string">&#x27;sepal length&#x27;</span>)axes[<span class="hljs-number">0</span>].set_ylabel(<span class="hljs-string">&#x27;sepal width&#x27;</span>)axes[<span class="hljs-number">0</span>].legend(loc=<span class="hljs-number">2</span>)<span class="hljs-comment"># 按花瓣长度查看分布情况</span>axes[<span class="hljs-number">1</span>].scatter(X[:, <span class="hljs-number">2</span>], X[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;see&#x27;</span>)axes[<span class="hljs-number">1</span>].set_xlabel(<span class="hljs-string">&#x27;petal length&#x27;</span>)axes[<span class="hljs-number">1</span>].set_ylabel(<span class="hljs-string">&#x27;petal width&#x27;</span>)axes[<span class="hljs-number">1</span>].legend(loc=<span class="hljs-number">2</span>)<span class="hljs-comment"># 按花萼进行聚类</span>axes[<span class="hljs-number">2</span>].scatter(x0[:, <span class="hljs-number">0</span>], x0[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;label0&#x27;</span>)axes[<span class="hljs-number">2</span>].scatter(x1[:, <span class="hljs-number">0</span>], x1[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;*&#x27;</span>, label=<span class="hljs-string">&#x27;label1&#x27;</span>)axes[<span class="hljs-number">2</span>].scatter(x2[:, <span class="hljs-number">0</span>], x2[:, <span class="hljs-number">1</span>], c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;+&#x27;</span>, label=<span class="hljs-string">&#x27;label2&#x27;</span>)axes[<span class="hljs-number">2</span>].set_xlabel(<span class="hljs-string">&#x27;sepal length&#x27;</span>)axes[<span class="hljs-number">2</span>].set_ylabel(<span class="hljs-string">&#x27;sepal width&#x27;</span>)axes[<span class="hljs-number">2</span>].legend(loc=<span class="hljs-number">2</span>)<span class="hljs-comment"># 按花瓣进行聚类</span>axes[<span class="hljs-number">3</span>].scatter(x0[:, <span class="hljs-number">2</span>], x0[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;red&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>, label=<span class="hljs-string">&#x27;label0&#x27;</span>)axes[<span class="hljs-number">3</span>].scatter(x1[:, <span class="hljs-number">2</span>], x1[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;*&#x27;</span>, label=<span class="hljs-string">&#x27;label1&#x27;</span>)axes[<span class="hljs-number">3</span>].scatter(x2[:, <span class="hljs-number">2</span>], x2[:, <span class="hljs-number">3</span>], c=<span class="hljs-string">&#x27;blue&#x27;</span>, marker=<span class="hljs-string">&#x27;+&#x27;</span>, label=<span class="hljs-string">&#x27;label2&#x27;</span>)axes[<span class="hljs-number">3</span>].set_xlabel(<span class="hljs-string">&#x27;petal length&#x27;</span>)axes[<span class="hljs-number">3</span>].set_ylabel(<span class="hljs-string">&#x27;petal width&#x27;</span>)axes[<span class="hljs-number">3</span>].legend(loc=<span class="hljs-number">2</span>)<span class="hljs-comment"># plt.show()</span>prediction = model.predict(test_features)test_labels_num = []<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> test_labels:    <span class="hljs-keyword">if</span> item == <span class="hljs-string">&#x27;Iris-setosa&#x27;</span>:        test_labels_num.append(<span class="hljs-number">0</span>)    <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&#x27;Iris-versicolor&#x27;</span>:        test_labels_num.append(<span class="hljs-number">1</span>)    <span class="hljs-keyword">elif</span> item == <span class="hljs-string">&#x27;Iris-virginica&#x27;</span>:        test_labels_num.append(<span class="hljs-number">2</span>)<span class="hljs-built_in">print</span>(accuracy_score(test_labels_num, prediction))<span class="hljs-comment"># 用这种方式评估聚类时，一个常见的错误是使用 accuracy_score 而不是 adjusted_rand_score、normalized_mutual_info_score 或其他聚类指标。</span><span class="hljs-comment"># 使用精度的问题在于，它要求分配的簇标签与真实值完全匹配。但簇标签本身毫无意义——唯一重要的是哪些点位于同一个簇中。</span><span class="hljs-comment"># 聚类后 x0、x1、x2 三类花会对应 012，021，102，120，201，210 的任意组合</span><span class="hljs-comment"># 所以你不知道 0 对应的是真实标签中的 Iris-setosa 还是 Iris-virginica 还是 Iris-versicolor</span><span class="hljs-comment"># 所以有 5/6 的概率是得不到正确值的</span><span class="hljs-comment"># 比如说下面这种情况</span><span class="hljs-built_in">print</span>(prediction)           <span class="hljs-comment"># [1 1 2 2 1 0 2 1 2 0 0 1 0 2 1 1 1 1 0 2 0 0 2 2 0 2 2 0 1 1]</span><span class="hljs-built_in">print</span>(test_labels_num)      <span class="hljs-comment"># [0 0 1 1 0 2 1 0 1 2 2 0 2 1 0 0 0 0 2 1 2 2 1 1 2 1 1 2 0 0]</span><span class="hljs-comment"># 聚类后预测的关系是 0-Iris-virginica，1-Iris-setosa，2-Iris-versicolor</span><span class="hljs-comment"># 所以要使用 metrics.adjusted_rand_score(labels_true, labels_pred)</span><span class="hljs-comment"># 输出越接近 1 说明模型越好</span><span class="hljs-comment"># adjusted_rand_score 函数用的一维数组，所以要将 test_labels 从（30，1）降维成（30，）</span><span class="hljs-comment"># prediction 已经是（30，）</span>test_labels = test_labels.flatten()<span class="hljs-built_in">print</span>(adjusted_rand_score(test_labels, prediction))<span class="hljs-comment"># 是 symmetric（对称的）：交换参数不会改变 score （得分）。它可以作为 consensus measure（共识度量）</span><span class="hljs-comment"># 所以下面这样也是可以的</span><span class="hljs-built_in">print</span>(adjusted_rand_score(test_labels_num, prediction))</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy 的 1 维数组相关操作</title>
    <link href="/2023/12/20/Numpy-%E7%9A%84-1-%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/12/20/Numpy-%E7%9A%84-1-%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>np.array([1,2,3])，既不是行向量，也不是列向量，称为秩 rank 为 1 的 array，如果对其转置，则会得到其本身。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npb = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])  <span class="hljs-comment"># shape=（3，）</span>b2 = b.reshape((<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))  <span class="hljs-comment"># shape=（3，1）</span></code></pre></div><p>当然也可以进行降维操作</p><div class="code-wrapper"><pre><code class="hljs python">b3 = b2.reshape(<span class="hljs-number">3</span>, )  <span class="hljs-comment"># b2.flatten() 都是降维 shape=（3，）</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 HRV 预测运动 RPE</title>
    <link href="/2023/12/15/%E9%80%9A%E8%BF%87-HRV-%E9%A2%84%E6%B5%8B%E8%BF%90%E5%8A%A8-RPE/"/>
    <url>/2023/12/15/%E9%80%9A%E8%BF%87-HRV-%E9%A2%84%E6%B5%8B%E8%BF%90%E5%8A%A8-RPE/</url>
    
    <content type="html"><![CDATA[<p>通过 HRV 预测 REP 核心文献为 2 篇。</p><ol><li>《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》</li><li>《Sports fatigue detection based on deep learning》</li></ol><h3 id="1-HRV-的相关指标"><a href="#1-HRV-的相关指标" class="headerlink" title="1.HRV 的相关指标"></a>1.HRV 的相关指标</h3><h4 id="1-1-时域分析"><a href="#1-1-时域分析" class="headerlink" title="1.1.时域分析"></a>1.1.时域分析</h4><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>meanNN</td><td>ms</td><td>平均相邻正常心跳时间间隔</td></tr><tr><td>meanHR</td><td>1&#x2F;min</td><td>平均心率</td></tr><tr><td>SDNN</td><td>ms</td><td>全部正常窦性心搏间期（NN）的标准差</td></tr><tr><td>RMSSD</td><td>ms</td><td>全程相邻NN间期之差的均方根值</td></tr><tr><td>SDANN</td><td>ms</td><td>分段先计算心跳间期的平均值，再计算平均间期的标准差</td></tr><tr><td>SDNNi</td><td>ms</td><td>上述标准差的平均值</td></tr><tr><td>NN50</td><td>count</td><td>每对相邻正常心跳时间间隔，差距超过50毫秒的数目</td></tr><tr><td>pNN50</td><td>%</td><td>间隔差距超过50毫秒的占比</td></tr><tr><td>HRVTi</td><td>-</td><td>相邻正常心跳间隔的总个数除以相邻正常心跳间隔直方图的高度</td></tr><tr><td>TINN</td><td>ms</td><td>使用最小方差法，求出全部NN间期的直方图近似三角形底边的宽度</td></tr></tbody></table><p>目前已知：</p><ol><li>HRVTi 减小，交感神经活动增强，副交感神经活动下降；</li></ol><h4 id="1-2-频域分析"><a href="#1-2-频域分析" class="headerlink" title="1.2.频域分析"></a>1.2.频域分析</h4><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>VLF</td><td>ms^2</td><td>极低频功率</td></tr><tr><td>LF</td><td>ms^2</td><td>低频功率</td></tr><tr><td>HF</td><td>ms^2</td><td>高频功率</td></tr><tr><td>LF&#x2F;HF</td><td>-</td><td>比值</td></tr><tr><td>peakVLF</td><td>Hz</td><td></td></tr><tr><td>peakLF</td><td>Hz</td><td></td></tr><tr><td>peakHF</td><td>Hz</td><td></td></tr></tbody></table><p>目前已知：</p><ol><li>LF&#x2F;HF 减小，反应了交感神经和副交感神经系统活动的均衡状态发生变化；</li></ol><h4 id="1-3-非线性分析"><a href="#1-3-非线性分析" class="headerlink" title="1.3.非线性分析"></a>1.3.非线性分析</h4><table><thead><tr><th>名称</th><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>sampen</td><td>-</td><td>两个序列在下一点保持相似的条件概率的负自然对数</td></tr><tr><td>SD1</td><td>ms</td><td>庞加莱图短轴</td></tr><tr><td>SD2</td><td>ms</td><td>庞加莱图长轴</td></tr><tr><td>SD1&#x2F;SD2</td><td>-</td><td></td></tr><tr><td>Alpha</td><td>-</td><td>去波动趋势分析</td></tr><tr><td>Alpha1</td><td>-</td><td>短时程参数</td></tr><tr><td>Alpha2</td><td>-</td><td>长时程参数</td></tr></tbody></table><p>目前已知：</p><ol><li>SD1 反应的是短期、瞬时 RR（两个 R 波） 变化；</li><li>SD2 则是为长期的；</li><li>SD1&#x2F;SD2 可代表交感神经与副交感神经的活性；</li><li>运动强度越大 Alpha1 越低。</li></ol><h3 id="2-具体文献"><a href="#2-具体文献" class="headerlink" title="2.具体文献"></a>2.具体文献</h3><p>两篇文献均是通过机器学习的方法，实现 HRV 数据预测运动期间的 REP。</p><p>前者，也就是《Heart Rate Variability-Based Subjective Physical Fatigue Assessment》，通过 Bruce 测试，具体内容见下：</p><table><thead><tr><th>Stage</th><th>Duration（min）</th><th>Speed</th><th>Incline（%）</th></tr></thead><tbody><tr><td>rest</td><td>5</td><td>0</td><td>0</td></tr><tr><td>1</td><td>5</td><td>3</td><td>5</td></tr><tr><td>2</td><td>5</td><td>5</td><td>5</td></tr><tr><td>3</td><td>5</td><td>6.4</td><td>5</td></tr><tr><td>4</td><td>5</td><td>7.8</td><td>5</td></tr><tr><td>5</td><td>5</td><td>10.2</td><td>5</td></tr><tr><td>6</td><td>直到力竭</td><td>11.6</td><td>5</td></tr></tbody></table><p>收集测试期间的心跳数据（ECG），并且在每隔阶段结束时，要求汇报 RPE。</p><p>这里的 RPE 采用的是 6-20 量表。</p><p>但最后会被划分为：</p><ol><li>6-10 为轻松；</li><li>11-16 为有点累；</li><li>17-20 为累。</li></ol><p>最终呈现的数据格式为:</p><div class="code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">stage:</span><span class="hljs-symbol">duration:</span><span class="hljs-symbol">speed:</span><span class="hljs-symbol">incline:</span><span class="hljs-symbol">heart:</span> []<span class="hljs-symbol">rpe:</span></code></pre></div><p>后者《Sports fatigue detection based on deep learning》同为 Bruce 测试。</p><p>但每个阶段的具体运动速度&#x2F;坡度&#x2F;时间有调整，针对男女具体运动内容不同。</p><p>每个阶段改为 3 分钟，且<strong>每</strong>分钟都收集一次 RPE。同样采用 6-20 量表，但划分方式有点区别：</p><ol><li>6-11 为轻松；</li><li>12-16 为有点累；</li><li>17-20 为累。</li></ol><p>前者在 31 个特征中筛选出 14 个特征，并最终选用 LightGBM 算法。</p><p>后者直接确认了 27 个特征，使用 Bi-LSTM 神经网络。</p><h3 id="3-其它"><a href="#3-其它" class="headerlink" title="3.其它"></a>3.其它</h3><p>除了使用 HRV 特征量外，还可以通过卷积（CNN）的方式来提取特征。参考：</p><ol><li>《Real-Time Detection of Acute Cognitive Stress Using a Convolutional Neural Network From Electrocardiographic Signal》</li><li>《基于表面肌电信号能量核相图的卷积神经网络人体手势识别算法》</li></ol>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 遍历 dataframe 中的 item</title>
    <link href="/2023/11/28/Pandas-%E9%81%8D%E5%8E%86-dataframe-%E4%B8%AD%E7%9A%84-item/"/>
    <url>/2023/11/28/Pandas-%E9%81%8D%E5%8E%86-dataframe-%E4%B8%AD%E7%9A%84-item/</url>
    
    <content type="html"><![CDATA[<p>数据格式为</p><table><thead><tr><th>time</th><th>ecg</th><th>rep</th></tr></thead><tbody><tr><td>1700624658822114462</td><td>-0.157</td><td>6</td></tr></tbody></table><h3 id="采用-df-iterrows"><a href="#采用-df-iterrows" class="headerlink" title="采用 df.iterrows()"></a>采用 df.iterrows()</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df1.iterrows():    <span class="hljs-built_in">print</span>(item)</code></pre></div><p>输出内容为</p><div class="code-wrapper"><pre><code class="hljs elm">(<span class="hljs-number">14017</span>, time    <span class="hljs-number">1700624658822114462</span><span class="hljs-title">ecg</span>     <span class="hljs-number">-0.157</span><span class="hljs-title">rep</span>     <span class="hljs-number">6</span><span class="hljs-type">Name</span>: <span class="hljs-number">14017</span>, d<span class="hljs-keyword">type</span>: float64)</code></pre></div><p>若 <code>print(item[0])</code> 则显示</p><div class="code-wrapper"><pre><code class="hljs">14017</code></pre></div><p>若 <code>print(item[0])</code> 则显示</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">time</span>    <span class="hljs-number">1700624658822114462</span><span class="hljs-attribute">ecg</span>    -<span class="hljs-number">0</span>.<span class="hljs-number">157</span><span class="hljs-attribute">rep</span>     <span class="hljs-number">6</span><span class="hljs-attribute">Name</span>: <span class="hljs-number">14216</span>, dtype: float64</code></pre></div><h3 id="采用-df-itertuples"><a href="#采用-df-itertuples" class="headerlink" title="采用 df.itertuples()"></a>采用 df.itertuples()</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df1.itertuples():    <span class="hljs-built_in">print</span>(item)</code></pre></div><p>输出内容为</p><div class="code-wrapper"><pre><code class="hljs livescript">Pandas(Index=<span class="hljs-number">14216</span>, time=<span class="hljs-number">1700624658822114462</span>, ecg=-<span class="hljs-number">0.157</span>, rep=<span class="hljs-number">6</span>)<span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">0</span>])</span> -&gt;</span> <span class="hljs-number">14216</span><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">1</span>])</span> -&gt;</span> <span class="hljs-number">1700624658822114462</span><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">2</span>])</span> -&gt;</span> -<span class="hljs-number">0.157</span><span class="hljs-built_in">print</span><span class="hljs-function"><span class="hljs-params">(item[<span class="hljs-number">3</span>])</span> -&gt;</span> <span class="hljs-number">6</span></code></pre></div><h3 id="采用-df1-items"><a href="#采用-df1-items" class="headerlink" title="采用 df1.items()"></a>采用 df1.items()</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> df1.items():    <span class="hljs-built_in">print</span>(item)</code></pre></div><p>输出内容为（按列输出）</p><div class="code-wrapper"><pre><code class="hljs scheme">(<span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-number">0</span>        <span class="hljs-number">1700624538840442752</span><span class="hljs-number">1</span>        <span class="hljs-number">1700624538943768244</span><span class="hljs-number">2</span>        <span class="hljs-number">1700624539047093736</span><span class="hljs-number">3</span>        <span class="hljs-number">1700624539150419228</span><span class="hljs-number">4</span>        <span class="hljs-number">1700624539253744720</span>                ...         <span class="hljs-number">14212</span>    <span class="hljs-number">1700624658791314974</span><span class="hljs-number">14213</span>    <span class="hljs-number">1700624658799014846</span><span class="hljs-number">14214</span>    <span class="hljs-number">1700624658806714718</span><span class="hljs-number">14215</span>    <span class="hljs-number">1700624658814414590</span><span class="hljs-number">14216</span>    <span class="hljs-number">1700624658822114462</span>Name: time, Length: <span class="hljs-number">14217</span>, dtype: int64)(<span class="hljs-symbol">&#x27;ecg</span>&#x27;, <span class="hljs-number">0</span>       <span class="hljs-number">-0.004</span><span class="hljs-number">1</span>        <span class="hljs-number">0.044</span><span class="hljs-number">2</span>        <span class="hljs-number">0.059</span><span class="hljs-number">3</span>        <span class="hljs-number">0.007</span><span class="hljs-number">4</span>       <span class="hljs-number">-0.086</span>         ...  <span class="hljs-number">14212</span>   <span class="hljs-number">-0.376</span><span class="hljs-number">14213</span>   <span class="hljs-number">-0.310</span><span class="hljs-number">14214</span>   <span class="hljs-number">-0.236</span><span class="hljs-number">14215</span>   <span class="hljs-number">-0.189</span><span class="hljs-number">14216</span>   <span class="hljs-number">-0.157</span>Name: ecg, Length: <span class="hljs-number">14217</span>, dtype: float64)(<span class="hljs-symbol">&#x27;rep</span>&#x27;, <span class="hljs-number">0</span>        <span class="hljs-number">4</span><span class="hljs-number">1</span>        <span class="hljs-number">4</span><span class="hljs-number">2</span>        <span class="hljs-number">4</span><span class="hljs-number">3</span>        <span class="hljs-number">4</span><span class="hljs-number">4</span>        <span class="hljs-number">4</span>        ..<span class="hljs-number">14212</span>    <span class="hljs-number">6</span><span class="hljs-number">14213</span>    <span class="hljs-number">6</span><span class="hljs-number">14214</span>    <span class="hljs-number">6</span><span class="hljs-number">14215</span>    <span class="hljs-number">6</span><span class="hljs-number">14216</span>    <span class="hljs-number">6</span>Name: rep, Length: <span class="hljs-number">14217</span>, dtype: int64)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 创建并插入数据</title>
    <link href="/2023/11/28/Pandas-%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/11/28/Pandas-%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python">ecgs = [<span class="hljs-number">10</span>]times = [<span class="hljs-number">10</span>]reps = [<span class="hljs-number">10</span>]hrs = [<span class="hljs-number">10</span>]<span class="hljs-comment"># 创建df</span>dataframe = pd.DataFrame(&#123;<span class="hljs-string">&#x27;time&#x27;</span>: times, <span class="hljs-string">&#x27;ecg&#x27;</span>: ecgs, <span class="hljs-string">&#x27;rep&#x27;</span>: reps&#125;)<span class="hljs-comment"># 插入</span>new_df = dataframe.copy()new_df[<span class="hljs-string">&#x27;hr&#x27;</span>] = hrsnew_df.to_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 已知元素，获取其索引</title>
    <link href="/2023/11/28/Pandas-%E5%B7%B2%E7%9F%A5%E5%85%83%E7%B4%A0%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%85%B6%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/11/28/Pandas-%E5%B7%B2%E7%9F%A5%E5%85%83%E7%B4%A0%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%85%B6%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<p>例如，知道其时间戳，找到 index</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(df[df[<span class="hljs-string">&#x27;time&#x27;</span>].isin([timestamp])])<span class="hljs-built_in">print</span>(df[df[<span class="hljs-string">&#x27;time&#x27;</span>].isin([timestamp])].index)<span class="hljs-built_in">print</span>(df[df[<span class="hljs-string">&#x27;time&#x27;</span>].isin([timestamp])].index[<span class="hljs-number">0</span>])</code></pre></div><p>第一个 print 为</p><div class="code-wrapper"><pre><code class="hljs pgsql">                     <span class="hljs-type">time</span>    ecg  hr  rr  marker<span class="hljs-number">1444</span>  <span class="hljs-number">1700624323518685002</span> <span class="hljs-number">-0.356</span> <span class="hljs-keyword">NaN</span> <span class="hljs-keyword">NaN</span>     <span class="hljs-keyword">NaN</span></code></pre></div><p>第二个 print 为</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Index</span><span class="hljs-params">([<span class="hljs-number">1444</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</span></span></code></pre></div><p>第三个 print 为</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">1444</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 数据截取</title>
    <link href="/2023/11/28/Pandas-%E6%95%B0%E6%8D%AE%E6%88%AA%E5%8F%96/"/>
    <url>/2023/11/28/Pandas-%E6%95%B0%E6%8D%AE%E6%88%AA%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<p>知道 index 的情况下，完全可以采用</p><div class="code-wrapper"><pre><code class="hljs python">df_copy = df.copy()df_cut = df_copy[top:bottom]</code></pre></div><p>进行截取操作。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 纳秒时间戳转时间</title>
    <link href="/2023/11/28/Python-%E7%BA%B3%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%B6%E9%97%B4/"/>
    <url>/2023/11/28/Python-%E7%BA%B3%E7%A7%92%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>关于数量级</p><div class="code-wrapper"><pre><code class="hljs \">1 秒1, 000 毫秒1, 000, 000 微秒1, 000, 000, 000 纳秒对于一个纳秒时间戳：1700621512995758338. 纳秒1700621512995758.338 微秒1700621512995.758338 毫秒1700621512.995758338 秒</code></pre></div><p>转换代码</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<span class="hljs-comment">#假设纳秒时间戳为 1635678377992198863</span>nano_second_timestamp = <span class="hljs-number">1635678377992198863</span><span class="hljs-comment"># 将纳秒时间戳除以一亿得到秒级时间戳</span>second_timestamp = nano_second_timestamp / <span class="hljs-number">1000000000</span><span class="hljs-comment"># 将秒级时间戳转换为datetime对象</span>d = datetime.datetime.fromtimestamp(second_timestamp)<span class="hljs-comment"># 将datetime对象转换为指定格式的时间字符串</span>formatted_time = d.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)<span class="hljs-built_in">print</span>(formatted_time) <span class="hljs-comment"># 输出：&#x27;2021-10-31 15:06:17.992199&#x27;</span></code></pre></div><p>在上述代码中，最后的时间字符串格式为  <code>&#39;%Y-%m-%d %H:%M:%S.%f&#39;</code>，其中 %Y 代表年份，%m 代表月份，%d 代表日期，%H 代表小时，%M 代表分钟，%S 代表秒，%f 代表微秒（注意，因为 datetime 对象的微秒值是范围在 0~999999 之间，所以需要对纳秒时间戳进行转换后，取后六位代表微秒）。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 通过 datetime 计算时间差</title>
    <link href="/2023/11/28/Python-%E9%80%9A%E8%BF%87-datetime-%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
    <url>/2023/11/28/Python-%E9%80%9A%E8%BF%87-datetime-%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python">d1 = datetime.datetime.fromtimestamp(df[<span class="hljs-string">&#x27;time&#x27;</span>][start_index] / <span class="hljs-number">1000000000</span>)d2 = datetime.datetime.fromtimestamp(df[<span class="hljs-string">&#x27;time&#x27;</span>][end_index] / <span class="hljs-number">1000000000</span>)diff_d = d2-d1<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;时间差为 &#x27;</span>, diff_d)<span class="hljs-comment"># 时间差为  0:12:13.942854</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 数组中每个元素+1</title>
    <link href="/2023/11/28/Python-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0-1/"/>
    <url>/2023/11/28/Python-%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0-1/</url>
    
    <content type="html"><![CDATA[<p>方法一</p><div class="code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]a = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x+<span class="hljs-number">1</span>,a)</code></pre></div><p>方法二</p><div class="code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]a = [item+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> a]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 SettingWithCopyWarning Try using .loc[row_indexer,col_indexer] = value instead</title>
    <link href="/2023/11/28/%E8%A7%A3%E5%86%B3-SettingWithCopyWarning-Try-using-loc-row-indexer-col-indexer-value-instead/"/>
    <url>/2023/11/28/%E8%A7%A3%E5%86%B3-SettingWithCopyWarning-Try-using-loc-row-indexer-col-indexer-value-instead/</url>
    
    <content type="html"><![CDATA[<p>利用 Pandas 向 DataFrame 中插入一列数据时，出现警告：</p><div class="code-wrapper"><pre><code class="hljs oxygene">SettingWithCopyWarning:A value <span class="hljs-keyword">is</span> trying <span class="hljs-keyword">to</span> be <span class="hljs-keyword">set</span> <span class="hljs-keyword">on</span> a <span class="hljs-keyword">copy</span> <span class="hljs-keyword">of</span> a slice <span class="hljs-keyword">from</span> a DataFrame.<span class="hljs-keyword">Try</span> <span class="hljs-keyword">using</span> .loc[row_indexer,col_indexer] = value instead</code></pre></div><p>解决办法：</p><p>先 copy 一份数据。</p><div class="code-wrapper"><pre><code class="hljs python">a = a.copy()a[<span class="hljs-string">&#x27;column&#x27;</span>] = Your <span class="hljs-type">List</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas List 转换为 Series</title>
    <link href="/2023/11/20/Pandas-List-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Series/"/>
    <url>/2023/11/20/Pandas-List-%E8%BD%AC%E6%8D%A2%E4%B8%BA-Series/</url>
    
    <content type="html"><![CDATA[<p>手上有 ecg 信号数组。需要转换成相应的格式：</p><div class="code-wrapper"><pre><code class="hljs dns"><span class="hljs-number">0</span>        <span class="hljs-number">0.000763</span><span class="hljs-number">1</span>       -<span class="hljs-number">0.000610</span><span class="hljs-number">2</span>        <span class="hljs-number">0.000763</span><span class="hljs-number">3</span>        <span class="hljs-number">0.002289</span><span class="hljs-number">4</span>        <span class="hljs-number">0.005341</span>           ...   <span class="hljs-number">50677</span>    <span class="hljs-number">0.005798</span><span class="hljs-number">50678</span>    <span class="hljs-number">0.003357</span><span class="hljs-number">50679</span>    <span class="hljs-number">0.008392</span><span class="hljs-number">50680</span>    <span class="hljs-number">0.010681</span><span class="hljs-number">50681</span>    <span class="hljs-number">0.008240</span>Name: ECG, Length: <span class="hljs-number">50682</span>, dtype: float64</code></pre></div><p>type 后可以发现该格式为：</p><div class="code-wrapper"><pre><code class="hljs actionscript">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;pandas.core.series.Series&#x27;</span>&gt;</code></pre></div><p>于是可以</p><div class="code-wrapper"><pre><code class="hljs python">ecg = pd.Series(ecg, name=<span class="hljs-string">&#x27;ECG&#x27;</span>)</code></pre></div><p>这样就将 List 转换成了 Series</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「转载」光学心率测量原理</title>
    <link href="/2023/11/20/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E5%85%89%E5%AD%A6%E5%BF%83%E7%8E%87%E6%B5%8B%E9%87%8F%E5%8E%9F%E7%90%86/"/>
    <url>/2023/11/20/%E3%80%8C%E8%BD%AC%E8%BD%BD%E3%80%8D%E5%85%89%E5%AD%A6%E5%BF%83%E7%8E%87%E6%B5%8B%E9%87%8F%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/richard_liujh/article/details/49615395">原文地址</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在这个什么都要和“智能”串联的年代，除了我们司空见款的手机外也就是一些智能手表和手环之类的穿戴设备了。这些智能穿戴设备集成了很多的传感器，由于脉搏或者心率是生命体征的重要参数之一，所以心率率测量可算是高端入门产品必备的一个技能，正好最近有机会好好研究心率测量的技术，所以趁热打铁总结一下光学测量心率的相关知识。</p><p>在网上搜集了很多资料，目前心率测量有以下几种传感器技术（仅供参考）</p><ol><li><p>心电ECG</p></li><li><p>光电容积脉搏波描记法PPG </p></li><li><p>生物阻抗 bioimpedance</p></li><li><p>摄像头Camera RGB 、wifi等技术</p></li></ol><p>在上述的几种方法中，最被人们熟悉的应该就是心电图。在医疗领域，通常使用心电图（ECG）测量生理电信号来实现心率和心脏活动的检测。但是由于测量ECG信号，常常要在身体多个部位连接传感器电极，在胸部和四肢之间最多可以连接10个电极。ECG信号虽然精准并且信息丰富，但是考虑到穿戴设备的便携性和功能简单所以并没有在穿戴设备上广泛采用ECG技术。目前情况ECG还是在一些专业领域里面使用例如医院、体育等方面的研究。</p><p>第二种光电容积脉搏波描记法，这个名字读起来实在是高端，其实说简单点就是利用光测量脉搏的一种技术。这种技术目前被广泛应用，本文也是主要介绍这种技术。</p><p>目前市场上能看到采用这种技术的穿戴设备就有：AppleWatch、三星 Galaxy Gear S2、Moto 360、Microsoft Band 等….（其他厂家就省略了）。</p><p>第三种生物阻抗传感器测量方法，目前市场上看到的好像只有Jawbone 的UP3了， 对于此技术网上的资料特别的少。不过通过亲身体验试戴JawboneUP3，感觉这种技术应该比光学测心率的技术难度大但是应该更精准更可靠。最后的Camera RGB和wifi都是是MIT研究出来的新技术，看起来都非常高端，MIT威武啊。其中一个是通过我们手机的摄像头就能检测出人体的体征变化，这个技术非常有意思并且也很高端。另一个则是通过我们家里的wifi信号就能测，也甚是高端。当然这两种还没有看到上市的产品所以就不多说了。</p><h3 id="光电容积脉搏波描记法PPG"><a href="#光电容积脉搏波描记法PPG" class="headerlink" title="光电容积脉搏波描记法PPG"></a>光电容积脉搏波描记法PPG</h3><p>光学心率传感器，如果带过上述那些智能手表或者智能手环的朋友来说也不算稀奇的事情。就拿AppleWatch来说，测量心率时底部的表盘会发出绿色的灯光，并且测量的时候手腕最好保持不动否侧会影响测量结果。接下来将详细介绍光学心率测量的原理。</p><p>如下两张图是光学心率传感器。图a是LED没有发光的时候中间是一个光敏二极管，图b是传感器的LED发光的时候。</p><p><img src="https://img-blog.csdn.net/20151103164718565?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图a"><img src="https://img-blog.csdn.net/20151103164454214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="图b"></p><p>那么为什么通过LED灯发光就能测量心率呢？</p><p>当LED光射向皮肤，透过皮肤组织反射回的光被光敏传感器接受并转换成电信号再经过AD转换成数字信号，简化过程：光–&gt; 电 –&gt; 数字信号</p><p><img src="https://img-blog.csdn.net/20151103170649448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>为什么大多数传感器都是采用的绿光呢？</p><p>我们先看看光谱的特点，从紫外线到红外线的波长是越来越长的。</p><p><img src="https://img-blog.csdn.net/20151103171211057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>之所以选择绿光作为光源是考虑到一下几个特点：</p><ol><li><p>皮肤的黑色素会吸收大量波长较短的波</p></li><li><p>皮肤上的水份也会吸收大量的UV和IR部分的光</p></li><li><p>进入皮肤组织的绿光(500nm)– 黄光(600nm)大部分会被红细胞吸收</p></li><li><p>红光和接近IR的光相比其他波长的光更容易穿过皮肤组织</p></li><li><p>血液要比其他组织吸收更多的光</p></li><li><p>相比红光，绿（绿-黄）光能被氧合血红蛋白和脱氧血红蛋白吸收</p></li></ol><p>总体来说，绿光– 红光能作为测量光源。早起多数采用红光为光源，随着进一步的研究和对比，绿光作为光源得到的信号更好，信噪比也比其他光源好些，所以现在大部分穿戴设备采用绿光为光源。但是考虑到皮肤情况的不用（肤色、汗水），高端产品会根据情况自动使用换绿光、红光和IR多种光源。</p><p>虽然知道了上面的几个特点，但是还不足以弄清楚为什么通过光照就能测出心率、血氧等参数呢？</p><p>下图就解释了核心原理</p><p><img src="https://img-blog.csdn.net/20151103173511542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>当光照透过皮肤组织然后再反射到光敏传感器时光照有一定的衰减的。像肌肉、骨骼、静脉和其他连接组织等等对光的吸收是基本不变的（前提是测量部位没有大幅度的运动），但是血液不同，由于动脉里有血液的流动，那么对光的吸收自然也有所变化。当我们把光转换成电信号时，正是由于动脉对光的吸收有变化而其他组织对光的吸收基本不变，得到的信号就可以分为直流DC信号和交流AC信号。提取其中的AC信号，就能反应出血液流动的特点。我们把这种技术叫做光电容积脉搏波描记法PPG。</p><p>下图是PPG信号和ECG信号的对比</p><p><img src="https://img-blog.csdn.net/20151103174757856?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>实际测量手指的PPG信号如下：</p><p><img src="https://img-blog.csdn.net/20151103174942948?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>所以，只要测得到的PPG信号比较理想算出心率也不算什么难事。但是事实总是残酷的，由于测量部位的移动、自然光、日光灯等等其他的干扰，最终测到的信号可能是下面的这种，所以要通过很多方法进行滤波处理</p><p><img src="https://img-blog.csdn.net/20151103175823717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>对于PPG信号的处理，目前我知道的有两种方法。一种是时域分析，即算出一定时间内PPG信号的波峰个数，另一种是通过对PPG信号进行FFT变换得到频域的特点。</p><h4 id="时域分析"><a href="#时域分析" class="headerlink" title="时域分析"></a>时域分析</h4><p>假设连续采样5秒的时间，在5s内的波峰个数为N，那么心率就是N*12，呼吸频率为心率&#x2F;2</p><h4 id="频域分析"><a href="#频域分析" class="headerlink" title="频域分析"></a>频域分析</h4><p>上面分析过，我们把血液流动对光吸收转变成了AC信号，如果对于进行FFT变换，那么就能看到频域的特点。如下图就是对PPG信号的FFT转变</p><p><img src="https://img-blog.csdn.net/20151103180955822?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>上图中的频域图，0Hz的信号很强，这部分是骨骼、肌肉等组织的DC信号，在1Hz附近有个相对比较突出的信号就是血液流动转变的AC信号。假设测得到的频率f &#x3D; 1.2Hz</p><p>那么心率HeartRate  HR &#x3D; f x60 &#x3D; 1.2 x 60 &#x3D; 72</p><p>最后再简单提一下血氧的测量，相比心率血氧测量难度较大而且精度不算太高。测量血氧的原理图下图所示</p><p><img src="https://img-blog.csdn.net/20151103182057629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p>由于血液中含有的氧合血红蛋白HbO2和血红蛋白Hb存在一定的比例，简单说也就是含氧量吧。上面的图表示了氧合血红蛋白HbO2和血红蛋白Hb对波长600<del>1000nm的光吸收特性，从图中可以看出上600</del>800nm间Hb的吸收系数更高，800<del>1000之间HbO2的吸收系数更高。所以可以利用红光（600</del>800nm）和接近IR（800~1000nm）的光分别检测HbO2和Hb的PPG信号，然后通过程序处理算出相应的比值，这样就得到了血氧值。</p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心率</tag>
      
      <tag>传感器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何让 plt.savefig() 为最大化的窗口保存图像，而不是默认的尺寸</title>
    <link href="/2023/11/17/%E5%A6%82%E4%BD%95%E8%AE%A9-plt-savefig-%E4%B8%BA%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%AA%97%E5%8F%A3%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B0%BA%E5%AF%B8/"/>
    <url>/2023/11/17/%E5%A6%82%E4%BD%95%E8%AE%A9-plt-savefig-%E4%B8%BA%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%AA%97%E5%8F%A3%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B0%BA%E5%AF%B8/</url>
    
    <content type="html"><![CDATA[<p>在分析心率时，通过如下代码保存的图片是挤在一起的</p><div class="code-wrapper"><pre><code class="hljs python">plt.tight_layout()plt.savefig(<span class="hljs-string">&quot;ecg.png&quot;</span>, dpi=<span class="hljs-number">120</span>)</code></pre></div><p>如图</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ecg1.png"></p><p>这也就是使用 <code>plt.show()</code> 显示的默认窗口。必须要将窗口放大后才能将内容全部展开，可图片无法放大。</p><p>所以参考了：</p><ol><li><a href="https://stackoverflow.com/questions/38120826/how-to-make-plt-savefig-save-image-for-maximized-window-instead-of-default-s"><a href="https://stackoverflow.com/questions/38120826/how-to-make-plt-savefig-save-image-for-maximized-window-instead-of-default-s">How to make plt.savefig() save image for ‘maximized’ window instead of default size</a></a></li><li><a href="https://stackoverflow.com/questions/32428193/saving-matplotlib-graphs-to-image-as-full-screen">Saving Matplotlib graphs to image as full screen</a></li><li><a href="https://stackoverflow.com/questions/10041627/how-to-make-savefig-save-image-for-maximized-window-instead-of-default-size">How to make savefig() save image for ‘maximized’ window instead of default size</a></li></ol><p>这三个问题后，有解决方法：</p><div class="code-wrapper"><pre><code class="hljs python">figure = plt.gcf()  <span class="hljs-comment"># get current figure</span>figure.set_size_inches(<span class="hljs-number">32</span>, <span class="hljs-number">18</span>)  <span class="hljs-comment"># set figure&#x27;s size manually to your full screen (32x18)</span>plt.savefig(<span class="hljs-string">&#x27;ecg.png&#x27;</span>, bbox_inches=<span class="hljs-string">&#x27;tight&#x27;</span>, dpi=<span class="hljs-number">120</span>)  <span class="hljs-comment"># bbox_inches removes extra white spaces</span></code></pre></div><p>保存图片ok</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/ecg2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECG/PPG 量测解决方案</title>
    <link href="/2023/11/16/ECG-PPG-%E9%87%8F%E6%B5%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/11/16/ECG-PPG-%E9%87%8F%E6%B5%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>心脏运作可以揭露人体许多极具价值的信息，包括其健康状态、生活方式，甚至是情绪状态及心脏疾病的早期发病等。传统的医疗设备中，监测心跳速率和心脏活动是经由测量电生理讯号与心电图 (ECG) 来完成的，需要将电极连接到身体来量测心脏组织中所引发电气活动的信号。此外，随着心跳会有一压力波通过血管进行传递，这个波会稍微改变血管的直径，除了 ECG 外的另一选择──光体积变化描记图法 (Photoplethysmography, PPG) 就是利用这个变化，是一种无需测量生物电信号就能获得心脏功能信息的光学技术。PPG 主要用于测量血氧饱和度 (SpO2)，但也可不进行生物电信号测量就提供心脏功能信息。借助 PPG 技术，心率监护仪可集成到手表或护腕等可穿戴设备上，以达成连续侦测的应用。</p><h3 id="2-生理讯号：ECG-vs-PPG-与-PTT"><a href="#2-生理讯号：ECG-vs-PPG-与-PTT" class="headerlink" title="2.生理讯号：ECG vs. PPG 与 PTT"></a>2.生理讯号：ECG vs. PPG 与 PTT</h3><p>心电描记术 (Electrocardiography, ECG或者EKG) 是一种经胸腔以时间为单位记录心脏的电生理活动，利用在人体皮肤表面贴上的电极，可以侦测到心脏的电位传动，而心电图所记录的并不是单一心室或心房细胞的电位变化，而是心脏整体的电位变化。心电图的结果通常以波型显示，基本包括有 P 波、QRS 波组、T 波、P 波代表的是心房收缩，QRS 波组则是心室收缩，T 波是心室舒张。有关心跳率的测量或评估，是以 R 波与 R 波的间隔时间来代表。RR 间隔越大代表心跳率越低，RR 间隔越小代表心跳率越高。测量 ECG 信号常常要在身体多个部位连接传感器电极，在胸部和四肢之间最多可以连接 10 个电极。</p><p><img src="https://www.richtek.com/Design%20Support/Technical%20Document/~/media/Richtek/Design%20Support/Technical%20Documentation/AN057/CN/Version4/image001.jpg?file=preview.png"></p><p>光体积变化描记图法 (Photoplethysmography，简称PPG) 是借光电手段在活体组织中检测血液容积变化的一种无创检测方法。当一定波长的光束照射到指端皮肤表面，每次心跳时，血管的收缩和扩张都会影响光的透射 (例如在透射PPG中，通过指尖的光线) 或是光的反射 (例如在反射 PPG 中，来自手腕表面附近的光线)。当光线透过皮肤组织然后再反射到光敏传感器时，光照会有一定的衰减。像肌肉、骨骼、静脉和其他连接组织对光的吸收是基本不变的 (前提是测量部位没有大幅度的运动)，但是动脉会不同，由于动脉里有血液的脉动，那么对光的吸收自然也会有所变化。当我们把光转换成电信号时，正是由于动脉对光的吸收有变化而其他组织对光的吸收基本不变，得到的信号就可以分为直流 DC 信号和交流 AC 信号。提取其中的 AC 信号，就能反应出血液流动的特点。</p><p><img src="https://www.richtek.com/Design%20Support/Technical%20Document/~/media/Richtek/Design%20Support/Technical%20Documentation/AN057/CN/Version4/image002.png?file=preview.png"></p><p>下图是 PPG 信号和 ECG 信号的对比：</p><p><img src="https://www.richtek.com/Design%20Support/Technical%20Document/~/media/Richtek/Design%20Support/Technical%20Documentation/AN057/CN/Version4/image003.png?file=preview.png"></p><p>根据 PPG 与 ECG 个别的生理特征点，我们可以发现 ECG 的峰值来自于心室的收缩，而 PPG 的峰值则是因为血管收缩所造成的，因此我们可以得到血液自心脏送出后到达量测部位的传输时间，也就是脉搏波传递时间 Pulse Transit Time (PTT)，脉搏波传递的速度与血压是直接相关的，血压高时，脉搏波传递快，反之则慢，所以通过心电信号 ECG 与脉搏波信号 PPG 获得脉搏传递时间 (PTT)，再加上常规的一些身体参数 (如身高、体重) 即可得出脉搏波传递速度，通过建立的特征方程来估计人体脉搏的收缩压与舒张压，可实现无创连续血压测量。</p><h3 id="3-信号处理"><a href="#3-信号处理" class="headerlink" title="3.信号处理"></a>3.信号处理</h3><h4 id="ECG"><a href="#ECG" class="headerlink" title="ECG"></a>ECG</h4><p>一般 ECG 电极需放置在心脏两侧并紧贴皮肤，可以用来记录心电信号随时间的变化。实际 ECG 信号的幅度只有几毫伏，频率不超过几百赫兹。ECG 测量面临诸多挑战：一方面，来自 ECG 主电源的 50Hz 至 60Hz 电容耦合干扰要比心脏信号强许多；另一方面，身体皮肤的接触阻抗以及传感器之间阻抗的不匹配，这会导致较大的偏差并降低共模抑制能力；此外，还要解决接触噪声以及电磁源产生的干扰问题。此类应用中一些重要的放大器参数包括共模抑制、输入偏移电压和偏移电压漂移、输出摆幅以及放大器噪声，说明如下：</p><ul><li><strong>共模抑制</strong></li></ul><p>如前文所述，放置在患者皮肤上的电极可能有大约数百毫伏特的直流电压，而有用讯号的电压通常小于一毫伏特。仪表放大器配置非常适合这种情况，该放大器将消除任何与差分输入共模的讯号 (来自电极或任何共模噪声，如 60Hz 干扰)，同时放大有用的心电讯号。在这种情况下，考虑放大器电路的共模抑制参数是非常重要的，不仅针对直流讯号，还要考虑跨频率，尤其是线路频率为 50Hz 或 60Hz 时。具有高共模抑制比的放大器将消除更多不需要的噪声并实现更高精度的测量。</p><ul><li><strong>输入偏移电压和偏移电压漂移</strong></li></ul><p>由于有用电压相当小，放大器需要提供增益，以提高检测电路的分辨率。此应用需要高增益，因此放大器的偏移电压非常重要。放大器产生的任何偏移电压都将乘以电路增益，例如，假定心脏收缩在皮肤上的一个指定电极上产生 1 毫伏特电压，假定放大器电路的增益设置为 1000，则放大器电路的理想输出为 1 伏特，但如果放大器的输入偏移电压为 100 微伏特时，则将在输出产生 100 毫伏特的误差 (占有用讯号的 10%)。值得注意的是，放大器的输入偏移误差以输入为参考，因此，误差将与放大器的增益成比例。 </p><p>与所有电子组件一样，放大器的特性会随时间和温度发生变化，其电压偏移也是如此。放大器电压偏移是误差的来源，随着偏移电压的漂移，此误差可能变得更大。然而，透过选择低漂移放大器 (如采用自动归零校准架构的放大器) 或者定期执行系统校准，藉此校正失调和漂移的运算放大器，可大幅度地减小此类误差源带来的影响。</p><ul><li><strong>放大器输出摆幅</strong></li></ul><p>在前面的示例中，电极上 1 毫伏特电压变化会在放大器电路的输出上产生 1 伏特的电压变化。对于 5 伏特单电源系统，这代表放大器电路可精确检测 0 ~ 5 毫伏特的电压，放大器需要输出可摆动到最低与最高的电源轨。相反地，如果放大器不支持轨对轨的输出摆动，则电压的动态范围会变小，就无法正确检测出完整的输入讯号，因而会限制检测电路的动态范围，无法做出精确的侦测。</p><ul><li><strong>放大器噪声</strong></li></ul><p>当评估此类应用的放大器时，另一个必须考虑的重要参数是放大器噪声。值得注意的是，放大器的噪声可能不会随频率保持恒定，尤其是在 1&#x2F;f 噪声可成为主要噪声源的低频率下；在 ECG 应用中，有用的讯号带宽通常为直流到 100Hz，因此 1&#x2F;f 噪声仍是误差源之一。</p><h4 id="PPG"><a href="#PPG" class="headerlink" title="PPG"></a>PPG</h4><p>测量 PPG 面临的主要挑战来自环境光和运动产生的干扰。阳光产生的直流误差相对而言比较容易消除，但日光灯和节能灯发出的光线都带有可引起交流误差的频率分量。运动也会干扰光学系统，当光学心率监护仪用于睡眠研究时，这可能不是问题，但如果在活动期间穿戴，则将很难消除运动伪像，光学传感器 (LED 和光电检测器) 和皮肤之间的相对移动也会降低光信号的灵敏度。</p><p>此外，运动的频率分量也可能会被误判为心率，因此，必须测量该运动并进行补偿。设备与人体之间相贴越紧密，这种影响就越小，但采用机械方式消除这种影响几乎是不可能的。通常可使用多种方法来测量运动的干扰，其中一种是光学方法，即使用多个 LED 波长。共模信号表示运动，而差分信号用来检测心率。不过，最好是使用真正的运动传感器，该传感器不仅可准确测量应用于可穿戴设备的运动，而且还可用于提供其他功能，例如跟踪活动、计算步数或者在检测到特定g值时启动某个应用。</p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「文档翻译」HeartPy - Python Heart Rate Analysis Toolkit II</title>
    <link href="/2023/11/07/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit-II/"/>
    <url>/2023/11/07/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit-II/</url>
    
    <content type="html"><![CDATA[<h1 id="Analysing-Smartwatch-Data"><a href="#Analysing-Smartwatch-Data" class="headerlink" title="Analysing Smartwatch Data"></a>Analysing Smartwatch Data</h1><p>本笔记本概述了如何使用 HeartPy 分析从智能手表设备获取的原始 PPG 数据。</p><p>与指尖或耳垂上的典型 PPG 传感器相比，以这种方式测量的信号包含更多的噪声，指尖或耳垂上的灌注比手腕上的灌注更容易测量。</p><p>分析此类信号需要一些额外的步骤，如本笔记中所述。</p><p>首先让我们加载依赖项和数据文件：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> heartpy <span class="hljs-keyword">as</span> hp<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltdf = pd.read_csv(<span class="hljs-string">&#x27;raw_ppg.csv&#x27;</span>)df.keys()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python">Index([<span class="hljs-string">&#x27;ppg&#x27;</span>, <span class="hljs-string">&#x27;timer&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)</code></pre></div><p>查看文件格式。</p><div class="code-wrapper"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>))plt.plot(df[<span class="hljs-string">&#x27;ppg&#x27;</span>].values)plt.show()</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit7.png"></p><p>PPG 似乎有断断续续的部分点缀在非信号之间（传感器未记录的时间段）。</p><p>现在，让我们对第一个信号部分进行切片，看看发生了什么。稍后我将向您展示如何自动排除非信号部分。</p><div class="code-wrapper"><pre><code class="hljs python">signal = df[<span class="hljs-string">&#x27;ppg&#x27;</span>].values[<span class="hljs-number">14500</span>:<span class="hljs-number">20500</span>]timer = df[<span class="hljs-string">&#x27;timer&#x27;</span>].values[<span class="hljs-number">14500</span>:<span class="hljs-number">20500</span>]plt.plot(signal)plt.show()</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit8.png"></p><p>现在我们需要知道采样率。它用于计算所有其他内容。</p><p>HeartPy 有多种从计时器列获取采样率的方法。让我们看看计时器的格式：</p><div class="code-wrapper"><pre><code class="hljs python">timer[<span class="hljs-number">0</span>:<span class="hljs-number">20</span>]</code></pre></div><div class="code-wrapper"><pre><code class="hljs json">array(<span class="hljs-punctuation">[</span>&#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">57.978</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.078</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.178</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.279</span>&#x27;<span class="hljs-punctuation">,</span>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.379</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.479</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.579</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.679</span>&#x27;<span class="hljs-punctuation">,</span>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.779</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.879</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.980</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.092</span>&#x27;<span class="hljs-punctuation">,</span>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.180</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.283</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.381</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.481</span>&#x27;<span class="hljs-punctuation">,</span>       &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.582</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.681</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.781</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">11</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">:</span><span class="hljs-number">59.882</span>&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>      dtype=object)</code></pre></div><p>格式是 <strong>HH:MM:SS:mm</strong></p><p>HeartPy 附带了一个日期时间函数，可以使用 <code>get_samplerate_datetime</code> 将日期转化为采样率。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#Seems easy enough, right? Now let&#x27;s determine the sample rate</span>sample_rate = hp.get_samplerate_datetime(timer, timeformat = <span class="hljs-string">&#x27;%H:%M:%S.%f&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sampling rate is: %.3f Hz&#x27;</span> %sample_rate)</code></pre></div><div class="code-wrapper"><pre><code class="hljs json">sampling rate is<span class="hljs-punctuation">:</span> <span class="hljs-number">9.986</span> Hz</code></pre></div><p>采样率相当低，但为了节省电量，许多智能手表都采用这种方式。对于确定 BPM 来说这很好，但任何心率变异性 (HRV) 测量都可能不会非常准确。</p><p>采样率的第二个考虑因素是它是否稳定。包括智能手表在内的许多设备可以同时执行许多操作。他们运行的操作系统除了测量心率外还有其他任务，因此当以 10Hz 进行测量时，操作系统可能不会每 100 毫秒就准备好进行一次测量。因此，采样率可能会有所不同。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-comment">#let&#x27;s create a list &#x27;newtimer&#x27; to house our datetime objects</span>newtimer = [datetime.strptime(x, <span class="hljs-string">&#x27;%H:%M:%S.%f&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> timer]<span class="hljs-comment">#let&#x27;s compute the real distances from entry to entry</span>elapsed = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(newtimer) - <span class="hljs-number">1</span>):    elapsed.append(<span class="hljs-number">1</span> / ((newtimer[i+<span class="hljs-number">1</span>] - newtimer[i]).microseconds / <span class="hljs-number">1000000</span>))<span class="hljs-comment">#and plot the results</span>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))plt.plot(elapsed)plt.xlabel(<span class="hljs-string">&#x27;Sample number&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;Actual sampling rate in Hz&#x27;</span>)plt.show()<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mean sampling rate: %.3f&#x27;</span> %np.mean(elapsed))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;median sampling rate: %.3f&#x27;</span>%np.median(elapsed))<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;standard deviation: %.3f&#x27;</span>%np.std(elapsed))</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit9.png"></p><div class="code-wrapper"><pre><code class="hljs json">mean sampling rate<span class="hljs-punctuation">:</span> <span class="hljs-number">9.987</span>median sampling rate<span class="hljs-punctuation">:</span> <span class="hljs-number">10.000</span>standard deviation<span class="hljs-punctuation">:</span> <span class="hljs-number">0.183</span></code></pre></div><p>信号均值接近 10Hz，并且方差较低。 偶尔出现 12Hz 的峰值或 9Hz 的下降表明计时器不准确，但这种情况并不常见。</p><p>对于我们当前的目的来说，这已经足够了。</p><p>当然，您可以对信号进行插值和重新采样，使其具有精确的采样率，但对计算测量的影响可能很小。 </p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心率</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「文档翻译」HeartPy - Python Heart Rate Analysis Toolkit I</title>
    <link href="/2023/11/06/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit%20I/"/>
    <url>/2023/11/06/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit%20I/</url>
    
    <content type="html"><![CDATA[<p>文档地址<a href="https://github.com/paulvangentcom/heartrate_analysis_python#heartpy---python-heart-rate-analysis-toolkit">HeartPy - Python Heart Rate Analysis Toolkit</a></p><h1 id="HeartPy-Python-心率分析工具包"><a href="#HeartPy-Python-心率分析工具包" class="headerlink" title="HeartPy - Python 心率分析工具包"></a>HeartPy - Python 心率分析工具包</h1><p>欢迎使用 HeartPy，Python 心率分析工具包的文档。该工具包旨在处理使用 PPG 数据。</p><ul><li>该工具包是在海牙举行的 Humanist 2018 会议上展示的（<a href="https://www.researchgate.net/publication/325967542_Heart_Rate_Analysis_for_Human_Factors_Development_and_Validation_of_an_Open_Source_Toolkit_for_Noisy_Naturalistic_Heart_Rate_Data">请参阅此处的论文</a>）。</li><li>有关该功能的技术论文<a href="http://doi.org/10.13140/RG.2.2.24895.56485">可在此处获得</a>；</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>如果您正在寻找一些有关如何开始使用 HeartPy 的动手示例，请查看以下链接！这些笔记本展示了如何使用 HeartPy 处理各种分析任务，包括智能手表数据、智能戒指数据、常规 PPG 和常规（非常嘈杂）心电图。笔记本有时无法通过 github 引擎呈现，因此要么在本地打开它们，要么使用 <a href="https://nbviewer.jupyter.org/">nbviewer</a> 之类的在线查看器。</p><p>我们建议您按以下顺序阅读笔记：</p><ul><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/1_regular_PPG/Analysing_a_PPG_signal.ipynb">1. 分析光电容积描记（PPG）信号</a>，一个使用内置示例开始使用 HeartPy 的笔记。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/1_regular_ECG/Analysing_a_regular_ECG_signal.ipynb">2. 分析心电图（ECG）信号</a>，用于处理 HeartPy 和典型心电图数据的笔记。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/3_smartwatch_data/Analysing_Smartwatch_Data.ipynb">3. Analyzing smartwatch data</a>，一个分析智能手表低分辨率 PPG 数据的笔记。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/smartring_data/Analysing_Smart_Ring_Data.ipynb">4. 智能环数据分析</a>，一个分析智能环 PPG 数据的笔记本。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/noisy_ECG/Analysing_Noisy_ECG.ipynb">5. 分析嘈杂的心电图数据</a>，使用来自 MIT-BIH 噪声的数据处理非常嘈杂的心电图数据的高级笔记压力测试数据。</li><li><a href="https://github.com/paulvangentcom/heartrate_analysis_python/blob/master/examples/6_colorblind_mode/Colorblind_mode.ipynb">6. Colorblind mode - How To and Styles</a></li></ul><h3 id="示例1-分析-PPG-信号"><a href="#示例1-分析-PPG-信号" class="headerlink" title="示例1.分析 PPG 信号"></a>示例1.分析 PPG 信号</h3><p>本笔记适合那些不了解 HeartPy 的人。 它包含一些可用 API 的简单示例。</p><p>在本笔记中，我们将介绍如何使用 HeartPy 分析常规 PPG 信号。</p><p>为此，我们将使用与 HeartPy 一起打包的示例数据集。</p><p>HeartPy 附带一个函数 <code>load_exampledata()</code> 可以加载提供的数据集。 </p><p>0：一个短的、非常干净的 PPG 信号，以 100.0 Hz 采样<br>1：稍长（约 2 分钟）的 PPG 信号，前三分之一丢失信号，其余信号出现随机噪声尖峰<br>2：在驾驶模拟器中驾驶时使用食指上的脉冲传感器和 Arduino 记录的长（约 11.5 分钟）PPG 信号</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#First let&#x27;s import</span><span class="hljs-keyword">import</span> heartpy <span class="hljs-keyword">as</span> hp<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment">#first let&#x27;s load the clean PPG signal</span>data, timer = hp.load_exampledata(<span class="hljs-number">0</span>)<span class="hljs-comment">#and visualise</span>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))plt.plot(data)plt.show()</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit1.png"></p><p>运行 <code>hp.process()</code> 时，会返回两个字典：working_data（包含您可能想要访问的工作数据，例如峰值位置和峰峰值间隔）和 measures（包含计算的输出测量值）。</p><p>在文档中，我们将它们缩写为「wd」和「m」。</p><p>现在您可能想要可视化分析结果。</p><p>Heartpy 附带了一个函数 <code>hp.plotter(wd, m)</code> 来完成此操作。该函数要求为其提供工作数据和测量字典。</p><p>如果在调用 <code>hp.plotter(wd, m)</code> 之前向 matplotlib 指定图形大小等参数，则将使用指定的图形大小。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#run the analysis</span>wd, m = hp.process(data, sample_rate = <span class="hljs-number">100.0</span>)<span class="hljs-comment">#set large figure</span>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))<span class="hljs-comment">#call plotter</span>hp.plotter(wd, m)<span class="hljs-comment">#display measures computed</span><span class="hljs-keyword">for</span> measure <span class="hljs-keyword">in</span> m.keys():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %f&#x27;</span> %(measure, m[measure]))</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit2.png"></p><div class="code-wrapper"><pre><code class="hljs json">bpm<span class="hljs-punctuation">:</span> <span class="hljs-number">58.898848</span>ibi<span class="hljs-punctuation">:</span> <span class="hljs-number">1018.695652</span>sdnn<span class="hljs-punctuation">:</span> <span class="hljs-number">65.760061</span>sdsd<span class="hljs-punctuation">:</span> <span class="hljs-number">34.866925</span>rmssd<span class="hljs-punctuation">:</span> <span class="hljs-number">64.737231</span>pnn20<span class="hljs-punctuation">:</span> <span class="hljs-number">0.863636</span>pnn50<span class="hljs-punctuation">:</span> <span class="hljs-number">0.409091</span>hr_mad<span class="hljs-punctuation">:</span> <span class="hljs-number">40.000000</span>sd1<span class="hljs-punctuation">:</span> <span class="hljs-number">45.758077</span>sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">82.926832</span>s<span class="hljs-punctuation">:</span> <span class="hljs-number">11921.000816</span>sd1/sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">0.551789</span>breathingrate<span class="hljs-punctuation">:</span> <span class="hljs-number">0.161095</span></code></pre></div><p>That looks nice, and we ran into no problems.</p><p>Let’s move on to the second included dataset and explore it first:</p><div class="code-wrapper"><pre><code class="hljs python">data, timer = hp.load_exampledata(<span class="hljs-number">1</span>)plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))plt.plot(data)plt.show()</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit3.png"></p><p>这是故意制作的一个更棘手的信号。一开始没有信号。信号开始后，当在记录时用力移动传感器时，会出现一些噪音尖峰。这模仿了在野外录制时可能发生的情况，以及参与者移动并意外拉动传感器电缆时可能发生的情况。</p><p>HeartPy 旨在开箱即用地处理此类事情。 我们先看一下例子：</p><div class="code-wrapper"><pre><code class="hljs python">sample_rate = hp.get_samplerate_mstimer(timer)wd, m = hp.process(data, sample_rate)<span class="hljs-comment">#plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))hp.plotter(wd, m)<span class="hljs-comment">#display measures computed</span><span class="hljs-keyword">for</span> measure <span class="hljs-keyword">in</span> m.keys():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %f&#x27;</span> %(measure, m[measure]))</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit4.png"></p><div class="code-wrapper"><pre><code class="hljs json">bpm<span class="hljs-punctuation">:</span> <span class="hljs-number">62.376304</span>ibi<span class="hljs-punctuation">:</span> <span class="hljs-number">961.903744</span>sdnn<span class="hljs-punctuation">:</span> <span class="hljs-number">64.613519</span>sdsd<span class="hljs-punctuation">:</span> <span class="hljs-number">29.871930</span>rmssd<span class="hljs-punctuation">:</span> <span class="hljs-number">57.069746</span>pnn20<span class="hljs-punctuation">:</span> <span class="hljs-number">0.797297</span>pnn50<span class="hljs-punctuation">:</span> <span class="hljs-number">0.486486</span>hr_mad<span class="hljs-punctuation">:</span> <span class="hljs-number">47.010333</span>sd1<span class="hljs-punctuation">:</span> <span class="hljs-number">40.344402</span>sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">81.621935</span>s<span class="hljs-punctuation">:</span> <span class="hljs-number">10345.227446</span>sd1/sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">0.494284</span>breathingrate<span class="hljs-punctuation">:</span> <span class="hljs-number">0.155994</span></code></pre></div><p>请注意，我们从计时器列计算了 sample_rate（以毫秒为单位）。这一点很重要，因为我们不知道信号的采样率是多少。所有测量都取决于了解采样率。</p><p>HeartPy 附带两个函数：<code>hp.get_samplerate_mstimer()</code>，用于基于 ms 计时器计算采样率；<code>hp.get_samplerate_datetime()</code>，用于基于日期时间值中的列计算 sample_rate。</p><p>您之前已经了解了我们如何使用 mstimer，现在让我们看一下使用日期时间字符串对时间进行编码的野外记录：</p><div class="code-wrapper"><pre><code class="hljs python">data, timer = hp.load_exampledata(<span class="hljs-number">2</span>)<span class="hljs-built_in">print</span>(timer[<span class="hljs-number">0</span>])</code></pre></div><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-number">2016</span><span class="hljs-number">-11</span><span class="hljs-number">-24</span> <span class="hljs-number">13</span><span class="hljs-punctuation">:</span><span class="hljs-number">58</span><span class="hljs-punctuation">:</span><span class="hljs-number">58.081000</span></code></pre></div><p>When computing the sample rate we need to give <code>get_samplerate_datetime()</code> the format of the string (by default it expects HH:MM:SS.ms):</p><div class="code-wrapper"><pre><code class="hljs python">sample_rate = hp.get_samplerate_datetime(timer, timeformat=<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sample rate is: %f Hz&#x27;</span> %sample_rate)</code></pre></div><div class="code-wrapper"><pre><code class="hljs json">sample rate is<span class="hljs-punctuation">:</span> <span class="hljs-number">100.419711</span> Hz</code></pre></div><p>Now that we know all that, running the analysis is the same as before:</p><div class="code-wrapper"><pre><code class="hljs python">wd, m = hp.process(data, sample_rate, report_time = <span class="hljs-literal">True</span>)<span class="hljs-comment">#plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))hp.plotter(wd, m)<span class="hljs-comment">#let&#x27;s zoom in on a bit</span>plt.figure(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>))plt.xlim(<span class="hljs-number">20000</span>, <span class="hljs-number">30000</span>)hp.plotter(wd, m)<span class="hljs-comment">#display measures computed</span><span class="hljs-keyword">for</span> measure <span class="hljs-keyword">in</span> m.keys():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %f&#x27;</span> %(measure, m[measure]))</code></pre></div><div class="code-wrapper"><pre><code class="hljs json">Finished in <span class="hljs-number">0.248689</span> sec</code></pre></div><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E3%80%8C%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E3%80%8DHeartPy-Python-Heart-Rate-Analysis-Toolkit5.png"></p><p>![](&#x2F;Users&#x2F;bakako&#x2F;Library&#x2F;Mobile Documents&#x2F;com<del>apple</del>CloudDocs&#x2F;blog&#x2F;图&#x2F;「文档翻译」HeartPy-Python-Heart-Rate-Analysis-Toolkit&#x2F;「文档翻译」HeartPy-Python-Heart-Rate-Analysis-Toolkit6.png)</p><div class="code-wrapper"><pre><code class="hljs json">bpm<span class="hljs-punctuation">:</span> <span class="hljs-number">97.325149</span>ibi<span class="hljs-punctuation">:</span> <span class="hljs-number">616.490194</span>sdnn<span class="hljs-punctuation">:</span> <span class="hljs-number">57.916589</span>sdsd<span class="hljs-punctuation">:</span> <span class="hljs-number">30.173744</span>rmssd<span class="hljs-punctuation">:</span> <span class="hljs-number">38.181375</span>pnn20<span class="hljs-punctuation">:</span> <span class="hljs-number">0.320281</span>pnn50<span class="hljs-punctuation">:</span> <span class="hljs-number">0.086345</span>hr_mad<span class="hljs-punctuation">:</span> <span class="hljs-number">29.874613</span>sd1<span class="hljs-punctuation">:</span> <span class="hljs-number">26.997110</span>sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">75.178572</span>s<span class="hljs-punctuation">:</span> <span class="hljs-number">6376.189507</span>sd1/sd2<span class="hljs-punctuation">:</span> <span class="hljs-number">0.359106</span>breathingrate<span class="hljs-punctuation">:</span> <span class="hljs-number">0.258103</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心率</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 在使用 curve_fit 拟合函数时，报错OptimizeWarning: Covariance of the parameters could not be estimated</title>
    <link href="/2023/11/06/Python-%E5%9C%A8%E4%BD%BF%E7%94%A8-curve-fit-%E6%8B%9F%E5%90%88%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8A%A5%E9%94%99OptimizeWarning-Covariance-of-the-parameters-could-not-be-estimated/"/>
    <url>/2023/11/06/Python-%E5%9C%A8%E4%BD%BF%E7%94%A8-curve-fit-%E6%8B%9F%E5%90%88%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E6%8A%A5%E9%94%99OptimizeWarning-Covariance-of-the-parameters-could-not-be-estimated/</url>
    
    <content type="html"><![CDATA[<p>在使用 Scipy 函数进行曲线拟合时遇到这个问题，协方差矩阵无法正确求出，均为Inf。</p><p><strong>解决方案为给拟合的参数定义一个边界：</strong></p><p>scipy.optimize.curve_fit 是一个用于拟合曲线的函数。它可以帮助我们通过拟合数据点来得到一个函数模型，以便我们能够使用这个模型进行预测和分析。</p><p>在某些情况下，我们希望通过对函数参数设置边界来控制拟合结果。这时我们可以使用 curve_fit 函数中的 bounds 参数。</p><p>bounds 参数是一个元组，用于指定每个参数的下限和上限。如果一个参数没有边界限制，可以将其设置为负无穷或正无穷。</p><p>以下是一个使用 bounds 参数的示例代码：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> curve_fit<span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, a, b, c</span>):    <span class="hljs-keyword">return</span> a * np.exp(-b * x) + c<span class="hljs-comment"># 创建模拟数据</span>xdata = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">50</span>)y = func(xdata, <span class="hljs-number">2.5</span>, <span class="hljs-number">1.3</span>, <span class="hljs-number">0.5</span>)ydata = y + <span class="hljs-number">0.2</span> * np.random.normal(size=<span class="hljs-built_in">len</span>(xdata))<span class="hljs-comment"># 设置参数边界</span>bounds = ([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [np.inf, np.inf, np.inf])<span class="hljs-comment"># 使用curve_fit拟合数据</span>popt, pcov = curve_fit(func, xdata, ydata, bounds=bounds)<span class="hljs-comment"># 打印拟合结果</span><span class="hljs-built_in">print</span>(popt)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无氧储备(AWC/ARC)和临界功率(CP/CV)</title>
    <link href="/2023/10/30/%E6%97%A0%E6%B0%A7%E5%82%A8%E5%A4%87-AWC-ARC-%E5%92%8C%E4%B8%B4%E7%95%8C%E5%8A%9F%E7%8E%87-CP-CV/"/>
    <url>/2023/10/30/%E6%97%A0%E6%B0%A7%E5%82%A8%E5%A4%87-AWC-ARC-%E5%92%8C%E4%B8%B4%E7%95%8C%E5%8A%9F%E7%8E%87-CP-CV/</url>
    
    <content type="html"><![CDATA[<p>在可以测得功率的时候，一般采用：</p><ul><li>无氧储备 AWC，单位是 J；</li><li>临界功率 CP，单位是 W。</li></ul><p>若无法测得功率，或者像跑步一样可以用速度来代替功率，则可以采用：</p><ul><li>无氧储备 ARC，单位是 m；</li><li>临界速度 CV，单位是 m&#x2F;s。</li></ul><p>具体资料可参考：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/619952272">临界功率和无氧储备：你的血槽</a>;</li><li><a href="https://zhuanlan.zhihu.com/p/448008831">自行车功率训练中的临界功率的概念与应用</a>；</li><li><a href="https://www.exphyslab.com/cp">Critical Power App</a>;</li><li><a href="https://uiantraininglog.blogspot.com/2020/02/critical-power.html">跑步臨界功率 － Critical Power</a>;</li><li><a href="https://uiantraininglog.blogspot.com/2018/03/ftp.html">跑步功率最重要的數據：找出自己的臨界功率</a>;</li><li><a href="http://www.epsport.net/epsport/week/show.asp?repno=509&page=1">無氧速度儲備 (anaerobic speed reserve)</a>;</li><li><a href="http://www.epsport.net/epsport/week/show2020.asp?repno=402&page=2">臨界速度的測量</a>;</li><li><a href="http://www.epsport.net/epsport/week/show2020.asp?repno=357&page=3">ARC、Vmax–跑步無氧運動能力指標</a>.</li></ol>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 给出具体函数形式，求函数各项系数</title>
    <link href="/2023/10/30/python-%E7%BB%99%E5%87%BA%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F%EF%BC%8C%E6%B1%82%E5%87%BD%E6%95%B0%E5%90%84%E9%A1%B9%E7%B3%BB%E6%95%B0/"/>
    <url>/2023/10/30/python-%E7%BB%99%E5%87%BA%E5%85%B7%E4%BD%93%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F%EF%BC%8C%E6%B1%82%E5%87%BD%E6%95%B0%E5%90%84%E9%A1%B9%E7%B3%BB%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">##使用curve_fit</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> curve_fit <span class="hljs-comment">#自定义函数 e指数形式</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, a, b,c</span>):  <span class="hljs-keyword">return</span> a*np.sqrt(x)*(b*np.square(x)+c) <span class="hljs-comment">#定义x、y散点坐标</span>x = [<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">60</span>,<span class="hljs-number">70</span>]x = np.array(x)num = [<span class="hljs-number">453</span>,<span class="hljs-number">482</span>,<span class="hljs-number">503</span>,<span class="hljs-number">508</span>,<span class="hljs-number">498</span>,<span class="hljs-number">479</span>]y = np.array(num) <span class="hljs-comment">#非线性最小二乘法拟合</span>popt, pcov = curve_fit(func, x, y)<span class="hljs-comment">#获取popt里面是拟合系数</span><span class="hljs-built_in">print</span>(popt)a = popt[<span class="hljs-number">0</span>] b = popt[<span class="hljs-number">1</span>]c = popt[<span class="hljs-number">2</span>]yvals = func(x,a,b,c) <span class="hljs-comment">#拟合y值</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;popt:&#x27;</span>, popt)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数a:&#x27;</span>, a)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数b:&#x27;</span>, b)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数c:&#x27;</span>, c)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数pcov:&#x27;</span>, pcov)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系数yvals:&#x27;</span>, yvals)<span class="hljs-comment">#绘图</span>plot1 = plt.plot(x, y, <span class="hljs-string">&#x27;s&#x27;</span>,label=<span class="hljs-string">&#x27;original values&#x27;</span>)plot2 = plt.plot(x, yvals, <span class="hljs-string">&#x27;r&#x27;</span>,label=<span class="hljs-string">&#x27;polyfit values&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)plt.legend(loc=<span class="hljs-number">4</span>) <span class="hljs-comment">#指定legend的位置右下角</span>plt.title(<span class="hljs-string">&#x27;curve_fit&#x27;</span>)plt.show()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoreData 报错 Failed to call designated initializer on NSManagedObject class</title>
    <link href="/2023/10/10/CoreData-%E6%8A%A5%E9%94%99-Failed-to-call-designated-initializer-on-NSManagedObject-class/"/>
    <url>/2023/10/10/CoreData-%E6%8A%A5%E9%94%99-Failed-to-call-designated-initializer-on-NSManagedObject-class/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://stackoverflow.com/questions/33301250/resolving-failed-to-call-designated-initializer-on-nsmanagedobject-class">Resolving ‘Failed to call designated initializer on NSManagedObject class’</a></li></ul><p>The problem lies not in the code in your question, but in the snippet you included as comments to the other answer:</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> currentCourse <span class="hljs-operator">=</span> <span class="hljs-type">Course</span>()</code></pre></div><p>This doesn’t just declare <code>currentCourse</code> to be of type <code>Course</code>, it also creates an instance of the <code>Course</code> entity using the standard <code>init</code> method. This is expressly not allowed: You must use the designated initialiser: <code>init(entity entity: NSEntityDescription, insertIntoManagedObjectContext context: NSManagedObjectContext?)</code>. This is described in the Apple Documentation <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObject_Class/index.html#//apple_ref/doc/uid/TP30001171-SW7">here</a>.</p><p>I suspect you do not ever use the instance created by the above var definition, so just define it as being of type <code>Course?</code>:</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> currentCourse : <span class="hljs-type">Course</span>?</code></pre></div><p>Since it is optional, you do not need to set an initial value, though you will need to unwrap the value whenever it is used.</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CoreData 删除数据时 SwiftUI 崩溃</title>
    <link href="/2023/10/10/CoreData-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%97%B6-SwiftUI-%E5%B4%A9%E6%BA%83/"/>
    <url>/2023/10/10/CoreData-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E6%97%B6-SwiftUI-%E5%B4%A9%E6%BA%83/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://stackoverflow.com/questions/60604658/crash-when-delete-a-record-from-coredata-in-swiftui">Crash when delete a record from coredata in SwiftUI</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 汉字转码</title>
    <link href="/2023/10/10/Swift-%E6%B1%89%E5%AD%97%E8%BD%AC%E7%A0%81/"/>
    <url>/2023/10/10/Swift-%E6%B1%89%E5%AD%97%E8%BD%AC%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="汉字转码"><a href="#汉字转码" class="headerlink" title="汉字转码"></a>汉字转码</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> <span class="hljs-type">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.baidu.com/s?wd=点个赞吧&quot;</span><span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> str.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)<span class="hljs-built_in">print</span>(result)</code></pre></div><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> <span class="hljs-type">URL</span> <span class="hljs-operator">=</span> result<span class="hljs-operator">?</span>.removingPercentEncoding<span class="hljs-built_in">print</span>(<span class="hljs-type">URL</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwiftUI 隐藏键盘</title>
    <link href="/2023/10/06/SwiftUI-%E9%9A%90%E8%97%8F%E9%94%AE%E7%9B%98/"/>
    <url>/2023/10/06/SwiftUI-%E9%9A%90%E8%97%8F%E9%94%AE%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://stackoverflow.com/questions/56491386/how-to-hide-keyboard-when-using-swiftui">How to hide keyboard when using SwiftUI?</a>;</li><li><a href="https://stackoverflow.com/questions/703754/how-to-dismiss-keyboard-for-uitextview-with-return-key">How to dismiss keyboard for UITextView with return key?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 创建可以自动停止的 Timer</title>
    <link href="/2023/10/06/Swift-%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%81%9C%E6%AD%A2%E7%9A%84-Timer/"/>
    <url>/2023/10/06/Swift-%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%81%9C%E6%AD%A2%E7%9A%84-Timer/</url>
    
    <content type="html"><![CDATA[<h3 id="在离开页面时停止-Timer"><a href="#在离开页面时停止-Timer" class="headerlink" title="在离开页面时停止 Timer"></a>在离开页面时停止 Timer</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimerView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> timer: <span class="hljs-type">Timer</span>?    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> &#123;            <span class="hljs-type">Image</span>(<span class="hljs-string">&quot;pic&quot;</span>)            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(number)</span>&quot;</span>)                .font(.largeTitle)        &#125;        .onAppear &#123;            <span class="hljs-keyword">self</span>.timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.scheduledTimer(withTimeInterval: <span class="hljs-number">1</span>, repeats: <span class="hljs-literal">true</span>) &#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span>                <span class="hljs-keyword">self</span>.number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>                <span class="hljs-built_in">print</span>(<span class="hljs-keyword">self</span>.number)                            &#125;        &#125;        .onDisappear &#123;            <span class="hljs-keyword">self</span>.timer<span class="hljs-operator">?</span>.invalidate()        &#125;    &#125;&#125;</code></pre></div><h3 id="使用-Combine-提供的-timer-publisher"><a href="#使用-Combine-提供的-timer-publisher" class="headerlink" title="使用 Combine 提供的 timer publisher"></a>使用 Combine 提供的 timer publisher</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">import</span> Combine<span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimerView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-keyword">let</span> timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">1</span>, on: .main, in: .common).autoconnect()    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> &#123;            <span class="hljs-type">Image</span>(<span class="hljs-string">&quot;pic&quot;</span>)            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(number)</span>&quot;</span>)                .font(.largeTitle)        &#125;        .onReceive(timer, perform: &#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span>             <span class="hljs-keyword">self</span>.number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>             <span class="hljs-built_in">print</span>(<span class="hljs-keyword">self</span>.number)        &#125;)    &#125;&#125;</code></pre></div><p>combine 扩充了 timer 的功能，我们可以直接产生 timer 的 publisher，让它定时发送 value。在此我们设定它每秒触发一次。</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">1</span>, on: .main, in: .common).autoconnect()</code></pre></div><p>由于 timer 的 publisher 必须先连接才能发送 value 的 publisher，所以我们调用 autoconnect，让它可以自动连接，方便之后接收 timer 发送的 value。</p><p>在 view 上调用 onReceive(_:perform:)，传入 publisher timer，接收 timer 每秒发送的 value，perform 传入 timer 定時触发的 closure 。</p><div class="code-wrapper"><pre><code class="hljs swift">.onReceive(timer, perform: &#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span>             <span class="hljs-keyword">self</span>.number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>             <span class="hljs-built_in">print</span>(<span class="hljs-keyword">self</span>.number)&#125;)</code></pre></div><p>使用 onReceive(_:perform:) 定义 timer 触发的 closure 有特別的好处，当 SwiftUI view 关闭后，timer 也会自动停止，不用另外调用 invalidate。</p><h4 id="timer-publisher-发送的-value-是时间"><a href="#timer-publisher-发送的-value-是时间" class="headerlink" title="timer publisher 发送的 value 是时间"></a>timer publisher 发送的 value 是时间</h4><p>timer publisher 的类型是 TimerPublisher，从它的定义我们发现它发送的 value 类型是 Date，因此以下例子打印的 value 是 timer 触发的时间。</p><div class="code-wrapper"><pre><code class="hljs swift">.onReceive(timer, perform: &#123; (value) <span class="hljs-keyword">in</span>    <span class="hljs-built_in">print</span>(value)&#125;)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pygraph 无法实时刷新图表</title>
    <link href="/2023/10/06/pygraph-%E6%97%A0%E6%B3%95%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E5%9B%BE%E8%A1%A8/"/>
    <url>/2023/10/06/pygraph-%E6%97%A0%E6%B3%95%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E5%9B%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> serial<span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QWidget<span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer<span class="hljs-keyword">import</span> pyqtgraph <span class="hljs-keyword">as</span> pg<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, port, baud</span>):        <span class="hljs-built_in">super</span>(Window, self).__init__()        self.roll_plot = pg.PlotWidget()        self.ser = serial.Serial(port, baud, timeout=<span class="hljs-number">1</span>)        self.roll_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;Flow L/min&#x27;</span>)        self.roll_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time s&#x27;</span>)        self.roll_curve = self.roll_plot.plot(pen=<span class="hljs-string">&#x27;r&#x27;</span>)        win_size = <span class="hljs-number">50</span>  <span class="hljs-comment"># 5s</span>        self.roll_x = np.zeros(win_size)        self.roll_y = np.zeros(win_size)        layout = QVBoxLayout()        layout.addWidget(self.roll_plot)                self.central_widget = QWidget()        self.central_widget.setLayout(layout)        self.setCentralWidget(self.central_widget)        self.thread = Sensor(self.ser, self.roll_x, self.roll_y, self.roll_curve)        self.thread.start()<span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span>(<span class="hljs-title class_ inherited__">QThread</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ser, roll_x, roll_y, roll_curve</span>):        <span class="hljs-built_in">super</span>(Sensor, self).__init__()        self.ser = ser        self.roll_x = roll_x        self.roll_y = roll_y        self.roll_curve = roll_curve    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            self.update_flow()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_flow</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">try</span>:            sensor_value = self.ser.readline()            value = <span class="hljs-built_in">float</span>(sensor_value)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            value = <span class="hljs-number">0.0</span>            <span class="hljs-built_in">print</span>(e)        self.roll_x[:-<span class="hljs-number">1</span>] = self.roll_x[<span class="hljs-number">1</span>:]        self.roll_y[:-<span class="hljs-number">1</span>] = self.roll_y[<span class="hljs-number">1</span>:]        self.roll_x[-<span class="hljs-number">1</span>] = self.roll_x[-<span class="hljs-number">2</span>] + <span class="hljs-number">0.1</span>        self.roll_y[-<span class="hljs-number">1</span>] = value        <span class="hljs-comment"># 这里的做法是在 Sensor 线程中调用 setData 刷新图表</span>        <span class="hljs-comment"># 但问题是在程序运行一段时间后，图表不会自动刷新</span>        self.roll_curve.setData(self.roll_x, self.roll_y)        <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    app = QApplication(sys.argv)    flow_win = Window(<span class="hljs-string">&#x27;/dev/tty.usbmodem1301&#x27;</span>, <span class="hljs-number">115200</span>)    flow_win.show()    sys.exit(app.exec_())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre></div><p>图表不会自动刷新的原因是 setData 必须在主线程中运行！</p><p>修改为 <strong>Sensor 线程用于采集数据，主线程用来刷新图表</strong>:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> serial<span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication, QVBoxLayout, QWidget<span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer<span class="hljs-keyword">import</span> pyqtgraph <span class="hljs-keyword">as</span> pg<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, port, baud</span>):        <span class="hljs-built_in">super</span>(Window, self).__init__()        self.roll_plot = pg.PlotWidget()        self.ser = serial.Serial(port, baud, timeout=<span class="hljs-number">1</span>)        self.roll_plot.setLabel(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;Flow L/min&#x27;</span>)        self.roll_plot.setLabel(<span class="hljs-string">&#x27;bottom&#x27;</span>, <span class="hljs-string">&#x27;Time s&#x27;</span>)        self.roll_curve = self.roll_plot.plot(pen=<span class="hljs-string">&#x27;r&#x27;</span>)        win_size = <span class="hljs-number">50</span>  <span class="hljs-comment"># 5s</span>        self.roll_x = np.zeros(win_size)        self.roll_y = np.zeros(win_size)        layout = QVBoxLayout()        layout.addWidget(self.roll_plot)        self.central_widget = QWidget()        self.central_widget.setLayout(layout)        self.setCentralWidget(self.central_widget)        <span class="hljs-comment"># 仅采集数据</span>        self.thread = Sensor(self.ser, self.roll_x, self.roll_y)        self.thread.start()        <span class="hljs-comment"># 100ms 刷新一次图表</span>        self.timer = QTimer()        self.timer.timeout.connect(<span class="hljs-keyword">lambda</span>: self.plot_data())        self.timer.start(<span class="hljs-number">100</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_data</span>(<span class="hljs-params">self</span>):        self.roll_curve.setData(self.roll_x, self.roll_y)<span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span>(<span class="hljs-title class_ inherited__">QThread</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ser, roll_x, roll_y</span>):        <span class="hljs-built_in">super</span>(Sensor, self).__init__()        self.ser = ser        self.roll_x = roll_x        self.roll_y = roll_y    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            self.update_flow()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_flow</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">try</span>:            sensor_value = self.ser.readline()            value = <span class="hljs-built_in">float</span>(sensor_value)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            value = <span class="hljs-number">0.0</span>            <span class="hljs-built_in">print</span>(e)        self.roll_x[:-<span class="hljs-number">1</span>] = self.roll_x[<span class="hljs-number">1</span>:]        self.roll_y[:-<span class="hljs-number">1</span>] = self.roll_y[<span class="hljs-number">1</span>:]        self.roll_x[-<span class="hljs-number">1</span>] = self.roll_x[-<span class="hljs-number">2</span>] + <span class="hljs-number">0.1</span>        self.roll_y[-<span class="hljs-number">1</span>] = value<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():    app = QApplication(sys.argv)    flow_win = Window(<span class="hljs-string">&#x27;/dev/tty.usbmodem1301&#x27;</span>, <span class="hljs-number">115200</span>)    flow_win.show()    sys.exit(app.exec_())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yoyo 间歇恢复测试</title>
    <link href="/2023/10/05/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/10/05/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-测试规则"><a href="#1-测试规则" class="headerlink" title="1.测试规则"></a>1.测试规则</h3><p>具体实施可参考视频：</p><ol><li><a href="https://www.bilibili.com/video/BV1gx411f7Gi/?spm_id_from=333.337.search-card.all.click&vd_source=e6f379136d38211008ce7d13802d4571">马竞新赛季YOYO体能测试，看看谁坚持到了最后？_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1vV411f7KU/?spm_id_from=333.788.recommend_more_video.1&vd_source=e6f379136d38211008ce7d13802d4571">yoyo间歇跑测试背景音 Yo-Yo Intermittent _ Beep Test_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1Po4y1D7E3/?spm_id_from=333.788.recommend_more_video.-1&vd_source=e6f379136d38211008ce7d13802d4571">Yo-Yo Intermittent Recovery Test - UP COACH_哔哩哔哩_bilibili</a></li></ol><p>理论上说，yoyo 测试是测量个体有氧能力的有效可靠预测指标。</p><p>但实际上，在前提<strong>统一标准</strong>的前提下，yoyo 测试更多是用来进行个体历史成绩的纵向对比，以及多个体间的横向对比。</p><p>通过 yoyo 测试估算 VO2max 意义不大，可以认为 yoyo 测试为定性测试（给一个评分）而不是定量测试。</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p>yoyo测试有三种变体：</p><ol><li>YYIR1<ul><li>针对年轻或休闲运动员，起始速度为 10km&#x2F;hr。</li></ul></li><li>YYIR2<ul><li>针对精英和专业运动员，起始速度为 13km&#x2F;hr。</li></ul></li><li>亚最大 yoyo 测试<ul><li>用于监测比赛期间、康复期间或难以进行最大测试的个体的表现。</li></ul></li></ol><p>在进行测试时，不一定非要按这三个变体执行。可参考<a href="https://www.bilibili.com/video/BV1gx411f7Gi/?spm_id_from=333.337.search-card.all.click&vd_source=e6f379136d38211008ce7d13802d4571">马竞新赛季YOYO体能测试，看看谁坚持到了最后？_哔哩哔哩_bilibili</a></p><h3 id="3-测试执行（标准情况）"><a href="#3-测试执行（标准情况）" class="headerlink" title="3.测试执行（标准情况）"></a>3.测试执行（标准情况）</h3><p>尽量保证环境、设施一致。</p><h4 id="3-1-所需设备"><a href="#3-1-所需设备" class="headerlink" title="3.1.所需设备"></a>3.1.所需设备</h4><ul><li>设施——一致、平坦、防滑（最小长度30m）</li><li>标记锥体</li><li>卷尺（&gt;30m）</li><li>YYIR 测试音频 CD 或 MP3</li><li>带扬声器的CD或MP3播放器（扬声器的音量尤为重要）</li><li>记录完成的往返次数的裁判员</li></ul><h4 id="3-2-测试程序"><a href="#3-2-测试程序" class="headerlink" title="3.2.测试程序"></a>3.2.测试程序</h4><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%951.png"></p><ol><li>参与者从锥体 B 开始测试；</li><li>蜂鸣信号（信号 1）发出后，倒计时 1 启动，参与者从锥体 B 出发，跑向锥体 C。必须在下一个蜂鸣信号（信号 2）发出之前，也就是倒计时 1 结束结束之前到达锥体 C；</li><li>到达锥体 C 后，等待信号（信号 2）发出。信号 2 发出后，倒计时 2 启动。必须在下一个信号（信号 3）发出之前，也就是倒计时 2 结束之前返回锥体 B；</li><li>返回后，参与者将有 10 秒的恢复时间，在此期间他们的活动范围必须在圆锥体 B 和圆锥体 A 之间；</li><li>重复以上。</li></ol><h4 id="3-3-失败条件"><a href="#3-3-失败条件" class="headerlink" title="3.3.失败条件"></a>3.3.失败条件</h4><ol><li>抢跑必须返回起点线重新开始这次折返跑，否则取消测试资格。但实际执行起来，如果不是特别明显则不会记录；</li><li><strong>如果个人未能在分配的时间内到达圆锥体 B 或 C，则会给予一次警告（黄牌）。两黄变一红则视为测试结束。</strong><ol><li><strong>在获得警告后，个人仍必须抵达锥体 B 或 C，否则取消测试资格。也就是必须是 B→C→B→C→B….，不可以出现 B→B 或者 C→C 的情况。</strong></li></ol></li></ol><h3 id="4-评分系统"><a href="#4-评分系统" class="headerlink" title="4.评分系统"></a>4.评分系统</h3><p>取参与者红牌罚下前完成的级别作为成绩。</p><h4 id="4-1-评分格式"><a href="#4-1-评分格式" class="headerlink" title="4.1.评分格式"></a>4.1.评分格式</h4><p>一般评分格式会采用：</p><p>YYIR1-13.1</p><ol><li>YYIR1 为参与者当前参与 yoyo 测试的类型；</li><li>13 为参与者失败前完成的速度等级；</li><li>1 为参与者失败前完成速度等级的往返次数；</li></ol><h4 id="4-2-评分参考"><a href="#4-2-评分参考" class="headerlink" title="4.2.评分参考"></a>4.2.评分参考</h4><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/yoyo-%E9%97%B4%E6%AD%87%E6%81%A2%E5%A4%8D%E6%B5%8B%E8%AF%952.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压力知觉与运动性心理疲劳的关系_一个有调节的中介模型</title>
    <link href="/2023/09/18/%E5%8E%8B%E5%8A%9B%E7%9F%A5%E8%A7%89%E4%B8%8E%E8%BF%90%E5%8A%A8%E6%80%A7%E5%BF%83%E7%90%86%E7%96%B2%E5%8A%B3%E7%9A%84%E5%85%B3%E7%B3%BB-%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B0%83%E8%8A%82%E7%9A%84%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2023/09/18/%E5%8E%8B%E5%8A%9B%E7%9F%A5%E8%A7%89%E4%B8%8E%E8%BF%90%E5%8A%A8%E6%80%A7%E5%BF%83%E7%90%86%E7%96%B2%E5%8A%B3%E7%9A%84%E5%85%B3%E7%B3%BB-%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B0%83%E8%8A%82%E7%9A%84%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/97D04C75-BAE7-4611-A6FF-D638751925FB_2/k63NyaIFRwQtQkBlfAH4sdq7iitlekidWOiRoe1XceIz/_.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我国运动生物力学研究热点与影响力变化</title>
    <link href="/2023/09/18/%E6%88%91%E5%9B%BD%E8%BF%90%E5%8A%A8%E7%94%9F%E7%89%A9%E5%8A%9B%E5%AD%A6%E7%A0%94%E7%A9%B6%E7%83%AD%E7%82%B9%E4%B8%8E%E5%BD%B1%E5%93%8D%E5%8A%9B%E5%8F%98%E5%8C%96/"/>
    <url>/2023/09/18/%E6%88%91%E5%9B%BD%E8%BF%90%E5%8A%A8%E7%94%9F%E7%89%A9%E5%8A%9B%E5%AD%A6%E7%A0%94%E7%A9%B6%E7%83%AD%E7%82%B9%E4%B8%8E%E5%BD%B1%E5%93%8D%E5%8A%9B%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/374927DC-DEFC-4A43-B592-CE86556D39F6_2/yPaDzyWrRyxyCT1MCPwYmzHQ6Hy7tzRCRvXKkF5CcaEz/374927DC-DEFC-4A43-B592-CE86556D39F6_2.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乒乓球精确旋转、速度及落点数据的人工神经网络模型研究</title>
    <link href="/2023/09/18/%E4%B9%92%E4%B9%93%E7%90%83%E7%B2%BE%E7%A1%AE%E6%97%8B%E8%BD%AC%E3%80%81%E9%80%9F%E5%BA%A6%E5%8F%8A%E8%90%BD%E7%82%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%A0%94%E7%A9%B6/"/>
    <url>/2023/09/18/%E4%B9%92%E4%B9%93%E7%90%83%E7%B2%BE%E7%A1%AE%E6%97%8B%E8%BD%AC%E3%80%81%E9%80%9F%E5%BA%A6%E5%8F%8A%E8%90%BD%E7%82%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/62ACBE04-97CF-4835-90FE-3E5A2E91F3B4_2/wuYBp2JQVmj8ciyVJ7NymoMDKemLmIoMgbU2G3d5i4Mz/62ACBE04-97CF-4835-90FE-3E5A2E91F3B4_2.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从直接测热法到计算机视觉技术：身体活动能量消耗测量的历史与未来</title>
    <link href="/2023/09/18/%E4%BB%8E%E7%9B%B4%E6%8E%A5%E6%B5%8B%E7%83%AD%E6%B3%95%E5%88%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%EF%BC%9A%E8%BA%AB%E4%BD%93%E6%B4%BB%E5%8A%A8%E8%83%BD%E9%87%8F%E6%B6%88%E8%80%97%E6%B5%8B%E9%87%8F%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%9C%AA%E6%9D%A5/"/>
    <url>/2023/09/18/%E4%BB%8E%E7%9B%B4%E6%8E%A5%E6%B5%8B%E7%83%AD%E6%B3%95%E5%88%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%8A%80%E6%9C%AF%EF%BC%9A%E8%BA%AB%E4%BD%93%E6%B4%BB%E5%8A%A8%E8%83%BD%E9%87%8F%E6%B6%88%E8%80%97%E6%B5%8B%E9%87%8F%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%9C%AA%E6%9D%A5/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/70662169-FC75-4DFF-BBC6-3B0E467408E6_2/TQUBVIcs5gVIVD12yil0gZKhlHzJQIc6yJJroB6LvY0z/70662169-FC75-4DFF-BBC6-3B0E467408E6_2.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>男子赛艇240次卧拉练习的能量代谢特征（能量代谢占比计算）</title>
    <link href="/2023/09/18/%E7%94%B7%E5%AD%90%E8%B5%9B%E8%89%87240%E6%AC%A1%E5%8D%A7%E6%8B%89%E7%BB%83%E4%B9%A0%E7%9A%84%E8%83%BD%E9%87%8F%E4%BB%A3%E8%B0%A2%E7%89%B9%E5%BE%81%EF%BC%88%E8%83%BD%E9%87%8F%E4%BB%A3%E8%B0%A2%E5%8D%A0%E6%AF%94%E8%AE%A1%E7%AE%97%EF%BC%89/"/>
    <url>/2023/09/18/%E7%94%B7%E5%AD%90%E8%B5%9B%E8%89%87240%E6%AC%A1%E5%8D%A7%E6%8B%89%E7%BB%83%E4%B9%A0%E7%9A%84%E8%83%BD%E9%87%8F%E4%BB%A3%E8%B0%A2%E7%89%B9%E5%BE%81%EF%BC%88%E8%83%BD%E9%87%8F%E4%BB%A3%E8%B0%A2%E5%8D%A0%E6%AF%94%E8%AE%A1%E7%AE%97%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/0D39AE3E-F889-44C1-A6C1-7F7168C99357_2/bTR38Pawg7gN82hxi32SQgyx5bcPeh09iDvYD01Ph6sz/240.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 通过 CMMotionManager 获取 iPhone 加速度传感器、陀螺仪等信息</title>
    <link href="/2023/09/13/Swift-%E9%80%9A%E8%BF%87-CMMotionManager-%E8%8E%B7%E5%8F%96-iPhone-%E5%8A%A0%E9%80%9F%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E9%99%80%E8%9E%BA%E4%BB%AA%E7%AD%89%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/09/13/Swift-%E9%80%9A%E8%BF%87-CMMotionManager-%E8%8E%B7%E5%8F%96-iPhone-%E5%8A%A0%E9%80%9F%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E3%80%81%E9%99%80%E8%9E%BA%E4%BB%AA%E7%AD%89%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="获取-IMU-数据"><a href="#获取-IMU-数据" class="headerlink" title="获取 IMU 数据"></a>获取 IMU 数据</h3><p>方法具体代码</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">getData</span>() &#123;    <span class="hljs-keyword">if</span> motionManager.isDeviceMotionAvailable &#123;        <span class="hljs-comment">// 数据更新时间，最短0.01s</span>        motionManager.deviceMotionUpdateInterval <span class="hljs-operator">=</span> <span class="hljs-number">0.01</span>        <span class="hljs-comment">// timer效果</span>        motionManager.startDeviceMotionUpdates(to: <span class="hljs-type">OperationQueue</span>.main) &#123; data, error <span class="hljs-keyword">in</span>            gravityX <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.gravity.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            gravityY <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.gravity.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            gravityZ <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.gravity.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            userAccelerationX <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.userAcceleration.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            userAccelerationY <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.userAcceleration.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            userAccelerationZ <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.userAcceleration.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            rotationX <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.rotationRate.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            rotationY <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.rotationRate.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            rotationZ <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.rotationRate.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            roll <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.roll <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            pitch <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.pitch <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            yaw <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.yaw <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            w <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.w <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            wx <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.x <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            wy <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.y <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            wz <span class="hljs-operator">=</span> data<span class="hljs-operator">?</span>.attitude.quaternion.z <span class="hljs-operator">??</span> <span class="hljs-number">0</span>            <span class="hljs-comment">// 当前时间</span>            <span class="hljs-keyword">let</span> toc <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>().milliStamp            <span class="hljs-comment">// 计时时间 = 当前时间 - 程序开始时间</span>            time <span class="hljs-operator">=</span> toc <span class="hljs-operator">-</span> tic            number <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>            <span class="hljs-keyword">let</span> dot <span class="hljs-operator">=</span> <span class="hljs-type">Dot</span>(number: number, gravityX: gravityX, gravityY: gravityY, gravityZ: gravityZ, userAccelerationX: userAccelerationX, userAccelerationY: userAccelerationY, userAccelerationZ: userAccelerationZ, rotationX: rotationX, rotationY: rotationY, rotationZ: rotationZ, roll: roll, pitch: pitch, yaw: yaw, w: w, wx: wx, wy: wy, wz: wz, time: time)            dots.append(dot)        &#125;    &#125;&#125;</code></pre></div><p>dot 的数据结构</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dot</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> roll <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> pitch <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> yaw <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> w <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wx <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wy <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wz <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> time <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>()    &#125;</code></pre></div><p>时间戳（精确到毫秒）</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Date</span> &#123;    <span class="hljs-comment">// 获取当前 秒级 时间戳 - 10位</span>    <span class="hljs-keyword">var</span> timeStamp : <span class="hljs-type">String</span> &#123;        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970        <span class="hljs-keyword">let</span> timeStamp <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(timeInterval)        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(timeStamp)</span>&quot;</span>    &#125;    <span class="hljs-comment">// 获取当前 毫秒级 时间戳 - 13位</span>    <span class="hljs-keyword">var</span> milliStamp : <span class="hljs-type">CLongLong</span> &#123;        <span class="hljs-keyword">let</span> timeInterval: <span class="hljs-type">TimeInterval</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timeIntervalSince1970        <span class="hljs-keyword">let</span> millisecond <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>(round(timeInterval<span class="hljs-operator">*</span><span class="hljs-number">1000</span>))        <span class="hljs-comment">// return &quot;\(millisecond)&quot;</span>        <span class="hljs-keyword">return</span> millisecond    &#125;&#125;</code></pre></div><h3 id="导出-csv-文件"><a href="#导出-csv-文件" class="headerlink" title="导出 .csv 文件"></a>导出 .csv 文件</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">exportCSV</span>() &#123;    <span class="hljs-comment">// 导出文件名称</span>    <span class="hljs-keyword">let</span> fileName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SPACE TRACK.csv&quot;</span>    <span class="hljs-comment">// 导出路径</span>    <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> <span class="hljs-type">NSURL</span>(fileURLWithPath: <span class="hljs-type">NSTemporaryDirectory</span>()).appendingPathComponent(fileName)    <span class="hljs-comment">// 表头，注意不要加空格</span>    <span class="hljs-keyword">var</span> csvHead <span class="hljs-operator">=</span> <span class="hljs-string">&quot;number,gravityX,gravityY,gravityZ,userAccelerationX,userAccelerationY,userAccelerationZ,rotationX,rotationY,rotationZ,roll,pitch,yaw,w,wx,wy,wz,time<span class="hljs-subst">\n</span>&quot;</span>    <span class="hljs-comment">// 将数据写入表头</span>    <span class="hljs-keyword">for</span> dot <span class="hljs-keyword">in</span> dots &#123;        csvHead.append(<span class="hljs-string">&quot;<span class="hljs-subst">\(dot.number)</span>,<span class="hljs-subst">\(dot.gravityX)</span>,<span class="hljs-subst">\(dot.gravityY)</span>,<span class="hljs-subst">\(dot.gravityZ)</span>,<span class="hljs-subst">\(dot.userAccelerationX)</span>,<span class="hljs-subst">\(dot.userAccelerationY)</span>,<span class="hljs-subst">\(dot.userAccelerationZ)</span>,<span class="hljs-subst">\(dot.rotationX)</span>,<span class="hljs-subst">\(dot.rotationY)</span>,<span class="hljs-subst">\(dot.rotationZ)</span>,<span class="hljs-subst">\(dot.roll)</span>,<span class="hljs-subst">\(dot.pitch)</span>,<span class="hljs-subst">\(dot.yaw)</span>,<span class="hljs-subst">\(dot.w)</span>,<span class="hljs-subst">\(dot.wx)</span>,<span class="hljs-subst">\(dot.wy)</span>,<span class="hljs-subst">\(dot.wz)</span>,<span class="hljs-subst">\(dot.time)</span><span class="hljs-subst">\n</span>&quot;</span>)    &#125;    <span class="hljs-keyword">do</span> &#123;        <span class="hljs-keyword">try</span> csvHead.write(to: path<span class="hljs-operator">!</span>, atomically: <span class="hljs-literal">true</span>, encoding: .utf8)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;EXPORT&quot;</span>)    &#125; <span class="hljs-keyword">catch</span> &#123;        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR&quot;</span>)    &#125;    <span class="hljs-built_in">print</span>(path <span class="hljs-operator">??</span> <span class="hljs-string">&quot;not found&quot;</span>)&#125;</code></pre></div><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">struct</span> <span class="hljs-title class_">HeadCell</span>: <span class="hljs-title class_">View</span> &#123;        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span>        <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span>&#123;        <span class="hljs-type">HStack</span>(spacing: <span class="hljs-number">0</span>)&#123;            <span class="hljs-type">Text</span>(title)                .font(.system(size: <span class="hljs-number">14.0</span>, weight: .bold, design: .default))            <span class="hljs-type">Spacer</span>()        &#125;    &#125;&#125;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">BodyCell</span>: <span class="hljs-title class_">View</span> &#123;        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span>    <span class="hljs-comment">// MARK: @State var content: Double 就不会刷新....</span>    <span class="hljs-meta">@Binding</span> <span class="hljs-keyword">var</span> content: <span class="hljs-type">Double</span>        <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span>&#123;        <span class="hljs-type">HStack</span>(spacing: <span class="hljs-number">0</span>)&#123;            <span class="hljs-type">Text</span>(title)                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))            <span class="hljs-type">Spacer</span>()            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(content)</span>&quot;</span>)                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))                    &#125;    &#125;&#125;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimeCell</span>: <span class="hljs-title class_">View</span> &#123;        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> title: <span class="hljs-type">String</span>    <span class="hljs-meta">@Binding</span> <span class="hljs-keyword">var</span> content: <span class="hljs-type">CLongLong</span>        <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span>&#123;                <span class="hljs-type">HStack</span>(spacing: <span class="hljs-number">0</span>)&#123;            <span class="hljs-type">Text</span>(title)                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))            <span class="hljs-type">Spacer</span>()            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(content)</span>&quot;</span>)                .font(.system(size: <span class="hljs-number">12.0</span>, weight: .regular, design: .default))        &#125;    &#125;&#125;</code></pre></div><p>需要注意的一点是，从 <code>content</code> 要实时刷新，所以需要 <code>@Binding</code> 声明。</p><h3 id="主界面代码"><a href="#主界面代码" class="headerlink" title="主界面代码"></a>主界面代码</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">import</span> CoreMotion<span class="hljs-keyword">struct</span> <span class="hljs-title class_">MainView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-keyword">let</span> motionManager <span class="hljs-operator">=</span> <span class="hljs-type">CMMotionManager</span>()        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> gravityX: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> gravityY: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> gravityZ: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> userAccelerationX: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> userAccelerationY: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> userAccelerationZ: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> rotationX: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> rotationY: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> rotationZ: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> roll: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> pitch: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> yaw: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> w: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> wx: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> wy: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> wz: <span class="hljs-type">Double</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> tic: <span class="hljs-type">CLongLong</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-comment">// 记录运行时间  </span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> time: <span class="hljs-type">CLongLong</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> dots: [<span class="hljs-type">Dot</span>] <span class="hljs-operator">=</span> []    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> showingAlert <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> isStart <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>        <span class="hljs-keyword">func</span> <span class="hljs-title function_">getData</span>() &#123;        <span class="hljs-comment">// 这里不再重复展示</span>    &#125;        <span class="hljs-keyword">func</span> <span class="hljs-title function_">exportCSV</span>() &#123;        <span class="hljs-comment">// 这里不再重复展示</span>    &#125;        <span class="hljs-keyword">var</span> body : <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;                <span class="hljs-type">NavigationView</span> &#123;                        <span class="hljs-type">List</span>&#123;                                <span class="hljs-type">TimeCell</span>(title: <span class="hljs-string">&quot;时间 ms&quot;</span>, content: <span class="hljs-variable">$time</span>)                                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;重力加速度&quot;</span>)) &#123;                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;X轴&quot;</span>, content: <span class="hljs-variable">$gravityX</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Y轴&quot;</span>, content: <span class="hljs-variable">$gravityY</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Z轴&quot;</span>, content: <span class="hljs-variable">$gravityZ</span>)                &#125;                                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;用户加速度&quot;</span>)) &#123;                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;X轴&quot;</span>, content: <span class="hljs-variable">$userAccelerationX</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Y轴&quot;</span>, content: <span class="hljs-variable">$userAccelerationY</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Z轴&quot;</span>, content: <span class="hljs-variable">$userAccelerationZ</span>)                &#125;                                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;角速度&quot;</span>))&#123;                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;X轴&quot;</span>, content: <span class="hljs-variable">$rotationX</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Y轴&quot;</span>, content: <span class="hljs-variable">$rotationY</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;Z轴&quot;</span>, content: <span class="hljs-variable">$rotationZ</span>)                &#125;                                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;欧拉角&quot;</span>))&#123;                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;俯仰&quot;</span>, content: <span class="hljs-variable">$pitch</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;摆头&quot;</span>, content: <span class="hljs-variable">$yaw</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;倾斜&quot;</span>, content: <span class="hljs-variable">$roll</span>)                &#125;                                <span class="hljs-type">Section</span>(header: <span class="hljs-type">HeadCell</span>(title: <span class="hljs-string">&quot;四元数&quot;</span>))&#123;                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;w&quot;</span>, content: <span class="hljs-variable">$w</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;wx&quot;</span>, content: <span class="hljs-variable">$wx</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;wy&quot;</span>, content: <span class="hljs-variable">$wy</span>)                    <span class="hljs-type">BodyCell</span>(title: <span class="hljs-string">&quot;wz&quot;</span>, content: <span class="hljs-variable">$wz</span>)                &#125;                            &#125;                    .navigationTitle(<span class="hljs-string">&quot;Accelerometer&quot;</span>)            .toolbar &#123;                <span class="hljs-comment">// 开始以及停止按钮</span>                <span class="hljs-type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;                    <span class="hljs-type">Button</span> &#123;                        withAnimation()&#123;                            isStart.toggle()                        &#125;                        tic <span class="hljs-operator">=</span> <span class="hljs-type">Date</span>().milliStamp                        <span class="hljs-keyword">if</span> isStart &#123;                            getData()                        &#125; <span class="hljs-keyword">else</span> &#123;                            <span class="hljs-comment">// 停止记录数据</span>                            motionManager.stopDeviceMotionUpdates()                        &#125;                    &#125; label: &#123;                        <span class="hljs-type">Image</span>(systemName: isStart <span class="hljs-operator">?</span> <span class="hljs-string">&quot;stop.circle.fill&quot;</span> : <span class="hljs-string">&quot;restart.circle.fill&quot;</span>)                            .font(.system(size: <span class="hljs-number">14.0</span>, weight: .medium, design: .default))                            .foregroundColor(.red)                    &#125;                &#125;                <span class="hljs-comment">// 导出 .csv 文件按钮</span>                <span class="hljs-type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;                    <span class="hljs-type">Button</span> &#123;                        exportCSV()                        showingAlert.toggle()                    &#125; label: &#123;                        <span class="hljs-type">Image</span>(systemName: <span class="hljs-string">&quot;square.and.arrow.up.fill&quot;</span>)                            .font(.system(size: <span class="hljs-number">14.0</span>, weight: .medium, design: .default))                            .foregroundColor(.red)                    &#125;                    .alert(<span class="hljs-type">Text</span>(<span class="hljs-string">&quot;SUCCESS!&quot;</span>), isPresented: <span class="hljs-variable">$showingAlert</span>) &#123;                        <span class="hljs-comment">// Button(&quot;Cancel&quot;, role: .destructive) &#123; &#125;</span>                        <span class="hljs-comment">// Button(&quot;Cancel&quot;, role: .cancel) &#123; &#125;</span>                        <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;Confirm&quot;</span>) &#123; &#125;                    &#125; message: &#123;                        <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;CSV路径 file:///private/var/mobile/Containers/Data/Application/&quot;</span>)                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dot</span> &#123;    <span class="hljs-comment">// 这里不再重复展示</span>&#125;<span class="hljs-keyword">extension</span> <span class="hljs-title class_">Date</span> &#123;    <span class="hljs-comment">// 这里不再重复展示</span>&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 导出 .csv 文件</title>
    <link href="/2023/09/13/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/09/13/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h3><p>数据格式如下：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dot</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> number <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> gravityZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> userAccelerationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationX <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationY <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> rotationZ <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> roll <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> pitch <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> yaw <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> w <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wx <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wy <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> wz <span class="hljs-operator">=</span> <span class="hljs-type">Double</span>()    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> time <span class="hljs-operator">=</span> <span class="hljs-type">CLongLong</span>()    &#125;</code></pre></div><p>导出 .csv 的方法：</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">exportCSV</span>() &#123;    <span class="hljs-comment">// 导出文件名称</span>    <span class="hljs-keyword">let</span> fileName <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SPACE TRACK.csv&quot;</span>    <span class="hljs-comment">// 导出路径</span>    <span class="hljs-keyword">let</span> path <span class="hljs-operator">=</span> <span class="hljs-type">NSURL</span>(fileURLWithPath: <span class="hljs-type">NSTemporaryDirectory</span>()).appendingPathComponent(fileName)    <span class="hljs-comment">// 表头，注意不要加空格</span>    <span class="hljs-keyword">var</span> csvHead <span class="hljs-operator">=</span> <span class="hljs-string">&quot;number,gravityX,gravityY,gravityZ,userAccelerationX,userAccelerationY,userAccelerationZ,rotationX,rotationY,rotationZ,roll,pitch,yaw,w,wx,wy,wz,time<span class="hljs-subst">\n</span>&quot;</span>    <span class="hljs-comment">// 将数据写入表头</span>    <span class="hljs-keyword">for</span> dot <span class="hljs-keyword">in</span> dots &#123;        csvHead.append(<span class="hljs-string">&quot;<span class="hljs-subst">\(dot.number)</span>,<span class="hljs-subst">\(dot.gravityX)</span>,<span class="hljs-subst">\(dot.gravityY)</span>,<span class="hljs-subst">\(dot.gravityZ)</span>,<span class="hljs-subst">\(dot.userAccelerationX)</span>,<span class="hljs-subst">\(dot.userAccelerationY)</span>,<span class="hljs-subst">\(dot.userAccelerationZ)</span>,<span class="hljs-subst">\(dot.rotationX)</span>,<span class="hljs-subst">\(dot.rotationY)</span>,<span class="hljs-subst">\(dot.rotationZ)</span>,<span class="hljs-subst">\(dot.roll)</span>,<span class="hljs-subst">\(dot.pitch)</span>,<span class="hljs-subst">\(dot.yaw)</span>,<span class="hljs-subst">\(dot.w)</span>,<span class="hljs-subst">\(dot.wx)</span>,<span class="hljs-subst">\(dot.wy)</span>,<span class="hljs-subst">\(dot.wz)</span>,<span class="hljs-subst">\(dot.time)</span><span class="hljs-subst">\n</span>&quot;</span>)    &#125;    <span class="hljs-keyword">do</span> &#123;        <span class="hljs-keyword">try</span> csvHead.write(to: path<span class="hljs-operator">!</span>, atomically: <span class="hljs-literal">true</span>, encoding: .utf8)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;EXPORT&quot;</span>)    &#125; <span class="hljs-keyword">catch</span> &#123;        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR&quot;</span>)    &#125;    <span class="hljs-built_in">print</span>(path <span class="hljs-operator">??</span> <span class="hljs-string">&quot;not found&quot;</span>)&#125;</code></pre></div><p>将文件的路径打印出来是：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">file:///private/var/mobile/Containers/Data/Application/</span></code></pre></div><h3 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h3><p>可以采用  <code>Share Extension</code> 的方式获取文件，但实现起来有些复杂。</p><p>最简单的方法是：</p><p>在 Xcode 里点击「Window - Device and Simulator」找到运行 App 的设备以及 App，选择「Download Container」</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B61.png"></p><p>之后可以在工程文件架中找到下载下来的文件，点击「显示包内容」</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B62.png"></p><p>在「AppData - tmp」路径下即可找到导出的 .csv 文件</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Swift-%E5%AF%BC%E5%87%BA-csv-%E6%96%87%E4%BB%B63.png"></p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iCloud 同步文件卡住的解决办法</title>
    <link href="/2023/09/13/iCloud-%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%8D%A1%E4%BD%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/09/13/iCloud-%E5%90%8C%E6%AD%A5%E6%96%87%E4%BB%B6%E5%8D%A1%E4%BD%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://sspai.com/post/72882">一日一技 | Mac 上 iCloud 云盘同步卡住了？可以试试这样做</a></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>导致 iCloud 云盘同步卡住的原因一般有</p><ul><li>网络问题</li><li><strong>一次性向 iCloud 云盘塞入了过多需要同步的文件</strong></li><li><strong>文件夹嵌套层级太多</strong></li><li>Apple ID 转区</li></ul><p>我遇到两次同步卡住都是因为2、3点。</p><p>如果你<strong>一次性向 iCloud 云盘塞入了过多需要同步的文件</strong>，iCloud 云盘进程在同步前就需要进行大量的计算和检索，花费时间会变长、占用资源变多，如果这时其中有一个文件又问题，很有可能会卡住整个 iCloud 云盘同步的进度。如果桌面或者文稿文件夹中有大量文件的 Mac ，突然打开了对应 iCloud 云盘的「桌面与文稿」同步功能，就非常有可能会出现这样前面提到的情况。</p><p>此外，<strong>文件夹嵌套层级太多</strong>也可能是另一个原因，和<strong>一次性向 iCloud 云盘塞入了过多需要同步的文件</strong>的道理相似，过多的文件夹嵌套层级也可能会增加 iCloud 云盘在同步时的计算量与出错风险。而在最新的 <a href="https://sspai.com/link?target=https://www.v2ex.com/t/841605">信息</a> 中显示，iCloud 云盘似乎已经拒绝同步带有太多嵌套层级的文件夹。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在终端「分别」输入：</p><div class="code-wrapper"><pre><code class="hljs bash">killall birdkillall cloudd</code></pre></div><p>通过 <code>killall bird</code> 和 <code>killall cloudd</code> 两个命令，将 iCloud 云盘最紧密的两个进程 bird 和 cloudd 进程手动杀死。这两个进程被终止后，macOS 会自动重新将这两个进程拉起，这时我们就可以重新观察 iCloud 云盘的同步情况。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 串口查询</title>
    <link href="/2023/09/12/Linux-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/09/12/Linux-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>输入指令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /dev/tty*</code></pre></div><p>即可获得串口列表。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传感器</tag>
      
      <tag>Linux</tag>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发展肌肉力量的最佳训练负荷(The Optimal Training Load for the Development of Muscular Power)</title>
    <link href="/2023/09/11/%E5%8F%91%E5%B1%95%E8%82%8C%E8%82%89%E5%8A%9B%E9%87%8F%E7%9A%84%E6%9C%80%E4%BD%B3%E8%AE%AD%E7%BB%83%E8%B4%9F%E8%8D%B7-The-Optimal-Training-Load-for-the-Development-of-Muscular-Power/"/>
    <url>/2023/09/11/%E5%8F%91%E5%B1%95%E8%82%8C%E8%82%89%E5%8A%9B%E9%87%8F%E7%9A%84%E6%9C%80%E4%BD%B3%E8%AE%AD%E7%BB%83%E8%B4%9F%E8%8D%B7-The-Optimal-Training-Load-for-the-Development-of-Muscular-Power/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/F1D9C18D-E5F4-487E-BC4E-E47724051D03_2/CZAynzyyu1QBbBXetDdfMnxZaNm9wa1iYCcnKMOBj38z/The%20Optimal%20Training%20Load%20for%20the%20Development%20of%20Muscular%20Power.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最佳功率负荷下不同力量训练手段骨骼肌输出功率的确定及特征</title>
    <link href="/2023/09/11/%E6%9C%80%E4%BD%B3%E5%8A%9F%E7%8E%87%E8%B4%9F%E8%8D%B7%E4%B8%8B%E4%B8%8D%E5%90%8C%E5%8A%9B%E9%87%8F%E8%AE%AD%E7%BB%83%E6%89%8B%E6%AE%B5%E9%AA%A8%E9%AA%BC%E8%82%8C%E8%BE%93%E5%87%BA%E5%8A%9F%E7%8E%87%E7%9A%84%E7%A1%AE%E5%AE%9A%E5%8F%8A%E7%89%B9%E5%BE%81/"/>
    <url>/2023/09/11/%E6%9C%80%E4%BD%B3%E5%8A%9F%E7%8E%87%E8%B4%9F%E8%8D%B7%E4%B8%8B%E4%B8%8D%E5%90%8C%E5%8A%9B%E9%87%8F%E8%AE%AD%E7%BB%83%E6%89%8B%E6%AE%B5%E9%AA%A8%E9%AA%BC%E8%82%8C%E8%BE%93%E5%87%BA%E5%8A%9F%E7%8E%87%E7%9A%84%E7%A1%AE%E5%AE%9A%E5%8F%8A%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/0151E7F3-C842-4CAC-B3CE-7938E09EB241_2/NpbywbU4syEE01bvgDsG6h0cjdZKqXGBqty39iMAa5oz/0151E7F3-C842-4CAC-B3CE-7938E09EB241_2.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关节活动度 ROM</title>
    <link href="/2023/09/11/%E5%85%B3%E8%8A%82%E6%B4%BB%E5%8A%A8%E5%BA%A6-ROM/"/>
    <url>/2023/09/11/%E5%85%B3%E8%8A%82%E6%B4%BB%E5%8A%A8%E5%BA%A6-ROM/</url>
    
    <content type="html"><![CDATA[<p>关节活动度（Range of motion, ROM）又称关节活动范围。可以分为被动关节活动度（PROM），助力关节活动度（AAROM）和主动关节活动度（AROM）。</p><ul><li><strong>Passive range of motion</strong> (or <strong>PROM</strong>) - Therapist or equipment moves the joint through the range of motion with no effort from the patient.</li><li><strong>Active assistive range of motion</strong> (or <strong>AAROM</strong>) - Patient uses the muscles surrounding the joint to perform the exercise but requires some help from the therapist or equipment (such as a strap).</li><li><strong>Active range of motion</strong> (or <strong>AROM</strong>) - Patient performs the exercise to move the joint without any assistance to the muscles surrounding the joint.</li></ul><p>关节活动度训练（ROM 训练）：恢复或增大关节活动度的一种康复性训练。因关节自身损伤，关节周围组织损伤，神经麻痹以及老年退行性病变等，均可引起关节活动受限。训练可分为矫正性措施和预防性措施。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派蓝牙连接 HC05 提示 Failed to connect: org.bluez.Error.NotAvailable 解决办法</title>
    <link href="/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5-HC05-%E6%8F%90%E7%A4%BA-Failed-to-connect-org-bluez-Error-NotAvailable-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5-HC05-%E6%8F%90%E7%A4%BA-Failed-to-connect-org-bluez-Error-NotAvailable-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>树莓派在连接 HC05 蓝牙模块时遇见了一些问题。</p><p>虽然成功配对：</p><div class="code-wrapper"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># pair 98:D3:02:96:9A:BB</span><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">pair</span> <span class="hljs-string">with</span> <span class="hljs-number">98</span><span class="hljs-string">:D3:02:96:9A:BB</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">yes</span><span class="hljs-string">Request</span> <span class="hljs-string">PIN</span> <span class="hljs-string">code</span>[<span class="hljs-string">agent</span>] <span class="hljs-attr">Enter PIN code:</span> [<span class="hljs-string">DEL</span>] <span class="hljs-string">Device</span> <span class="hljs-string">4D:9E:4F:54:59:22</span> <span class="hljs-string">4D-9E-4F-54-59-22</span>[<span class="hljs-string">agent</span>] <span class="hljs-attr">Enter PIN code:</span> [<span class="hljs-string">DEL</span>] <span class="hljs-string">Device</span> <span class="hljs-number">10</span><span class="hljs-string">:05:6C:76:F6:F0</span> <span class="hljs-string">MC76F6F0</span>[<span class="hljs-string">agent</span>] <span class="hljs-attr">Enter PIN code:</span> <span class="hljs-number">1234</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB UUIDs:</span> <span class="hljs-number">00001101</span><span class="hljs-number">-0000</span><span class="hljs-number">-1000</span><span class="hljs-number">-8000</span><span class="hljs-string">-00805f9b34fb</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">yes</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Paired:</span> <span class="hljs-literal">yes</span><span class="hljs-string">Pairing</span> <span class="hljs-string">successful</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">no</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">no</span></code></pre></div><p>但可以看到自动断开了。</p><p>再次连接时，提示 <code>Failed to connect: org.bluez.Error.NotAvailable</code>，如下面所示：</p><div class="code-wrapper"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># connect 98:D3:02:96:9A:BB</span><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">connect</span> <span class="hljs-string">to</span> <span class="hljs-number">98</span><span class="hljs-string">:D3:02:96:9A:BB</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">yes</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">yes</span><span class="hljs-attr">Failed to connect:</span> <span class="hljs-string">org.bluez.Error.NotAvailable</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB ServicesResolved:</span> <span class="hljs-literal">no</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 98:D3:02:96:9A:BB Connected:</span> <span class="hljs-literal">no</span></code></pre></div><p>在 GUI 上进行连接，则会提示 <code>Connection failed - No usable services on this device</code>。</p><p>此处问题并非个例、在其它帖子里看到过相同问题。</p><p>真正的原因是默认情况下树莓派蓝牙始终是作为从模式，所以主动连接的话，无论什么设备都会秒掉线（存疑）。</p><p>下面是解决办法：</p><p>不再通过 bluetoothctl 工具进行连接，而是：</p><div class="code-wrapper"><pre><code class="hljs bash">sudo rfcomm connect hci0 98:D3:02:96:9A:BB</code></pre></div><p>参考：</p><ol><li><a href="https://forums.raspberrypi.com/viewtopic.php?t=162911&sid=86d298a19589e7836b4eb2408a920bde">Failed to connect: org.bluez.Error.NotAvailable</a>；</li><li><a href="https://forums.raspberrypi.com/viewtopic.php?t=163712&sid=3d7b1a34f4fcf6cfcafecdb3d345bf15">Raspberry Pi 3 Unable to Connect to Arduino with HC-06</a></li><li><a href="https://raspberrypi.stackexchange.com/questions/82173/failed-to-connect-org-bluez-error-notavailable-error">Failed to connect: org.bluez.Error.NotAvailable - Error</a>；</li><li><a href="https://blog.csdn.net/jinanhezhuang/article/details/109250208">树莓派和HC-05蓝牙连接以及通过串口写入（Write）和读入(Read)数据</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派配置蓝牙（终端）</title>
    <link href="/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%93%9D%E7%89%99%EF%BC%88%E7%BB%88%E7%AB%AF%EF%BC%89/"/>
    <url>/2023/09/11/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%93%9D%E7%89%99%EF%BC%88%E7%BB%88%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol><li><p>启动蓝牙命令行工具</p><div class="code-wrapper"><pre><code class="hljs bash">bluetoothctl</code></pre></div></li><li><p>开启代理</p><div class="code-wrapper"><pre><code class="hljs bash">agent on</code></pre></div></li><li><p>扫描设备</p><div class="code-wrapper"><pre><code class="hljs bash">scan on</code></pre></div><p>通过扫描设备，可以检索到对应设备的 MAC 地址，之后可以用该设备的 MAC 地址来与树莓派进行配对，扫描结果如下</p><div class="code-wrapper"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># scan on</span><span class="hljs-string">Discovery</span> <span class="hljs-string">started</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Controller E4:5F:01:26:55:90 Discovering:</span> <span class="hljs-literal">yes</span>[<span class="hljs-string">NEW</span>] <span class="hljs-string">Device</span> <span class="hljs-string">4A:E4:8E:E3:BC:54</span> <span class="hljs-string">4A-E4-8E-E3-BC-54</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 9C:19:C2:4D:88:DC Name:</span> <span class="hljs-string">Redmi</span> <span class="hljs-string">Buds</span> <span class="hljs-number">3</span></code></pre></div></li><li><p>树莓派与蓝牙设备进行配对</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">pair</span> <span class="hljs-string">MAC</span></code></pre></div><p>输入 MAC 地址后即可配对。期间可能要输入 PIN 码。配对成功提示</p><div class="code-wrapper"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># pair 9C:19:C2:4D:88:DC</span><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">pair</span> <span class="hljs-string">with</span> <span class="hljs-string">9C:19:C2:4D:88:DC</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 9C:19:C2:4D:88:DC Connected:</span> <span class="hljs-literal">yes</span></code></pre></div></li><li><p>连接设备（第一次配对会自动连接，否则需要执行以下命令连接）</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">connect</span> <span class="hljs-string">MAC</span></code></pre></div><p>连接成功（如需退出可输入 <code>quit</code> 退出蓝牙）</p><div class="code-wrapper"><pre><code class="hljs yaml">[<span class="hljs-string">bluetooth</span>]<span class="hljs-comment"># connect 9C:19:C2:4D:88:DC</span><span class="hljs-string">Attempting</span> <span class="hljs-string">to</span> <span class="hljs-string">connect</span> <span class="hljs-string">to</span> <span class="hljs-string">9C:19:C2:4D:88:DC</span>[<span class="hljs-string">CHG</span>] <span class="hljs-attr">Device 9C:19:C2:4D:88:DC Connected:</span> <span class="hljs-literal">yes</span><span class="hljs-string">Connection</span> <span class="hljs-string">successful</span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Raspberry Pi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 终端历史命令查询</title>
    <link href="/2023/09/11/macOS-%E7%BB%88%E7%AB%AF%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/09/11/macOS-%E7%BB%88%E7%AB%AF%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>在终端输出 <code>history</code> 可以查询到最近输入的部分指令。</p><p>在终端输出 <code>history 0</code> 可以查询最近 1000 条输入的指令。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS 查看蓝牙设备的 MAC 地址</title>
    <link href="/2023/09/11/macOS-%E6%9F%A5%E7%9C%8B%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84-MAC-%E5%9C%B0%E5%9D%80/"/>
    <url>/2023/09/11/macOS-%E6%9F%A5%E7%9C%8B%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84-MAC-%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<p>安装所需软件:</p><div class="code-wrapper"><pre><code class="hljs bash">brew install bluetoothconnector</code></pre></div><p>目标设备之前必须与 Mac 成功匹配过。</p><p>在终端使用下面的命令得到设备的 MAC 地址:</p><div class="code-wrapper"><pre><code class="hljs bash">BluetoothConnector</code></pre></div><p>会得到类似这样的输出：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">70</span><span class="hljs-string">-ae-d5-c8-48-84</span> <span class="hljs-bullet">-</span> <span class="hljs-string">ᖰ´༥`ᖳ</span><span class="hljs-number">80</span><span class="hljs-number">-82</span><span class="hljs-number">-23</span><span class="hljs-string">-cc-20-2e</span> <span class="hljs-bullet">-</span> <span class="hljs-string">AirPods</span><span class="hljs-number">98</span><span class="hljs-string">-d3-02-96-9a-bb</span> <span class="hljs-bullet">-</span> <span class="hljs-string">H-C-2010-06-01</span><span class="hljs-string">a0-78-17-e3-dd-38</span> <span class="hljs-bullet">-</span> <span class="hljs-string">TrackPaaaaaaad</span><span class="hljs-string">ac-90-85-7f-18-5b</span> <span class="hljs-bullet">-</span> <span class="hljs-string">AirPods</span> <span class="hljs-string">Plus++</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传感器</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 打开文件在 scanning files to index 卡死，或者关闭文件时等待时间过长</title>
    <link href="/2023/09/11/PyCharm-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%9C%A8-scanning-files-to-index-%E5%8D%A1%E6%AD%BB%EF%BC%8C%E6%88%96%E8%80%85%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6%E6%97%B6%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/"/>
    <url>/2023/09/11/PyCharm-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%9C%A8-scanning-files-to-index-%E5%8D%A1%E6%AD%BB%EF%BC%8C%E6%88%96%E8%80%85%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6%E6%97%B6%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="缓存原因"><a href="#缓存原因" class="headerlink" title="缓存原因"></a>缓存原因</h3><p>通过 File - Invalidate caches… 的方式清理缓存。</p><h3 id="网盘原因"><a href="#网盘原因" class="headerlink" title="网盘原因"></a>网盘原因</h3><p>因为我的工程文件是放在 Dropbox 里的。有时候会因为 Dropbox 在同步文件导致打开工程文件后，在建立和更新索引时卡住。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>PyCharm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STRETCH-SHORTENING CYCLE (SSC)</title>
    <link href="/2023/09/11/STRETCH-SHORTENING-CYCLE-SSC/"/>
    <url>/2023/09/11/STRETCH-SHORTENING-CYCLE-SSC/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.scienceforsport.com/stretch-shortening-cycle/">STRETCH-SHORTENING CYCLE (SSC)</a></p><p>The stretch-shortening cycle is a spring-like mechanism that enhances athletic performance in explosive- and endurance-based sports.</p><p><strong>Contents of Article</strong></p><ol><li>Summary</li><li>What is the Stretch-Shortening Cycle (SSC)?</li><li>What are the mechanisms of the Stretch-Shortening Cycle?</li><li>Electromechanical Delay (EMD)</li><li>Conclusion</li><li>References</li><li>About the Author</li><li>Comments</li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The stretch-shortening cycle (SSC) refers to the ‘pre-stretch’ or ‘countermovement’ action that is commonly observed during typical human movements such as jumping. This pre-stretch allows the athlete to produce more force and move quicker. Though there is controversy surrounding the mechanics responsible for the performance improvements observed from using the SSC,  it is likely to be a combination of the active state and the storage of elastic energy within the tendon. Due to the negative effects of the electromechanical delay, it may be suggested that training methods which improve muscular pre-activity, such as plyometric and ballistic training, may be beneficial for improving athletic performance.</p><h2 id="What-is-the-Stretch-Shortening-Cycle-SSC"><a href="#What-is-the-Stretch-Shortening-Cycle-SSC" class="headerlink" title="What is the Stretch-Shortening Cycle (SSC)?"></a>What is the Stretch-Shortening Cycle (SSC)?</h2><p>Athletes have been shown to jump 2-4 cm higher during the <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">countermovement jump</a>(CMJ) than they can during the <a href="https://www.scienceforsport.com/squat-jump/">squat jump</a> (SJ) (1). This is simply because the <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a>incorporates a pre-stretch dropping action when compared to an <a href="https://www.scienceforsport.com/squat-jump/">SJ</a>, which initiates the movement from a static position without the use of a pre-stretch (2). This pre-stretch, or ‘countermovement’ action is known as the stretch-shortening cycle (SSC) and is comprised of three phases (eccentric, amortization, and concentric) (Figure 1) (3). Images A-B display the eccentric phase, image C demonstrates the amortisation phase, and images D-E represent the concentric phase of the SSC.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/01/Figure-1-Phases-of-the-Stretch-Shortening-Cycle-1024x189.jpg"></p><p>The SSC is described as a rapid cyclical muscle action whereby the muscle undergoes an eccentric contraction, followed by a transitional period prior to the concentric contraction (4). This muscle action is also sometimes referred to as the reverse action of muscles (5). The action of the SSC is perhaps best described as a spring-like mechanism, whereby compressing the coil causes it to rebound and therefore jump off a surface or in a different direction (Figure 2). Increasing the speed at which the coil is compressed or how hard it is pressed down (amount of force applied) will result in the spring jumping higher or farther. This is known as the ‘rate of loading’, and increasing this will often mean the spring will jump higher or farther. Therefore, a jump that incorporates a ‘run-up’ will often allow an athlete to jump higher or farther than a jump from a static position because of an increase in the rate of loading (6, 7, 8).</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/01/Figure-2-Spring-like-mechanism-of-the-Stretch-Shortening-Cycle-SSC.png"></p><p>The SSC does not only occur during single-bout <a href="https://www.scienceforsport.com/multidirectional-plyometrics-how-do-these-impact-jump-change-of-direction-and-dynamic-postural-control/">jumping or rebounding movements but also during any form of human movement when a limb changes direction</a>. For example, during walking, jumping, running, twisting or even lowering and then raising your arm. As the limbs are continuously changing direction, there is constant use of the SSC in order to change the direction the limb is moving. As some movements are much faster than others (e.g. sprinting vs. walking), there are great differences in the speed of the SSC. Consequently, the SSC has been separated into two categories based on the duration of the SSC:</p><ol><li>Fast-SSC: &lt;250 milliseconds (ms)</li><li>Slow-SSC: &gt;250 ms</li></ol><p>Table 1 provides some examples of common exercises and their potential SSC classification. As displayed in Table 1, a long jump is typically classified as a fast-SSC movement as it has a ground contact time of 140-170 ms (9). Whereas race walking, which has a ground contact time of 270-300 ms is commonly classified as a slow-SSC movement (10).</p><p><strong>Table 2</strong>. Ground contact times&#x2F;coupling time of common exercises.</p><table><thead><tr><th><strong>Exercise</strong></th><th><strong>Ground contact time</strong></th><th><strong>SSC Classification</strong></th></tr></thead><tbody><tr><td>Race walking (10)</td><td>270-300</td><td>Slow</td></tr><tr><td>Sprinting (11)</td><td>80-90</td><td>Fast</td></tr><tr><td>Countermovement jump (CMJ) (12)</td><td>500</td><td>Slow</td></tr><tr><td>Depth Jump (20-60cm) (2,3)</td><td>130-300</td><td>Fast &#x2F; Slow</td></tr><tr><td>Long Jump (13)</td><td>140-170</td><td>Fast</td></tr><tr><td>Multiple Hurdle Jumps (5)</td><td>150</td><td>Fast</td></tr></tbody></table><p>As measuring the duration of the SSC at each contributing joint (e.g. ankle, knee, hip) during a jumping exercise is problematic, researchers have often questioned the ability to measure the SSC indirectly by analysing the ground contact times. As a result, researchers have looked for relationships between ground contact times and coupling time*. Strong relationships have been found between coupling time and exercises with ground contact times ranging from 270-2500 ms (16, 17).</p><p>However, no relationships were observed in exercises with ground contact times of 400-800 ms (17). This, therefore, questions the reliability of classifying exercises with ground contact times of &lt; 850 ms into particular SSC categories based on their ground contact duration. For example, simply classifying race walking as a slow-SSC movement because it has a ground contact time between 270-300 ms. Though this is often common practice, understanding the issue with doing so is important.</p><blockquote><p><em>Coupling time is the amortisation&#x2F;isometric phase of the SSC which connects the eccentric to the concentric phase – hence the term ‘coupling’, as it couples the two together. Or in other words, coupling time is defined as the transition between the eccentric and concentric phases of the SSC (16).</em></p></blockquote><h2 id="What-are-the-mechanisms-of-the-Stretch-Shortening-Cycle"><a href="#What-are-the-mechanisms-of-the-Stretch-Shortening-Cycle" class="headerlink" title="What are the mechanisms of the Stretch-Shortening Cycle?"></a>What are the mechanisms of the Stretch-Shortening Cycle?</h2><p>There are numerous neurophysiological mechanisms thought to contribute to the SSC, some of which include: storage of elastic energy (18, 19, 20, 21), involuntary nervous processes (22, 23), active state (1, 24), length-tension characteristics (25, 26), pre-activity tension (27, 28) and enhanced <a href="https://www.scienceforsport.com/how-tennis-ball-drills-can-help-develop-hand-eye-coordination/">motor coordination</a> (1, 24). Despite this large list, it is commonly agreed there are three primary mechanics responsible for the performance-enhancing effects of the SSC (2).</p><p>These three mechanisms are:</p><ol><li>Storage of Elastic Energy</li><li>Neurophysiological Model</li><li>Active State</li></ol><p><strong>Storage of Elastic Energy</strong></p><p>The concept of elastic energy is similar to that of a stretched rubber band. When the band is stretched, there is a build-up of stored energy, which when released, causes the band to rapidly contract back to its original shape. The amount of stored elastic energy (sometimes referred to as ‘strain’ or ‘potential’ energy) is potentially equal to the applied force and induced deformation (5). In other words, the amount of force used to stretch the band should be equivalent to the amount of force produced by the band in order to return to its pre-stretched state.</p><p>In humans, this stretch and storage of elastic energy is instead placed upon the muscles and tendons during movement. However, due to the elastic properties of the tendon, it is commonly agreed that the tendon is the primary site for the storage of elastic energy (29, 30). Unlike muscles, the tendons cannot be voluntarily contracted, and as a result, they can only remain in their state of tension.</p><p>This means the muscle must contract and stiffen prior to the beginning of the SSC during ground contact – known as ‘muscular pre-activity’. The muscle must then remain contracted&#x2F; stiff during the first two processes of the SSC (eccentric and amortisation phases) in order to transmit the isometric forces into the tendon. This causes the deformation&#x2F; lengthening of the tendon and the development of the storage of elastic energy.</p><p>During the concentric phase of the SSC (often referred to as the ‘positive acceleration’ phase), the muscle is then able to concentrically contract and provide additional propulsive force (2). Failing to stiffen during the eccentric and amortisation phases, means the performance-enhancing effect of the SSC will be lost and the joint would likely collapse. This demonstrates the importance of muscle stiffness during the SSC and its ability to improve performance. It also suggests that athletes with higher levels of <a href="https://www.scienceforsport.com/the-importance-of-muscular-strength-in-athletic-performance/">muscular strength</a> can absorb more force (i.e. higher rate of loading), and therefore have a better ability to use the SSC.</p><p>An abundance of research has demonstrated that stronger athletes have a better ability to store elastic energy than less-strong individuals (31, 32, 33). Elite athletes from both power- and endurance-based sports have also been demonstrated to possess a superior ability to store elastic energy (31, 32). Furthermore, efficient utilisation of the SSC during sprinting has been shown to recover approximately 60% of total mechanical energy, suggesting the other 40% is recovered by metabolic processes (34, 35). In aerobic long-distance running, higher SSC abilities have also been shown to enhance running economy – suggesting that athletes with a better SSC capacity can conserve more energy whilst running (33, 36, 37). This indicates the importance of the SSC for both energy release and energy conservation. However, this storage of the elastic energy within the tendon cannot last forever and has been shown to have a half-life of 850 milliseconds (38).</p><p><strong>Neurophysiological Model</strong></p><p>The muscles and tendons contain sensory receptors known as ‘proprioceptors’, these send information to the brain about changes in length, tension and joint angles (39). The proprioceptors within the muscle are known as ‘muscle spindles’, whilst those in the tendon are called ‘Golgi tendon organs’.</p><p>When a muscle is forcefully lengthened, the muscle spindles engage a stretch-reflex response to <a href="https://www.scienceforsport.com/what-adaptations-occur-to-youth-athletes-using-injury-prevention-programs/">prevent over-lengthening and limit the possibility of injury</a>. The engagement of these muscle spindles is thought to cause increased recruitment of motor units and&#x2F; or an increased rate coding effect (40, 41). An excitation of either or both of these neural responses would lead to a concurrent increase in concentric force output and may, therefore, explain the performance-enhancing effects of the SSC.</p><p>The increase in concentric force output would therefore then lead to an enhanced <a href="https://www.scienceforsport.com/max-power-the-keys-to-getting-the-most-out-of-power-training/">power</a> output during sporting movements (e.g. jump), and thus may improve performance. However, many studies have reported no increase in muscle activation after a pre-stretch activity (e.g. <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a>) when compared to non-pre-stretch activity (e.g. <a href="https://www.scienceforsport.com/squat-jump/">SJ</a>) (26, 42, 43). This suggests that muscle spindle reflex activity does not have any impact on the increased force by the SSC (1).</p><p>Furthermore, when a muscle is forcefully lengthened, the Golgi tendon organs (GTO) engage an opposite stretch-reflex response to the muscle spindles. Their role is to inhibit (i.e. prevent) the excitation of the muscle spindles during forceful over-lengthening to prevent the possibility of injury (5). Though this may seem like a bizarre trade-off between the muscle spindles and the GTO, the muscle spindles activate when the muscle-tendon unit is forcefully lengthened, whilst the GTO activate when the forceful lengthening becomes too large (39).</p><p>Due to the inhibitory stretch-reflex response of the GTO, it is thought this may counteract the contraction action of the muscle spindles. If so, this would mean that the GTO inhibits the high-muscular stiffness needed during the SSC and therefore reduces the concentric force output and subsequent performance (2). In fact, research has shown that muscle activation levels – and therefore muscle stiffness – have been reduced during the early phases of the SSC in individuals who are unaccustomed to intense SSC movements (28).</p><p>Interestingly, however, 4-months of <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometric training</a> has been shown to reduce this GTO inhibitory effect (disinhibition) and increase muscular pre-activity and muscle-tendon stiffness (27). As a result, it appears that effective training methods (e.g. <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometrics</a>) can reduce or even eliminate the potential negative effects observed from the GTO inhibitory effect.</p><p><strong>Active State</strong></p><p>The active state is the period of time in which force can be developed during the eccentric and amortisation phases of the SSC before any concentric contraction occurs. For example, during the ‘countermovement’ or ‘dropping’ action of the <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a>, the active state is developed during the eccentric and amortisation phases. The unpinning belief is that exercises that possess longer eccentric and amortisation phases of the SSC will allow more time for the formation of cross-bridges, therefore enhancing joint moments, and thus improving concentric force output. Increasing the amount of force, and the time available for force to be developed typically leads to a concurrent increase in the impulse (Impulse &#x3D; Force x Time) (24, 44). In other words, increasing the force application will lead to improvements in power output and therefore athletic performance.</p><p>There is widespread agreement to suggest the active state is the largest contributor to the performance-enhancing effects of the SSC, as it allows for a greater build-up of force prior to concentric shortening (1, 24, 44, 2).</p><h2 id="What-is-the-Electromechanical-Delay-EMD"><a href="#What-is-the-Electromechanical-Delay-EMD" class="headerlink" title="What is the Electromechanical Delay (EMD)?"></a>What is the Electromechanical Delay (EMD)?</h2><p>The electromechanical delay (EMD) refers to a neural and physiological delay in the production of mechanical force. This simply implies the muscles cannot generate and transmit force to the skeletal system instantaneously, instead, there is a slight delay. A delay in the production of mechanical force can, therefore, lead to a reduction in performance (24).</p><p>Currently, there are numerous components that have been suggested to contribute to this delay:</p><ol><li>Finite rate of increase in muscle stimulation by the central nervous system.</li><li>Propagation of the action potential on the muscle membrane.</li><li>Time constraints of calcium release and cross-bridge formation.</li><li>Interaction between the contractile filaments and the series of elastic components.</li><li>Toe region of the tendon.</li></ol><p>As a complete analysis of all these neurophysiological factors is beyond the scope of this article and readily available in exercise physiology textbooks, only the toe region will be explained.</p><p>The toe region of the SSC, otherwise simply explained as ‘slack within the tendon’ is present at the very beginning of the SSC. To simplify this concept, imagine a coiled-up piece of string that is being pulled from both ends in order to straighten it out and create tension. Well this ‘slack’, before the string is straight, is referred to as the ‘toe-region’. It is recognised that this slack within the tendon delays the time in which muscle-tendon stiffness and concentric force can be generated – simply the time taken to straighten the string and create tension (45) (Figure 3). Therefore, the toe region reduces the time available to generate force during the SSC and thus reduces concentric force output.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/02/Figure-3-Tendon-Force-Deformation-Curve-Toe-Region-Science-for-Sport.png"></p><p>Due to the negative effects of the EMD on mechanical force, it has been proposed that optimising muscular pre-activity may reduce or even counteract the effects of EMD by exciting the muscle and creating muscle-tendon stiffness prior to the start of the SSC (2). As a result, training methods which improve pre-activity, such as <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometric</a> and <a href="https://www.scienceforsport.com/ballistic-training/">ballistic training</a>, may be beneficial for the optimization of the SSC (27).</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The SSC, otherwise known as the reverse action of muscles, is a spring-like mechanism shown to enhance <a href="https://www.scienceforsport.com/omega-3s-why-they-are-the-real-alphas-of-fat-for-athletic-performance/">athletic performance</a> both in explosive- and endurance-based sports. Well-trained athletes appear to possess better SSC capacities than less- or non-trained individuals and thus highlight the necessity to optimise this property to enhance athleticism. Despite the long list of mechanisms proposed to influence the effects of the SSC, the active state is commonly believed to be the primary contributor. The time to develop mechanical force is negatively affected by the electromechanical delay, and thus attempts to maximise muscular pre-activity via particular training methods (e.g. <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometrics</a>) should be profound.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li>Bobbert MF and Casius LJ. Is the countermovement on jump height due to active state development? Med Sci Sport Exerc 37: 440–446, 2005. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15741843">PubMed]</a></li><li>Turner, A.N. &amp; Jeffreys, I. (2010). The stretch-shortening cycle: proposed mechanisms and methods for enhancement. <em>Journal of Strength and Conditioning Research, 17,</em> 60-67. [<a href="https://www.researchgate.net/publication/232163543_The_Stretch-Shortening_Cycle_Proposed_Mechanisms_and_Methods_for_Enhancement">Link]</a></li><li>Komi PV (1984) Physiological and biomechanical correlates of muscle function: effects of muscle structure and stretch-shortening cycle on force and speed. Exerc Sport Sci Rev 12:81-121 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/6376140">PubMed]</a></li><li>Lloyd, R.S., Oliver, J.L., Hughes, M.G., and Williams, C.A. (2012). The effects of 4-weeks of plyometric training on <a href="https://www.scienceforsport.com/reactive-strength-index/">reactive strength index</a> and leg stiffness in male youths. <em>Journal of Strength and Conditioning Research</em>, 26(10), pp.2812–2819. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22130392">PubMed]</a></li><li>Zatsiorsky VM and Kraemer WJ. Science and Practice of Strength Training. Champaign, IL: Human Kinetics, 2006. pp. 33–39. [<a href="http://www.humankinetics.com/products/all-products/science-and-practice-of-strength-training-2nd-edition">Link]</a></li><li>Aura O and Viitasalo JT. Biomechanical characteristics of jumping. Int J Sports Biomech 5: 89–97, 1989. [<a href="https://journals.humankinetics.com/view/journals/jab/5/1/article-p89.xml">Link]</a></li><li>McBride JM,McCaulleyGO, and Cormie P. Influence of preactivity and eccentric muscle activity on concentric performance during vertical jumping. J Strength Cond Res 23: 750–757, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18438244">PubMed]</a></li><li>McCaulley GO, Cormie P, Cavill MJ, Nuzzo JL, Urbiztondo ZG, and McBride JM. Mechanical efficiency during repetitive vertical jumping. Eur J Appl Physiol 101: 115–123, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17530275">PubMed]</a></li><li>Stefanyshyn, D. &amp; Nigg, B. (1998) Contribution of the lower extremity joints to mechanical energy in running vertical jumps and running long jumps. Journal of Sport Sciences, 16, 177-186. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/9531006">PubMed]</a></li><li>Padulo, J, Annino, G, D’Ottavio, S, Vernillo, G, Smith, L, Migliaccio, GM, and Tihanyi, J. Footstep analysis at different slopes and speeds in elite race walking. J Strength Cond Res 27(1): 125–129, 2013 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22450256">PubMed]</a></li><li>Taylor, M. J. D., &amp; Beneke, R. (2012). Spring Mass Characteristics of the Fastest Men on Earth.<em>International journal of sports medicine</em>, <em>33</em>(8), 667.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22510798">PubMed</a>]</li><li>Laffaye, G., &amp; Wagner, P. (2013). Eccentric <a href="https://www.scienceforsport.com/rate-of-force-development-rfd-2/">rate of force development</a>determines jumping performance. <em>Computer Methods in Biomechanics and Biomedical Engineering</em>, 16(1), pp.82–83. [<a href="http://www.tandfonline.com/doi/abs/10.1080/10255842.2013.815839?journalCode=gcmb20">Link]</a></li><li>Ball, NB, Stock, CG, and Scurr, JC. Bilateral contact ground reaction forces and contact times during plyometric drop jumping. J Strength Cond Res 24(10): 2762–2769, 2010. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/20613651">PubMed]</a></li><li>Walsh, M, Arampatzis, A, Schade, F, and Bruggemann, G. The effect of drop jump starting height and contact time on power, work performed and moment of force. J Strength Cond Res 18: 561–566, 2004. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15320658">PubMed]</a></li><li>Flanagan EP and Comyns TM. The use of contact time and the reactive strength index to optimise fast stretch-shortening cycle training. Strength Cond J 30: 33– 38, 2008. [<a href="https://www.researchgate.net/publication/232212864_The_Use_of_Contact_Time_and_the_Reactive_Strength_Index_to_Optimize_Fast_Stretch-Shortening_Cycle_Training">Link]</a></li><li>Kobsar, D., &amp; Barden, J. (2011). Contact time predicts coupling time in slow stretch-shortening cycle jumps. <em>Journal of Strength and Conditioning Research,</em> 25(1), pp.51-52. [<a href="http://journals.lww.com/nsca-jscr/Abstract/2011/03001/Contact_Time_Predicts_Coupling_Time_in_Slow.79.aspx?trendmd-shared=0">Link]</a></li><li>Zameziati, K., Morin, J.B., Deiuri, E., Telonio, A., &amp; Belli, A. (2006). Influence of the contact time on coupling time and a simple method to measure coupling time. <em>European Journal of Applied Physiology</em>, 96, pp.752–756. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16477446">PubMed]</a></li><li>Potteiger JA, Lockwood RH, Haub MD, Dolezal BA, Almuzaini KS, Schroeder JM, and Zebas CJ. Muscle <a href="https://www.scienceforsport.com/a-strength-power-training-decision-tree/">power and fiber characteristics following 8 weeks of plyometric training</a>. J Strength Cond Res 13: 275–279, 1999. [<a href="https://www.researchgate.net/publication/232211979_Muscle_Power_and_Fiber_Characteristics_Following_8_Weeks_of_Plyometric_Training">Link]</a></li><li>Spurrs RW, Murphy AJ, and Watsford ML. The <a href="https://www.scienceforsport.com/sleep-extension-through-napping-may-effect-performance/">effect of plyometric training on distance running performance</a>. Eur J Appl Physiol 89: 1–7, 2003. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/12627298">PubMed]</a></li><li>McBride JM,McCaulleyGO, and Cormie P. influence of preactivity and eccentric muscle activity on concentric performance during vertical jumping. J Strength Cond Res 23: 750–757, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18438244">PubMed]</a></li><li>Myer GD, Ford KR, Brent JL, and Hewett TE. The effects of plyometric vs. dynamic stabilization and balance training on power, balance, and landing force in female athletes. J Strength Cond Res 20: 345–353, 2006. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16686562">PubMed]</a></li><li>Bosco C, Komi PV, and Ito A. Pre-stretch potentiation of human skeletal muscle during ballistic movement. Acta Physiol Scand 111: 135–140, 1981. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7282389">PubMed]</a></li><li>Bosco C, Montanari G, Ribacchi R, Giovenali P, Latteri F, Iachelli G, Faina M, Coli R, DalMonte A, Las RosaM, CortelliG, and Saibene F. Relationship between the efficiency of muscular work during jumping and the energetic of running. Eur J Appl Physiol 56: 138–143, 1987. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/3569218">PubMed]</a></li><li>Bobbert MF, Gerritsen KGM, Litjens MCA, and Van Soest AJ. Why is countermovement jump height greater than squat jump height? Med Sci Sports Exerc 28: 1402–1412, 1996. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/8933491">PubMed]</a></li><li>Ettema GJ, Huijing PA, and De Hann A. The potentiating effect of pre-stretch on contractile performance of rat gastrocnemius medialis muscle during subsequent shortening and isometric contractions. J Exp Biology 165: 121– 136, 1992. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/1588248">PubMed]</a></li><li>Finni T, Ikegawa S, Lepola V, and Komi P. In vivo behaviour of vastus lateralis muscle during dynamic performances. Eur J Sport Sci 1: 1–13, 2001. [<a href="http://www.tandfonline.com/doi/abs/10.1080/17461390100071101">Link]</a></li><li>Kyrolainen H, Komi PV, and Kim DH. Effects of <a href="https://www.scienceforsport.com/how-to-implement-strength-and-power-training-principles-into-rehabilitation/">power training</a> on neuromuscular performance and mechanical efficiency. Scand J Med Sci Sports 1: 78–87, 1991. [<a href="http://onlinelibrary.wiley.com/doi/10.1111/j.1600-0838.1991.tb00275.x/abstract">Link]</a></li><li>Schmidtbleicher D, Gollhofer A, and Frick U. Effects of stretch shortening time training on the performance capability and innervation characteristics of leg extensor muscles. In: Biomechanics XI-A (Vol 7-A). DeGroot G, Hollander A, Huijing P, and Van Ingen Schenau G, eds. Amsterdam, the Netherlands: Free University Press, 1988. pp. 185–189. [<a href="https://books.google.com.au/books/about/Biomechanics_XI_A.html?id=_v97SQAACAAJ&redir_esc=y">Link]</a></li><li>Kubo K, Kawakami Y, and Fukunaga T. Influence of elastic properties of tendon structures on <a href="https://www.scienceforsport.com/monitoring-fatigue-are-subjective-wellness-jumping-performance-and-submaximal-running-test-reliable/">jump performance</a> in humans. J Appl Physiol 87: 2090–2096, 1999. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/10601154">PubMed]</a></li><li>Lichtwark GA, and Wilson AM. Is Achilles tendon compliance optimised for maximum muscle efficiency during locomotion? J Biomech 40: 1768–1775, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17101140">PubMed]</a></li><li>Hobara H, Kimura K, Omuro K, Gomi K. Muraoka T, Iso S, and Kanosue K. Determinants of difference in leg stiffness between endurance- and power-trained athletes. J Biomech 41: 506–514, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18062979">PubMed]</a></li><li>Arampatzis A, Karamanidis K, Morey- Klapsing G, De Monte G, and Stafilidis S. Mechanical properties of the triceps surae tendon and aponeurosis in relation to intensity of sport activity. J Biomech 40: 1946–1952, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17101142">PubMed]</a></li><li>Dalleau G, Belli A, Bourdin M, and Lacour JR. The spring-mass model and the energy cost of treadmill running. Eur J Appl Physiol Occup Physiol 77: 257–263, 1998. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/9535587">PubMed]</a></li><li>Voigt M, Bojsen-Moller F, Simonsen EB, and Dyhre-Poulsen P. The influence of tendon Youngs modulus, dimensions and instantaneous moment arms on the efficiency of human movement. J Biomech 28: 281–291, 1995. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7730387">PubMed]</a></li><li>Verkhoshansky YV. Quickness and velocity in sports movements. N Stud Athletics. 11: 29–37, 1996. [<a href="https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwipnYCGquzKAhWGspQKHY2hB2QQFggcMAA&url=http://www.iaaf.org/download/downloadnsa?filename=4b717228-d483-4074-952a-26eacf94b253.pdf&urlslug=quickness-and-velocity-in-sports-movements&usg=AFQjCNFm_wOXPr4WcBEPoq50xPc-lYKszg&sig2=AY-zt1vx9u1Hl71uYO1A2g">Link]</a></li><li>Heise GD and Martin PE. ‘‘Leg spring’’ characteristics and the aerobic demand of running. Med Sci Sports Exerc 30: 750– 754, 1998. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/9588619">PubMed]</a></li><li>Goldspink G. Muscle energetic and animal locomotion: In Mechanics and Energetic of Animal Locomotion. Alexander Mc and Goldspink G, eds. London, United Kingdom: Chapman and Hill, 1977. pp. 57–81. [<a href="http://www.amazon.com/Mechanics-energetics-locomotion-McNeill-Alexander/dp/0470991852">PubMed]</a></li><li>Wilson, G.J., Murphy, A.J., and Pryor, J.F. (1994). Musculotendinous stiffness: Its relationship to eccentric, isometric, and concentric performance. <em>Journal of Applied Physiology</em>, 76(1), pp.2714–2719. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7928905">PubMed]</a></li><li><em>McArdle, W.D., Katch, F.I., Katch, L.K., (2010). Exercise physiology: Nutrition, energy, and human performance, 7th</em> London: Lippincott Williams &amp; Wilkins. [<a href="http://www.amazon.com/Exercise-Physiology-Nutrition-Performance-Lippincott/dp/0781797810">Link]</a></li><li>Butler, R.J., Crowell, H.P., and Davis, I.M. (2003). Lower extremity stiffness: Implications for performance and injury. <em>Clinical Biomechanics</em>, 18(1), pp.511–517. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/12828900">PubMed]</a></li><li>Bosco, C., Komi, P.V., and Ito, A. (1981). Pre-stretch potentiation of human skeletal muscle during ballistic movement. <em>Acta Physiologica Scandinavica,</em> 111(17), pp.135–140. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/7282389">PubMed]</a></li><li>Kubo K, Morimoto M, Komuro T, Yata H, Tsunoda N, Kanehisa H, and Fukunga T. Effects of plyometric and weight <a href="https://www.scienceforsport.com/which-to-choose-to-maximise-performance-in-team-sports-complex-or-contrast-training/">training on muscle-tendon complex and jump performance</a>. Med Sci Sports Exerc 39: 1801–1810, 2007. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17909408">PubMed]</a></li><li>Thompson DD and Chapman AE. The mechanical response of active human muscle during and after stretch. Eur J Appl Physiol 57: 691–697, 1998. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/3416853">PubMed]</a></li><li>Van Ingen Schenau GJ, Bobbert MF, and De Hann A. Mechanics and energetics of the stretch shortening cycle: A stimulating discussion. J Appl Biomech 13: 484– 496, 1997. [<a href="https://www.researchgate.net/publication/229071227_Mechanics_and_energetics_of_the_stretch-shortening_cycle_A_stimulating_discussion">Link]</a></li><li>Hill, A.V. (1938). The heat of shortening and the dynamic constants of muscle. Proceedings of the Royal Social B, 126, pp.136–195. [<a href="http://rspb.royalsocietypublishing.org/content/126/843/136">Link]</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RATE OF FORCE DEVELOPMENT (RFD)</title>
    <link href="/2023/09/11/RATE-OF-FORCE-DEVELOPMENT-RFD/"/>
    <url>/2023/09/11/RATE-OF-FORCE-DEVELOPMENT-RFD/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.scienceforsport.com/rate-of-force-development-rfd-2/">RATE OF FORCE DEVELOPMENT (RFD)</a></p><p>The Rate of Force Development (RFD) is a measure of explosive strength, and higher RFDs have been linked with better athletic performance.</p><p><strong>Contents of Article</strong></p><ol><li>Summary</li><li>What is the Rate of Force Development (RFD)?</li><li>What impacts the Rate of Force Development?</li><li>Why is the Rate of Force Development important for sports?</li><li>How do you calculate the Rate of Force Development?</li><li>Is the Rate of Force Development valid and reliable?</li><li>How do you improve your Rate of Force Development?</li><li>Conclusion</li><li>References</li><li>About the Author</li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The Rate of Force Development (RFD) is a measure of explosive strength, or simply how fast an athlete can develop force. Athletes with a higher RFD have been shown to perform better during numerous physical performance tests. This, therefore, highlights the potential importance this value has in the role of athletic development. </p><p>Whilst many forms of training have been shown to improve the RFD in untrained individuals, only <a href="https://www.scienceforsport.com/how-to-get-started-with-resistance-training-what-you-need-to-know/">resistance</a> and <a href="https://www.scienceforsport.com/ballistic-training/">ballistic training</a> have been shown to enhance this quality in trained athletes. Lastly, though there are multiple ways to measure the RFD, the time-interval sampling windows appear to be the most reliable.</p><h2 id="What-is-the-Rate-of-Force-Development"><a href="#What-is-the-Rate-of-Force-Development" class="headerlink" title="What is the Rate of Force Development?"></a>What is the Rate of Force Development?</h2><p>The RFD is a measure of explosive strength, or simply how fast an athlete can develop force – hence the ‘rate’ of ‘force development’. This is defined as the speed at which the contractile elements of the muscle can develop force (1). Therefore, improving an athlete’s RFD may make them more explosive as they can develop larger forces in a shorter period of time. Developing a more explosive athlete may improve their sporting performance. In fact, higher RFDs have been directly linked with better jump (2-8), sprint (9), cycling (10), weightlifting (5, 6), and even golf swing performances (11).</p><p>The RFD is commonly believed to be manifested during the <a href="http://www.scienceforsport.com/stretch-shortening-cycle/">stretch-shortening cycle (SSC)</a>. Depending upon the duration of <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a>, exercises are classified as either slow- (≥ 250 milliseconds) or fast-SSC (≤ 250 milliseconds) movements (12). For example, a <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">counter-movement jump</a> (CMJ) is classified as a slow-SSC movement as the duration of the SSC lasts approximately 500 milliseconds (3). On the other hand, sprinting is classified as a fast-SSC movement as the duration of the SSC lasts between 80-90 milliseconds (13). Table 1 displays the SSC durations of some common exercises.</p><p>Table 1. SSC durations of common exercises.</p><table><thead><tr><th>Exercise</th><th>SSC Duration (Ms)</th><th>SSC Classification</th></tr></thead><tbody><tr><td>Race Walking (14)</td><td>270-300</td><td>Slow</td></tr><tr><td>Sprinting (13)</td><td>80-90</td><td>Fast</td></tr><tr><td>Countermovement Jump (CMJ) (3)</td><td>500</td><td>Slow</td></tr><tr><td>Drop Jump (20cm - 60cm) (15, 16)</td><td>130-300</td><td>Fast &#x2F; Slow</td></tr><tr><td>Long Jump (17)</td><td>140-170</td><td>Fast</td></tr><tr><td>Multiple Hurdle Jumps (18)</td><td>150</td><td>Fast</td></tr></tbody></table><p>Because the movement is slower, exercises with slow-SSC have a longer timeframe to develop force than those with a fast-SSC; this means slow-SSC exercises can typically create higher peak forces (7, 19). However, as there is typically less urgency to develop force during the slow-SSC movements, they often do not develop force as quickly as fast-SSC movements. This means that exercises with a slow-SSC produce lower RFDs than fast-SSC movements (7, 19). Therefore, slow-SSC exercises produce higher peak forces, but lower RFD than fast-SSC movements.</p><p>On the other hand, as it takes 140-710 milliseconds to develop peak force during various jump exercises (7, 5, 20), fast-SSC exercises may struggle to produce peak forces because the <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a> simply does not last long enough. Whilst they may not be capable of producing peak forces, they can produce large a RFD due to the speed of the movement (Table 2).</p><p>Table 2. Differences between force-time characteristics of various exercises.</p><table><thead><tr><th>Exercise</th><th>Peak Force(N)</th><th>Time to Peak Force(s)</th><th>Peak RFD</th><th>Time to Peak RFD</th></tr></thead><tbody><tr><td>Isometric Mid-Thigh Pull</td><td>3177</td><td>0.25</td><td>22008</td><td>0.12</td></tr><tr><td>Mid-Thigh Clean Pull @ 90% of 1RM</td><td>2327</td><td>0.25</td><td>23472</td><td>0.14</td></tr><tr><td>Mid-Thigh Clean Pull @ 30% of 1RM</td><td>1817</td><td>0.15</td><td>27607</td><td>0.09</td></tr><tr><td>Countermovement Jump (CMJ)</td><td>1449</td><td>0.39</td><td>12093</td><td>0.26</td></tr><tr><td>Squat Jump (SJ)</td><td>1663</td><td>0.32</td><td>11529</td><td>0.19</td></tr></tbody></table><p>Data extracted from experienced male weightlifters Kawamori et al., (7).</p><p>It is suggested that exercises characterised by larger joint displacements (i.e. work through a larger range of movement) are typically categorised as slow-SSC movements. Whereas exercises with smaller joint displacements are commonly referred to as fast-SSC movements (21). For example, a <a href="https://www.scienceforsport.com/countermovement-jump-cmj/">CMJ</a> (slow-SSC movement) experiences larger joint displacements than sprinting (fast-SSC) (Figure 1). This helps to dissociate between what are slow-SSC movements and what are fast-SSC movements when no research has determined what classification they belong to.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/01/Figure-1-CMJ-and-Sprint-Joint-Angles.jpg"></p><h2 id="What-impacts-the-Rate-of-Force-Development"><a href="#What-impacts-the-Rate-of-Force-Development" class="headerlink" title="What impacts the Rate of Force Development?"></a>What impacts the Rate of Force Development?</h2><p>Improvements in RFD are likely to be the result of increases in muscle-tendon stiffness (22, 23), enhanced muscle force production via changes in muscle fibre type or type area (from type I to type IIA) (24, 25), and increases in neural drive during the early phase of the <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a> (&lt; 100 ms) (26, 27). In contrast, RFD appears to be negatively affected by changes in muscle fibre type (from type IIX to type IIA) (28), and increases in fascicle length (causing reduced muscle stiffness) (29).</p><h2 id="Why-is-the-Rate-of-Force-Development-important-for-sports"><a href="#Why-is-the-Rate-of-Force-Development-important-for-sports" class="headerlink" title="Why is the Rate of Force Development important for sports?"></a>Why is the Rate of Force Development important for sports?</h2><p>As <a href="https://www.scienceforsport.com/max-power-the-keys-to-getting-the-most-out-of-power-training/">power</a> is a key determinant in the performances of many sports, optimising an athlete’s explosiveness may be of great importance (30-35). Research has identified that RFD has been directly linked to performances during jumping (2-8), <a href="https://www.scienceforsport.com/olympic-weightlifting/">weightlifting</a>(5, 6), cycling (10), sprinting (9), and even during the golf swing (11) – suggesting a better RFD can lead to better athletic performance. Moreover, elite sprinters have been shown to possess greater RFD than well-trained sprinters (9). Collectively, this information suggests that RFD may be an important contributor to athletic performance.</p><ul><li>RFD linked to better jump, sprint, cycling, <a href="https://www.scienceforsport.com/olympic-weightlifting/">weightlifting,</a> and golf swing performances</li><li>Elite-level sprinters have better RFD than well-trained sprinters</li><li>Power-trained athletes have greater RFD than non-power-trained athletes (36).</li><li>Power-trained athletes have greater RFD than endurance athletes (36).</li></ul><h2 id="How-do-you-calculate-the-Rate-of-Force-Development"><a href="#How-do-you-calculate-the-Rate-of-Force-Development" class="headerlink" title="How do you calculate the Rate of Force Development?"></a>How do you calculate the Rate of Force Development?</h2><p>As RFD is an expression of explosive strength, it is measured in Newtons per second squared (N·s-1). The RFD can be calculated for isometric, concentric and eccentric muscle contractions, with the latter two otherwise referred to in the research as the ‘positive’ and ‘negative’ acceleration phases of the <a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a> (2, 3). In fact, one study suggests that eccentric RFD is a better predictor of jump performance than concentric RFD because it summarises several intrinsic properties of muscle and tendons during a key moment (2). However, this is yet to be validated by other research.</p><p>Multiple measures of RFD have been developed in order to measure various components of performance during both isometric and dynamic movements:</p><ol><li>Average RFD or IES (Index of Explosiveness) (2, 3, 5, 6, 8, 9, 11, 37, 38)</li><li>Time-interval RFD (11, 39)</li><li>Instantaneous RFD (40, 41)</li><li>Peak or maximal RFD (42, 4, 5, 7, 10, 11, 36)</li><li>Time to peak RFD (11, 7)</li></ol><p><strong>Average RFD</strong></p><p>This value is identical to the IES discussed by Zatsiorsky (1995) (37) and is calculated by dividing the peak force by the time to achieve peak force (39). However, this form of measuring average RFD has been shown to have lower levels of reliability in comparison to time-interval RFD and peak RFD (39). These lower levels of reliability may be associated with each athlete’s time to achieve peak force, as not all athletes can achieve peak force in the same time frame. Therefore, measuring RFD using predetermined time intervals can accommodate for these variances.</p><p><strong>How to calculate Average RFD</strong></p><p>Example – Calculating Average RFD</p><p><em>Average RFD</em> <em>[N·s-1] &#x3D; Peak Force [N] &#x2F; Time to achieve peak force [s][&#x2F;toggle]</em></p><p>Time-Interval RFD: Though this measure of RFD is effectively the same as average RFD, it is calculated at various time intervals (e.g. 0-30, 0-50, 0-90, 0-100, 0-150, 0-200, and 0-250 milliseconds [39]). This value simply represents a change in force divided by a change in time. It is calculated by dividing the force at the end of the time interval by the duration of the time interval (39) (Table 3). Just note that when calculating RFD, the time should be calculated in seconds, not milliseconds.</p><p><strong>How to Calculate Time-Interval RFD</strong></p><p>Example – Calculating RFD with a 0-30 millisecond time-interval:</p><p><em>RFD</em> <em>[N·s-1] &#x3D; Change in Force [N] &#x2F; Change in Time [s]</em></p><p><em>RFD</em> <em>[N·s-1] &#x3D; Force [N] at 30 milliseconds &#x2F; 0.03 second time-interval [s]</em></p><p><em>RFD</em> <em>[N·s-1] &#x3D; 50N &#x2F; 0.03s</em></p><p><em>RFD</em> <em>[N·s-1] &#x3D; 1,666</em></p><p>Table 3. Time-interval RFD calculations for the isometric mid-thigh clean pull.</p><table><thead><tr><th>Time(Ms)</th><th>Force(N)</th><th>Change in Force(N)</th><th>Change in Time(s)</th><th>Change in Force &#x2F; Change in Time</th><th>RFD(N·s-1)</th></tr></thead><tbody><tr><td>0-30</td><td>50</td><td>50</td><td>0.03</td><td>50&#x2F;0.03</td><td>1666</td></tr><tr><td>0-50</td><td>180</td><td>180</td><td>0.05</td><td>180&#x2F;0.05</td><td>3600</td></tr><tr><td>0-90</td><td>540</td><td>540</td><td>0.09</td><td>540&#x2F;0.09</td><td>6000</td></tr><tr><td>0-100</td><td>600</td><td>600</td><td>0.1</td><td>590&#x2F;0.1</td><td>5900</td></tr><tr><td>0-150</td><td>850</td><td>850</td><td>0.15</td><td>850&#x2F;0.15</td><td>5666</td></tr><tr><td>0-200</td><td>1200</td><td>1200</td><td>0.2</td><td>1190&#x2F;0.2</td><td>5950</td></tr><tr><td>0-250</td><td>1400</td><td>1400</td><td>0.25</td><td>1400&#x2F;0.25</td><td>5600</td></tr></tbody></table><p>This data is adapted from the data reported by (11).</p><p>The <a href="https://www.scienceforsport.com/what-do-strength-and-conditioning-coaches-do-and-how-can-you-get-a-job-in-the-sc-industry/">strength and conditioning coach </a>should select the time intervals they wish to use based upon the nature of the exercise. For example, if the exercise has a fast-<a href="https://www.scienceforsport.com/stretch-shortening-cycle/">SSC</a>movement (e.g. Sprinting – 80-90 milliseconds), then it may be suggested that time intervals of ≤ 100 milliseconds may be most appropriate (e.g. 0-50, 0-90, and 0-100 milliseconds). Furthermore, the early time intervals (&lt; 100 ms) are often referred to as ‘early phase’ RFD, whilst &gt; 100s time intervals are referred to as ‘late phase’ RFD.</p><p><strong>Instantaneous RFD</strong></p><p>This value is measured by using the maximal tangential slope between two adjacent data points. In other words, the data is recorded using 1 millisecond time intervals, and from this, the change in force is divided by the change in time at every 1 millisecond time interval. As this value of RFD is calculated every 1 millisecond, it provides a very precise measure of RFD.</p><p><strong>Peak or Maximal RFD</strong></p><p>This value of RFD is really as simple as it sounds, it is the largest amount of RFD produced during the movement. Most commonly, the value is identified by measuring the peak RFD during numerous sampling windows of 1, 2, 5, 10, 20, 30, and 50 (40, 39). For example, if the strength and conditioning coach selected a sampling window of 5 milliseconds, they would measure peak RFD every 5 milliseconds (e.g. 0-5, 5-10, and 10-15 milliseconds and so forth). They would then simply identify the largest RFD value out of those recorded – this value is then the peak RFD. Whilst all of these sampling windows have been reported as reliable measures of peak RFD, the 20 millisecond sampling window has been shown to be the most reliable (39). Table 4 demonstrates how to identify peak RFD during an isometric performance.</p><p>Table 4. Peak RFD calculations using 50-millisecond sampling windows.</p><table><thead><tr><th>Time(Ms)</th><th>Force(N)</th><th>Change in Force(N)</th><th>Change in Time(s)</th><th>Change in Force &#x2F; Change in Time</th><th>RFD(N·s-1)</th></tr></thead><tbody><tr><td>0-50</td><td>180</td><td>180</td><td>0.05</td><td>180&#x2F;0.05</td><td>3600</td></tr><tr><td>50-100</td><td>600</td><td>420</td><td>0.05</td><td>420&#x2F;0.05</td><td>8400</td></tr><tr><td>100-150</td><td>850</td><td>250</td><td>0.05</td><td>250&#x2F;0.05</td><td>5000</td></tr><tr><td>150-200</td><td>1200</td><td>350</td><td>0.05</td><td>350&#x2F;0.05</td><td>7000</td></tr><tr><td>200-250</td><td>1400</td><td>200</td><td>0.05</td><td>200&#x2F;0.05</td><td>4000</td></tr></tbody></table><table><thead><tr><th align="right">Peak RFD</th><th>8400</th></tr></thead><tbody><tr><td align="right">Time to Peak RFD (Ms)</td><td>100</td></tr><tr><td align="right">Average RFD (peak force &#x2F; time to peak force)</td><td>5600</td></tr></tbody></table><p>From this data, the coach is able to calculate the athlete’s peak RFD, time to peak RFD and average RFD. These variables are useful tools for comparing a group of athletes to identify who the best and worst individuals are at developing force quickly.</p><p><strong>Time to Peak RFD</strong></p><p>As displayed in Table 4, this value of RFD is extremely straightforward. It is a useful tool for measuring performance as it provides the coach with information on how quickly the athlete is able to achieve their maximal explosive strength (i.e. peak RFD). Decreasing an athlete’s time to achieve peak RFD will allow them to produce higher forces in shorter periods of time, and therefore may increase their explosiveness and overall athletic performance.</p><h2 id="Is-the-Rate-of-Force-Development-valid-and-reliable"><a href="#Is-the-Rate-of-Force-Development-valid-and-reliable" class="headerlink" title="Is the Rate of Force Development valid and reliable?"></a>Is the Rate of Force Development valid and reliable?</h2><p>The RFD and its various measures (Average RFD, Time-Interval RFD, Peak RFD, and Time to Peak RFD) have all been shown to be valid and reliable tools for assessing explosive strength (11, 39). However, the most reliable measures for assessing RFD appears to be any of the time-interval sampling windows (i.e. 0-30, 0-50, 0-90, 0-100, 0-150, 0-200, and 0-250 milliseconds), and peak RFD using 20 millisecond windows (39). It is therefore recommended that these two variables should be preferable when measuring RFD.</p><h2 id="How-do-you-improve-your-Rate-of-Force-Development"><a href="#How-do-you-improve-your-Rate-of-Force-Development" class="headerlink" title="How do you improve your Rate of Force Development?"></a>How do you improve your Rate of Force Development?</h2><p>Increasing the RFD whilst simultaneously reducing the time in which peak RFD occurs, will result in a left and upward shift in the force-time curve (Figure 2). This left and upward shift enables the athlete to produce greater forces in a shorter period of time, ultimately improving their explosiveness.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/03/Figure-2-Shift-in-the-Force-Time-curve-after-a-sucessful-training-programme..png"></p><p>It is often suggested that athletes must train at various sections along the force-time curve if improvements in RFD are to occur. By only training on one part of the force-time curve (e.g. maximum strength), it is likely the athlete will only improve their performance at that section on the paradigm. For example, only training maximal strength may lead to improvements in force production, but it may also result in a reduction in the time to achieve that force (Figure 3).</p><p>As training programmes that combine strength and power training have been repeatedly shown to improve athletic performance more than strength or speed training alone (43), there is no surprise that most exercise professionals commonly use an all-rounded approach within their programming.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/03/Figure-3-Force-time-curve-after-training-specifc-elements.png"></p><p>The following types of training have all shown to improve RFD:</p><ul><li>Resistance training (44, 45, 46, 47, 48)</li><li><a href="https://www.scienceforsport.com/ballistic-training/">Ballistic training</a> (49, 50, 51, 52)</li><li><a href="https://www.scienceforsport.com/olympic-weightlifting/">Olympic Weightlifting</a> (53)</li><li><a href="https://www.scienceforsport.com/plyometric-training/">Plyometric training</a> (54, 55, 50, 56)</li><li><a href="https://www.scienceforsport.com/nba-training-secrets-how-the-worlds-biggest-and-best-balance-training-and-games/">Balance training</a> (57, 58)</li></ul><p>However, only those listed below have shown RFD improvements in trained or athletic subjects:</p><ul><li>Resistance training (59, 60, 61, 62, 63)</li><li>Ballistic training (51, 52)</li></ul><p>So whilst numerous training methods have been shown to improve RFD in untrained and elderly males and females, little research has shown RFD improvements in trained or athletic subjects.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>RFD is a reliable measure of explosive strength, with higher RFDs have been linked with better athletic performance. Improvements in RFD are likely to be the result of increases in muscle-tendon stiffness, enhanced muscle force production via changes in muscle fibre type (from type I to type IIA), and increases in neural drive. </p><p>The most reliable values for measuring this component of performance appear to be calculating RFD at various time intervals and peak RFD using 20-millisecond sampling windows. Though various methods of training have been shown to improve performance (resistance, ballistic, <a href="https://www.scienceforsport.com/olympic-weightlifting/">Olympic Weightlifting</a>, <a href="https://www.scienceforsport.com/plyometric-training/">plyometrics</a>, and balance training), only resistance and ballistic training have been proven to increase RFD in trained and athletic populations.</p><p><img src="https://www.scienceforsport.com/wp-content/uploads/2016/03/Rate-of-Force-Development.jpg"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li>Aagaard P., Simonsen E.B., Andersen J.L., Magnusson P., and Dyhre-Poulsen P. (2002) Increased rate of force development and neural drive of human skeleton muscle following resistance training. <em>J Appl Physiol</em> 93: 1318-1326. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/12235031">PubMed]</a></li><li>Laffaye, G., &amp; Wagner, P. (2013). Eccentric rate of force development determines jumping performance. <em>Computer Methods in Biomechanics and Biomedical Engineering</em>, 16(1), pp.82–83. [<a href="https://www.researchgate.net/publication/244987434_Eccentric_rate_of_force_development_determines_jumping_performance">Link]</a></li><li>Laffaye, G, Wagner, PP, and Tombleson, TIL. Countermovement jump height: Gender and sport-specific differences in the forcetime variables. J Strength Cond Res 28(4): 1096–1105, 2014 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/23838969">PubMed]</a></li><li>Haff, GG, Carlock, JM, Hartman, MJ, Kilgore, JL, Kawamori, N, Jackson, JR, Morris, RT, Sands, WA, and Stone, MH. Force-time curve characteristics of dynamic and isometric muscle actions of elite women Olympic weightlifters. J Strength Cond Res 19: 741–748, 2005. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16287343">PubMed]</a></li><li>McLellan, CP, Lovell, DI, and Gass, GC. The role of rate of force development on vertical jump performance. J Strength Cond Res 25(2): 379–385, 2011 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/20093963">PubMed]</a></li><li>Haff, GG, Stone, MH, O’Bryant, HS, Harman, E, Dinan, CN, Johnson, R, and Han, KH. Force-time dependent characteristics of dynamic and isometric muscle actions. J Strength Cond Res 11: 269– 272, 1997. [<a href="http://journals.lww.com/nsca-jscr/Abstract/1997/11000/Force_Time_Dependent_Characteristics_of_Dynamic.14.aspx">Link]</a></li><li>Kawamori, N, Rossi, SJ, Justice, BD, Haff, EE, Pistilli, EE, O’Bryant, HS, Stone, MH, and Haff, GG. Peak force and rate of force development during isometric and dynamic mid-thigh clean pulls performed at various intensities. J Strength Cond Res 20: 483–491, 2006. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/16937959">PubMed]</a></li><li>Nuzzo, JL, McBride, JM, Cormie, P, and McCaulley, GO. Relationship between countermovement jump performance and multijoint isometric and dynamic tests of strength. J Strength Cond Res 22: 699–707, 2008. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/18438251">PubMed]</a></li><li>Slawinski, J, Bonnefoy, A, Leveˆque, JM, Ontanon, G, Riquet, A, Dumas, R, and Che&#96; ze, L. Kinematic and kinetic comparisons of elite and well-trained sprinters during sprint start. J Strength Cond Res 24(4): 896–905, 2010 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/19935105">PubMed]</a></li><li>Stone, MH, Sands, WA, Carlock, J, Callan, S, Dickie, D, Daigle, K, Cotton, J, Smith, SL, and Hartman, M. The importance of isometric maximum strength and peak rate-of-force development in sprint cycling. J Strength Cond Res 18(4): 878–884, 2004. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15574097">PubMed]</a></li><li>Leary, BK, Statler, J, Hopkins, B, Fitzwater, R, Kesling, T, Lyon, J, Phillips, B, Bryner, RW, Cormie, P, and Haff, GG. The relationship between isometric force-time curve characteristics and club head speed in recreational golfers. J Strength Cond Res 26: 2685–2697, 2012. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22797001">PubMed]</a></li><li>Turner, A., and Jeffreys, I. (2010). The Stretch-Shortening Cycle: Proposed Mechanisms and Methods for Enhancement. <em>Strength and Conditioning Journal</em>. 32(4), pp.87-99. [<a href="https://www.researchgate.net/publication/232163543_The_Stretch-Shortening_Cycle_Proposed_Mechanisms_and_Methods_for_Enhancement">PubMed]</a></li><li>Taylor, M. J. D., &amp; Beneke, R. (2012). Spring Mass Characteristics of the Fastest Men on Earth.<em>International journal of sports medicine</em>, <em>33</em>(8), 667.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22510798">PubMed</a>]</li><li>Padulo, J, Annino, G, D’Ottavio, S, Vernillo, G, Smith, L, Migliaccio, GM, and Tihanyi, J. Footstep analysis at different slopes and speeds in elite race walking. J Strength Cond Res 27(1): 125–129, 2013 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22450256">PubMed]</a></li><li>Ball, NB, Stock, CG, and Scurr, JC. Bilateral contact ground reaction forces and contact times during plyometric drop jumping. J Strength Cond Res 24(10): 2762–2769, 2010. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/20613651">PubMed]</a></li><li>Walsh, M, Arampatzis, A, Schade, F, and Bruggemann, G. The effect of drop jump starting height and contact time on power, work performed and moment of force. J Strength Cond Res 18: 561–566, 2004. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/15320658">PubMed]</a></li><li>Stefanyshyn, D. &amp; Nigg, B. (1998) Contribution of the lower extremity joints to mechanical energy in running vertical jumps and running long jumps. Journal of Sport Sciences, 16, 177-186.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/9531006">PubMed]</a></li><li>Flanagan EP and Comyns TM. The use of contact time and the <a href="https://www.scienceforsport.com/reactive-strength-index/">reactive strength index</a> to optimise fast stretch-shortening cycle training. Strength Cond J 30: 33– 38, 2008. [<a href="https://www.researchgate.net/publication/232212864_The_Use_of_Contact_Time_and_the_Reactive_Strength_Index_to_Optimize_Fast_Stretch-Shortening_Cycle_Training">Link]</a></li><li>Jensen, R.L., Flanagan, E.P., &amp; Ebben, W.P. (2008). Rate of force development and time to peak force during plyometric exercises. <em>Musculoskeletal Mechanics</em>, ISBS Conference 2008, July 14-18, 2008, Seoul, Korea. 199-202. [<a href="https://ojs.ub.uni-konstanz.de/cpa/article/view/2023">Link]</a></li><li>Markstrom, JL and Olsson, CJ. Countermovement jump peak force relative to body weight and jump height as predictors for sprint running performances: (In)homogeneity of track and field athletes? J Strength Cond Res 27(4): 944–953, 2013 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22692108">PubMed]</a></li><li>Ebben WP, Flanagan EP, Jensen RJ. Gender Similarities in Rate of Force Development and Time to Takeoff during the Countermovement Jump. Journal of Exercise Physiology, 2007;10(6):10-17. [<a href="https://www.researchgate.net/publication/231424259_Gender_similarities_in_rate_of_force_development_and_time_to_takeoff_during_the_countermovement_jump">Link]</a></li><li>Kubo, K., Kanehisa, H., Ito, M., &amp; Fukunaga, T. (2001). Effects of isometric training on the elasticity of human tendon structures in vivo. Journal of Applied Physiology, 91(1), 26-32.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/11408409">PubMed</a>]</li><li>Burgess, K. E., Connick, M. J., Graham-Smith, P., &amp; Pearson, S. J. (2007). Plyometric vs. isometric training influences on tendon properties and muscle output. The Journal of Strength &amp; Conditioning Research, 21(3), 986-989.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/17685695">PubMed</a>]</li><li>Häkkinen, K., Alen, M., Kraemer, W. J., Gorostiaga, E., Izquierdo, M., Rusko, H., &amp; Paavolainen, L. (2003). Neuromuscular adaptations during concurrent strength and endurance training versus strength training. European journal of applied physiology, 89(1), 42-52.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/12627304">PubMed</a>]</li><li>Aagaard, P., Simonsen, E. B., Andersen, J. L., Magnusson, P., &amp; Dyhre-Poulsen, P. (2002a). Increased rate of force development and neural drive of human skeletal muscle following resistance training. Journal of applied physiology, 93(4), 1318-1326.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/12235031">PubMed</a>]</li><li>Van Cutsem, M., Duchateau, J., &amp; Hainaut, K. (1998). Changes in single motor unit behaviour contribute to the increase in contraction speed after dynamic training in humans. The Journal of Physiology, 513(Pt 1), 295.[<a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2231276/">PubMed</a>]</li><li>Vila-Chã, C., Falla, D., Correia, M. V., &amp; Farina, D. (2012). Changes in H reflex and V wave following short-term endurance and strength training. Journal of Applied Physiology, 112(1), 54-63.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/21998264">PubMed</a>]</li><li>Andersen, L. L., Andersen, J. L., Zebis, M. K., &amp; Aagaard, P. (2010). Early and late rate of force development: differential adaptive responses to resistance training?. Scandinavian journal of medicine &amp; science in sports, 20(1), e162-e169.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19793220">PubMed</a>]</li><li>Blazevich, A. J., Cannavan, D., Horne, S., Coleman, D. R., &amp; Aagaard, P. (2009). Changes in muscle force-length properties affect the early rise of force in vivo. Muscle &amp; nerve, 39(4), 512.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19296490">PubMed</a>]</li><li>Baker, D and Nance, S. (1999). The relation between strength and power in professional rugby league players. Journal of Strength and Conditioning Research, 13: 224–229. [<a href="https://www.researchgate.net/publication/232100672_The_Relation_Between_Strength_and_Power_in_Professional_Rugby_League_Players">Link]</a></li><li>Comfort, P, Allen, M, and Graham-Smith, P. (2011a). Kinetic comparisons during variations of the power clean. Journal of Strength and Conditioning Research, 25: 3269– 3273. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22080325">PubMed]</a></li><li>Comfort, P, Fletcher, C, and McMahon, JJ. (2012). Determination of optimal load during the power clean in collegiate athletes. Journal of Strength and Conditioning Research, 26: 2970–2974. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22190161">PubMed]</a></li><li>Cormie, P, McBride, JM, and McCaulley, GO. (2007). Validation of power measurement techniques in dynamic lower body resistance exercises. J Appl Biomech 23: 103–118. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/17603130">PubMed]</a></li><li>Cronin, J, McNair, PJ, and Marshall, RN. (2001). <a href="https://www.scienceforsport.com/power-development-how-one-simple-test-can-take-you-to-the-next-level/">Developing explosive power:</a> A comparison of technique and training. J Sci Med Sport 4: 59–70. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/11339494">PubMed]</a></li><li>Garhammer, J. &amp; Gregor, R. (1992). Propulsion Forces as a Function of Intensity for Weightlifting and Vertical Jumping, J. Appl. Sports Sci. Research, 6(3): 129-134. [<a href="https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwi1ysHItOfKAhULFJQKHdwXACwQFggcMAA&url=http://web.csulb.edu/~atlastwl/Propulsive_Forces_WL_VJ_JASSR1992.pdf&usg=AFQjCNHId0Sx525QKsSIdQZY_o6-4w3v6w&sig2=seDtUrzl1Kb1T2oQqe2acg">Link]</a></li><li>Hakkinen, K., and E. Myllyla. Acute effects of muscle fatigue and recovery on force production and relaxation in endurance, power and strength athletes. <em>Sports Med. Phys. Fitness</em> 30: 5–12. 1990. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/2195236">PubMed]</a></li><li>Zatsiorsky, VM. Science and Practice of Strength Training. Champaign, IL: Human Kinetics, 1995. [<a href="http://www.humankinetics.com/products/all-products/science-and-practice-of-strength-training-2nd-edition">Link]</a></li><li>Comfort, P., Udall, R., &amp; Jones, P.A. (2012). The effect of loading on kinematic and kinetic variables during the mid-thigh clean pull. Journal of Strength and Conditioning Research. 26(5):1208-14, [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22516901">PubMed]</a></li><li>Haff, GG, Ruben, RP, Lider, J, Twine, C, and Cormie, P. A comparison of methods for determining the rate of force development during isometric midthigh clean pulls. J Strength Cond Res 29(2): 386–395, 2015 [<a href="http://www.ncbi.nlm.nih.gov/pubmed/25259470">PubMed]</a></li><li>Comfort, P, Allen, M, and Graham-Smith, P. Comparisons of peak ground reaction force and rate of force development during variations of the power clean. J Strength Cond Res 25(5): 1235–1239, 2011a [<a href="http://www.ncbi.nlm.nih.gov/pubmed/21522071">PubMed]</a></li><li>Comfort, P, Allen, M, and Graham-Smith, P. Kinetic comparisons during variations of the power clean. J Strength Cond Res 25(12): 3269–3273, 2011b [<a href="http://www.ncbi.nlm.nih.gov/pubmed/22080325">PubMed]</a></li><li>Wilson, G.J., Lyttle, A.D., Ostrowski, K.J., &amp; Murphy, A.J. (1995). Assessing dynamic performance: A comparison of rate of force development tests. J Strength Cond Res, 9(3), 176-181. [<a href="https://www.researchgate.net/publication/232100152_Assessing_Dynamic_Performance_A_Comparison_of_Rate_of_Force_Development_Tests">Link]</a></li><li>Stone, M.H., (1993). Literature review: Explosive exercises and training. National Strength and Conditioning Association Journal, 15(3), pp.7-15. [<a href="https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&cad=rja&uact=8&ved=0ahUKEwit6sWwtefKAhWFo5QKHTsrApIQFggyMAI&url=http://www.usrowing.org/docs/default-source/resource-library/10a-6.pdf?sfvrsn=0&usg=AFQjCNFyUeeVxyWIRa90OE4P5tkFs_PSmw&sig2=2SYnwYPgctHcjAWQndBjAQ">Link]</a></li><li>Thompson, B. J., Stock, M. S., Shields, J. E., Luera, M. J., Munayer, I. K., Mota, J. A., &amp; Olinghouse, K. D. (2015). Barbell deadlift training increases the rate of torque development and vertical jump performance in novices. The Journal of Strength &amp; Conditioning Research, 29(1), 1-10.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/25226322">PubMed</a>]</li><li>Unhjem, R., Lundestad, R., Fimland, M. S., Mosti, M. P., Wang, E. (2015) Strength training-induced responses in older adults: attenuation of descending neural drive with age. Age. [<a href="http://www.ncbi.nlm.nih.gov/pubmed/25940749">PubMed</a>]</li><li>Mosti, M. P., Carlsen, T., Aas, E., Hoff, J., Stunes, A. K., &amp; Syversen, U. (2014). Maximal Strength Training Improves Bone Mineral Density and Neuromuscular Performance in Young Adult Women. The Journal of Strength &amp; Conditioning Research, 28(10), 2935-2945.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/24736773">PubMed</a>]</li><li>Oliveira, F. B., Oliveira, A. S., Rizatto, G. F., &amp; Denadai, B. S. (2013a). Resistance training for explosive and maximal strength: effects on early and late rate of force development. Journal of sports science &amp; medicine, 12(3), 402.[<a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3772581/">PubMed</a>]</li><li>Branislav, R., Milivoj, D., Abella, C. P., Deval, V. C., &amp; Siniša, K. (2013). Effects of combined and classic training on different isometric rate of force development parameters of leg extensors in female volleyball players: Discriminative analysis approach. Journal of research in medical sciences: the official journal of Isfahan University of Medical Sciences, 18(10), 840.[<a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3897066/">PubMed</a>]</li><li>Kramer, A., Ritzmann, R., Gruber, M., &amp; Gollhofer, A. (2012). Four weeks of training in a sledge jump system improved the jump pattern to almost natural reactive jumps. European journal of applied physiology, 112(1), 285.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/21544569">PubMed</a>]</li><li>De Villarreal, E. S. S., Izquierdo, M., &amp; Gonzalez-Badillo, J. J. (2011). Enhancing jump performance after combined vs. maximal power, heavy-resistance, and <a href="https://www.scienceforsport.com/plyometric-training-2/">plyometric training</a> alone. The Journal of Strength &amp; Conditioning Research, 25(12), 3274-3281.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22082794">PubMed</a>]</li><li>Newton, R. U., Kraemer, W. J., &amp; Häkkinen, K. (1999). Effects of ballistic training on preseason preparation of elite volleyball players. Medicine and science in sports and exercise, 31(2), 323.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/10063823">PubMed</a>]</li><li>Cormie, P., McGuigan, M. R., &amp; Newton, R. U. (2010). Influence of strength on magnitude and mechanisms of adaptation to power training. Medicine and science in sports and exercise, 42(8), 1566.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/20639724">PubMed</a>]</li><li>Haff, G. G., Jackson, J. R., Kawamori, N., Carlock, J. M., Hartman, M. J., Kilgore, J. L., &amp; Stone, M. H. (2008). Force-time curve characteristics and hormonal alterations during an eleven-week training period in elite women weightlifters. Journal of strength and conditioning research, 22(2), 433-446.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/18550958">PubMed</a>]</li><li>Behrens, M., Mau-Moeller, A., &amp; Bruhn, S. (2014). Effect of plyometric training on neural and mechanical properties of the knee extensor muscles. International journal of sports medicine, 35(2), 101.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/23900900">PubMed</a>]</li><li>Correa, C. S., LaRoche, D. P., Cadore, E. L., Reischak-Oliveira, A., Bottaro, M., Kruel, L. F. M., &amp; Pinto, R. S. (2012). 3 Different types of strength training in older women. International journal of sports medicine, 33(12), 962.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22782384">PubMed</a>]</li><li>Kyröläinen, H., Avela, J., McBride, J. M., Koskinen, S., Andersen, J. L., Sipilä, S., &amp; Komi, P. V. (2005). Effects of power training on muscle structure and neuromuscular performance. Scandinavian journal of medicine &amp; science in sports, 15(1), 58.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/15679573">PubMed</a>]</li><li>Gruber, M., &amp; Gollhofer, A. (2004). Impact of sensorimotor training on the rate of force development and neural activation. European journal of applied physiology, 92(1-2), 98-105.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/15024669">PubMed</a>]</li><li>Gruber, M., Gruber, S. B., Taube, W., Schubert, M., Beck, S. C., &amp; Gollhofer, A. (2007). Differential effects of ballistic versus sensorimotor training on rate of force development and neural activation in humans. Journal of strength and conditioning research, 21(1), 274.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/17313292">PubMed</a>]</li><li>Ingebrigtsen, J., Holtermann, A., &amp; Roeleveld, K. (2009). Effects of load and contraction velocity during three-week biceps curls training on isometric and isokinetic performance. The Journal of Strength &amp; Conditioning Research, 23(6), 1670-1676.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19675498">PubMed</a>]</li><li>Lamont, H. S., Cramer, J. T., Bemben, D. A., Shehab, R. L., Anderson, M. A., &amp; Bemben, M. G. (2010). Effects of adding whole body vibration to squat training on isometric force&#x2F;time characteristics. The Journal of Strength &amp; Conditioning Research, 24(1), 171-183.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/19924007">PubMed</a>]</li><li>Lamas, L., Ugrinowitsch, C., Rodacki, A., Pereira, G., Mattos, E. C., Kohn, A. F., &amp; Tricoli, V. (2012). Effects of strength and power training on neuromuscular adaptations and jumping movement pattern and performance. Journal of Strength &amp; Conditioning Research, 26(12), 3335.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/22222321">PubMed</a>]</li><li>Farup, J., Sørensen, H., &amp; Kjølhede, T. (2014). Similar changes in muscle fiber phenotype with differentiated consequences for rate of force development: Endurance versus resistance training. Human movement science, 34, 109-119.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/24530017">PubMed</a>]</li><li>Bazyler, C. D., Sato, K., Wassinger, C. A., Lamont, H. S., &amp; Stone, M. H. (2014). The efficacy of incorporating partial squats in maximal strength training. Journal of strength and conditioning research&#x2F;National Strength &amp; Conditioning Association, 28(11), 3024.[<a href="http://www.ncbi.nlm.nih.gov/pubmed/24662234">PubMed</a>]</li></ol>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发力率 RFD</title>
    <link href="/2023/09/11/%E5%8F%91%E5%8A%9B%E7%8E%87-RFD/"/>
    <url>/2023/09/11/%E5%8F%91%E5%8A%9B%E7%8E%87-RFD/</url>
    
    <content type="html"><![CDATA[<p>这篇文章说得最细致：<a href="https://www.scienceforsport.com/rate-of-force-development-rfd-2/">RATE OF FORCE DEVELOPMENT (RFD)</a></p><p>这两篇文章就稍微简单一点：</p><ol><li><a href="https://www.jeffchensports.com/blog/rfd">運動表現的迷思–RFD(發力率)？</a>;</li><li><a href="https://zhuanlan.zhihu.com/p/644908769">什么是发力率What is RFD？理论篇</a>；</li><li><a href="https://oneilathlete.com/the-difference-between-explosive-power-power-rfd/">爆發力&#x2F;功率&#x2F;發力率 你還分不清楚嗎？</a>;</li><li><a href="https://www.don1don.com/archives/131386/131386">如何訓練爆發力？ 四張圖了解功率輸出</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么心率高，可以认为是在做无氧运动？</title>
    <link href="/2023/09/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%83%E7%8E%87%E9%AB%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%81%9A%E6%97%A0%E6%B0%A7%E8%BF%90%E5%8A%A8%EF%BC%9F/"/>
    <url>/2023/09/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%83%E7%8E%87%E9%AB%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%A4%E4%B8%BA%E6%98%AF%E5%9C%A8%E5%81%9A%E6%97%A0%E6%B0%A7%E8%BF%90%E5%8A%A8%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>首先要明白一个概念：无氧运动是在描述人体运动状态，而不是运动本身。例如恒定配速（功率）的跑步直到心率漂移无法继续运动，整个过程即包含了有氧运动又包含了无氧运动。</p><p>然后需要明白，心率在能量体系下意味着什么？</p><ol><li>调节运输乳酸；</li><li>输送氧气；</li><li>排出二氧化碳。</li></ol><p>再思考为什么说能量系统决定心率？</p><p>几乎在所有情况下，无氧运动都伴随着有氧运动（在环境不缺氧的情况下），因为由于能量需求超过有氧产能，无氧产能必须补充有氧产能。</p><p>身体开始从事低强度运动时，做功肌肉（主要）为红肌。由于红肌生理特性，主要依赖有氧产能。且因为强度低，这意味着心脏对输送氧气和排出二氧化碳的需求不高，所以心率不高。</p><p>当强度开始增加，做功肌肉转向白肌。由于白肌生理特性，主要依赖无氧产能。且因为强度高，糖酵解快速主导供能产生乳酸，此时对于身体而言，心脏不但需要满足强度变化前的有氧产能负荷，还需要满足强度变化后的无氧产能负荷，负责调节乳酸、运输代谢乳酸所需的氧气和产生的二氧化碳。所以心率高。</p><p>综上，可以认为心率能相对客观地体现机体的能量系统运作情况。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Well-being, Flow Experience and Personal Characteristics of Individuals who Do Extreme Sports as Serious Leisure</title>
    <link href="/2023/09/06/Well-being-Flow-Experience-and-Personal-Characteristics-of-Individuals-who-Do-Extreme-Sports-as-Serious-Leisure/"/>
    <url>/2023/09/06/Well-being-Flow-Experience-and-Personal-Characteristics-of-Individuals-who-Do-Extreme-Sports-as-Serious-Leisure/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/12AC5B89-A212-4D4C-9180-A48F2FB6DFF5_2/CMVybFFXpxjQzpuBPhwfMONl9DVcQpoKOXGkiBGA9JYz/Well-being%20Flow%20Experience%20and%20Personal%20Characteristics%20of%20Individuals%20who%20Do%20Extreme%20Sports%20as%20Serious%20Leisure.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Peak Moments in Sport - A Literature Review</title>
    <link href="/2023/09/06/Peak-Moments-in-Sport-A-Literature-Review/"/>
    <url>/2023/09/06/Peak-Moments-in-Sport-A-Literature-Review/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/C0564B89-023E-4F5D-AD12-900F64D29736_2/cE20Wlyq2UgcQqwRtX6NZjssSDCtNBGxm3XSJGtP2Woz/Peak%20Moments%20in%20Sport%20-%20A%20Literature%20Review.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Peak Experience, Peak Performance, and Flow - A Comparative Analysis of Positive Human Experiences</title>
    <link href="/2023/09/06/Peak-Experience-Peak-Performance-and-Flow-A-Comparative-Analysis-of-Positive-Human-Experiences/"/>
    <url>/2023/09/06/Peak-Experience-Peak-Performance-and-Flow-A-Comparative-Analysis-of-Positive-Human-Experiences/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/A8E499E9-9042-4335-9E87-7661FFB215B7_2/jdcLtkey9EjoxrC2b9wP3mvmnbX9o6p6mxXt8z4ywLAz/Peak%20Experience%20Peak%20Performance%20and%20Flow%20-%20A%20Comparative%20Analysis%20of%20Positive%20Human%20Experiences.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 展示 PDF 文件</title>
    <link href="/2023/09/01/Hexo-%E5%B1%95%E7%A4%BA-PDF-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/09/01/Hexo-%E5%B1%95%E7%A4%BA-PDF-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="安装-hexo-pdf-插件"><a href="#安装-hexo-pdf-插件" class="headerlink" title="安装 hexo-pdf 插件"></a>安装 hexo-pdf 插件</h3><div class="code-wrapper"><pre><code class="hljs bash">npm install --save hexo-pdf</code></pre></div><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在需要的文章添加如下语句：</p><div class="code-wrapper"><pre><code class="hljs markdown">&#123;% pdf YourURL %&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于表面肌电信号和动作捕捉的上肢运动疲劳分析</title>
    <link href="/2023/09/01/%E5%9F%BA%E4%BA%8E%E8%A1%A8%E9%9D%A2%E8%82%8C%E7%94%B5%E4%BF%A1%E5%8F%B7%E5%92%8C%E5%8A%A8%E4%BD%9C%E6%8D%95%E6%8D%89%E7%9A%84%E4%B8%8A%E8%82%A2%E8%BF%90%E5%8A%A8%E7%96%B2%E5%8A%B3%E5%88%86%E6%9E%90/"/>
    <url>/2023/09/01/%E5%9F%BA%E4%BA%8E%E8%A1%A8%E9%9D%A2%E8%82%8C%E7%94%B5%E4%BF%A1%E5%8F%B7%E5%92%8C%E5%8A%A8%E4%BD%9C%E6%8D%95%E6%8D%89%E7%9A%84%E4%B8%8A%E8%82%A2%E8%BF%90%E5%8A%A8%E7%96%B2%E5%8A%B3%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/4521B14B-F4D8-4E18-9C33-075EB468CAA8_2/0anKdmJXKHOfJLskNNsD0U5WBCELNFkNh3CnGIplcIYz/4521B14B-F4D8-4E18-9C33-075EB468CAA8_2.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>运动文献</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>EMG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 除余和取整</title>
    <link href="/2023/08/31/Swift-%E9%99%A4%E4%BD%99%E5%92%8C%E5%8F%96%E6%95%B4/"/>
    <url>/2023/08/31/Swift-%E9%99%A4%E4%BD%99%E5%92%8C%E5%8F%96%E6%95%B4/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> x <span class="hljs-operator">=</span> <span class="hljs-number">8.625</span><span class="hljs-built_in">print</span>(x <span class="hljs-operator">/</span> <span class="hljs-number">0.75</span>)<span class="hljs-comment">// Prints &quot;11.5&quot;</span><span class="hljs-comment">// 取整</span><span class="hljs-keyword">let</span> q <span class="hljs-operator">=</span> (x <span class="hljs-operator">/</span> <span class="hljs-number">0.75</span>).rounded(.towardZero)<span class="hljs-comment">// q == 11.0</span><span class="hljs-comment">// 除余</span><span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> x.truncatingRemainder(dividingBy: <span class="hljs-number">0.75</span>)<span class="hljs-comment">// r == 0.375</span><span class="hljs-keyword">let</span> x1 <span class="hljs-operator">=</span> <span class="hljs-number">0.75</span> <span class="hljs-operator">*</span> q <span class="hljs-operator">+</span> r<span class="hljs-comment">// x1 == 8.625</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift 数组去重</title>
    <link href="/2023/08/31/Swift-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <url>/2023/08/31/Swift-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="两组数组去重"><a href="#两组数组去重" class="headerlink" title="两组数组去重"></a>两组数组去重</h3><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Array</span> <span class="hljs-title class_">where</span> <span class="hljs-title class_">Element</span>: <span class="hljs-title class_">Hashable</span> &#123;    <span class="hljs-keyword">func</span> <span class="hljs-title function_">difference</span>(<span class="hljs-params">from</span> <span class="hljs-params">other</span>: [<span class="hljs-type">Element</span>]) -&gt; [<span class="hljs-type">Element</span>] &#123;        <span class="hljs-keyword">let</span> thisSet <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>(<span class="hljs-keyword">self</span>)        <span class="hljs-keyword">let</span> otherSet <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>(other)        <span class="hljs-keyword">return</span> <span class="hljs-type">Array</span>(thisSet.symmetricDifference(otherSet))    &#125;&#125;</code></pre></div><p>用法</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> names1 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;Ringo&quot;</span>]<span class="hljs-keyword">let</span> names2 <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;Ringo&quot;</span>, <span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;George&quot;</span>]<span class="hljs-keyword">let</span> difference <span class="hljs-operator">=</span> names1.difference(from: names2)<span class="hljs-built_in">print</span>(difference)<span class="hljs-comment">// output:</span><span class="hljs-comment">// [&quot;George&quot;, &quot;John&quot;]</span></code></pre></div><h3 id="单个数组去重"><a href="#单个数组去重" class="headerlink" title="单个数组去重"></a>单个数组去重</h3><p>如果数组内只含有基础类型的数据时，可以写两个for循环遍历，用下标取值做对比；当然也可以用集合 Set（Swift），比较方便快捷。</p><p>但是如果需要对 model 数组进行去重，则用不了 Set。</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<span class="hljs-keyword">extension</span> <span class="hljs-title class_">Array</span> &#123;    <span class="hljs-comment">// 去重</span>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">filterDuplicates</span>&lt;<span class="hljs-type">E</span>: <span class="hljs-type">Equatable</span>&gt;(<span class="hljs-keyword">_</span> <span class="hljs-params">filter</span>: (<span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">E</span>) -&gt; [<span class="hljs-type">Element</span>] &#123;        <span class="hljs-keyword">var</span> result <span class="hljs-operator">=</span> [<span class="hljs-type">Element</span>]()        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span> &#123;            <span class="hljs-keyword">let</span> key <span class="hljs-operator">=</span> filter(value)            <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>result.map(&#123;filter(<span class="hljs-variable">$0</span>)&#125;).contains(key) &#123;                result.append(value)            &#125;        &#125;        <span class="hljs-keyword">return</span> result    &#125;&#125;</code></pre></div><p>用法</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-comment">// 基础类型去重</span><span class="hljs-keyword">let</span> arrays <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>]<span class="hljs-keyword">let</span> filterArrays <span class="hljs-operator">=</span> arrays.filterDuplicates(&#123;<span class="hljs-variable">$0</span>&#125;)<span class="hljs-built_in">print</span>(filterArrays)<span class="hljs-comment">// output</span><span class="hljs-comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><span class="hljs-comment">// model类的去重</span><span class="hljs-keyword">let</span> modelArrays <span class="hljs-operator">=</span> [<span class="hljs-type">Model</span>(<span class="hljs-string">&quot;1&quot;</span>), <span class="hljs-type">Model</span>(<span class="hljs-string">&quot;1&quot;</span>), <span class="hljs-type">Model</span>(<span class="hljs-string">&quot;2&quot;</span>), <span class="hljs-type">Model</span>(<span class="hljs-string">&quot;3&quot;</span>)]<span class="hljs-keyword">let</span> filterModels <span class="hljs-operator">=</span> modelArrays.filterDuplicates(&#123;<span class="hljs-variable">$0</span>.name&#125;)<span class="hljs-built_in">print</span>(filterModels)<span class="hljs-comment">// output</span><span class="hljs-comment">// [Model(&quot;1&quot;), Model(&quot;2&quot;), Model(&quot;3&quot;)]</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 以及 pyqt 线程锁简单使用</title>
    <link href="/2023/08/29/Python-%E4%BB%A5%E5%8F%8A-pyqt-%E7%BA%BF%E7%A8%8B%E9%94%81%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/29/Python-%E4%BB%A5%E5%8F%8A-pyqt-%E7%BA%BF%E7%A8%8B%E9%94%81%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="采用-threading-并加锁"><a href="#采用-threading-并加锁" class="headerlink" title="采用 threading 并加锁"></a>采用 threading 并加锁</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<span class="hljs-comment"># 重写线程</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculate</span>(threading.Thread):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, count</span>):        threading.Thread.__init__(self)        self.name = name        self.count = count    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):        <span class="hljs-comment"># 每0.1秒执行一次cal函数，不要带()</span>        timer = threading.Timer(<span class="hljs-number">0.1</span>, self.cal)        timer.start()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">&#x27; is &#x27;</span> + self.count)        self.count += <span class="hljs-number">1</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    count1 = <span class="hljs-number">0</span>    count2 = <span class="hljs-number">0</span>    <span class="hljs-comment"># 初始化线程</span>    calculate1 = Calculate(<span class="hljs-string">&#x27;COUNT1&#x27;</span>, count1)    calculate2 = Calculate(<span class="hljs-string">&#x27;COUNT2&#x27;</span>, count2)    calculate1.start()    calculate2.start()<span class="hljs-comment"># ouput:</span><span class="hljs-comment"># COUNT1 is 0</span><span class="hljs-comment"># COUNT1 is 1</span><span class="hljs-comment"># COUNT1 is 2</span><span class="hljs-comment"># COUNT2 is 0</span><span class="hljs-comment"># COUNT1 is 3</span><span class="hljs-comment"># COUNT2 is 1</span><span class="hljs-comment"># COUNT1 is 4</span><span class="hljs-comment"># COUNT2 is 2</span><span class="hljs-comment"># COUNT2 is 3</span></code></pre></div><p>可以发现两个线程之间的执行并不同步，若想同步执行，则需要加「线程锁」。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<span class="hljs-comment"># 重写线程</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculate</span>(threading.Thread):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, count, acquire, release</span>):        threading.Thread.__init__(self)        self.name = name        self.count = count        self.acquire = acquire  <span class="hljs-comment"># 需要加锁线程</span>        self.release = release  <span class="hljs-comment"># 需要解锁线程</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):        timer = threading.Timer(<span class="hljs-number">0.1</span>, self.cal)        timer.start()    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">self</span>):        self.acquire.acquire()        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">&#x27; is &#x27;</span> + self.count)        self.count += <span class="hljs-number">1</span>        self.release.release()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    count1 = <span class="hljs-number">0</span>    count2 = <span class="hljs-number">0</span>    <span class="hljs-comment"># 初始化线程锁</span>    count1_lock = threading.Lock()    count2_lock = threading.Lock()    <span class="hljs-comment"># count2加锁，这样只能先运行没有加锁的count1</span>    count2_lock.acquire()    calculate1 = Calculate(<span class="hljs-string">&#x27;COUNT1&#x27;</span>, count1, count1_lock, count2_lock)    calculate2 = Calculate(<span class="hljs-string">&#x27;COUNT2&#x27;</span>, count2, count2_lock, count1_lock)    calculate1.start()    calculate2.start()<span class="hljs-comment"># ouput:</span><span class="hljs-comment"># COUNT1 is 0</span><span class="hljs-comment"># COUNT2 is 0</span><span class="hljs-comment"># COUNT1 is 1</span><span class="hljs-comment"># COUNT2 is 1</span><span class="hljs-comment"># COUNT1 is 2</span><span class="hljs-comment"># COUNT2 is 2</span><span class="hljs-comment"># COUNT1 is 3</span><span class="hljs-comment"># COUNT2 is 3</span></code></pre></div><h3 id="采用-QThread-并加锁"><a href="#采用-QThread-并加锁" class="headerlink" title="采用 QThread 并加锁"></a>采用 QThread 并加锁</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> QThread, QTimer, QMutex<span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QMainWindow, QApplication<span class="hljs-comment"># 重写线程</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculate</span>(<span class="hljs-title class_ inherited__">QThread</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, count, lock, unlock</span>):        <span class="hljs-built_in">super</span>(Calculate, self).__init__()        self.name = name        self.count = count        self.lock = lock  <span class="hljs-comment"># 需要加锁线程</span>        self.unlock = unlock  <span class="hljs-comment"># 需要解锁线程</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):        timer = QTimer()        timer.timeout.connect(<span class="hljs-keyword">lambda</span>: self.cal())        timer.start(<span class="hljs-number">100</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">self</span>):        self.lock.lock()        <span class="hljs-built_in">print</span>(self.name + <span class="hljs-string">&#x27; is &#x27;</span> + self.count)        self.count += <span class="hljs-number">1</span>        self.unlock.unlock()<span class="hljs-comment"># QThread只能在QT程序中运行</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(<span class="hljs-title class_ inherited__">QMainWindow</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">super</span>(Window, self).__init__()        self.count1 = <span class="hljs-number">0</span>        self.count2 = <span class="hljs-number">0</span>        <span class="hljs-comment"># 初始化线程锁</span>        self.count1_lock = QMutex()        self.count2_lock = QMutex()        <span class="hljs-comment"># count2加锁，这样只能先运行没有加锁的count1</span>        self.count2_lock.lock()        self.calculate1 = Calculate(<span class="hljs-string">&#x27;COUNT1&#x27;</span>, self.count1, self.count1_lock, self.count2_lock)        self.calculate2 = Calculate(<span class="hljs-string">&#x27;COUNT2&#x27;</span>, self.count2, self.count2_lock, self.count1_lock)        self.calculate1.start()        self.calculate2.start()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app = QApplication(sys.argv)    win = Window()    win.show()    sys.exit(app.exec_())<span class="hljs-comment"># ouput:</span><span class="hljs-comment"># COUNT1 is 0</span><span class="hljs-comment"># COUNT2 is 0</span><span class="hljs-comment"># COUNT1 is 1</span><span class="hljs-comment"># COUNT2 is 1</span><span class="hljs-comment"># COUNT1 is 2</span><span class="hljs-comment"># COUNT2 is 2</span><span class="hljs-comment"># COUNT1 is 3</span><span class="hljs-comment"># COUNT2 is 3</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 环境下搭建 Hexo 个人博客</title>
    <link href="/2023/08/28/Mac-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/28/Mac-%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA-Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://l3zc.com/2022/05/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Mac OS 环境下使用 Hexo 搭建个人博客</a>。</p><p>参考：</p><ol><li><a href="https://www.zhihu.com/question/26071345">Mac 系统有什么软件打开 .pub 文件？</a>；</li><li><a href="https://blog.csdn.net/xs20691718/article/details/81873921">hexo 发布之后 gitpage 自定义域名失效</a>。</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装-Git-和-Node-js"><a href="#安装-Git-和-Node-js" class="headerlink" title="安装 Git 和 Node.js"></a>安装 Git 和 Node.js</h4><div class="code-wrapper"><pre><code class="hljs bash">brew install gitbrew install node</code></pre></div><h4 id="测试所需组件是否安装成功"><a href="#测试所需组件是否安装成功" class="headerlink" title="测试所需组件是否安装成功"></a>测试所需组件是否安装成功</h4><div class="code-wrapper"><pre><code class="hljs bash">npm -vnode -vgit --version</code></pre></div><p>均返回版本号即代表安装成功。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>我们使用 npm 命令安装 Hexo：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli</code></pre></div><p>等待安装完成后初始化博客：</p><div class="code-wrapper"><pre><code class="hljs bash">hexo init blog</code></pre></div><p>这条指令的作用是在你目前所在的目录下（默认是你的 home 目录）新建一个名为 blog 的文件夹（你可以将这条命令中的 blog 替换成任何你想要的名字），并在内初始化你的博客。<strong>之后所有的操作都在这个文件夹下进行，请确保在执行后文的操作前已经切换到了这个文件夹（cd blog）。</strong></p><p>待初始化完成，切换到 blog 文件夹中，即可生成和预览博客。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bloghexo ghexo s</code></pre></div><p>执行 <code>hexo s</code> 命令后，通过浏览器访问 <code>http://127.0.0.1:4000</code> 可以预览你的博客，预览功能会实时监测博客的文件变化，并实时反馈在浏览器上，在调试博客前端时非常好用。</p><h3 id="部署网站到-GitHub"><a href="#部署网站到-GitHub" class="headerlink" title="部署网站到 GitHub"></a>部署网站到 GitHub</h3><p>执行 <code>hexo g</code> 命令后博客静态文件会生成在 public 文件夹下，只需要将这些文件上传到你的静态网站托管服务即可将站点发布到公网，本文用到的托管服务是 Github Pages，下文提到的用户名均指你的 Github 用户名。</p><h4 id="添加-SSH-Key-到-github"><a href="#添加-SSH-Key-到-github" class="headerlink" title="添加 SSH Key 到 github"></a>添加 SSH Key 到 github</h4><p>若之前使用过相关功能且已经配置过请跳过此步。</p><p>配置 Git 用户名和账号：</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span>git config --global user.email <span class="hljs-string">&quot;example@example.com&quot;</span></code></pre></div><p>其中 <code>username</code> 是你的用户名，<code>example@example.com</code> 是你 Github 的登录邮箱。</p><p>然后通过终端命令生成 SSH Key：</p><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;example@example.com&quot;</span></code></pre></div><p>如果已经创建过会出现 <code>Overwrite (y/n)? n</code> 提示可以输入 <code>n</code>，没有创建过的话三个回车就好，执行完成后会在 <code>~/.ssh/id_rsa.pub</code> 目录下生成需要使用的 key，也就是公钥。</p><p>到账户主文件夹下同时按 <code>Command+Shift+.</code> 显示隐藏文件，找到 <code>.ssh</code> 文件夹，打开 <code>id_rsa.pub</code>，将里面的内容全部复制（使用 cd 命令进入 <code>id_rsa.pub</code> 目录，再使用 <code>more id_rsa.pub</code> 命令查看公钥的内容）。</p><p>打开 <a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建 New SSH Key，Title 随意填，Key 就把刚才复制的内容全都粘贴上去。然后点 Add SSH Key 即可。</p><p>完成这些工作以后可以通过以下命令测试是否配置成功：</p><div class="code-wrapper"><pre><code class="hljs bash">ssh git@github.com</code></pre></div><p>出现你的 Github 用户名代表配置成功。</p><h4 id="上传本地文件到-Github"><a href="#上传本地文件到-Github" class="headerlink" title="上传本地文件到 Github"></a>上传本地文件到 Github</h4><p>在Github上新建一个仓库，Repository Name 填 <code>你的用户名.github.io</code>，仓库状态设为 Public，点击 Create Repository 创建新的网站仓库。</p><p>安装 Hexo 的扩展 <code>hexo-deployer-git</code>，注意一定要在你的博客文件夹下执行：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><p>编辑博客安装文件夹下的 <code>_config.yml</code> 文件，<strong>翻到底部</strong>，修改 deploy 部分为：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:你的用户名/你的用户名.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre></div><p>修改完成后保存，此时就可以使用 <code>hexo d</code> 把存在本地的博客 deploy 到 Github 上了：</p><div class="code-wrapper"><pre><code class="hljs bash">hexo ghexo d</code></pre></div><p>第一次执行 <code>hexo d</code> 命令时可能要求你输入你的 Github 账号和密码，如果报错，可能是因为 Github 在 2021 年 8 月 13 日停止了使用账户密码认证的支持，这时需要在 Gihub 上 <a href="https://github.com/settings/tokens">Developer Settings页面</a> 上新建一个 Personal Access Token 代替密码就可以顺利 deploy。</p><p>执行完毕后，访问 <code>你的用户名.github.io</code> 就能看到你的博客了。</p><h3 id="绑定自定义域名（可选）"><a href="#绑定自定义域名（可选）" class="headerlink" title="绑定自定义域名（可选）"></a>绑定自定义域名（可选）</h3><p>其实到这一步就可以开始写博客了，默认的 github.io 的域名是可以更换的：</p><p>首先自行申请一个域名，登陆到域名申请的后台，添加一条 <code>CNAME</code> 解析记录：<code>你的用户名.github.io</code>。</p><p>打开存放博客的 Github 仓库，进入 Settings 页面在 pages 选项里的 Custom domain 里填入你的域名，点击 Save，勾选 Enforce HTTPS，即可通过自定义域名访问你的博客。</p><p>每次配置 Custom domain 之后，再次 <code>hexo deploy</code> 之后，Custom domain 会被重置失效。解决方案为：</p><p>在 hexo 生成的博客的 source 目录下新建一个 <code>CNAME</code> 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，Custom domain 都被重置掉。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EMG 相关应用场景</title>
    <link href="/2023/08/28/EMG-%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2023/08/28/EMG-%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="特征识别"><a href="#特征识别" class="headerlink" title="特征识别"></a>特征识别</h3><p>利用 sEMG 特征来识别动作。目前除了 sEMG 外，还有下面方案：</p><ol><li>基于计算机视觉的人体姿态识别；</li><li>基于惯性测量单元的人体姿态识别。</li></ol><p> sEMG 的主要应用领域为手势识别：</p><ol><li><a href="https://github.com/malele4th/sEMG_DeepLearning">基于表面肌电信号的动作识别（深度学习）</a>；</li></ol><h3 id="肌肉疲劳"><a href="#肌肉疲劳" class="headerlink" title="肌肉疲劳"></a>肌肉疲劳</h3><p>通过肌电疲劳阈值（electromyogram fatigue threshold, $EMG_{FT}$）测量法进行肌肉疲劳分析：</p><ol><li><a href="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/4521B14B-F4D8-4E18-9C33-075EB468CAA8_2/0anKdmJXKHOfJLskNNsD0U5WBCELNFkNh3CnGIplcIYz/4521B14B-F4D8-4E18-9C33-075EB468CAA8_2.pdf">基于表面肌电信号和动作捕捉的上肢运动疲劳分析</a>；</li><li><a href="https://res.craft.do/user/full/6a1edbd6-3a87-0108-9aee-13ed8d2519a6/9AE75833-3F90-40B1-8811-A1590D68338C_2/CW4iRhiNAqLM5DNQwFmOaVIAvLxsi5Az5ce3PaHqKxMz/9AE75833-3F90-40B1-8811-A1590D68338C_2.pdf">基于表面肌电信号的康复过程中肌疲劳有效性分析</a>。</li></ol><p>可以认为是借助 sEMG 以及 $EMG_{FT}$ 算法来测定个体运动过程中的肌肉疲劳拐点。</p><p>除了 $EMG_{FT}$ 外，监测肌肉疲劳的方法还有：</p><ol><li>通气阈值（ventilator threshold, VT）；</li><li>基于计算机视觉的人体姿态识别；</li><li>基于惯性测量单元的人体姿态识别（IMU）；</li><li>乳酸阈值(AT)。</li></ol><h3 id="肌肉激活程度"><a href="#肌肉激活程度" class="headerlink" title="肌肉激活程度"></a>肌肉激活程度</h3><p>参考：<a href="https://vintraining.medium.com/%E5%A6%82%E4%BD%95%E7%94%A8-emg-%E8%82%8C%E9%9B%BB%E5%9C%96-%E7%A0%94%E7%A9%B6-%E6%8C%91%E9%81%B8%E6%9C%80%E6%9C%89%E6%95%88%E7%9A%84%E8%A8%93%E7%B7%B4%E5%8B%95%E4%BD%9C-933d1ab20321">如何用 EMG（肌電圖）研究挑選最有效的訓練動作?</a></p><p>每块肌肉都有相应的「最大自主等长收缩（maximal voluntary isometric contraction, MVIC）」，可通过 EMG 振幅表示。而每个动作都有相应的募集肌肉，以及肌肉的激活程度 %MVIC。例如 Distefano 等人研究了健康自愿者的臀大肌和臀中肌肌电图振幅，这些自愿者进行了 12 种不同难度的下肢力量训练。每个训练重复四次求平均值用于分析。侧卧髋部外展对臀中肌的激活最大，为 81%MVIC。单肢深蹲和单肢硬拉可有效激活臀中肌（分别是 64% 和 58%MVIC）和臀大肌（分别为 59% 和 59%MVIC）。</p><p>但不是说动作募集肌肉的 %MVIC 越高，动作就越能刺激相关肌肉成长。还要看其他因素：</p><ol><li>活动范围（rang of motion, ROM）；</li><li>动作在肌肉延展状态下施加张力的大小和时间。</li></ol><p>此外还要加以区分概念：最大自主收缩或者最大肌力（maximum voluntary contraction, MVC）。</p>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>EMG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>呼吸代谢监测</title>
    <link href="/2023/08/28/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B/"/>
    <url>/2023/08/28/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="系统功能"><a href="#系统功能" class="headerlink" title="系统功能"></a>系统功能</h2><p>分析个体呼出气体成分，并计算耗氧速度（摄氧量）$V_{O_2}$ 以及代谢能量 EE。</p><h2 id="呼吸监测方法介绍"><a href="#呼吸监测方法介绍" class="headerlink" title="呼吸监测方法介绍"></a>呼吸监测方法介绍</h2><h3 id="道格拉斯袋法"><a href="#道格拉斯袋法" class="headerlink" title="道格拉斯袋法"></a>道格拉斯袋法</h3><p>道格拉斯袋法（douglas bags）是最早的开放式（open circuit）间接测量代谢消耗的方法，也是测量代谢消耗的「金标准」[1][2]。</p><p>原理很简单，将运动呼出的气体用道格拉斯气袋收集起来，然后测量气袋中气体的体积、$O_2$、$CO_2$ 浓度。之后经过计算就能得出运动中代谢能量消耗。</p><h3 id="逐步呼吸法"><a href="#逐步呼吸法" class="headerlink" title="逐步呼吸法"></a>逐步呼吸法</h3><p>道格拉斯袋法必须在运动完成后进行测量，测得值是一个平均量，无法实时测量，也无法对运动的某个时间节点进行分析。随着计算机的发展，逐步呼吸法（breath by breath）被发明[3]。借助于传感器（对传感器性能和信号处理要求很高）和电脑，可以实现对每次呼出气体的流量、成分进行测量，从而得到实时代谢能量消耗。</p><h3 id="混合气室法（系统采用）"><a href="#混合气室法（系统采用）" class="headerlink" title="混合气室法（系统采用）"></a>混合气室法（系统采用）</h3><p>混合气室法（mixing chamber）[4]是将呼出气体排入到一个 5L 左右的混合室内让其充分混合，通过测量混合室中的气体浓度来计算代谢能量消耗。可以理解为测量几次呼出气体的平均值。主要有 2 个优点：</p><ol><li>相较于道格拉斯袋法，混合气室法能实现实时代谢测量（相较于逐步呼吸法没那么实时，视运动量而定）；</li><li>相较于逐步呼吸法，虽然时效性没有那么好，但混合气室法更加稳定[5]，信号处理起来更容易[6]，且对传感器的要求不高。</li></ol><h2 id="系统组成"><a href="#系统组成" class="headerlink" title="系统组成"></a>系统组成</h2><p>基于混合气室法的呼吸监测模块由 4 个重要组成部分。</p><h3 id="非重复呼吸阀-管道"><a href="#非重复呼吸阀-管道" class="headerlink" title="非重复呼吸阀&#x2F;管道"></a>非重复呼吸阀&#x2F;管道</h3><p>非重复呼吸阀（Non Rebreathing Valve）的作用是保证第二次呼吸不会吸入上一次呼出的气体，否则会造成误差。但实际这个现象不可避免，所以需要保证呼吸阀腔体（也叫死腔，dead space）体积小于 70ml[1]。</p><p>此外，死腔体积不能太小，否者会对呼吸造成阻力增加测量时的人体额外能量消耗，WHO 建议呼吸阀的阻力不高于 $300L&#x2F;min-5cmH_2O$[1]。同理，连接呼吸阀和混合室的管道建议阻力不高于 $300L&#x2F;min-1.5cmH_2O$。</p><h3 id="混合室"><a href="#混合室" class="headerlink" title="混合室"></a>混合室</h3><p>人体在静息状态下，每分钟的通气量大约为 4-8L，采用 5L 的混合室，意味着静息状态的呼出气体能在 1min 中充满混合室（将混合室原本的气体排出）。</p><h3 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3><p>传感器的原则是响应时间越短越好。</p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p><a href="https://wonderhoi.com/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/">传感器的响应时间</a>。</p><h4 id="传感器清单"><a href="#传感器清单" class="headerlink" title="传感器清单"></a>传感器清单</h4><p><a href="https://wonderhoi.com/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/">气体流量传感器</a>；</p><p><a href="https://wonderhoi.com/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/">O2浓度传感器</a>；</p><p><a href="https://wonderhoi.com/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/">CO2浓度传感器</a>。</p><h3 id="上位机"><a href="#上位机" class="headerlink" title="上位机"></a>上位机</h3><p>目前的方案是下位机数据采集 Arduino&#x2F;C++，上位机数据处理树莓派&#x2F;Python。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>呼吸代谢监测系统最终会采集到：</p><ol><li>呼出或吸入气体流量；</li><li>呼出气体中的 $O_2$ 浓度；</li><li>呼出气体中的 $CO_2$ 浓度。</li></ol><p>之后通过计算可得出摄氧速度（摄氧量） $V_{O_2}$、呼吸商 RQ、代谢能量 EE。</p><p><strong>这里按气体流量传感器采集呼出气体流量计算（采集吸入气体的流量其计算原理是一样的）。</strong></p><h3 id="气体流量-ATPS-换算-STPD"><a href="#气体流量-ATPS-换算-STPD" class="headerlink" title="气体流量 ATPS 换算 STPD"></a>气体流量 ATPS 换算 STPD</h3><p>气体体积需按标准状态（STPD 状态，$\theta &#x3D; 0°C$，$\rho &#x3D; 101.3kPa$ 或 $\rho &#x3D; 760mmHg$，干燥气体）来计算[7][8]。</p><p>由于所收集的气体都是饱和水蒸气（其饱和水蒸气压力是温度的函数），而测量温度为室温条（ATPS 状态，环境温度，环境压力，水蒸气饱和），两者换算系数 $f$ 可利用水蒸气分压计算：</p><p>在千帕单位下换算系数为：<br>$$<br>f &#x3D; \frac{273K * (\rho-\rho_{H_2O})}{(273K+\theta)*101.3kPa}<br>$$<br>或者在毫米汞柱单位下：<br>$$<br>f &#x3D; \frac{273K * (\rho-\rho_{H_2O})}{(273K+\theta)*760mmHg}<br>$$<br>其中：</p><ul><li>$f$ 为标准状态气体体积换算系数；</li><li>$\rho$ 为测得环境的大气压；</li><li>$\rho_{H_2O}$ 为呼出气体饱和水蒸气的分压；</li><li>$\theta$ 为呼出气体的温度（在气体流量计中或用道格拉斯袋时测量的大气温度），单位为摄氏度(°C)。</li></ul><p>如果收集到的呼出气体在环境中受热高于 37°C 以上，需用 37°C 的饱和水蒸气压 6.27kPa。如果收集到的呼出气体温度不高于 37°C，其饱和水蒸气压见下表：</p><p>20°C~37°C 范围内（间隔为 1°C）饱和水蒸气压力，单位为千帕(kPa)：</p><table><thead><tr><th>温度&#x2F;°C</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>20</td><td>2.34</td><td>2.49</td><td>2.64</td><td>2.81</td><td>2.98</td><td>3.17</td><td>3.36</td><td>3.56</td><td>3.78</td><td>4.00</td></tr><tr><td>30</td><td>4.24</td><td>4.49</td><td>4.75</td><td>5.03</td><td>5.32</td><td>5.62</td><td>5.94</td><td>6.27</td><td>-</td><td>-</td></tr></tbody></table><p>转换为毫米汞柱(mmHg)：</p><table><thead><tr><th>温度&#x2F;°C</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>20</td><td>17.5</td><td>18.7</td><td>19.8</td><td>21.1</td><td>22.4</td><td>23.8</td><td>25.2</td><td>26.7</td><td>28.4</td><td>30.0</td></tr><tr><td>30</td><td>31.8</td><td>33.7</td><td>35.7</td><td>37.7</td><td>39.9</td><td>42.2</td><td>44.6</td><td>47.1</td><td>-</td><td>-</td></tr></tbody></table><p>记气体流量传感器读值（呼出气体流量）为 $V_{E-ATPS}$，单位一般为 L&#x2F;min。</p><p>则标准状态的气体流量为 $V_{E-STPD}&#x3D;f*V_{E-ATPS}$。</p><h4 id="BTPS-概念"><a href="#BTPS-概念" class="headerlink" title="BTPS 概念"></a>BTPS 概念</h4><ul><li>STPD 状态，$\theta &#x3D; 0°C$，$\rho &#x3D; 101.3kPa$ 或 $\rho &#x3D; 760mmHg$，干燥气体；</li><li>ATPS 状态，环境温度，环境压力，水蒸气饱和；</li><li>BTPS 状态，身体内环境温度 37°C，环境压力，水蒸气饱和。</li></ul><p>三者的转换公式为：<br>$$<br>V_{BTPS}&#x3D;V_{ATPS}<em>\frac{(273K+37) * (\rho-\rho_{H_2O})}{(273K+\theta)</em>(\rho-47.1mmHg)}<br>$$</p><p>$$<br>V_{STPD}&#x3D;V_{BTPS}<em>\frac{273K</em> (\rho-47.1mmHg)}{(273K+37)*760mmHg}<br>$$</p><h3 id="V-O-2-计算"><a href="#V-O-2-计算" class="headerlink" title="$V_{O_2}$ 计算"></a>$V_{O_2}$ 计算</h3><p>核心关系是人体不会消耗和产生氮气，也就是人体吸入和呼出的 $N_2$ 量是不变的。大气中气体成分可以近似分为 0.03% 的 $CO_2$，20.93% 的 $O_2$ 和 79.04% 的 $N_2$ 以及非常少的稀有气体。</p><p>记吸入气体中 $O_2$ 浓度为 $F_IO_2$，$CO_2$ 浓度为 $F_ICO_2$，$N_2$ 浓度为 $F_IN_2$；</p><p>记呼出气体中 $O_2$ 浓度为 $F_EO_2$，$CO_2$ 浓度为 $F_ECO_2$，$N_2$ 浓度为 $F_EN_2$。</p><p>那么吸入气体流量：<br>$$<br>V_{I-STPD}&#x3D;V_{E-STPD}*\frac{F_EN_2}{F_IN_2}&#x3D;V_{E-STPD}*\frac{1-F_EO_2-F_ECO_2}{1-F_IO_2-F_ICO_2}<br>$$<br>$O_2$ 消耗速度（摄氧量）：<br>$$<br>V_{O_2}&#x3D;V_{I-STPD}*F_IO_2-V_{E-STPD}*F_EO_2<br>$$<br>同理 $CO_2$ 产生速度：<br>$$<br>V_{CO_2}&#x3D;V_{E-STPD}*F_ECO_2-V_{I-STPD}*F_ICO_2<br>$$</p><h4 id="最大摄氧量-V-O-2max"><a href="#最大摄氧量-V-O-2max" class="headerlink" title="最大摄氧量 $V_{O_2max}$"></a>最大摄氧量 $V_{O_2max}$</h4><p>当个体满足以下 4 种条件的任意 3 种即认为达到最大摄氧量标准[9]：</p><ol><li>$V_{O_2}$ 不随负荷的增加而上升，且个体达到力竭；</li><li>$V_{O_2}$ 的变化幅度不超过 5% 或 150mL&#x2F;min 或 2mL&#x2F;kg&#x2F;min；</li><li>呼吸商大于 1.15；</li><li>心率大于 180 次&#x2F;min。</li></ol><h3 id="RQ、EE计算"><a href="#RQ、EE计算" class="headerlink" title="RQ、EE计算"></a>RQ、EE计算</h3><p>呼吸商 RQ 或者呼吸交换率 RER 等于 $\frac{V_{CO_2}}{V_{O_2}}$。根据 RQ 数值查询对应的 O2-kCal&#x2F;L 数值：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E5%91%BC%E5%90%B8%E4%BB%A3%E8%B0%A2%E7%9B%91%E6%B5%8B1.png"></p><p>例如 RQ&#x3D;0.8，那么意味着每消耗 1L 氧气，人体需要代谢 4.801kCal 的能量。那么此时的人体代谢 EE &#x3D; $V_{O_2}$ * 4.801 kCal&#x2F;min。</p><h4 id="呼吸底物"><a href="#呼吸底物" class="headerlink" title="呼吸底物"></a>呼吸底物</h4><p>由上表可以发现，根据 RQ 可以知道当前呼吸代谢底物是以脂肪为主还是以糖类为主。</p><h2 id="系统校准"><a href="#系统校准" class="headerlink" title="系统校准"></a>系统校准</h2><p>系统校准可以采用测量代谢当量 MET 的方法进行。1MET 的耗氧量为 3.5ml&#x2F;kg&#x2F;min[10]，在人<strong>静息</strong>状态下测得。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864610603-1d877ddb-18a2-4d7e-881a-5cc99e0757d4.pdf">📎Open-circuit respirometry a historical review of portable gas analysis systems.pdf</a></p><p>[2] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864623935-2727c37e-08b5-4cde-bed8-0ac81d0c527f.pdf">📎a brief historical review of the use of Douglas bags and chemical analyzers.pdf</a></p><p>[3] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864746920-56963d18-9dce-4cf1-9034-3ad2229d9af5.pdf">📎On-line computer analysis and breath-by-breath graphical display of exercise function tests..pdf</a></p><p>[4] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864829672-a808cc03-6ed0-4525-8dfa-31de54e3d435.pdf">📎Validity and Stability of a Computerized Metabolic System with Mixing Chamber.pdf</a></p><p>[5] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1689864864021-dd003bcd-bd70-4c95-888a-7b6223a43b05.pdf">📎Accuracy and precision of CPET equipment A comparison of breath by breath and mixing chamber systems.pdf</a></p><p>[6] <a href="https://www.redbackbiotek.com/mixing-chamber">Mxing Chamber vs Breath by Breath</a></p><p>[7] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1692113579367-e3ed568b-cb7a-4409-9709-89baabb1a4ae.pdf">📎Metabolic Computations in Open-Circuit Spirometry.pdf</a></p><p>[8] <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1692113510091-3b4b025d-54f9-42e4-b53e-50f43c2bf02b.pdf">📎热环境人类工效学 代谢率的测定.pdf</a></p><p>[9] 《体育院校通用教材&#x2F;运动生理学》，人民体育出版社，2002</p><p>[10]  <a href="https://www.yuque.com/attachments/yuque/0/2023/pdf/38539471/1692114986255-7fc81d83-22c1-41c8-9b77-4b87cbbbf5d0.pdf">📎Resting Oxygen Uptake Value of 1 Metabolic Equivalent of Task in Older Adults A Systematic Review and Descriptive Analysis.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运动科学</tag>
      
      <tag>CEPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 uPic 搭配腾讯云搭建图床</title>
    <link href="/2023/08/26/%E4%BD%BF%E7%94%A8-uPic-%E6%90%AD%E9%85%8D%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/08/26/%E4%BD%BF%E7%94%A8-uPic-%E6%90%AD%E9%85%8D%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<p><a href="https://sspai.com/post/64169">原文链接</a></p><h3 id="搭建私有图床"><a href="#搭建私有图床" class="headerlink" title="搭建私有图床"></a>搭建私有图床</h3><p>免费图床有两个缺点，一方面是基于隐私的保护的问题，另一方面是你不知道它什么时候可能就没了~，所以如果你对资源管理有更高的要求，或者你是一个小团队需要有自己的图床以保证稳定性，不妨往下看，我手把手教你搭建自己的私有图床。</p><p>需要用到两个东西：</p><ol><li>腾讯云 COS（对象存储）</li><li>uPic 客户端</li></ol><h4 id="购买腾讯云-COS"><a href="#购买腾讯云-COS" class="headerlink" title="购买腾讯云 COS"></a>购买腾讯云 COS</h4><p>其实国内提供对象存储服务的有很多，例如腾讯云、阿里云、七牛云、百度云、又拍云等，选择腾讯云主要是基于两点考虑：</p><ol><li>稳定可靠速度快，节点丰富还便宜</li><li>支持微信或 QQ 登录，对大多数人来说方面，不用再格外注册账号</li></ol><blockquote><p>你甚至可以使用 github 来做免费图床，但缺点是 github 在国内速度太慢了，体验不好，我不推荐。</p></blockquote><p>首先，你需要注册并开通「<a href="https://sspai.com/link?target=https://link.zhihu.com/?target=https://console.cloud.tencent.com/cos5">腾讯云对象存储</a>」，你可以使用微信或 QQ 登录：</p><p><img src="https://cdn.sspai.com/2020/12/22/8c71da4b83b79821350aeb074312bb85.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>在「存储桶列表」&gt;「创建存储桶」，地区按照你的实际情况选择，访问权限设置为「公有读私有写」：</p><p><img src="https://cdn.sspai.com/2020/12/22/157a4689ac564d86ab64cfe8ce0c456b.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/16e922b14f5ae75c91845683a540b870.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>存储桶创建好之后，接下来就可以直接上传图片：</p><p><img src="https://cdn.sspai.com/2020/12/22/b09b74e4a9cd77b4255cd4542d519ba9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>上传完成后，点击「详情」，复制「对象地址」中的 URL 即可访问对象：</p><p><img src="https://cdn.sspai.com/2020/12/22/e6bd74b237fa8914f5dc85788c8b3fdf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/5f6286198ba8b1ad6c743952cd4d9b99.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>如果你要使用 Markdown，只需要手动编辑 Markdown 语法即可，例如：</p><div class="code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">example</span>](<span class="hljs-link">https://myupic-1253463441.cos.ap-nanjing.myqcloud.com/3b6cae2afdea8f710c0a5ccb460c39cb-0.jpg</span>)</code></pre></div><p>腾讯云是根据流量来实时计费的，根据我自己的使用经验来看价格是非常便宜：</p><p><img src="https://cdn.sspai.com/2020/12/22/3908682f470e049dae15ff3b3178352d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>更详细的计费规则参见：<a href="https://sspai.com/link?target=https://link.zhihu.com/?target=https://cloud.tencent.com/product/cos/pricing">腾讯云 COS 定价</a></p><p>上面已经介绍了基本的使用方法，但是你可能也发现了，如果每张图片都这样手动上传、手动复制链接、手动粘贴的话，效率未免太低了，这时候就需要使用我们的主角—— uPic 客户端了。</p><h4 id="uPic-客户端配置"><a href="#uPic-客户端配置" class="headerlink" title="uPic 客户端配置"></a>uPic 客户端配置</h4><p>uPic客户端是开源免费的，可以在如下 GitHub 地址进行下载：</p><ul><li><a href="https://sspai.com/link?target=https://github.com/gee1k/uPic">https://github.com/gee1k/uPic</a></li></ul><p>打开偏好设置，在「图床」中添加一个「腾讯云 COS」：</p><p><img src="https://cdn.sspai.com/2020/12/22/16763a27c4f28b8a2608574f1b763bd9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><h3 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h3><ul><li><code>区域</code>: 对象储存空间所属的区域，可在腾讯云控制台查看。</li><li><code>空间名称</code>: 对象储存空间名称，可在腾讯云控制台查看。</li><li><code>SecretId</code>: 密钥。</li><li><code>SecretKey</code>: 密钥。</li><li><code>域名</code>: 使用腾讯云默认提供的测试域名或者你的自定义域名。域名可在控制台查看。<code>域名需以http://或者https://开头</code>。</li><li><code>保存路径</code>: 文件储存的路径（包括文件夹）。 <code>支持 &#123;year&#125; &#123;month&#125; &#123;day&#125; &#123;hour&#125; &#123;minute&#125; &#123;second&#125; &#123;since_second&#125; &#123;since_millisecond&#125; &#123;random&#125; &#123;filename&#125; &#123;.suffix&#125; 等变量。比如：上传的图片为 uPic.jpg，设定为 “uPic/&#123;filename&#125;&#123;.suffix&#125;”，则会保存到 “uPic/uPic.jpg”。</code></li><li>在<code>保存路径</code>输入框后面的是<code>网址后缀</code>: 用于自定义图片处理。腾讯云 COS 目前还不支持，先预留。</li></ul><p><strong>看起来有点复杂，不过没关系，下面跟着我一步步配置即可。</strong></p><p>点击腾讯云<strong>「</strong>存储桶列表<strong>」</strong>，点击「配置管理」：</p><p><img src="https://cdn.sspai.com/2020/12/22/1b8680f5e02cc2d70f1a0253afd037c1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>可以看到「存储桶名称」和「访问域名」，复制填写到 uPic 中：</p><p><img src="https://cdn.sspai.com/2020/12/22/a3fc05d6a35b9065478cc417c0a26679.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>然进入腾讯云「API 密钥管理」，系统会提示建议创建子账号来管理，点击「切换使用子账号密钥」：</p><p><img src="https://cdn.sspai.com/2020/12/22/ccd164a592c4ef6659d8231145681902.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>选择「快速创建」：</p><p><img src="https://cdn.sspai.com/2020/12/22/e39f339ac3902bc03f3b8672c1e0470a.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>随意输入用户名，例如 GuestforuPic，点击用户权限：</p><p><img src="https://cdn.sspai.com/2020/12/22/461469f544f6e3037721265a3ea20757.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>搜索「QcloudCOSFullAccess」，勾选并确定：</p><p><img src="https://cdn.sspai.com/2020/12/22/71787d4c7210fceaaddf58a8805fdca9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/c0856f11a2315a401d5e8dcc5ba1617f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>然后进入腾讯云的「用户列表」&gt;「用户详情」&gt;「API密钥」&gt;「新建密钥」：</p><p><img src="https://cdn.sspai.com/2020/12/22/641b4ba0223a8225ad0161ddbdb92b91.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p><img src="https://cdn.sspai.com/2020/12/22/e20dabd582fda5b2ebb904738c6529b6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>复制 SecretId 和 SecretKey 到 uPic 客户端：</p><p><img src="https://cdn.sspai.com/2020/12/22/b6c2c37042dc1bef7ec884cc3be20fde.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p><p>至于最后的「保存路径」可以保持不变，如果你有特殊要求再做自定义。</p><p>点击「验证」测试一下，如果提示上传成功就配置完成啦！点击保存即可。</p><p><img src="https://cdn.sspai.com/2020/12/22/67ca93666ebccc3e530b3affabcbe7c6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 中 PIL.Image 和 OpenCV 图像格式相互转换</title>
    <link href="/2023/08/22/Python-%E4%B8%AD-PIL.Image-%E5%92%8C-OpenCV-%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8F%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/08/22/Python-%E4%B8%AD-PIL.Image-%E5%92%8C-OpenCV-%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8F%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>OpenCV 转换成 PIL.Image 格式：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image  <span class="hljs-keyword">import</span> numpy    img = cv2.imread(<span class="hljs-string">&quot;1.jpg&quot;</span>)  <span class="hljs-built_in">print</span>(img.shape)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))cv2.imshow(<span class="hljs-string">&quot;OpenCV&quot;</span>,img)  image = Image.fromarray(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))  image.show()<span class="hljs-comment">#让显示等待键盘输入维持在那里，否则程序跑完就闪退啦！</span>cv2.waitKey(<span class="hljs-number">0</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># (256, 256, 3)</span><span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></code></pre></div><p>PIL.Image 转换成 OpenCV 格式：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2  <span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image  <span class="hljs-keyword">import</span> numpy    image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>)  <span class="hljs-comment"># print(img.shape)# Image has no attribute &#x27;shape&#x27;</span><span class="hljs-built_in">print</span>(np.array(img).shape)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))image.show()  img = cv2.cvtColor(numpy.asarray(image),cv2.COLOR_RGB2BGR)  cv2.imshow(<span class="hljs-string">&quot;OpenCV&quot;</span>,img)  cv2.waitKey(<span class="hljs-number">0</span>)<span class="hljs-comment"># output:</span><span class="hljs-comment"># (256, 256, 3)</span><span class="hljs-comment"># &lt;class &#x27;Image&#x27;&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 配置 Conda 环境</title>
    <link href="/2023/08/22/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/08/22/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>VSCode 下载 Python 插件：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%831.png"></p><p>在 VSCode 中使用 CTRL+P 打开搜索，然后输入 <code>&gt; select interpreter</code>：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%832.png"></p><p>选择对应环境即可。</p><p>运行代码后，可以在 VSCode 的终端发现自动输入了如下指令：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/VSCode-%E9%85%8D%E7%BD%AE-Conda-%E7%8E%AF%E5%A2%833.png"></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>VSCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV CAP_PROP_FRAME_COUNT 获取视频帧数问题</title>
    <link href="/2023/08/18/OpenCV-CAP_PROP_FRAME_COUNT-%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/18/OpenCV-CAP_PROP_FRAME_COUNT-%E8%8E%B7%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>OpenCV 读取视频，可以通过属性 <code>CAP_PROP_FRAME_COUNT</code> 获取视频的总帧数，但是有些视频通过该属性获取的帧数和实际遍历整个视频的帧数不一样。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2 <span class="hljs-keyword">as</span> cvvideo = <span class="hljs-string">&#x27;video.mp4&#x27;</span>cap = cv.VideoCapture(video)frames = cap.get(cv.CAP_PROP_FRAME_COUNT)    <span class="hljs-comment"># 通过属性获取帧数</span>count = <span class="hljs-number">0</span>    <span class="hljs-comment"># 用于计算视频的实际帧数</span><span class="hljs-keyword">while</span> cap.isOpened():    ret, frame = cap.read()    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:        <span class="hljs-keyword">break</span>    count += <span class="hljs-number">1</span>cap.release()<span class="hljs-built_in">print</span>(frames)<span class="hljs-built_in">print</span>(count)<span class="hljs-comment"># output: </span><span class="hljs-comment"># 432</span><span class="hljs-comment"># 541</span></code></pre></div><p>出现这种原因是，视频中包含了损坏的或不能被 OpenCV 解码的帧，OpenCV 就会跳过这些帧，因此造成通过属性 <code>CAP_PROP_FRAME_COUNT</code> 和实际读取的帧数不一样。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AlphaPose 部署</title>
    <link href="/2023/08/16/AlphaPose-%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/08/16/AlphaPose-%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/MVIG-SJTU/AlphaPose">AlphaPose</a> 为开源项目。项目基于PyTorch深度学习框架，所以要安装PyTorch，一般来说把这两个教程看完，PyTorch就能成功安装了：</p><ul><li><a href="https://blog.csdn.net/a922922737/article/details/126620490?ops_request_misc=%7B%22request_id%22:%22168343325116800227473919%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168343325116800227473919&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-126620490-null-null.142%5Ev86%5Einsert_down38v5,239%5Ev2%5Einsert_chatgpt&utm_term=pytorch%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&spm=1018.2226.3001.4187">搭建Pytorch环境(GPU版本，含CUDA、cuDNN)，并在Pycharm上使用（零基础小白向）</a></li><li><a href="https://www.cnblogs.com/sixuwuxian/p/16756072.html">PyCharm与Anaconda超详细安装配置教程</a></li></ul><p>之后就是 AlphaPose 的本地部署，copy 源码后一个一个一个一个往 Conda 环境里安装依赖直到程序能正常运行。</p><p>需要注意的是在安装依赖过程出现的问题：</p><ol><li>numpy 版本不能太旧也不能太新了，我用的版本是 1.20.2；</li><li>安装 yaml 库的时候，是 <code>conda install pyyaml</code>，别安装成了 <code>conda install yaml</code>，会报错 <code>No module named ‘yaml’</code>；</li><li>安装 cython_bbox，<code>pip install -e git+https://github.com/samson-wang/cython_bbox.git#egg=cython-bbox</code>；</li><li>有一些会调用 C++API 的库在 pip 安装时报错，是因为系统要安装 C++ 环境。用 Microsoft C++ 生成工具（Build Tools）。报错内容 <code>Microsoft Visual C++ 14.0 or greater is required. Get it with &quot;Microsoft C++ Build Tools&quot;: https://visualstudio.microsoft.com/visual-cpp-build-tools/ ERROR: Could not build wheels for psutil, which is required to install pyproject.toml-based projects</code></li><li>报错 <code>No module named ‘detector’</code> 的话，把 demo_inference.py 拿到根目录下运行即可；</li><li>下载目标检测模型 yolov3-spp.weights，并在 yolo 文件夹中新建 data 文件夹并将模型放入：detector&#x2F;yolo&#x2F;data&#x2F;yolov3-spp.weights；</li><li>下载 <a href="https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/MODEL_ZOO.md">人体姿态估计模型</a> 放入 pretrained_models 文件夹中，使用模型时，需要调用相应的 config 文件，config 文件不用额外下载，源码自带；</li></ol><p>部署完成后，cd 到一级文件夹输入下面指令即可运行（更多指令可查看 <a href="https://github.com/MVIG-SJTU/AlphaPose/blob/master/docs/GETTING_STARTED.md">Getting Started</a>）：</p><div class="code-wrapper"><pre><code class="hljs bash">调用config：configs/halpe_26/resnet/256x192_res50_lr1e-3_1x.yaml调用模型：pretrained_models/halpe26_fast_res50_256x192.pth识别图片并保存python demo_inference.py --cfg configs/halpe_26/resnet/256x192_res50_lr1e-3_1x.yaml --checkpoint pretrained_models/halpe26_fast_res50_256x192.pth --indir examples/demo/ --save_img识别摄像头python demo_inference.py --cfg configs/halpe_26/resnet/256x192_res50_lr1e-3_1x.yaml --checkpoint pretrained_models/halpe26_fast_res50_256x192.pth --outdir examples/res --vis --webcam 0</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>AlphaPose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>肌电传感器 SEN0240</title>
    <link href="/2023/08/14/%E8%82%8C%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0240/"/>
    <url>/2023/08/14/%E8%82%8C%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0240/</url>
    
    <content type="html"><![CDATA[<p>传感器购买<a href="https://www.dfrobot.com.cn/goods-1503.html">连接</a>。</p><p>传感器<a href="https://wiki.dfrobot.com.cn/_SKU_SEN0240_%E8%82%8C%E7%94%B5%E4%BC%A0%E6%84%9F%E5%99%A8_Analog_EMG_Sensor_by_OYMotion">相关信息</a>，<a href="https://www.yuque.com/cs/products/rwe87o">这个也是</a>。</p><p>传感器驱动示例代码：</p><div class="code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><span class="hljs-comment">* Copyright 2017, OYMotion Inc.</span><span class="hljs-comment">* All rights reserved.</span><span class="hljs-comment">*</span><span class="hljs-comment">* Redistribution and use in source and binary forms, with or without</span><span class="hljs-comment">* modification, are permitted provided that the following conditions</span><span class="hljs-comment">* are met:</span><span class="hljs-comment">*</span><span class="hljs-comment">* 1. Redistributions of source code must retain the above copyright</span><span class="hljs-comment">*    notice, this list of conditions and the following disclaimer.</span><span class="hljs-comment">*</span><span class="hljs-comment">* 2. Redistributions in binary form must reproduce the above copyright</span><span class="hljs-comment">*    notice, this list of conditions and the following disclaimer in</span><span class="hljs-comment">*    the documentation and/or other materials provided with the</span><span class="hljs-comment">*    distribution.</span><span class="hljs-comment">*</span><span class="hljs-comment">* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><span class="hljs-comment">* &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><span class="hljs-comment">* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</span><span class="hljs-comment">* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE</span><span class="hljs-comment">* COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</span><span class="hljs-comment">* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,</span><span class="hljs-comment">* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS</span><span class="hljs-comment">* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED</span><span class="hljs-comment">* AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</span><span class="hljs-comment">* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF</span><span class="hljs-comment">* THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH</span><span class="hljs-comment">* DAMAGE.</span><span class="hljs-comment">*</span><span class="hljs-comment">*/</span><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(ARDUINO) &amp;&amp; ARDUINO &gt;= 100</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Arduino.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;WProgram.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;EMGFilters.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIMING_DEBUG 1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SensorInputPin A0 <span class="hljs-comment">// input pin number</span></span>EMGFilters myFilter;<span class="hljs-comment">// discrete filters must works with fixed sample frequence</span><span class="hljs-comment">// our emg filter only support &quot;SAMPLE_FREQ_500HZ&quot; or &quot;SAMPLE_FREQ_1000HZ&quot;</span><span class="hljs-comment">// other sampleRate inputs will bypass all the EMG_FILTER</span><span class="hljs-type">int</span> sampleRate = SAMPLE_FREQ_1000HZ;<span class="hljs-comment">// For countries where power transmission is at 50 Hz</span><span class="hljs-comment">// For countries where power transmission is at 60 Hz, need to change to</span><span class="hljs-comment">// &quot;NOTCH_FREQ_60HZ&quot;</span><span class="hljs-comment">// our emg filter only support 50Hz and 60Hz input</span><span class="hljs-comment">// other inputs will bypass all the EMG_FILTER</span><span class="hljs-type">int</span> humFreq = NOTCH_FREQ_50HZ;<span class="hljs-comment">// Calibration:</span><span class="hljs-comment">// put on the sensors, and release your muscles;</span><span class="hljs-comment">// wait a few seconds, and select the max value as the threshold;</span><span class="hljs-comment">// any value under threshold will be set to zero</span><span class="hljs-type">static</span> <span class="hljs-type">int</span> Threshold = <span class="hljs-number">0</span>;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> timeStamp;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> timeBudget;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">/* add setup code here */</span>    myFilter.<span class="hljs-built_in">init</span>(sampleRate, humFreq, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);    <span class="hljs-comment">// open serial</span>    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);    <span class="hljs-comment">// setup for time cost measure</span>    <span class="hljs-comment">// using micros()</span>    timeBudget = <span class="hljs-number">1e6</span> / sampleRate;    <span class="hljs-comment">// micros will overflow and auto return to zero every 70 minutes</span>&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">/* add main program code here */</span>    <span class="hljs-comment">// In order to make sure the ADC sample frequence on arduino,</span>    <span class="hljs-comment">// the time cost should be measured each loop</span>    <span class="hljs-comment">/*------------start here-------------------*/</span>    timeStamp = <span class="hljs-built_in">micros</span>();    <span class="hljs-type">int</span> Value = <span class="hljs-built_in">analogRead</span>(SensorInputPin);    <span class="hljs-comment">// filter processing</span>    <span class="hljs-type">int</span> DataAfterFilter = myFilter.<span class="hljs-built_in">update</span>(Value);    <span class="hljs-type">int</span> envlope = <span class="hljs-built_in">sq</span>(DataAfterFilter);    <span class="hljs-comment">// any value under threshold will be set to zero</span>    envlope = (envlope &gt; Threshold) ? envlope : <span class="hljs-number">0</span>;    timeStamp = <span class="hljs-built_in">micros</span>() - timeStamp;    <span class="hljs-keyword">if</span> (TIMING_DEBUG) &#123;        <span class="hljs-comment">// Serial.print(&quot;Read Data: &quot;); Serial.println(Value);</span>        <span class="hljs-comment">// Serial.print(&quot;Filtered Data: &quot;);Serial.println(DataAfterFilter);</span>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Squared Data: &quot;</span>);        Serial.<span class="hljs-built_in">println</span>(envlope);        <span class="hljs-comment">// Serial.print(&quot;Filters cost time: &quot;); Serial.println(timeStamp);</span>        <span class="hljs-comment">// the filter cost average around 520 us</span>    &#125;    <span class="hljs-comment">/*------------end here---------------------*/</span>    <span class="hljs-comment">// if less than timeBudget, then you still have (timeBudget - timeStamp) to</span>    <span class="hljs-comment">// do your work</span>    <span class="hljs-built_in">delayMicroseconds</span>(<span class="hljs-number">500</span>);    <span class="hljs-comment">// if more than timeBudget, the sample rate need to reduce to</span>    <span class="hljs-comment">// SAMPLE_FREQ_500HZ</span>&#125;</code></pre></div><p>驱动代码需要用到 EMGFilters 库，<a href="https://github.com/oymotion/EMGFilters">下载地址</a>。</p><p><strong>推荐每次使用时都校准一次，因为即使是同一个人，不同位置的肌电信号也是不同的。</strong></p><p>校准流程：</p><ul><li>将样例代码中的 Threshold 变量改成 0，即：<code>static int Threshold = 0;</code>；</li><li>上传样例代码至 Arduino 控制板中，然后打开 Arduino IDE 的串口监视器，观察打印的数值；</li><li>放松手臂上的肌肉，观察串口打印的数值。身心平静，让肌肉放松一会，观察串口监视器打印的最大数值，并记录之。如果数值太大，比如 1000 以上，可尝试微调干电极的放置位置；</li><li>将样例代码中的 Threshold 变量改成刚才记录的最大数值，重新上传样例代码至 Arduino 主控板。</li></ul><p>需要注意的是：</p><ul><li><strong>使用时必须要把笔记本电脑电源断开才能出正确的波形</strong>，不然会有噪音；</li><li><strong>传感器必须「紧贴」皮肤（肌肉处），否则会出现 0-40000 的规律读值。这是 Arduino 模拟输入引脚的信号。就算不接入传感器，引脚也会有读值。而驱动代码会将该读值放大。</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EMG</tag>
      
      <tag>传感器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMU 内参标定</title>
    <link href="/2023/08/13/IMU-%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A/"/>
    <url>/2023/08/13/IMU-%E5%86%85%E5%8F%82%E6%A0%87%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>标定的本质是参数辨识，参数包括陀螺仪和加速度计各自的零偏、刻度系数误差、安装误差。</p><p>IMU的内参标定：通过特定的方法找出生产工艺引起的误差，并把他们量化，最终将数据校正。</p><p>相关资料：</p><ol><li><a href="https://xiaotaoguo.com/p/imu-calibration/">IMU 内参标定</a>；</li><li><a href="https://zhuanlan.zhihu.com/p/129642638">多传感器融合定位理论基础（四）：IMU内参模型及标定</a>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCP 远程拷贝文件到树莓派</title>
    <link href="/2023/08/11/SCP-%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <url>/2023/08/11/SCP-%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs bash">scp file user@host:target patheg. scp main.py pi@192.168.1.1:/home/pi/Desktop/demo将目录下的 main.py 拷贝至树莓派的桌面 demo 文件夹中</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 读取串口数据</title>
    <link href="/2023/08/11/Python-%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/08/11/Python-%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="serial-读取串口数据"><a href="#serial-读取串口数据" class="headerlink" title="serial 读取串口数据"></a>serial 读取串口数据</h3><p>初始化ser</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> serialser = serial.Serial(<span class="hljs-string">&#x27;com1&#x27;</span>, <span class="hljs-number">9600</span>, timeout=<span class="hljs-number">1</span>)</code></pre></div><p>初始化的参数</p><div class="code-wrapper"><pre><code class="hljs python">ser = serial.Serial(port=<span class="hljs-literal">None</span>,              <span class="hljs-comment"># number of device, numbering starts at</span><span class="hljs-comment"># zero. if everything fails, the user</span><span class="hljs-comment"># can specify a device string, note</span><span class="hljs-comment"># that this isn&#x27;t portable anymore</span><span class="hljs-comment"># if no port is specified an unconfigured</span><span class="hljs-comment"># an closed serial port object is created</span>baudrate=<span class="hljs-number">9600</span>,          <span class="hljs-comment"># baud rate</span>bytesize=EIGHTBITS,     <span class="hljs-comment"># number of databits</span>parity=PARITY_NONE,     <span class="hljs-comment"># enable parity checking</span>stopbits=STOPBITS_ONE,  <span class="hljs-comment"># number of stopbits</span>timeout=<span class="hljs-literal">None</span>,           <span class="hljs-comment"># set a timeout value, None for waiting forever</span>xonxoff=<span class="hljs-number">0</span>,              <span class="hljs-comment"># enable software flow control</span>rtscts=<span class="hljs-number">0</span>,               <span class="hljs-comment"># enable RTS/CTS flow control</span>interCharTimeout=<span class="hljs-literal">None</span>   <span class="hljs-comment"># Inter-character timeout, None to disable</span>)</code></pre></div><p>ser的属性</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">name：设备名字</span><span class="hljs-string">port：读或者写端口</span><span class="hljs-string">baudrate：波特率</span><span class="hljs-string">bytesize：字节大小</span><span class="hljs-string">parity：校验位</span><span class="hljs-string">stopbits：停止位</span><span class="hljs-string">timeout：读超时设置</span><span class="hljs-string">writeTimeout：写超时</span><span class="hljs-string">xonxoff：软件流控</span><span class="hljs-string">rtscts：硬件流控</span><span class="hljs-string">dsrdtr：硬件流控</span><span class="hljs-string">interCharTimeout:字符间隔超时</span></code></pre></div><p>ser的方法</p><div class="code-wrapper"><pre><code class="hljs python">ser.isOpen()                    <span class="hljs-comment"># 查看端口是否被打开。</span>ser.<span class="hljs-built_in">open</span>()                      <span class="hljs-comment"># 打开端口。</span>ser.close()                     <span class="hljs-comment"># 关闭端口。</span>ser.read()                      <span class="hljs-comment"># 从端口读字节数据。默认1个字节。</span>ser.read_all()                  <span class="hljs-comment"># 从端口接收全部数据。</span>ser.write(<span class="hljs-string">&quot;hello&quot;</span>)              <span class="hljs-comment"># 向端口写数据。</span>ser.readline()                  <span class="hljs-comment"># 读一行数据。</span>ser.readlines()                 <span class="hljs-comment"># 读多行数据。</span>in_waiting()                    <span class="hljs-comment"># 返回接收缓存中的字节数。</span>flush()                         <span class="hljs-comment"># 等待所有数据写出。</span>flushInput()                    <span class="hljs-comment"># 丢弃接收缓存中的所有数据。</span>flushOutput()                   <span class="hljs-comment"># 终止当前写操作，并丢弃发送缓存中的数据。</span></code></pre></div><h3 id="read-readline-readlines-三者的区别"><a href="#read-readline-readlines-三者的区别" class="headerlink" title="read(), readline(), readlines() 三者的区别"></a><code>read()</code>, <code>readline()</code>, <code>readlines()</code> 三者的区别</h3><h4 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h4><p>这里有个txt的文件，其内容为：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">111</span><span class="hljs-number">222</span><span class="hljs-number">333</span></code></pre></div><p>用 <code>read()</code> 的输出为：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># read(size)方法从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象</span>file_read = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file_path&#x27;</span>)<span class="hljs-built_in">print</span>(file_read.read())<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(file_read.read()))file_read.close()<span class="hljs-comment"># output:</span><span class="hljs-comment"># 111</span><span class="hljs-comment"># 222</span><span class="hljs-comment"># 333</span><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span></code></pre></div><p><strong><code>read()</code> 每次读取整个文件，它通常将读取到底文件内容放到一个字符串变量中，也就是说 <code>read()</code> 生成文件内容是一个字符串类型。</strong></p><p>用 <code>readline()</code> 的输出为：</p><div class="code-wrapper"><pre><code class="hljs python">file_readline = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file_path&#x27;</span>)<span class="hljs-built_in">print</span>(file_readline.readline())<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(file_readline.readline()))file_readline.close()<span class="hljs-comment"># output:</span><span class="hljs-comment"># 111</span><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span></code></pre></div><p><strong><code>readline()</code> 每只读取文件的一行，通常也是读取到的一行内容放到一个字符串变量中，返回str类型。</strong></p><p>用 <code>readlines()</code> 的输出为</p><div class="code-wrapper"><pre><code class="hljs python">file_readlines = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file_path&#x27;</span>)<span class="hljs-built_in">print</span>(file_readlines.readlines())<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(file_readlines.readlines()))file_readlines.close()<span class="hljs-comment"># output:</span><span class="hljs-comment"># [&#x27;111\n&#x27;, &#x27;222\n&#x27;, `333\n`]</span><span class="hljs-comment"># &lt;class &#x27;list&#x27;&gt;</span></code></pre></div><p><strong><code>readlines()</code> 每次按行读取整个文件内容，将读取到的内容放到一个列表中，返回 list 类型。</strong></p><h4 id="ser"><a href="#ser" class="headerlink" title="ser"></a>ser</h4><p>串口发送数据内容为：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">b&#x27;Hello/r/n&#x27;</span><span class="hljs-string">Arduino</span> <span class="hljs-string">端的代码为</span> <span class="hljs-string">Serial.println()</span> <span class="hljs-string">所以带/r/n。省麻烦可以用</span> <span class="hljs-string">Serial.print()</span></code></pre></div><p>用 <code>read()</code> 读取：</p><div class="code-wrapper"><pre><code class="hljs python">ser = serial.Serial(<span class="hljs-string">&#x27;com1&#x27;</span>, <span class="hljs-number">9600</span>, timeout=<span class="hljs-number">1</span>)value = ser.read()<span class="hljs-built_in">print</span>(value)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(value))<span class="hljs-comment"># output:</span><span class="hljs-comment"># b&#x27;H&#x27;</span><span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span></code></pre></div><p>用 <code>readline()</code> 读取：</p><div class="code-wrapper"><pre><code class="hljs python">ser = serial.Serial(<span class="hljs-string">&#x27;com1&#x27;</span>, <span class="hljs-number">9600</span>, timeout=<span class="hljs-number">1</span>)value = ser.readline()<span class="hljs-built_in">print</span>(value)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(value))<span class="hljs-comment"># output:</span><span class="hljs-comment"># b&#x27;Hello/r/n&#x27;</span><span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span></code></pre></div><p>目前我还没有遇到需要用 <code>readlines()</code> 的情况，等遇到了再补充。</p><h3 id="去掉换行符和字符串前面b"><a href="#去掉换行符和字符串前面b" class="headerlink" title="去掉换行符和字符串前面b"></a>去掉换行符和字符串前面b</h3><p>利用 <code>strip()</code> 或者 <code>rstrip()</code> 删除 value 末尾的空格、换行符、回车符、制表符。</p><p>再利用 <code>decode()</code> 或者 <code>decode(’utf-8‘)</code> 对其进行解码，将 bytes 转换为 string。</p><div class="code-wrapper"><pre><code class="hljs python">value = value.strip().decode()<span class="hljs-built_in">print</span>(value)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(value))<span class="hljs-comment"># output:</span><span class="hljs-comment"># Hello</span><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span></code></pre></div><h3 id="关于-timeout-参数"><a href="#关于-timeout-参数" class="headerlink" title="关于 timeout 参数"></a>关于 timeout 参数</h3><p>这块内容来自<a href="https://blog.csdn.net/linZinan_/article/details/114804811">python serial库时read、readline、read_all等方法的区别</a>。</p><p>虽然说得很有道理，但我不能复现下面内容，以 MARK 为主。</p><blockquote><p>初始化的时候这里的 <code>timeout</code> 是指在设定的 <code>timeout</code> 时间范围内，如果读取的字节数据是有效的（就是非空）那就直接返回，否则一直会等到这个设定的 <code>timeout</code> 时间并返回这段时间所读的全部字节数据。</p><p>简单来说你可以理解为每 <code>timeout</code> 秒读一次数据，而如果 <code>timeout</code> 太小，数据量太大，可能一次发送不完，会数据未读完的状态。</p><p>也就是说，如果我的 <code>timeout</code> 设置为 0.01，现在我有一个串口通信的传感器，传感器通过串口使用发送一次数据，传感器如果在 0.01 秒内将所有数据都传输过来，就保存到缓存 <code>buffer</code> 中，到了 0.01 秒后就可以读取到传感器发送到 <code>buffer</code> 中的数据了；如果传感器在 0.01 秒内没有将数据发送全的话，<code>buffer</code> 中的数据就是不完全的，就会返回不完全的数据；如果传感器在 0.01 秒内发送了数据的话，<code>buffer</code> 也会返回两组合在一起的数据。</p><p><code>timeout</code> 的设置至关重要，如果不是特别高频的数据的话，<code>timeout=0.01</code> 的 100Hz 完全够了，当然 <code>timeout</code> 最小支持多少要看你的波特率。如果我 0.3 秒发送了一次数据，<code>timeout</code> 设置 0.01，就可以返回一次完整的数据；如果我 0.01 秒发送一次数据，<code>timeout</code> 设置 0.3，那么一次就会返回 30 次数据，所以这就是 <code>timeout</code> 的作用。</p><p>前面引入了 <code>buffer</code> 的概念，可以直接把 <code>buffer</code> 理解为一个文件夹，读数据的方式是和 <code>file</code> 是一样的，只是引入的 <code>timeout</code> 的概念，使得 <code>buffer</code> 内的数据会以 <code>1/timeout</code> 的频率进行刷新。</p><p>如果你把 <code>buffer</code> 当做 <code>file</code> 理解，那么 <code>readline()</code> 就是读取 <code>buffer</code> 中的一行，如果你的数据中存在 <code>\n</code> 这样的换行，那么用 <code>readline()</code> 先让不合适，很容易产生漏读的问题，而且如果你在一个 <code>timeout</code> 周期内没有用 <code>readline()</code> 处理完所有你想要的数据的话，<code>buffer</code> 就刷新了，因此推荐用 <code>read_all()</code> 或者 <code>readlines</code> 来读取。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>O2 浓度传感器 SEN0496 驱动</title>
    <link href="/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/08/11/O2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0496-%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="购买地址"><a href="#购买地址" class="headerlink" title="购买地址"></a><a href="https://www.dfrobot.com.cn/goods-3501.html">购买地址</a></h4><h4 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a><a href="https://wiki.dfrobot.com.cn/SKU_SEN0496_Gravity_%E7%94%B5%E5%8C%96%E5%AD%A6%E6%B0%A7%E6%B0%94%E4%BC%A0%E6%84%9F%E5%99%A8_%E5%85%A8%E9%87%8F%E7%A8%8B_I2C">相关信息</a></h4><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*!</span><span class="hljs-comment">  * @file  getOxygenConcentration.ino</span><span class="hljs-comment">  * @brief Enable the power, and the information is printed on the serial port.</span><span class="hljs-comment">  * @n When using IIC device, select I2C address, set the dialing switch A0, A1 (Address_0 is [0 0]), (Address_1 is [1 0]), (Address_2 is [0 1]), (Address_3 is [1 1]).</span><span class="hljs-comment">  * @copyright   Copyright (c) 2010 DFRobot Co.Ltd (https://www.dfrobot.com)</span><span class="hljs-comment">  */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DFRobot_EOxygenSensor.h&quot;</span>  <span class="hljs-comment">// 需要额外安装DFRobot_EOxygenSensor库</span></span><span class="hljs-comment">/**</span><span class="hljs-comment"> *  iic slave Address, The default is E_OXYGEN_ADDRESS_0</span><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_0               0x70</span><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_1               0x71</span><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_2               0x72</span><span class="hljs-comment"> *     E_OXYGEN_ADDRESS_3               0x73</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> OXYGEN_I2C_ADDRESS E_OXYGEN_ADDRESS_0</span><span class="hljs-function">DFRobot_EOxygenSensor_I2C <span class="hljs-title">oxygen</span><span class="hljs-params">(&amp;Wire, OXYGEN_I2C_ADDRESS)</span></span>;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);  <span class="hljs-keyword">while</span>(!Serial);  <span class="hljs-keyword">while</span>(!oxygen.<span class="hljs-built_in">begin</span>())&#123;    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;NO Deivces !&quot;</span>);    <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);  &#125; Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Device connected successfully !&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span><span class="hljs-function"></span>&#123;  Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;oxygen concetnration is &quot;</span>);   Serial.<span class="hljs-built_in">print</span>(oxygen.<span class="hljs-built_in">readOxygenConcentration</span>());  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;% VOL&quot;</span>);  <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>传感器</tag>
      
      <tag>CEPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CO2 浓度传感器 SEN0220 驱动</title>
    <link href="/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/08/11/CO2-%E6%B5%93%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-SEN0220-%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="购买地址"><a href="#购买地址" class="headerlink" title="购买地址"></a><a href="https://www.dfrobot.com.cn/goods-1360.html">购买地址</a></h4><h4 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a><a href="https://wiki.dfrobot.com.cn/_SKU_SEN0220_Infrared_CO2_Sensor_0-50000ppm_Wide_Range__%E4%BA%8C%E6%B0%A7%E5%8C%96%E7%A2%B3%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97">相关信息</a></h4><h4 id="驱动代码"><a href="#驱动代码" class="headerlink" title="驱动代码"></a>驱动代码</h4><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*!</span><span class="hljs-comment"> * @file  SEN0220.ino</span><span class="hljs-comment"> * @brief Infrared CO2 Sensor 0-50000ppm(Wide Range)</span><span class="hljs-comment"> * @n This example is used for detectting CO2 concentration.</span><span class="hljs-comment"> * @copyright  Copyright (c) 2010 DFRobot Co.Ltd (http://www.dfrobot.com)</span><span class="hljs-comment"> * @license  The MIT License (MIT)</span><span class="hljs-comment"> * @author  lg.gang(lg.gang@qq.com)</span><span class="hljs-comment"> * @version  V1.0</span><span class="hljs-comment"> * @date  2016-06-06</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SoftwareSerial.h&gt;</span></span><span class="hljs-function">SoftwareSerial <span class="hljs-title">mySerial</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>)</span></span>; <span class="hljs-comment">// RX, TX</span><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> hexData[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0xFF</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x79</span>&#125;; <span class="hljs-comment">//Read the gas density command /Don&#x27;t change the order</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);  <span class="hljs-keyword">while</span> (!Serial) &#123;  &#125;  mySerial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  mySerial.<span class="hljs-built_in">write</span>(hexData, <span class="hljs-number">9</span>);  <span class="hljs-built_in">delay</span>(<span class="hljs-number">500</span>);  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)  &#123;    <span class="hljs-keyword">if</span> (mySerial.<span class="hljs-built_in">available</span>() &gt; <span class="hljs-number">0</span>)    &#123;      <span class="hljs-type">long</span> hi, lo, CO2;      <span class="hljs-type">int</span> ch = mySerial.<span class="hljs-built_in">read</span>();      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;        hi = ch;    <span class="hljs-comment">//High concentration</span>      &#125;      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;        lo = ch;    <span class="hljs-comment">//Low concentration</span>      &#125;      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>) &#123;        CO2 = hi * <span class="hljs-number">256</span> + lo; <span class="hljs-comment">//CO2 concentration</span>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CO2 concentration: &quot;</span>);        Serial.<span class="hljs-built_in">print</span>(CO2);        Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;ppm&quot;</span>);      &#125;    &#125;  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>传感器</tag>
      
      <tag>CEPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino 输入输出数字信号</title>
    <link href="/2023/08/11/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/"/>
    <url>/2023/08/11/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>Arduino Uno 上每一个带有数字编号的引脚，都是数字引脚，包括写有 A 编号的模拟输入引脚。</p><p>数字信号是以 0、1 表示的电平不连续变化的信号，也就是以二进制的形式表示的信号。在 Arduino 中数字信号通过高低电平来表示，高电平则为数字信号 1，低电平则为数字信号 0。</p><p>在使用输入或输出功能前，需要先通过 <code>pinMode()</code> 函数配置引脚的模式为输入模式或输出模式：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">pinMode</span>(pin, mode);</code></pre></div><p>参数 pin 为指定配置的引脚编号；参数 mode 为指定的配置模式，包括：</p><ul><li>INPUT，输入模式</li><li>OUTPUT，输出模式</li><li>INPUT_PULLUP，输入上拉模式</li></ul><h3 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h3><p>配置成输出模式后，还需要使用 <code>digitalWrite()</code> 让其输出高电平或者是低电平。其调用形式为：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">digitalWrite</span>(pin, value);</code></pre></div><p>参数 pin 为指定输出的引脚编号；参数 value 为要指定输出的电平，使用 HIGH 指定输出高电平，或是使用 LOW 指定输出低电平。Arduino 中输出的低电平为 0V，输出的高电平为当前 Arduino 的工作电压。例如 Arduino UNO 的工作电压为 3.3V，其高电平输出也是 3.3V；Arduino Uno 工作电压为 5V，所以高电平输出也就是 5V。</p><p>示例代码：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">Blink</span><span class="hljs-comment">等待一秒钟，点亮LED，再等待一秒钟，熄灭LED，如此循环</span><span class="hljs-comment">*/</span> <span class="hljs-meta">#<span class="hljs-keyword">define</span> ledPin A0     </span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span>&#123;                  <span class="hljs-built_in">pinMode</span>(ledPin, OUTPUT);      <span class="hljs-comment">// 初始化A0引脚设置为输出状态</span>&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-built_in">digitalWrite</span>(ledPin, HIGH);  <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);  <span class="hljs-built_in">digitalWrite</span>(ledPin, LOW);  <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);&#125;</code></pre></div><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>数字引脚除了用于输出信号外，还可以用 <code>digitalRead()</code> 函数读取外部输入的数字信号，其调用形式为：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">int</span> value = <span class="hljs-built_in">digitalRead</span>(pin);</code></pre></div><p>参数 pin 为指定读取状态的引脚编号；返回值 value 为获取到的信号状态，1 为高电平，0 为低电平。</p><p>Arduino Uno 会将大于 1.5V 的输入电压视为高电平，小于 1.3V 的电压视为低电平。所以，即使输入电压不太准确，Arduino Uno 也可以正常识别。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arduino 输入输出模拟信号</title>
    <link href="/2023/08/10/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/"/>
    <url>/2023/08/10/Arduino-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>在 Arduino UNO 上，除了 14 个数字输入&#x2F;输出引脚，还带有 6 个编号 A 的模拟输入引脚。Arduino 可以读取这些引脚上输入的模拟值，即读取引脚上输入的电压大小。模拟信号是用连续变化的物理量表示的信息，信号随时间作连续变化。</p><p>模拟输入引脚是带有 ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。</p><p>Arduino Uno模拟输入功能有 10 位精度，即可以将0～5V的电压信号转换为 0～1023 的整数形式表示。换句话说，我们可以将 5V 等分成 1024 份。0V 的输入信号对应着数值 0，而 5V 的输入信号对应着 1023。</p><h3 id="输入信号"><a href="#输入信号" class="headerlink" title="输入信号"></a>输入信号</h3><p>模拟输入功能需要使用 <code>analogRead()</code> 函数：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">int</span> value = <span class="hljs-built_in">analogRead</span>(pin)</code></pre></div><p>参数 pin 是指定要读取模拟值的引脚，被指定的引脚必须是模拟输入引脚。如 <code>analogRead(A0)</code>，即是读取A0引脚上的模拟值。Arduino 读取一次模拟输入需要消耗 100 微秒的时间，最大频率为 10000HZ。</p><p><strong>注意：在模拟输入引脚没有任何连接的情况下，用 <code>analogRead()</code> 读取该引脚，这时获得的返回值为不固定的数值。这个数值可能受到多种因素影响，如将手靠近引脚也可能使得该返回值产生变化。</strong></p><p>示例代码：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 传感器数据传输引脚连接在Arduino的A0引脚</span><span class="hljs-comment">// 传感器另外两个引脚分别连接在Arduino的5V和GND引脚</span><span class="hljs-comment">// 变量sensorValue用来存储模拟输入信号</span><span class="hljs-type">int</span> sensorValue = <span class="hljs-number">0</span>;           <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-comment">// Arduino串口通讯初始化 </span>  Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>); &#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-comment">// 读取引脚A0输入信号</span>  sensorValue = <span class="hljs-built_in">analogRead</span>(A0);     <span class="hljs-comment">// 将A0输入信号转换为0-1023之间的数值</span>  <span class="hljs-comment">// 并且通过串口监视器显示 </span>  Serial.<span class="hljs-built_in">println</span>(sensorValue); &#125;</code></pre></div><h3 id="输出信号"><a href="#输出信号" class="headerlink" title="输出信号"></a>输出信号</h3><p>与模拟输入功能对应的是模拟输出功能，使用 <code>analogWrite()</code> 函数实现这个功能。但该函数并不是输出真正意义上的模拟值，而是以一种特殊的方式来达到输出近似模拟值的效果，这种方式叫做脉冲宽度调制（PWM，Pulse Width Modulation）。</p><p>在Arduino Uno中，提供PWM功能的引脚为3、5、6、9、10、11。</p><p>当使用 <code>analogWrite()</code> 函数时，指定引脚会通过高低电平的不断转换输出一个周期固定的方波，通过改变高低电平在每个周期中所占的比例（占空比），而得到近似输出不同的电压的效果。</p><p>需要注意的是，这里仅仅是得到了近似模拟值输出的效果，如果要输出真正的模拟值，还需要加上外围滤波电路。</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">analogWrite</span>(pin, value)</code></pre></div><p>参数 pin 是指定要输出 PWM 波的引脚，参数 value 指定是 PWM 的脉冲宽度，范围为 0～255。</p><p>在 <code>analogWrite()</code> 和 <code>analogRead()</code> 函数内部，已经完成了引脚的初始化，因此不用在 <code>setup()</code> 函数中进行初始化操作（数字信号的 <code>pinMode()</code>）。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派开启远程桌面并修改分辨率</title>
    <link href="/2023/08/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <url>/2023/08/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h3 id="1-启动树莓派桌面系统自带的-VNC-服务"><a href="#1-启动树莓派桌面系统自带的-VNC-服务" class="headerlink" title="1.启动树莓派桌面系统自带的 VNC 服务"></a>1.启动树莓派桌面系统自带的 VNC 服务</h3><p>首先 ssh 登录树莓派，终端输入 <code>sudo raspi-config</code> 启动自带的配置程序。</p><p>找到「Interfacing Options」选项，进入二级菜单找到「VNC」选项开启。</p><h3 id="2-下载-VNC-Viewer"><a href="#2-下载-VNC-Viewer" class="headerlink" title="2.下载 VNC Viewer"></a>2.下载 VNC Viewer</h3><p><a href="https://www.realvnc.com/en/connect/download/viewer/">下载地址</a></p><h3 id="3-登录远程桌面"><a href="#3-登录远程桌面" class="headerlink" title="3.登录远程桌面"></a>3.登录远程桌面</h3><p>运行 VNC Viewer 之后输入树莓派的 IP 地址，通过 <code>ifconfig</code> 命令可以查看。选择连接之后输入树莓派的登录用户名和密码（烧录系统时初始化）。确认之后即可进入树莓派的远程桌面。</p><h3 id="4-修改分辨率"><a href="#4-修改分辨率" class="headerlink" title="4.修改分辨率"></a>4.修改分辨率</h3><p>终端输入 <code>sudo raspi-config</code> 启动配置程序，操作顺序为「Advanced Options &gt; Resolution」。</p><p>需要注意的是：</p><ol><li>在树莓派没有连接显示器的情况下，上述操作可以调整远程桌面分辨率，但最大为「1920x1080」；</li><li>在树莓派连接显示器的情况下，远程桌面分辨率与显示器分辨率相同，无法通过配置程序进行修改。可以在「Preferences」中修改显示器分辨率，从而修改远程桌面分辨率。这种情况下，可以认为远程桌面为显示器镜像；</li><li>可以采用在终端输入例如 <code>vncserver -geometry 2560x1440 :1</code>（如果不行就 <code>vncserver-virtual -geometry 2560x1440 :1</code>）的方式开启一个新的（临时）桌面，新桌面的分辨率为 2560x1440，端口号为 1。<ol><li>VNC Viewer 连接新桌面输入 IP 时，需要加上端口号，例如 <code>192.168.1.216:1</code>。新桌面开启成功后，终端会返回这个值；</li><li>可以开启多个桌面，只要端口不重复、占用，且每个桌面互相独立；</li><li>如果指令不带端口号，例如 <code>vncserver -geometry 2560x1440</code> 则会默认从端口 1 开启。若端口 1 已被桌面占用，则会开启端口 2，以此类推；</li><li>若新桌面鼠标变成一个「X」，可在终端输入 <code>lxappearance</code> 打开鼠标设置，即可恢复正常；</li><li>通过这种方式开启的桌面，会在树莓派关机后销毁，所以是「临时」的。</li></ol></li></ol><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><p>貌似不在配置程序中开启 VNC 服务，而是直接在终端输入 <code>vncserver</code> 或者 <code>vncserver -geometry 2560x1440</code> 也可开启（临时）远程桌面。</p><p>若在这种情况下运行 VNC Viewer，<strong>必须</strong>输入带端口的 IP。直接输入 IP 会报错：</p><blockquote><p> The connection was refused by the computer</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Raspberry Pi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift Timer 定时器</title>
    <link href="/2023/08/07/Swift-Timer-%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2023/08/07/Swift-Timer-%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">struct</span> <span class="hljs-title class_">TimerView</span>: <span class="hljs-title class_">View</span> &#123;    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count1: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count2: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> count3: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>        <span class="hljs-comment">// 创建第一个定时器 timer1 </span>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">var</span> timer1: <span class="hljs-type">Timer</span>?    <span class="hljs-comment">// 创建第二个定时器 timer2</span>    <span class="hljs-keyword">let</span> timer2 <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.publish(every: <span class="hljs-number">1.0</span>, on: .main, in: .common).autoconnect()        <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;        <span class="hljs-type">VStack</span> (spacing: <span class="hljs-number">55</span>) &#123;            <span class="hljs-comment">// 调用 timer1 启动方法</span>            <span class="hljs-type">Button</span>(action: &#123;setupTimer()&#125;) &#123;                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;start&quot;</span>)            &#125;            <span class="hljs-type">Button</span>(action: &#123;resetTimer()&#125;) &#123;                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;reset&quot;</span>)            &#125;        &#125;        .onAppear &#123;            <span class="hljs-comment">// timer3 创建&amp;启动</span>            <span class="hljs-type">Timer</span>.scheduledTimer(withTimeInterval: <span class="hljs-number">1.0</span>,  repeats: <span class="hljs-literal">true</span>)&#123; (<span class="hljs-keyword">_</span>) <span class="hljs-keyword">in</span>                count3 <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&gt; timer3 running <span class="hljs-subst">\(count3)</span>&quot;</span>)            &#125;        &#125;        <span class="hljs-comment">// timer2 启动！</span>        .onReceive(timer2) &#123; input <span class="hljs-keyword">in</span>            count2 <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&gt; timer2 running <span class="hljs-subst">\(count2)</span>&quot;</span>)        &#125;    &#125;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">setupTimer</span>() &#123;        <span class="hljs-keyword">guard</span> timer1 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> &#125;        <span class="hljs-comment">// timer1 启动！</span>        timer1 <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.scheduledTimer(withTimeInterval: <span class="hljs-number">1.0</span>, repeats: <span class="hljs-literal">true</span>, block: &#123; <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span>            count1 <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&gt; timer1 running <span class="hljs-subst">\(count1)</span>&quot;</span>)        &#125;)    &#125;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">resetTimer</span>() &#123;        timer1<span class="hljs-operator">?</span>.invalidate()        timer1 <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span>    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 关键字 Nonlocal 与 Global</title>
    <link href="/2023/08/07/Python-%E5%85%B3%E9%94%AE%E5%AD%97-Nonlocal-%E4%B8%8E-Global/"/>
    <url>/2023/08/07/Python-%E5%85%B3%E9%94%AE%E5%AD%97-Nonlocal-%E4%B8%8E-Global/</url>
    
    <content type="html"><![CDATA[<p>global 的用法：</p><div class="code-wrapper"><pre><code class="hljs python">num1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_num</span>():  <span class="hljs-keyword">global</span> num1  num1 = <span class="hljs-number">1</span>  num2 = <span class="hljs-number">1</span>change_num()<span class="hljs-built_in">print</span>(num1, num2)<span class="hljs-comment"># output: 1, 0</span><span class="hljs-comment"># 不允许直接修改全局变量(数组、字典除外)，需要添加 global 关键字</span></code></pre></div><p>nonlocal 的用法：</p><div class="code-wrapper"><pre><code class="hljs python">num1 = <span class="hljs-number">0</span>num2 = <span class="hljs-number">0</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_num</span>():  num3 = <span class="hljs-number">1</span>  num4 = <span class="hljs-number">1</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">change_num_inner</span>():    <span class="hljs-keyword">nonlocal</span> num3    num3 = <span class="hljs-number">2</span>    num4 = <span class="hljs-number">2</span>      change_num_inner()    <span class="hljs-keyword">return</span> num3, num4num1, num2 = change_num()<span class="hljs-built_in">print</span>(num1, num2)<span class="hljs-comment"># output: 2, 1</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 获取数组出现次数最多的元素</title>
    <link href="/2023/08/07/Python-%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <url>/2023/08/07/Python-%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]max_label = <span class="hljs-built_in">max</span>(a, key=a.count)<span class="hljs-built_in">print</span>(max_label)<span class="hljs-comment"># output: 2</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 猫狗识别深度学习 I 低准确度版本</title>
    <link href="/2023/08/07/PyTorch-%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-I-%E4%BD%8E%E5%87%86%E7%A1%AE%E5%BA%A6%E7%89%88%E6%9C%AC/"/>
    <url>/2023/08/07/PyTorch-%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-I-%E4%BD%8E%E5%87%86%E7%A1%AE%E5%BA%A6%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><p><a href="https://www.kaggle.com/datasets/tongpython/cat-and-dog">Cat and Dog</a></p><p>下载的文件层级为：</p><p>PetImages(doc) - Cat(doc)&#x2F;Dog(doc) - image(jpg)</p><p>需要注意狗的 11702 和猫的 666 这两张图片损坏了。在加载数据集的时候会出现警告。</p><h3 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h3><h4 id="获取猫狗图片的-txt"><a href="#获取猫狗图片的-txt" class="headerlink" title="获取猫狗图片的 txt"></a>获取猫狗图片的 txt</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_txt</span>(<span class="hljs-params">path, file_name, label</span>):    <span class="hljs-comment"># path：dataset的根目录</span>    <span class="hljs-comment"># file_path：dataset文件夹</span>    file_path = os.path.join(path, file_name)    data = os.listdir(file_path)    <span class="hljs-comment"># &#x27;w&#x27; is mean write</span>    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file_name + <span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:        f.write(item + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(label) + <span class="hljs-string">&#x27; &#x27;</span> + file_name + <span class="hljs-string">&#x27;\n&#x27;</span>)    f.close()</code></pre></div><p>这里是将 PetImages 文件夹下的 Cat 或者 Dog 文件打开，遍历里面的照片，最后输出 txt 文件。</p><p>txt 的内容为（以猫为例）：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.jpg <span class="hljs-number">0</span> Cat<span class="hljs-attribute">2</span>.jpg <span class="hljs-number">0</span> Cat<span class="hljs-attribute">3</span>.jpg <span class="hljs-number">0</span> Cat<span class="hljs-attribute">4</span>.jpg <span class="hljs-number">0</span> Cat</code></pre></div><p>这里，Cat 的 label 为 0，Dog 的 label 为 1。</p><h4 id="混合猫狗图片的-txt"><a href="#混合猫狗图片的-txt" class="headerlink" title="混合猫狗图片的 txt"></a>混合猫狗图片的 txt</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_txt</span>(<span class="hljs-params">path, file1_name, file2_name</span>):    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;DataSet.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)    <span class="hljs-comment"># &#x27;r&#x27; is mean read</span>    f1 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file1_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)    <span class="hljs-comment"># readline/readlines</span>    data1 = f1.readlines()    <span class="hljs-comment"># PC 上生成的 txt 有 DStore 信息。合并 txt 时需要只读取第一行之后的内容</span>    <span class="hljs-comment"># data1 = data1[1:]</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data1:        f.write(item)    f2 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file2_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)    data2 = f2.readlines()    <span class="hljs-comment"># data2 = data2[1:]</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data2:        f.write(item)    f.close()    f1.close()    f2.close()</code></pre></div><h3 id="构建数据集"><a href="#构建数据集" class="headerlink" title="构建数据集"></a>构建数据集</h3><h4 id="定义数据集类，通过-txt-索引将所有图片变成数据集"><a href="#定义数据集类，通过-txt-索引将所有图片变成数据集" class="headerlink" title="定义数据集类，通过 txt 索引将所有图片变成数据集"></a>定义数据集类，通过 txt 索引将所有图片变成数据集</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path, transform</span>):        self.path = path        self.transform = transform        self.txt_path = self.path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;Dataset.txt&#x27;</span>        f = <span class="hljs-built_in">open</span>(self.txt_path, <span class="hljs-string">&#x27;r&#x27;</span>)        data = f.readlines()        images = []        labels = []        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:            <span class="hljs-comment"># 去掉空格，并组成数组</span>            word = item.split()            images.append(os.path.join(self.path, word[<span class="hljs-number">2</span>], word[<span class="hljs-number">0</span>]))            labels.append(<span class="hljs-built_in">int</span>(word[<span class="hljs-number">1</span>]))        <span class="hljs-comment"># 张量化</span>        labels = torch.LongTensor(labels)        self.images = images        self.labels = labels    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):        image = self.images[index]        label = self.labels[index]        image = Image.<span class="hljs-built_in">open</span>(image).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)        image = self.transform(image)        <span class="hljs-keyword">return</span> image, label    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.labels)</code></pre></div><h4 id="初始化数据集，并切割"><a href="#初始化数据集，并切割" class="headerlink" title="初始化数据集，并切割"></a>初始化数据集，并切割</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataset</span>(<span class="hljs-params">path, transform</span>):    tic = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Dataset...&#x27;</span>)    dataset = ImageDataset(path, transform)    train, test = train_test_split(dataset, test_size=<span class="hljs-number">0.2</span>)    toc = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Over, Cost Time: &#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)    <span class="hljs-keyword">return</span> train, test</code></pre></div><h3 id="MODEL"><a href="#MODEL" class="headerlink" title="MODEL"></a>MODEL</h3><h4 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h4><p>不负责的定义</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(nn.Module):    <span class="hljs-comment"># ValueError:optimizer got an empty parameter list</span>    <span class="hljs-comment"># init写错（int），没有__，没有super都会报错</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">super</span>(Model, self).__init__()        <span class="hljs-comment"># 卷积层</span>        <span class="hljs-comment"># original 3 x 256 x 256</span>        <span class="hljs-comment"># conv1 -&gt; 8 x 256 x 256</span>        self.conv1 = nn.Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">8</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)        <span class="hljs-comment"># pool1 -&gt; 8 x 128 x 128</span>        self.pool1 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-comment"># conv2 -&gt; 16 x 128 x 128</span>        self.conv2 = nn.Conv2d(in_channels=<span class="hljs-number">8</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)        <span class="hljs-comment"># pool2 -&gt; 16 x 64 x 64</span>        self.pool2 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-comment"># conv3 -&gt; 32 x 64 x 64</span>        self.conv3 = nn.Conv2d(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)        <span class="hljs-comment"># pool3 -&gt; 32 x 32 x 32</span>        self.pool3 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-comment"># 全连接层</span>        self.fc1 = nn.Linear(<span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>, <span class="hljs-number">256</span>)        self.fc2 = nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">64</span>)        self.fc3 = nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">2</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):        x = self.conv1(x)        x = nn.functional.relu(x)        x = self.pool1(x)        x = self.conv2(x)        x = nn.functional.relu(x)        x = self.pool2(x)        x = self.conv3(x)        x = nn.functional.relu(x)        x = self.pool3(x)        <span class="hljs-comment"># x = x.view(32 * 32 * 32, -1)</span>        <span class="hljs-comment"># mat1 and mat2 shapes cannot be multiplied (32768x50 and 32768x256)</span>        <span class="hljs-comment"># batch_size = 50</span>        <span class="hljs-comment"># 要改成 50x32768 and 32768x256</span>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>)        x = self.fc1(x)        x = nn.functional.relu(x)        x = self.fc2(x)        x = nn.functional.relu(x)        x = self.fc3(x)        x = nn.functional.softmax(x, dim=<span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> x</code></pre></div><p>注意两个点：</p><ol><li>init 写错（int），没有__，没有 super 都会报错 ValueError:optimizer got an empty parameter list；</li><li>x &#x3D; x.view(32 * 32 * 32, -1) 会报错 mat1 and mat2 shapes cannot be multiplied (32768x50 and 32768x256)，要行对列。</li></ol><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_model</span>(<span class="hljs-params">train, test, batch_size, gpu, lr, epochs</span>):    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)    model = Model()    <span class="hljs-comment"># SGD</span>    optimizer = torch.optim.Adam(model.parameters(), lr=lr)    <span class="hljs-comment"># RuntimeError: Boolean value of Tensor with more than one value is ambiguous</span>    <span class="hljs-comment"># 初始化的时候，后面加个()</span>    loss_func = nn.CrossEntropyLoss()    <span class="hljs-keyword">if</span> gpu:        <span class="hljs-comment"># Input type (torch.FloatTensor) and weight type (torch.cuda.FloatTensor) should be the same</span>        <span class="hljs-comment"># 要model = model.to(device)，不能写model.to(device)</span>        model = model.to(device)        loss_func = loss_func.to(device)    train_dataloader = DataLoader(train,                                  batch_size=batch_size,                                  shuffle=<span class="hljs-literal">True</span>,                                  num_workers=<span class="hljs-number">0</span>,                                  pin_memory=<span class="hljs-literal">True</span>)    test_dataloader = DataLoader(test,                                 batch_size=batch_size,                                 shuffle=<span class="hljs-literal">True</span>,                                 num_workers=<span class="hljs-number">0</span>,                                 pin_memory=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):        tic = time.time()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Training&#x27;</span>)        <span class="hljs-keyword">for</span> step, (train_images, train_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):            <span class="hljs-keyword">if</span> gpu:                train_images = train_images.to(device)                train_labels = train_labels.to(device)            prediction = model(train_images)            loss = loss_func(prediction, train_labels)            optimizer.zero_grad()            loss.backward()            optimizer.step()            <span class="hljs-comment"># print(&#x27;Epoch: &#x27;, epoch + 1, &#x27;| Step: &#x27;, step + 1, &#x27;| Loss: &#x27;, loss.item())</span>        toc = time.time()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train&#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Over&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset Loading...&#x27;</span>)        correct = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> step, (test_images, test_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_dataloader):            <span class="hljs-keyword">if</span> gpu:                test_images = test_images.to(device)                test_labels = test_labels.to(device)            result = model(test_images)            prediction = torch.argmax(result, <span class="hljs-number">1</span>)            correct += (prediction == test_labels).<span class="hljs-built_in">sum</span>().item()        accuracy = correct / <span class="hljs-built_in">len</span>(test_dataset)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset:&#x27;</span>, <span class="hljs-built_in">len</span>(test_dataset), <span class="hljs-string">&#x27;| Correct:&#x27;</span>, correct, <span class="hljs-string">&#x27;| Accuracy:&#x27;</span>, accuracy)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)        time.sleep(<span class="hljs-number">3</span>)    <span class="hljs-keyword">return</span> model</code></pre></div><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> torch<span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path, transform</span>):        self.path = path        self.transform = transform        self.txt_path = self.path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;Dataset.txt&#x27;</span>        f = <span class="hljs-built_in">open</span>(self.txt_path, <span class="hljs-string">&#x27;r&#x27;</span>)        data = f.readlines()        images = []        labels = []        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:            <span class="hljs-comment"># 去掉空格，并组成数组</span>            word = item.split()            images.append(os.path.join(self.path, word[<span class="hljs-number">2</span>], word[<span class="hljs-number">0</span>]))            labels.append(<span class="hljs-built_in">int</span>(word[<span class="hljs-number">1</span>]))        <span class="hljs-comment"># 张量化</span>        labels = torch.LongTensor(labels)        self.images = images        self.labels = labels    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):        image = self.images[index]        label = self.labels[index]        image = Image.<span class="hljs-built_in">open</span>(image).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)        image = self.transform(image)        <span class="hljs-keyword">return</span> image, label    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.labels)<span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(nn.Module):    <span class="hljs-comment"># ValueError:optimizer got an empty parameter list</span>    <span class="hljs-comment"># init写错（int），没有__，没有super都会报错</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):        <span class="hljs-built_in">super</span>(Model, self).__init__()        <span class="hljs-comment"># 卷积层</span>        <span class="hljs-comment"># original 3 x 256 x 256</span>        <span class="hljs-comment"># conv1 -&gt; 8 x 256 x 256</span>        self.conv1 = nn.Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">8</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)        <span class="hljs-comment"># pool1 -&gt; 8 x 128 x 128</span>        self.pool1 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-comment"># conv2 -&gt; 16 x 128 x 128</span>        self.conv2 = nn.Conv2d(in_channels=<span class="hljs-number">8</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)        <span class="hljs-comment"># pool2 -&gt; 16 x 64 x 64</span>        self.pool2 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-comment"># conv3 -&gt; 32 x 64 x 64</span>        self.conv3 = nn.Conv2d(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)        <span class="hljs-comment"># pool3 -&gt; 32 x 32 x 32</span>        self.pool3 = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)        <span class="hljs-comment"># 全连接层</span>        self.fc1 = nn.Linear(<span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>, <span class="hljs-number">256</span>)        self.fc2 = nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">64</span>)        self.fc3 = nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">2</span>)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):        x = self.conv1(x)        x = nn.functional.relu(x)        x = self.pool1(x)        x = self.conv2(x)        x = nn.functional.relu(x)        x = self.pool2(x)        x = self.conv3(x)        x = nn.functional.relu(x)        x = self.pool3(x)        <span class="hljs-comment"># x = x.view(32 * 32 * 32, -1)</span>        <span class="hljs-comment"># mat1 and mat2 shapes cannot be multiplied (32768x50 and 32768x256)</span>        <span class="hljs-comment"># batch_size = 50</span>        <span class="hljs-comment"># 要改成 50x32768 and 32768x256</span>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">32</span> * <span class="hljs-number">32</span> * <span class="hljs-number">32</span>)        x = self.fc1(x)        x = nn.functional.relu(x)        x = self.fc2(x)        x = nn.functional.relu(x)        x = self.fc3(x)        x = nn.functional.softmax(x, dim=<span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> x<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_txt</span>(<span class="hljs-params">path, file_name, label</span>):    <span class="hljs-comment"># path：dataset的根目录</span>    <span class="hljs-comment"># file_path：dataset文件夹</span>    file_path = os.path.join(path, file_name)    data = os.listdir(file_path)    <span class="hljs-comment"># &#x27;w&#x27; is mean write</span>    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:        f.write(item + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">str</span>(label) + <span class="hljs-string">&#x27; &#x27;</span> + file_name + <span class="hljs-string">&#x27;\n&#x27;</span>)    f.close()<span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_txt</span>(<span class="hljs-params">path, file1_name, file2_name</span>):    f = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;DataSet.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)    <span class="hljs-comment"># &#x27;r&#x27; is mean read</span>    f1 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file1_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)    <span class="hljs-comment"># readline/readlines</span>    data1 = f1.readlines()    <span class="hljs-comment"># PC 上生成的 txt 有 DStore 信息。合并 txt 时需要只读取第一行之后的内容</span>    <span class="hljs-comment"># data1 = data1[1:]</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data1:        f.write(item)    f2 = <span class="hljs-built_in">open</span>(path + <span class="hljs-string">&#x27;/&#x27;</span> + file2_name + <span class="hljs-string">&#x27;Data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)    data2 = f2.readlines()    <span class="hljs-comment"># data2 = data2[1:]</span>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data2:        f.write(item)    f.close()    f1.close()    f2.close()<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataset</span>(<span class="hljs-params">path, transform</span>):    tic = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Dataset...&#x27;</span>)    dataset = ImageDataset(path, transform)    train, test = train_test_split(dataset, test_size=<span class="hljs-number">0.2</span>)    toc = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Over, Cost Time: &#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)    <span class="hljs-keyword">return</span> train, test<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_model</span>(<span class="hljs-params">train, test, batch_size, gpu, lr, epochs</span>):    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)    model = Model()    <span class="hljs-comment"># SGD</span>    optimizer = torch.optim.Adam(model.parameters(), lr=lr)    <span class="hljs-comment"># RuntimeError: Boolean value of Tensor with more than one value is ambiguous</span>    <span class="hljs-comment"># 初始化的时候，后面加个()</span>    loss_func = nn.CrossEntropyLoss()    <span class="hljs-keyword">if</span> gpu:        <span class="hljs-comment"># Input type (torch.FloatTensor) and weight type (torch.cuda.FloatTensor) should be the same</span>        <span class="hljs-comment"># 要model = model.to(device)，不能写model.to(device)</span>        model = model.to(device)        loss_func = loss_func.to(device)    train_dataloader = DataLoader(train,                                  batch_size=batch_size,                                  shuffle=<span class="hljs-literal">True</span>,                                  num_workers=<span class="hljs-number">0</span>,                                  pin_memory=<span class="hljs-literal">True</span>)    test_dataloader = DataLoader(test,                                 batch_size=batch_size,                                 shuffle=<span class="hljs-literal">True</span>,                                 num_workers=<span class="hljs-number">0</span>,                                 pin_memory=<span class="hljs-literal">True</span>)    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):        tic = time.time()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Training&#x27;</span>)        <span class="hljs-keyword">for</span> step, (train_images, train_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):            <span class="hljs-keyword">if</span> gpu:                train_images = train_images.to(device)                train_labels = train_labels.to(device)            prediction = model(train_images)            loss = loss_func(prediction, train_labels)            optimizer.zero_grad()            loss.backward()            optimizer.step()            <span class="hljs-comment"># print(&#x27;Epoch: &#x27;, epoch + 1, &#x27;| Step: &#x27;, step + 1, &#x27;| Loss: &#x27;, loss.item())</span>        toc = time.time()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train&#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Over&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(toc - tic) + <span class="hljs-string">&#x27;s&#x27;</span>)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset Loading...&#x27;</span>)        correct = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> step, (test_images, test_labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_dataloader):            <span class="hljs-keyword">if</span> gpu:                test_images = test_images.to(device)                test_labels = test_labels.to(device)            result = model(test_images)            prediction = torch.argmax(result, <span class="hljs-number">1</span>)            correct += (prediction == test_labels).<span class="hljs-built_in">sum</span>().item()        accuracy = correct / <span class="hljs-built_in">len</span>(test_dataset)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test Dataset:&#x27;</span>, <span class="hljs-built_in">len</span>(test_dataset), <span class="hljs-string">&#x27;| Correct:&#x27;</span>, correct, <span class="hljs-string">&#x27;| Accuracy:&#x27;</span>, accuracy)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)        time.sleep(<span class="hljs-number">3</span>)    <span class="hljs-keyword">return</span> model<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-comment"># root_path = &#x27;E:/Mac/PetImages&#x27;</span>    root_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/PetImages&#x27;</span>    get_txt(root_path, file_name=<span class="hljs-string">&#x27;Cat&#x27;</span>, label=<span class="hljs-number">0</span>)    get_txt(root_path, file_name=<span class="hljs-string">&#x27;Dog&#x27;</span>, label=<span class="hljs-number">1</span>)    mix_txt(root_path, file1_name=<span class="hljs-string">&#x27;Cat&#x27;</span>, file2_name=<span class="hljs-string">&#x27;Dog&#x27;</span>)    custom_transform = transforms.Compose([        transforms.Resize(<span class="hljs-number">288</span>),        transforms.CenterCrop(<span class="hljs-number">256</span>),        transforms.ToTensor()    ])    <span class="hljs-comment"># batch_size</span>    <span class="hljs-comment"># https://blog.51cto.com/u_15127688/4678771</span>    <span class="hljs-comment"># 这相比于全数据集训练，相当于是在寻找最优时人为增加了一些随机噪声，来修正由局部数据得到的梯度，尽量避免因 batch size 过大陷入局部最优</span>    <span class="hljs-comment"># 吃内存</span>    train_dataset, test_dataset = get_dataset(root_path, custom_transform)    cat_vs_dog_model = get_model(train=train_dataset, test=test_dataset,                                 batch_size=<span class="hljs-number">25</span>,                                 gpu=<span class="hljs-literal">False</span>,                                 lr=<span class="hljs-number">0.0001</span>,                                 epochs=<span class="hljs-number">30</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>计算机视觉</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 报错 Failed to register bundle identifier</title>
    <link href="/2023/08/07/Xcode-%E6%8A%A5%E9%94%99-Failed-to-register-bundle-identifier/"/>
    <url>/2023/08/07/Xcode-%E6%8A%A5%E9%94%99-Failed-to-register-bundle-identifier/</url>
    
    <content type="html"><![CDATA[<p>大概率是注册 Bundle Identifier 的时候 <code>edu.self.AppName</code> 被人注册了</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Xcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传感器的响应时间</title>
    <link href="/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/"/>
    <url>/2023/08/07/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>关于响应时间，例如热电偶测量水温的实验过程：</p><ol><li>用恒温水槽，水温 $T$，环境温度 $T_0$ ，热电偶首先处于外部环境中，稳定后，反映环境温度 $T_0$；</li><li>将热电偶迅速插入到恒温水槽中，这时候热电偶感受的温度参数发生突变，由 $T_0$ 到 $T$。</li></ol><p>那么此时，热电偶输出反映的温度就是 $T$ 吗？答案通常情况之下是否定的，通常可以看到热电偶反映的温度有一个逐渐上升的过程，最终会达到 $T$。而这样的一个过程就是热电偶动态特性的一个体现，如图所示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B41.png"></p><p>温度的突变是阶跃输入。如果传感器的动态特性足够好的话，那么传感器的输出也应该是一个阶跃输出，但上面的例子中热电偶总是需要一定的时间才能够指示出正确的温度，动态特性越好的热电偶，需要的时间会越短；而在特定时刻，热电偶示出的温度与真实的恒温水槽温度之间的差别就是某时刻的动态误差，这是与时间因素相关的误差。</p><p>响应时间是指从输入量开始起作用到输出指示值进入稳定值所规定的范围内所需要的时间。这个时间与规定的范围有关，这个时间意味着，从这个时间之后输出指示值将全部落在规定的范围之内。</p><p>对于一般情况，当传感器输入一个单位阶跃信号时，其输出信号称为阶跃响应。传感器常见的一阶及二阶阶跃响应曲线如图所示：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B42.png"></p><p>主要的特性指标如下：</p><ol><li>时间常数 $τ$ 为一阶传感器输出值上升到稳态值的 63.2% 所需的时间。它是描述一阶传感器动态特性的重要参数，$τ$ 越小，响应速度越快；</li><li>上升时间 $T_r$ 为传感器输出值由稳态值的 10% 上升到 90% 所需的时间，但有时也规定其他百分数；</li><li>响应时间 $T_s$ 为系统从阶跃输入开始到输出值进入稳态值所规定的范围内所需的时间。一般在稳态响应值 $y_0$ 的上下规定一个 $\pm\Delta%$ 的公差带，当响应曲线开始全部进入这个公差带的时刻就是响应时间 $T_s$。为了明确起见，往往说“百分之 $\Delta$ 响应时间”。</li></ol><p>通常使用两个不同指标来定义响应时间：$T_{63}$ 和 $T_{90}$。当被测参数量值有瞬时变化时，测量值需要多长时间达到最终值的 63% 或 90%。</p><p>以下是为什么选择 63% 来定义响应时间的原因：$T_{63}$ 在一阶线性时域不变系统中等于时间常数 $τ$。这个一阶线性时域不变系统的数学模型描述了某一物理系统对阶跃变化呈指数曲线的反应，如图。这意味着系统将在一个时间常数内达到最终值的 63%，在三个时间常数内达到最终值的 95%，在四个时间常数内达到最终值的 98%。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B43.png"></p><p>一般认为，阶跃输入对于一个传感器来说是最严峻的工作状态。如果在阶跃函数的作用下，传感器能满足动态性能指标，那么在其他函数作用下，其动态性能指标也必定会令人满意。</p>]]></content>
    
    
    <categories>
      
      <category>文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传感器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绳波功率计算公式</title>
    <link href="/2023/08/03/%E7%BB%B3%E6%B3%A2%E5%8A%9F%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/"/>
    <url>/2023/08/03/%E7%BB%B3%E6%B3%A2%E5%8A%9F%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>绳波的功率公式为<br>$$<br>P&#x3D;(μA²ω²v)&#x2F;2<br>$$<br>其中</p><ul><li>密度μ等于绳重&#x2F;绳长，单位为kg&#x2F;m；</li><li>A绳波振幅，单位为m；</li><li>ω角速度，角速度公式为ω&#x3D;2πf，f为绳波频率。</li></ul><p>波速v计算公式<br>$$<br>v&#x3D;λ&#x2F;T&#x3D;fλ&#x3D;\sqrt{F&#x2F;μ}<br>$$<br>其中</p><ul><li>λ波长，是两个相邻的状态相同的点之间的距离，单位为m;</li><li>周期T&#x3D;1&#x2F;f，波前进一个波长的距离所需的时间;</li><li>F为绳的内部张力或者说拉力。</li></ul><p>但由于拉力F不好测量，所以测量波长λ或者直接测量波速v会是一个更好的方法。</p><p>参考：</p><p><a href="https://www.zhihu.com/question/39274349">已知绳波的轨迹方程，和变力方程如何求其能量？</a></p><p><a href="https://query.libretexts.org/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AD%A6_I-%E5%8A%9B%E5%AD%A6%E3%80%81%E5%A3%B0%E9%9F%B3%E3%80%81%E6%8C%AF%E8%8D%A1%E5%92%8C%E6%B3%A2%E6%B5%AA_(OpenStax)/16%3A_Waves/16.05%3A_%E6%B3%A2%E6%B5%AA%E7%9A%84%E8%83%BD%E9%87%8F%E5%92%8C%E5%8A%9B%E9%87%8F">波浪的能量和力量</a></p>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>气体流量传感器 AFM3000/SFM3000 驱动</title>
    <link href="/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/08/03/%E6%B0%94%E4%BD%93%E6%B5%81%E9%87%8F%E4%BC%A0%E6%84%9F%E5%99%A8-AFM3000-SFM3000-%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>之前买入了奥松电子的气体流量传感器，型号为 <a href="http://www.aosong.com/products-63.html">AFM3000</a>。到手后发现没有 Arduino 的驱动代码，调试不了。</p><p>离谱的是，我在 Arduino 论坛逛的时候，发现了这个问题：<a href="https://forum.arduino.cc/t/i2c-communication-with-sfm3000-series-flow-sensor-from-sensirion/448085">I2C communication with SFM3000 series flow sensor from Sensirion</a>。问题中用到的气体流量传感器为 <a href="https://www.sensirion.com/products/catalog/SFM3000-200">SFM3000</a>，看了说明书后，只能说两款传感器基本一样。</p><p>于是我又去 git 上找了找，看是不是有现成的驱动，结果还真有 <a href="https://github.com/Sensirion/arduino-i2c-sfm3000">Sensirion I2C SFM3000 Arduino Library</a>。之后在 Arduino IDE 的 Library 中搜索「Sensirion I2C SFM3000」下载即可。</p><p>这是 AFM3000&#x2F;SFM3000 的驱动代码：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment"> * I2C-Generator: 0.2.0</span><span class="hljs-comment"> * Yaml Version: 0.1.0</span><span class="hljs-comment"> * Template Version: 0.7.0-38-g217adaf</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * Copyright (c) 2021, Sensirion AG</span><span class="hljs-comment"> * All rights reserved.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Redistribution and use in source and binary forms, with or without</span><span class="hljs-comment"> * modification, are permitted provided that the following conditions are met:</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * * Redistributions of source code must retain the above copyright notice, this</span><span class="hljs-comment"> *   list of conditions and the following disclaimer.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * * Redistributions in binary form must reproduce the above copyright notice,</span><span class="hljs-comment"> *   this list of conditions and the following disclaimer in the documentation</span><span class="hljs-comment"> *   and/or other materials provided with the distribution.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * * Neither the name of Sensirion AG nor the names of its</span><span class="hljs-comment"> *   contributors may be used to endorse or promote products derived from</span><span class="hljs-comment"> *   this software without specific prior written permission.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</span><span class="hljs-comment"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span><span class="hljs-comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span><span class="hljs-comment"> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE</span><span class="hljs-comment"> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</span><span class="hljs-comment"> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span><span class="hljs-comment"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span><span class="hljs-comment"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</span><span class="hljs-comment"> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</span><span class="hljs-comment"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span><span class="hljs-comment"> * POSSIBILITY OF SUCH DAMAGE.</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Arduino.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SensirionI2CSfm3000.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span>SensirionI2CSfm3000 sfm;<span class="hljs-type">float</span> scalingFactor = <span class="hljs-number">140.0</span>;<span class="hljs-type">float</span> offset = <span class="hljs-number">32000</span>;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);    <span class="hljs-keyword">while</span> (!Serial) &#123;        <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);    &#125;    Wire.<span class="hljs-built_in">begin</span>();    <span class="hljs-type">uint16_t</span> error;    <span class="hljs-type">char</span> errorMessage[<span class="hljs-number">64</span>];    sfm.<span class="hljs-built_in">begin</span>(Wire, SFM300_I2C_ADDRESS_0);    <span class="hljs-type">uint32_t</span> serialNumber;    error = sfm.<span class="hljs-built_in">readSerialNumber</span>(serialNumber);    <span class="hljs-keyword">if</span> (error) &#123;        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error trying to execute serialNumber(): &quot;</span>);        <span class="hljs-built_in">errorToString</span>(error, errorMessage, <span class="hljs-number">64</span>);        Serial.<span class="hljs-built_in">println</span>(errorMessage);    &#125; <span class="hljs-keyword">else</span> &#123;        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SerialNumber:&quot;</span>);        Serial.<span class="hljs-built_in">print</span>(serialNumber);        Serial.<span class="hljs-built_in">println</span>();    &#125;    error = sfm.<span class="hljs-built_in">startContinuousMeasurement</span>();        <span class="hljs-keyword">if</span> (error) &#123;        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error trying to execute startContinuousMeasurement(): &quot;</span>);        <span class="hljs-built_in">errorToString</span>(error, errorMessage, <span class="hljs-number">64</span>);        Serial.<span class="hljs-built_in">println</span>(errorMessage);    &#125;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">uint16_t</span> error;    <span class="hljs-type">char</span> errorMessage[<span class="hljs-number">64</span>];    <span class="hljs-built_in">delay</span>(<span class="hljs-number">100</span>);    <span class="hljs-comment">// Read Measurement</span>    <span class="hljs-type">float</span> flow;    error = sfm.<span class="hljs-built_in">readMeasurement</span>(flow, scalingFactor, offset);    <span class="hljs-keyword">if</span> (error) &#123;        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error trying to execute readMeasurement(): &quot;</span>);        <span class="hljs-built_in">errorToString</span>(error, errorMessage, <span class="hljs-number">64</span>);        Serial.<span class="hljs-built_in">println</span>(errorMessage);    &#125; <span class="hljs-keyword">else</span> &#123;        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flow:&quot;</span>);        Serial.<span class="hljs-built_in">print</span>(flow);        Serial.<span class="hljs-built_in">println</span>();    &#125;&#125;</code></pre></div><p>烧录到 Arduino 即可。</p>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Arduino</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arduino</tag>
      
      <tag>传感器</tag>
      
      <tag>CEPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Swift 三元（目）运算</title>
    <link href="/2023/08/03/Python-Swift-%E4%B8%89%E5%85%83%EF%BC%88%E7%9B%AE%EF%BC%89%E8%BF%90%E7%AE%97/"/>
    <url>/2023/08/03/Python-Swift-%E4%B8%89%E5%85%83%EF%BC%88%E7%9B%AE%EF%BC%89%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>Python的三元运算写法：</p><div class="code-wrapper"><pre><code class="hljs python">is_true = <span class="hljs-literal">True</span>result = <span class="hljs-string">&#x27;TRUE&#x27;</span> <span class="hljs-keyword">if</span> is_true <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;FALSE&#x27;</span><span class="hljs-comment"># output: TRUE</span></code></pre></div><p>Swift的三元运算写法：</p><div class="code-wrapper"><pre><code class="hljs swift">isTrue <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>result <span class="hljs-operator">=</span> isTrue <span class="hljs-operator">?</span> <span class="hljs-string">&quot;TRUE&quot;</span> : <span class="hljs-string">&quot;FALSE&quot;</span><span class="hljs-comment">// output: TRUE</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Swift</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 导出传感器数据到 .csv 文件</title>
    <link href="/2023/08/03/Python-%E5%AF%BC%E5%87%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%88%B0-csv-%E6%96%87%E4%BB%B6/"/>
    <url>/2023/08/03/Python-%E5%AF%BC%E5%87%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E6%95%B0%E6%8D%AE%E5%88%B0-csv-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>导出传感器的数据一共分为两步：</p><ol><li>构建数据结构；</li><li>导出数据到 .csv 文件。</li></ol><h3 id="1-构建数据结构"><a href="#1-构建数据结构" class="headerlink" title="1.构建数据结构"></a>1.构建数据结构</h3><p>一般来说，传感器采集的数据为时间序列数据。需要导出的数据一般为：</p><div class="code-wrapper"><pre><code class="hljs python">times = [t1, t2, t3 ... tn]value_A = [a1, a2, a3 ... an]value_B = [b1, b2, b3 ... bn]value_C = [c1, c2, c3 ... cn]</code></pre></div><p>需要构建一个二维数组：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npexport_data = np.zeros(n, <span class="hljs-number">4</span>)<span class="hljs-comment"># 构建一个 shape = (数据长度, 数据种类) 的 numpy 数组</span>export_data[::, <span class="hljs-number">0</span>] = times        <span class="hljs-comment"># times 替换第 0 列。[0, ::]就是行</span>export_data[::, <span class="hljs-number">1</span>] = value_Aexport_data[::, <span class="hljs-number">2</span>] = value_Bexport_data[::, <span class="hljs-number">3</span>] = value_C<span class="hljs-comment"># 多此一举的操作</span><span class="hljs-comment"># export_data[0, ::] = times</span><span class="hljs-comment"># export_data[1, ::] = value_A</span><span class="hljs-comment"># export_data[2, ::] = value_B</span><span class="hljs-comment"># export_data[3, ::] = value_C</span><span class="hljs-comment"># export_data = export_data.T# 将矩阵的行列转置</span></code></pre></div><p>此时 export_data 的结构是这样的：</p><div class="code-wrapper"><pre><code class="hljs python">[ t1 a1 b1 c1  t2 a2 b2 c2  t3 a3 b3 c3     .....  tn an bn cn ]</code></pre></div><h3 id="2-导出数据"><a href="#2-导出数据" class="headerlink" title="2.导出数据"></a>2.导出数据</h3><p>导出 .csv 需要用到 pandas 库。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pdcolumn = [<span class="hljs-string">&#x27;Time&#x27;</span>, <span class="hljs-string">&#x27;ValueA&#x27;</span>, <span class="hljs-string">&#x27;ValueB&#x27;</span>, <span class="hljs-string">&#x27;ValueC&#x27;</span>]    <span class="hljs-comment"># 表头</span>export_csv = pd.DataFrame(columns=column, data=export_data)export_csv.to_csv(<span class="hljs-string">&#x27;path/name.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)    <span class="hljs-comment"># index=Ture 的话，会默认生成一列 index 索引列。记住文件名后面要带.csv</span><span class="hljs-comment"># 不需要表头</span><span class="hljs-comment"># export_csv = pd.DataFrame(data=export_data)</span><span class="hljs-comment"># export_csv.to_csv(&#x27;path/name.csv&#x27;, header=None, index=False)</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 绘制数据移动窗口</title>
    <link href="/2023/08/03/Python-%E7%BB%98%E5%88%B6%E6%95%B0%E6%8D%AE%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2023/08/03/Python-%E7%BB%98%E5%88%B6%E6%95%B0%E6%8D%AE%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npwin_size = <span class="hljs-number">500</span>                          <span class="hljs-comment"># 窗口大小为500</span>x_data = np.zeros(win_size)y1_data = np.zeros(win_size)y2_data = np.zeros(win_size)y3_data = np.zeros(win_size)...<span class="hljs-keyword">def</span> <span class="hljs-title function_">update_data</span>():   <span class="hljs-comment"># 只展示x轴数据平移过程，y轴同理</span>  x_data[:-<span class="hljs-number">1</span>] = x_data[<span class="hljs-number">1</span>:]                <span class="hljs-comment"># 移动</span>  x_data[-<span class="hljs-number">1</span>] = new_value                  <span class="hljs-comment"># 将新值写入</span>  ...<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  update_data()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 IMU 绘制物体移动的空间轨迹</title>
    <link href="/2023/08/03/%E9%80%9A%E8%BF%87-IMU-%E7%BB%98%E5%88%B6%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9/"/>
    <url>/2023/08/03/%E9%80%9A%E8%BF%87-IMU-%E7%BB%98%E5%88%B6%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E8%BD%A8%E8%BF%B9/</url>
    
    <content type="html"><![CDATA[<p>一般 IMU 由加速度传感器、陀螺仪组成，也叫 6 轴 IMU。还可以外加一个磁力计，构成 9 轴 IMU。关于加速度传感器和陀螺仪的工作原理，可以参考：</p><ol><li><a href="https://blog.csdn.net/yueqian_scut/article/details/50708073">加速度传感器的原理和应用-手机翻转、失重检测、运动检测、位置识别</a>；</li><li><a href="https://blog.csdn.net/KYJL888/article/details/112802532">MEMS 三轴加速计、三轴陀螺仪、三轴磁力计）6轴IMU+磁力计，9轴传感器讲解</a>；</li><li><a href="https://xiaotaoguo.com/p/imu-model/">IMU 测量模型</a>。</li></ol><p>加速度传感器测得加速度（acc）积分得到速度，再积分得到位移：</p><ol><li><a href="https://makersportal.com/blog/calibration-of-an-inertial-measurement-unit-imu-with-raspberry-pi-part-ii">Gyroscope and Accelerometer Calibration with Raspberry Pi</a>；</li><li><a href="https://www.cnblogs.com/cposture/p/4378922.html">【翻译】利用加速度求解位置的算法——三轴传感器</a>。</li></ol><p>陀螺仪测得角速度（gyr）积分得到姿态：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/45404840">三维旋转：欧拉角、四元数、旋转矩阵、轴角之间的转换</a>；</li><li><a href="https://zhuanlan.zhihu.com/p/103623879">四元数微分方程的推导和解算实现</a>；</li><li><a href="https://www.zhoulujun.cn/html/theory/Mathematics/Geometry/8149.html">三维旋转笔记:欧拉角&#x2F;四元数&#x2F;旋转矩阵&#x2F;轴角-记忆点整理</a>；</li><li><a href="https://www.cnblogs.com/TIANHUAHUA/p/8031606.html">四元数及姿态解算 Mahony 算法</a>。</li></ol><p>所以可以通过加速度传感器+陀螺仪的组合得到比较准确姿态，在去除重力加速度分量影响下二次积分可以得到位置。这种基于 IMU 测量数据进行位置、速度解算的方法可简称惯性导航（惯导）解算：</p><ol><li><a href="https://zhaoxuhui.top/blog/2022/02/11/basic-notes-on-imu-and-inertial-navigation.html#32-mems%E5%8A%A0%E9%80%9F%E5%BA%A6%E8%AE%A1%E7%9A%84%E8%AF%AF%E5%B7%AE%E7%89%B9%E6%80%A7">IMU与惯性导航基础知识介绍</a>；</li><li><a href="https://zhuanlan.zhihu.com/p/131342530">多传感器融合定位理论基础（五）：惯性导航解算</a>；</li><li><a href="https://xiaotaoguo.com/p/imu-pose-update/">基于 IMU 的惯性导航解算及误差分析</a>。</li></ol><p>其中的难点在于：</p><ol><li>姿态不准导致重力影响去除不了；</li><li>MEMS 器件本身的零点漂移不能去除。</li></ol><p>这导致使用 IMU 定位时，始终存在不可避免的漂移，且漂移会随着积分越来越大。所以需针对具体应用设计相应的处理算法。目前使用较多的<strong>步态定位</strong>。</p><ol><li><a href="https://github.com/xioTechnologies/Oscillatory-Motion-Tracking-With-x-IMU">Oscillatory-Motion-Tracking-With-x-IMU</a>，Matlab开源项目；</li><li><a href="https://github.com/xioTechnologies/Gait-Tracking-With-x-IMU">Gait-Tracking-With-x-IMU</a>，Matlab开源项目；</li><li><a href="https://github.com/italogsfernandes/Gait-Tracking-With-x-IMU">Gait-Tracking-With-x-IMU</a>，Python开源项目；</li><li><a href="https://github.com/daehwa/Gait-Tracking-With-x-IMU-Python">Gait Tracking with x-imu Python</a>，Python开源项目；</li><li><a href="https://github.com/xioTechnologies/Gait-Tracking">Gait-Tracking</a>，Python开源项目。</li></ol><p>就目前来说，第 1 个项目的算法效果最好，这是 <a href="https://www.zhihu.com/zvideo/1361803858457579522">效果展示</a>。但需要注意的是：</p><ol><li>Script 中 samplePeriod 需要与传感器采样频率一致；</li><li>注意单位转换，我这里传感器采集的角速度单位为rad&#x2F;s，但是项目中角速度的单位为deg&#x2F;s。两者的转化关系为：<br>$$<br>π&#x2F;180*deg &#x3D; rad<br>$$</li><li>算法对于 IMU 的放置和运动模式都做了要求。事实上，对于简单、低频的动作，算法都能够绘制出较为精准的空间运动轨迹。但是对于复杂、高频的动作，算法没有表现出很好的兼容性，数据漂移很严重。</li></ol>]]></content>
    
    
    <categories>
      
      <category>资料整合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IMU</tag>
      
      <tag>传感器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 串口查询之 /dev/cu. 与 /dev/tty. 记录</title>
    <link href="/2023/07/28/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/07/28/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>输入指令<code>ls /dev/cu.*</code>，可获得 Mac 的串口信息。内容如下</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%951.png"></p><p>输入指令<code>cd /dev</code>回车，再输入指令<code>ls *tty</code>，也可查询串口信息。内容如下</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Mac-%E4%B8%B2%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%B9%8B-dev-cu-%E4%B8%8E-dev-tty-%E8%AE%B0%E5%BD%952.png"></p><p>之前 Mac 与 Arduino 通信的时候，串口的格式为<code>/dev/tty.Arduino</code>。最近在调试 N100 九轴传感器，发现用「&#x2F;tty.」格式的话识别不到传感器，即<code>/dev/tty.N100</code>不行，必须使用<code>/dev/cu.N100</code>。不知道为什么。</p><p>另外我在想，Arduino 用<code>/dev/cu.Arduino</code>这个格式能行吗…</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传感器</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 突然卡顿的解决办法</title>
    <link href="/2023/07/27/Mac-%E7%AA%81%E7%84%B6%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/27/Mac-%E7%AA%81%E7%84%B6%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>以我目前的经验来说，是「中文简体输入方式」的锅。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/Mac-%E7%AA%81%E7%84%B6%E5%8D%A1%E9%A1%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%951.png" alt="我tm卡爆"></p><p>解决办法很简单，在「活动监视器」中找到中文简体输入方式，然后「强制」结束进程即可。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>M1 Mac Parallels Desktop Windows11 安装 CP210x 串口驱动</title>
    <link href="/2023/07/27/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/07/27/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>设备作为虚拟 COM 端口工作时，需要 CP210x USB 至 UART 桥虚拟 COM 端口 (VCP) 驱动器以促进与 CP210x 产品的主机通信。也可使用直接存取驱动器将这些设备连接至主机。</p></blockquote><p>我需要在 Windows 系统下调试 WHEELTEC 的 9 轴传感器 N100。由于办公电脑是 M1 的 Mac Air，所以只能在 Parallels Desktop 上进行（虚拟机系统为 Windows11）。</p><p>插上 USB 后系统可以识别到串口设备，但是在设备管理器中错误代码 28，说明无驱动。之前问店家要了一份相关资料，内有 CP2102 的驱动安装包。安装了，但没用。大概率是 ARM 架构的问题。</p><p>于是跑 silicon lab 官网找最新驱动，这是驱动下载<a href="https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads">地址</a>。</p><p>下载第一个「CP210x Universal Windwos Driver」即可。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A81.png" alt="网页是这样的"></p><p>解压出来的文件内容是这样的：</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A82.png" alt="可以注意到arm和arm64"></p><p>接下来只需要右键 silabser.inf 安装即可。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A83.png" alt="需要点击「显示更多选项」"></p><p>打开设备管理器，代码28搞定，驱动打上了。</p><p><img src="https://bakako-1308163928.cos.ap-guangzhou.myqcloud.com/uPic/M1-Mac-Parallels-Desktop-Windows11-%E5%AE%89%E8%A3%85-CP210x-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A84.png" alt="开心的调试吧!"></p><p>如果要在 Mac 系统下与 N100 通信，下载「CP210x VCP Mac OSX Driver」，内有一个DMG格式的文件，打开安装即可。树莓派（Linux）则不需要安装驱动就能与 N100 进行通信。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>传感器</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 触控板手势失效的解决办法</title>
    <link href="/2023/07/27/Mac-%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%89%8B%E5%8A%BF%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/27/Mac-%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%89%8B%E5%8A%BF%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li>用活动监视器关闭Dock（程序坞）；</li><li>在终端输入<code>killall Dock</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm 获取 Conda 环境列表失败，报错 error code 1 的解决办法</title>
    <link href="/2023/07/27/PyCharm-%E8%8E%B7%E5%8F%96-Conda-%E7%8E%AF%E5%A2%83%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8A%A5%E9%94%99-error-code-1-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/07/27/PyCharm-%E8%8E%B7%E5%8F%96-Conda-%E7%8E%AF%E5%A2%83%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8A%A5%E9%94%99-error-code-1-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>通常来说，在设置 Python Interpreter 时，Conda executable 的路径为<code>anaconda\Scripts\conda.exe</code>。但是我在给同事部署环境填入该路径，且路径下也确实有对应文件存在，却报错<code>error code 1</code>。</p><p><strong>解决方案：用这个路径<code>anaconda\Library\bin\conda.bat</code>可解决问题。</strong></p><p>这让我想起第一次在 Windows 上部署 Conda 时，默认可执行文件是自动探测的，刚刚好是<code>anaconda\Library\bin\conda.bat</code>。不过那个时候教程让我用<code>anaconda\Scripts\conda.exe</code>，我选择了相信教程。当然教程没问题，我也成功部署了。只是没想到给同事部署时，教程的方法会报错。</p><p>另外 Mac 的可执行文件是自动探测、默认填写好的，不需要自己手动填写。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>PyCharm</category>
      
      <category>Anaconda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch 鸢尾花深度学习</title>
    <link href="/2023/06/23/PyTorch-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/06/23/PyTorch-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="鸢尾花数据"><a href="#鸢尾花数据" class="headerlink" title="鸢尾花数据"></a>鸢尾花数据</h3><p><a href="https://www.kaggle.com/datasets/uciml/iris">Iris Species</a></p><h3 id="定义鸢尾花类"><a href="#定义鸢尾花类" class="headerlink" title="定义鸢尾花类"></a>定义鸢尾花类</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Iris</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sepal_length, sepal_width, petal_length, petal_width, species</span>):        self.sepal_length = sepal_length        self.sepal_width = sepal_width        self.petal_length = petal_length        self.petal_width = petal_width        self.species = species    <span class="hljs-comment"># 返回 feature</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">feature</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> [self.sepal_length, self.sepal_width, self.petal_length, self.petal_width]    <span class="hljs-comment"># 返回 label</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">label</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">if</span> self.species == <span class="hljs-string">&#x27;Iris-setosa&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> self.species == <span class="hljs-string">&#x27;Iris-versicolor&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> self.species == <span class="hljs-string">&#x27;Iris-virginica&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span></code></pre></div><h3 id="定义鸢尾花数据集"><a href="#定义鸢尾花数据集" class="headerlink" title="定义鸢尾花数据集"></a>定义鸢尾花数据集</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IrisDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, labels</span>):        self.features = features        self.labels = labels    <span class="hljs-comment"># 返回数据集长度</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.features)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):        item_feature = self.features[index]        item_label = self.labels[index]        <span class="hljs-keyword">return</span> item_feature, item_label</code></pre></div><h3 id="读取-csv-数据构建数据集"><a href="#读取-csv-数据构建数据集" class="headerlink" title="读取 csv 数据构建数据集"></a>读取 csv 数据构建数据集</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():    tic = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取cvs文件&#x27;</span>)    csv_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/archive/Iris.csv&#x27;</span>    datasource = pd.read_csv(csv_path)    datasource_len = <span class="hljs-built_in">len</span>(datasource)    <span class="hljs-comment"># 构建数据集矩阵 n 行，4 列</span>    <span class="hljs-comment"># [[0. 0. 0. 0.]</span>    <span class="hljs-comment">#       ...</span>    <span class="hljs-comment">#  [0. 0. 0. 0.]]</span>    iris_features = np.zeros((datasource_len, <span class="hljs-number">4</span>), dtype=<span class="hljs-built_in">float</span>)    iris_labels = []    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造数据结构&#x27;</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(datasource_len):        <span class="hljs-comment"># 创建 iris 对象</span>        iris = Iris(datasource.SepalLengthCm[i], datasource.SepalWidthCm[i],                    datasource.PetalLengthCm[i], datasource.PetalWidthCm[i],                    datasource.Species[i])        <span class="hljs-comment"># iris = Iris(datasource[&#x27;SepalLengthCm&#x27;][i], datasource[&#x27;SepalWidthCm&#x27;][i],</span>        <span class="hljs-comment">#             datasource[&#x27;PetalLengthCm&#x27;][i], datasource[&#x27;PetalWidthCm&#x27;][i],</span>        <span class="hljs-comment">#             datasource[&#x27;Species&#x27;][i])</span>        <span class="hljs-comment"># [[0. 0. 0. 0.]  &lt;- 将元素一行一行进行替换</span>        <span class="hljs-comment">#       ...</span>        <span class="hljs-comment">#  [0. 0. 0. 0.]]</span>        iris_features[[i], :] = iris.feature()        iris_labels.append(iris.label())    <span class="hljs-comment"># 把数据集按照 8:2 的比例来划分为训练集和测试集</span>    train_features, \        test_features, \        train_labels, \        test_labels = train_test_split(iris_features, iris_labels, test_size=<span class="hljs-number">0.2</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造训练集&#x27;</span>)    <span class="hljs-comment"># 将训练集和测试集转换为PyTorch的张量对象并设置数据类型，加上to(device)可以运行在GPU上</span>    train_dataset = IrisDataset(torch.FloatTensor(train_features),                                torch.LongTensor(train_labels))    test_features = torch.FloatTensor(test_features)    test_labels = torch.LongTensor(test_labels)    toc = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Time: &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> train_dataset, test_features, test_labels</code></pre></div><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">dataset, epochs, gpu</span>):    tic = time.time()    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)    model = Model(n_feature=<span class="hljs-number">4</span>, n_hidden=<span class="hljs-number">40</span>, n_label=<span class="hljs-number">3</span>)    <span class="hljs-keyword">if</span> gpu:        model.to(device)    optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.02</span>)    loss_func = torch.nn.CrossEntropyLoss()    batch_size = <span class="hljs-number">5</span>  <span class="hljs-comment"># 每次训练 5 个样本</span>    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, pin_memory=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># epoch 为训练次数</span>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):        <span class="hljs-comment"># 分 120/5 = 24 次训练</span>        <span class="hljs-keyword">for</span> step, (features, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):            <span class="hljs-keyword">if</span> gpu:                features = features.to(device)                labels = labels.to(device)            <span class="hljs-comment"># 前向传播计算输出结果</span>            output = model(features)            loss = loss_func(output, labels)            <span class="hljs-comment"># 注意 labels 的结构应该是 [0. 0. 0.]，而不是[[0.], [0.], [0.]]</span>            <span class="hljs-comment"># loss 必须是[x, x, x] -&gt; y，而不是[x, x, x] -&gt; [y]</span>            <span class="hljs-comment"># 否则会报错：0D or 1D target tensor expected, multi-target not supported</span>            <span class="hljs-comment"># 如果出现这种情况，可以进行降维 labels = labels.squeeze(1)</span>            <span class="hljs-comment"># 反向传播，更新梯度并优化模型参数</span>            optimizer.zero_grad()            loss.backward()            optimizer.step()            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch: &#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Step: &#x27;</span>, step + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Loss: &#x27;</span>, loss.item())    toc = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练结束&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> model</code></pre></div><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<span class="hljs-keyword">import</span> time<span class="hljs-comment"># 定义鸢尾花类</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Iris</span>:    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, sepal_length, sepal_width, petal_length, petal_width, species</span>):        self.sepal_length = sepal_length        self.sepal_width = sepal_width        self.petal_length = petal_length        self.petal_width = petal_width        self.species = species    <span class="hljs-comment"># 返回 feature</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">feature</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> [self.sepal_length, self.sepal_width, self.petal_length, self.petal_width]    <span class="hljs-comment"># 返回 label</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">label</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">if</span> self.species == <span class="hljs-string">&#x27;Iris-setosa&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> self.species == <span class="hljs-string">&#x27;Iris-versicolor&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> self.species == <span class="hljs-string">&#x27;Iris-virginica&#x27;</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><span class="hljs-comment"># 定义数据集</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">IrisDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, features, labels</span>):        self.features = features        self.labels = labels    <span class="hljs-comment"># 返回数据集长度</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.features)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):        item_feature = self.features[index]        item_label = self.labels[index]        <span class="hljs-keyword">return</span> item_feature, item_label<span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_feature, n_hidden, n_label</span>):        <span class="hljs-built_in">super</span>(Model, self).__init__()        self.hidden = torch.nn.Linear(n_feature, n_hidden)      <span class="hljs-comment"># 定义隐藏层网络</span>        self.output = torch.nn.Linear(n_hidden, n_label)        <span class="hljs-comment"># 定义输出层网络</span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):        x = torch.nn.functional.relu(self.hidden(x))            <span class="hljs-comment"># 隐藏层的激活函数,采用relu,也可以采用sigmod,tanh</span>        x = torch.nn.functional.softmax(self.output(x), dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 输出层softmax</span>        <span class="hljs-keyword">return</span> x<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():    tic = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取cvs文件&#x27;</span>)    csv_path = <span class="hljs-string">&#x27;/Users/bakako/Downloads/archive/Iris.csv&#x27;</span>    datasource = pd.read_csv(csv_path)    datasource_len = <span class="hljs-built_in">len</span>(datasource)    <span class="hljs-comment"># 构建数据集矩阵 n 行，4 列</span>    <span class="hljs-comment"># [[0. 0. 0. 0.]</span>    <span class="hljs-comment">#       ...</span>    <span class="hljs-comment">#  [0. 0. 0. 0.]]</span>    iris_features = np.zeros((datasource_len, <span class="hljs-number">4</span>), dtype=<span class="hljs-built_in">float</span>)    iris_labels = []    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造数据结构&#x27;</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(datasource_len):        <span class="hljs-comment"># 创建 iris 对象</span>        iris = Iris(datasource.SepalLengthCm[i], datasource.SepalWidthCm[i],                    datasource.PetalLengthCm[i], datasource.PetalWidthCm[i],                    datasource.Species[i])        <span class="hljs-comment"># iris = Iris(datasource[&#x27;SepalLengthCm&#x27;][i], datasource[&#x27;SepalWidthCm&#x27;][i],</span>        <span class="hljs-comment">#             datasource[&#x27;PetalLengthCm&#x27;][i], datasource[&#x27;PetalWidthCm&#x27;][i],</span>        <span class="hljs-comment">#             datasource[&#x27;Species&#x27;][i])</span>        <span class="hljs-comment"># [[0. 0. 0. 0.]  &lt;- 将元素一行一行进行替换</span>        <span class="hljs-comment">#       ...</span>        <span class="hljs-comment">#  [0. 0. 0. 0.]]</span>        iris_features[[i], :] = iris.feature()        iris_labels.append(iris.label())    <span class="hljs-comment"># 把数据集按照 8:2 的比例来划分为训练集和测试集</span>    train_features, \        test_features, \        train_labels, \        test_labels = train_test_split(iris_features, iris_labels, test_size=<span class="hljs-number">0.2</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;构造训练集&#x27;</span>)    <span class="hljs-comment"># 将训练集和测试集转换为PyTorch的张量对象并设置数据类型，加上to(device)可以运行在GPU上</span>    train_dataset = IrisDataset(torch.FloatTensor(train_features),                                torch.LongTensor(train_labels))    test_features = torch.FloatTensor(test_features)    test_labels = torch.LongTensor(test_labels)    toc = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading Time: &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> train_dataset, test_features, test_labels<span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>(<span class="hljs-params">dataset, epochs, gpu</span>):    tic = time.time()    device = torch.device(<span class="hljs-string">&quot;cuda:0&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)    model = Model(n_feature=<span class="hljs-number">4</span>, n_hidden=<span class="hljs-number">40</span>, n_label=<span class="hljs-number">3</span>)    <span class="hljs-keyword">if</span> gpu:        model.to(device)    optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.02</span>)    loss_func = torch.nn.CrossEntropyLoss()    batch_size = <span class="hljs-number">5</span>  <span class="hljs-comment"># 每次训练 5 个样本</span>    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, pin_memory=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># epoch 为训练次数</span>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):        <span class="hljs-comment"># 分 120/5 = 24 次训练</span>        <span class="hljs-keyword">for</span> step, (features, labels) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataloader):            <span class="hljs-keyword">if</span> gpu:                features = features.to(device)                labels = labels.to(device)            <span class="hljs-comment"># 前向传播计算输出结果</span>            output = model(features)            loss = loss_func(output, labels)            <span class="hljs-comment"># 注意 labels 的结构应该是 [0. 0. 0.]，而不是[[0.], [0.], [0.]]</span>            <span class="hljs-comment"># loss 必须是[x, x, x] -&gt; y，而不是[x, x, x] -&gt; [y]</span>            <span class="hljs-comment"># 否则会报错：0D or 1D target tensor expected, multi-target not supported</span>            <span class="hljs-comment"># 如果出现这种情况，可以进行降维 labels = labels.squeeze(1)</span>            <span class="hljs-comment"># 反向传播，更新梯度并优化模型参数</span>            optimizer.zero_grad()            loss.backward()            optimizer.step()            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch: &#x27;</span>, epoch + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Step: &#x27;</span>, step + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;| Loss: &#x27;</span>, loss.item())    toc = time.time()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练结束&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train time:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">1000</span> * (toc - tic)) + <span class="hljs-string">&#x27;ms&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> model<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    gpu = <span class="hljs-literal">False</span>    train_dataset, test_features, test_labels = get_data()    model = train_model(train_dataset, <span class="hljs-number">100</span>, gpu)    result = model(test_features)    <span class="hljs-comment"># prediction = torch.argmax(result, 1)  # 求最大值的索引</span>    prediction = torch.<span class="hljs-built_in">max</span>(result, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]    <span class="hljs-comment"># 这里第一个1表示求三个结果里的最大值，第二1表示我们只要索引(1返回index, 0返回原值)</span>    correct = (prediction == test_labels).<span class="hljs-built_in">sum</span>().item()    accuracy = <span class="hljs-built_in">float</span>(correct) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(test_features))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;莺尾花预测准确率:&quot;</span>, accuracy)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Code</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几大界面设计语言</title>
    <link href="/2023/06/14/%E5%87%A0%E5%A4%A7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/"/>
    <url>/2023/06/14/%E5%87%A0%E5%A4%A7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Apple 的 <a href="https://developer.apple.com/design/">HIG</a></p></li><li><p>Android 的 <a href="https://m3.material.io/">Material Design</a></p></li><li><p>阿里的 <a href="https://012x.ant.design/docs/spec/introduce">Ant Design</a></p></li><li><p>IBM 的 <a href="https://carbondesignsystem.com/">Carbon Design</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PM</category>
      
      <category>UX</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好看的 App 之 Dtd Playlist（音乐播放 App）</title>
    <link href="/2023/05/23/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-Dtd-Playlist%EF%BC%88%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE-App%EF%BC%89/"/>
    <url>/2023/05/23/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-Dtd-Playlist%EF%BC%88%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE-App%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>UI 非常对我胃口的一个 App。</p>]]></content>
    
    
    <categories>
      
      <category>PM</category>
      
      <category>App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好看的 App 之 NoteCircle 和 DayCircle（记事工具）</title>
    <link href="/2023/05/11/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-NoteCircle-%E5%92%8C-DayCircle%EF%BC%88%E8%AE%B0%E4%BA%8B%E5%B7%A5%E5%85%B7%EF%BC%89/"/>
    <url>/2023/05/11/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-NoteCircle-%E5%92%8C-DayCircle%EF%BC%88%E8%AE%B0%E4%BA%8B%E5%B7%A5%E5%85%B7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>一个是 todo 软件，一个是记日软件。</p>]]></content>
    
    
    <categories>
      
      <category>PM</category>
      
      <category>App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好看的 App 之 MySC（素材收集 App）</title>
    <link href="/2023/05/10/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-MySC%EF%BC%88%E7%B4%A0%E6%9D%90%E6%94%B6%E9%9B%86-App%EF%BC%89/"/>
    <url>/2023/05/10/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-MySC%EF%BC%88%E7%B4%A0%E6%9D%90%E6%94%B6%E9%9B%86-App%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MySC 界面好看</p><p><a href="https://www.mysc.app/index.html">官网地址</a></p>]]></content>
    
    
    <categories>
      
      <category>PM</category>
      
      <category>App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的 conda 指令</title>
    <link href="/2023/04/09/%E5%B8%B8%E7%94%A8%E7%9A%84-conda-%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/04/09/%E5%B8%B8%E7%94%A8%E7%9A%84-conda-%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs cmd">conda env list查看环境conda list查看安装包conda create -n tensorflow python=<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">5</span>创建新环境conda activate tensorflow激活conda remove -n tensorflow --all删除</code></pre></div><p>重命名。conda 其实没有重命名指令，实现重命名是通过克隆完成的，分两步：<br>1、先克隆一份旧环境，克隆过程中重新命名<br>2、删除旧环境</p><div class="code-wrapper"><pre><code class="hljs cmd"># 第一步：conda create -n pytorch --clone tensorflow# 第二步：conda remove -n tensorflow --all</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好看的 App 之 Overdrop（天气 App）</title>
    <link href="/2023/03/25/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-Overdrop%EF%BC%88%E5%A4%A9%E6%B0%94-App%EF%BC%89/"/>
    <url>/2023/03/25/%E5%A5%BD%E7%9C%8B%E7%9A%84-App-%E4%B9%8B-Overdrop%EF%BC%88%E5%A4%A9%E6%B0%94-App%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>好看，小组件更是逆天。</p>]]></content>
    
    
    <categories>
      
      <category>PM</category>
      
      <category>App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>App</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cocoapods 更新失败的解决办法</title>
    <link href="/2023/01/09/cocoapods-%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/01/09/cocoapods-%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近要写 swift 代码，需要用到第三方库，所以需要更新 cocoapods</p><p>输入</p><div class="code-wrapper"><pre><code class="hljs sh">sudo gem install cocoapods</code></pre></div><p>更新失败，出现：</p><div class="code-wrapper"><pre><code class="hljs sh">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0Fetching rexml-3.2.6.gemFetching xcodeproj-1.23.0.gemFetching ruby-macho-2.5.1.gemFetching molinillo-0.8.0.gemFetching cocoapods-trunk-1.6.0.gemFetching cocoapods-downloader-2.1.gemFetching public_suffix-4.0.7.gemFetching concurrent-ruby-1.2.2.gemFetching addressable-2.8.6.gemFetching cocoapods-core-1.14.3.gemFetching cocoapods-1.14.3.gemSuccessfully installed rexml-3.2.6ERROR:  While executing gem ... (Gem::FilePermissionError)    You don<span class="hljs-string">&#x27;t have write permissions for the /usr/bin directory.</span></code></pre></div><p>此时我以为是 gem 版本太低，随即更新 gem，输入</p><div class="code-wrapper"><pre><code class="hljs sh">sudo gem update --system -n /usr/local/bin</code></pre></div><p>更新失败，出现：</p><div class="code-wrapper"><pre><code class="hljs sh">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0Updating rubygems-updateERROR:  Error installing rubygems-update:rubygems-update-3.5.4 requires Ruby version &gt;= 3.0.0. The current ruby version is 2.6.10.210.Installing RubyGems 3.2.15Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0ERROR:  While executing gem ... (Errno::EPERM)    Operation not permitted @ rb_sysopen - /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/bin/gem</code></pre></div><p>我以为是 Ruby 版本过低，于是更新 Ruby，输入</p><div class="code-wrapper"><pre><code class="hljs sh">brew install ruby</code></pre></div><p>更新成功，但是 <code>sudo gem install cocoapods</code> 或 <code>sudo gem update --system -n /usr/local/bin</code> 时，报错不变。</p><p>我又输入提示指令</p><div class="code-wrapper"><pre><code class="hljs sh">gem pristine ffi --version 1.15.0</code></pre></div><p>但是不生效</p><div class="code-wrapper"><pre><code class="hljs sh">Ignoring ffi-1.15.0 because its extensions are not built. Try: gem pristine ffi --version 1.15.0Restoring gems to pristine condition...ERROR:  While executing gem ... (Gem::FilePermissionError)    You don<span class="hljs-string">&#x27;t have write permissions for the /Library/Ruby/Gems/2.6.0 directory.</span></code></pre></div><p>最后在</p><p><a href="https://stackoverflow.com/questions/64698820/ignoring-ffi-1-13-1-because-its-extensions-are-not-built-try-gem-pristine-ffi">Ignoring ffi-1.13.1 because its extensions are not built. Try: gem pristine ffi –version 1.13.1</a></p><p>中找到解决办法。按照高赞回答说的，我先输入了</p><div class="code-wrapper"><pre><code class="hljs sh">brew install cocoapods</code></pre></div><p>但是提示</p><div class="code-wrapper"><pre><code class="hljs sh">Error: The `brew <span class="hljs-built_in">link</span>` step did not complete successfullyThe formula built, but is not symlinked into /usr/localCould not symlink bin/podTarget /usr/local/bin/podalready exists. You may want to remove it:  <span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;/usr/local/bin/pod&#x27;</span>To force the <span class="hljs-built_in">link</span> and overwrite all conflicting files:  brew <span class="hljs-built_in">link</span> --overwrite cocoapodsTo list all files that would be deleted:  brew <span class="hljs-built_in">link</span> --overwrite --dry-run cocoapodsPossible conflicting files are:/usr/local/bin/pod/usr/local/bin/xcodeproj==&gt; Summary🍺  /usr/local/Cellar/cocoapods/1.14.3: 13,791 files, 28.8MB==&gt; Running `brew cleanup cocoapods`...Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).</code></pre></div><p>所以按照回答以及提示，我输入</p><div class="code-wrapper"><pre><code class="hljs sh">brew <span class="hljs-built_in">link</span> --overwrite cocoapods</code></pre></div><p>之后再输入 <code>brew install cocoapods</code> 自此，cocoapods 更新成功</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>Xocde</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>iOS Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
